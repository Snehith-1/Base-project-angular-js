(function () {
    'use strict';

    angular
        .module('angle')
        .controller('createLSAController', createLSAController);

    createLSAController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function createLSAController ($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
      
        var vm = this;
        vm.title = 'createLSAController';

        activate();

        function activate() {
           

            $scope.customer_pnl = true;
            $scope.sanction_pnl = true;
          
            // Calender Popup... //

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };

            // Calender Popup... //

            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open3 = true;
            };
            // Calender Popup... //

            vm.calender4 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open4 = true;
            };
            var date = new Date(),
           mnth = ("0" + (date.getMonth() + 1)).slice(-2),
           day = ("0" + date.getDate()).slice(-2);
            $scope.txtdate = [day, mnth, date.getFullYear()].join("-");
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1

            };
          
            var url = 'api/customer/state';
            SocketService.get(url).then(function (resp) {
                $scope.state_list = resp.data.state_list;
            });
            var url = 'api/IdasTrnLsaManagement/branch';
            SocketService.get(url).then(function (resp) {
                $scope.branch_list = resp.data.branch_list;
            });
        }
        $scope.complete=function(string){
                
            if(string.length >=3){
                $scope.message="";
                var url = 'api/customer/ExploreCustomer';
                var params={
                    customername:string 
                }
                SocketService.getparams(url,params).then(function (resp) {
                    if(resp.data.status==true){
                        $scope.message="";
                        $scope.customer_list = resp.data.Customers;
                    }
                    else{
                        $scope.message="No Records";
                    }
                    
                    
                });
            }
            else{
                $scope.customer_list=null;
                $scope.message="Enter atleast three character";
            }
        }
            $scope.fillTextbox=function(customer_gid,customer_name){
                $scope.customer=customer_name;
                $scope. customer_gid=customer_gid;
                $scope.customer_list=null;


                var params = {
                    customer_gid: customer_gid
                }
    
               
                var url = 'api/IdasTrnLsaManagement/customerdtl';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.customer_pnl = false;
             
                    $scope.txtzonalHead = resp.data.zonal_head;
                    $scope.txtbusinessHead = resp.data.business_head;
                    $scope.txtclustermanager = resp.data.cluster_head;
                    $scope.txtrelationshipMgmt = resp.data.rm_name;
                    $scope.txtcreditmgmt_name = resp.data.credit_manager;    
                    $scope.txtcustomer_location = resp.data.customer_location;
                    $scope.txtcustomer_urn = resp.data.customer_urn;
                    $scope.txtaddress = resp.data.address;
                    $scope.txtvertical = resp.data.vertical;
                    $scope.txtgst_no = resp.data.gst_no;
                    $scope.txtpan_no = resp.data.pan_no;
                    $scope.txtconstitution = resp.data.constitution;
                    $scope.txtmajor_corporate = resp.data.major_corporate;
                    $scope.lbladdress1 = resp.data.address1;
                   
                });
                var url = 'api/IdasTrnLsaManagement/customer2sanction';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.customer2sanction_list = resp.data.customer2sanction_list;
              
                });
            }
      

        $scope.onselectedchangesanction = function (sanction) {
          
               var params = {
                customer2sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid
               }
            //-----Loan Facility Validation-------------//
               var url = 'api/IdasTrnLsaManagement/Getloanfacilityinfo';
               SocketService.getparams(url, params).then(function (resp) {
                   $scope.sanction_pnl = true;

                   $scope.loanfacility_validation = resp.data.loanfacility_validation;
                   if (resp.data.loanfacility_validation == 'N')
                   {
                       //------- Document  Validation--------------//
                       var params = {
                                   customer2sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid

                               }
                               var url = 'api/IdasTrnLsaManagement/customer2sanctiondtl';
                               SocketService.getparams(url, params).then(function (resp) {
                                   $scope.sanction_pnl = false;

                                   $scope.txtsanctiondate = resp.data.sanction_date;
                                   $scope.txtpurpose_lending = resp.data.purpose_lending;
                                   $scope.txtfacility = resp.data.facility;
                                   $scope.txtproduct_solution = resp.data.product_solution;
                                   $scope.txtmajor_intervention = resp.data.majot_intervention;
                                   $scope.txtprimaryvalue_chain = resp.data.primaryvalue_chain;
                                   $scope.txtsecondaryvalue_chain = resp.data.secondaryvalue_chain;
                                   $scope.lblsanction_branch_name = resp.data.sanction_branch_name;
                                   $scope.lblsanction_state_name = resp.data.sanction_state_name;
                                   $scope.lblccapproved_by = resp.data.ccapproved_by;
                                   $scope.lblccapproved_date = resp.data.ccapproved_date;
                                   $scope.lblsanction_type = resp.data.sanction_type;
                                   $scope.lblnatureof_proposal = resp.data.natureof_proposal;
                                   $scope.customer2sanction_flag = resp.data.customer2sanction_flag;                              
                                   $scope.limitinfo_limit = resp.data.limitinfo_limit;
                                  
                               });
                       
                        
           
                   }
                   else {
                       $scope.cbocustomer2sanction_gid = '';
                       Notify.alert('Cant able to create LSA, Loan Facility Type is not added in sanction', {
                           status: 'warning',
                           pos: 'top-center',
                           timeout: 3000
                       });
                   }
               });
        }
        $scope.lsaback=function()
        {
            $state.go('app.lsaManagement');
        }
        $scope.lsasubmit = function () {
          
            var params = {
                branch_name: $scope.lblsanction_branch_name,
                state: $scope.lblsanction_state_name,
                customer2sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid,
                customer_name: $scope.customer,
                customer_gid: $scope.customer_gid,
                customer_urn:$scope.txtcustomer_urn,
                sanctionref_no: $scope.cbocustomer2sanction_gid.sanctionref_no,
                sanctiondate: $scope.txtsanctiondate,
                approved_by: $scope.lblccapproved_by,
                approveddate: $scope.lblccapproved_date,
                constitution:$scope.txtconstitution,
                gst_no: $scope.txtgst_no,
                pan_no: $scope.txtpan_no,
                customer_location: $scope.txtcustomer_location,
                address: $scope.txtaddress,
                address1: $scope.lbladdress1,
                rm_name:$scope .txtrelationshipMgmt,
                cluster_head:$scope.txtclustermanager,
                business_head:$scope.txtbusinessHead,
                credit_manager:$scope.txtcreditmgmt_name,
                zonal_head:$scope.txtzonalHead,
                sa_code:$scope.txtsa_code,
                purpose_lending: $scope.txtpurpose_lending,
                facility: $scope.txtfacility,
                major_corporate: $scope.txtmajor_corporate,
                hypothecation_date: $scope.txthypothecation_date,
                mortgage_date: $scope.txtmortgage_date,
                product_solution: $scope.txtproduct_solution,
                majot_intervention: $scope.txtmajor_intervention,
                sector: $scope.txtvertical,
                primaryvalue_chain: $scope.txtprimaryvalue_chain,
                secondaryvalue_chain:$scope.txtsecondaryvalue_chain,
                remarks: $scope.txtremarks,
                vertical: $scope.txtvertical,
                sanction_type: $scope.lblsanction_type,
                natureof_proposal: $scope.lblnatureof_proposal,
                 customer2sanction_flag:$scope.customer2sanction_flag
            }
            console.log(params);
            var url = 'api/IdasTrnLsaManagement/createLSA';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $state.go('app.lsaManagement');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
              
            });
            }
           
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('DocDigitalSignatureSummaryController', DocDigitalSignatureSummaryController);

    DocDigitalSignatureSummaryController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams', '$sce','cmnfunctionService'];

    function DocDigitalSignatureSummaryController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams, $sce,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'DocDigitalSignatureSummaryController';

        activate();

        function activate() {
            lockUI();
            var url = 'api/idasMstDigitalSignature/GetDigitalSignatureList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.digitalsignaturelist = resp.data.digitalsignaturelist
            });
        }

        $scope.addSignature = function () {
            var modalInstance = $modal.open({
                templateUrl: '/addSignatureContent.html',
                controller: ModalInstanceCtrl,
                backdrop: 'static',
                keyboard: false,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams'];
            function ModalInstanceCtrl($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {

                $scope.close = function () {
                    modalInstance.close('closed');
                };
                var url = 'api/idasMstDigitalSignature/GetEmployeeList';
                SocketService.get(url).then(function (resp) {
                    $scope.employee_list = resp.data.employeelist
                });


                $scope.upload = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('employee_gid', $scope.cboemployee_name.employee_gid);
                    frm.append('employee_name', $scope.cboemployee_name.employee_name);
                    frm.append('project_flag', "Default"); 
                    $scope.uploadfrm = frm;
                }

                $scope.signaturesubmit = function () {
                    var url = 'api/idasMstDigitalSignature/SignatureUpload';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            activate();
                            modalInstance.close('closed');
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            modalInstance.close('closed');
                        }
                        $("#digitaldocupload").val('');
                    });
                }
            }
        }

        //$scope.viewsignature = function (digitalsignature_gid) {

        //    var modalInstance = $modal.open({
        //        templateUrl: '/viewSignatureContent.html',
        //        controller: ModalInstanceCtrl,
        //        backdrop: 'static',
        //        keyboard: false,
        //        size: 'md'
        //    });

        //    ModalInstanceCtrl.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams'];
        //    function ModalInstanceCtrl($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {

        //        var params = {
        //            digitalsignature_gid: digitalsignature_gid
        //        }
        //        var url = 'api/idasMstDigitalSignature/GetSignatureView';
        //        SocketService.getparams(url, params).then(function (resp) {
        //            $scope.employee_name = resp.data.employee_name;
        //            $scope.document_name = resp.data.document_name;
        //            $scope.document_path = resp.data.document_path;
        //        });

        //        $scope.close = function () {
        //            modalInstance.close('closed');
        //        };

        //        $scope.downloads = function (val1, val2) {
        //            var phyPath = val1;
        //            var relPath = phyPath.split("EMS");
        //            var relpath1 = relPath[1].replace("\\", "/");
        //            var hosts = window.location.host;
        //            var prefix = location.protocol + "//";
        //            var str = prefix.concat(hosts, relpath1);
        //            var link = document.createElement("a");
        //            var name = val2.split(".")
        //            link.download = val2;
        //            var uri = str;
        //            link.href = uri;

        //            link.click();
        //        }
        //    }
        //}

        $scope.deletesignature = function (digitalsignature_gid) {
            lockUI();
            var params = {
                digitalsignature_gid: digitalsignature_gid
            }
            var url = 'api/idasMstDigitalSignature/DeleteSignature';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {

                    var url = 'api/idasMstDigitalSignature/GetDigitalSignatureList';
                    SocketService.get(url).then(function (resp) {
                        $scope.digitalsignaturelist = resp.data.digitalsignaturelist
                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                unlockUI();
            });
        }
        $scope.downloads = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;

            link.click();
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasCourierEdit', idasCourierEdit);

    idasCourierEdit.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'DownloaddocumentService','cmnfunctionService'];

    function idasCourierEdit($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService,cmnfunctionService) {
       
        $scope.title = 'idasCourierEdit';
        var vm = this;
        vm.title = 'idasTrnCourierCreation';
        var courier_gid;
        var sanction_gid;
        var page;
        activate();

        function activate() {

            courier_gid=localStorage.getItem('courier_gid'); 
            page=localStorage.getItem('page');  
                    // Calender Popup... //
            $scope.courier_gid=courier_gid;
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1

            };


            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.opened = true;
            };

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ["dd-MM-yyyy"];
            vm.format = vm.formats[0];

            var url = 'api/customer/customer';
            SocketService.get(url).then(function (resp) {
                $scope.customer_list = resp.data.customer_list;
                
            });

            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

            var  params={
                courier_gid:courier_gid
            }

            var url = 'api/IdasMstCourierCompany/CourierCompanySummary';
            SocketService.get(url).then(function (resp) {
                $scope.couriercompany_list = resp.data.MdlCourierCompany;
            });

            var url = 'api/IdasCourierManagement/GetEditCourierDetail';
            SocketService.getparams(url,params).then(function (resp) {
                console.log(resp.data);
                if (resp.data.status == true) {
                    if (resp.data.customer_gid == "")
                    {
                        $scope.rdbcustomeredit = "No";
                        $scope.customerno = true;
                        $scope.customernameedit = resp.data.customer_name;
                    }
                    else {
                        $scope.rdbcustomeredit = "Yes";
                        $scope.customeryes = true;
                        $scope.customername = resp.data.customer_gid;
                    }

                    $scope.date_of_courier = resp.data.date_of_courier;
                    $scope.date_of_courier = Date.parse($scope.date_of_courier);

                    //$scope.date_of_courier = Date.Parse(resp.data.date_of_courier);
                    console.log($scope.date_of_courier);
                    $scope.courierref_no=resp.data.courierref_no;
                   //$scope.cbocustomer2sanction_gid=resp.data.sanction_gid;
                    $scope.document_type=resp.data.document_type;
                    $scope.address=resp.data.address;
                   // $scope.sender_name=resp.data.sender_gid;
                    $scope.pod_no=resp.data.pod_no;
                    $scope.courier_company_name=resp.data.couriercompany_name;
                  //  $scope.courierhandover_to=resp.data.courierhandover_to;
                   // $scope.courierhandover_to_gid=resp.data.courierhandover_to_gid;
                    $scope.courier_type=resp.data.courier_type;
                    $scope.remarks=resp.data.remarks;
                    $scope.courier_sender_name=resp.data.sender_gid;
                    $scope.handover_name=resp.data.courierhandover_to_gid;
                    $scope.uploadDoc_list=resp.data.uploadcourierdocument;
                    sanction_gid=resp.data.sanction_gid;
                    $scope.ack_status=resp.data.ack_status;
                    $scope.employee_list=resp.data.MdlEmployee;

                    if (resp.data.MdlCourierByList != null) {
                        $scope.sender_name = [];
                        var count = resp.data.MdlCourierByList.length;
                        for (var i = 0; i < count; i++) {
                            var indexs = $scope.employee_list.map(function (x) { return x.employee_gid; }).indexOf(resp.data.MdlCourierByList[i].employee_gid);
                            $scope.sender_name.push($scope.employee_list[indexs]);
                        }
                    }
    
                    if (resp.data.MdlCourierToList != null) {
                        var count = resp.data.MdlCourierToList.length;
                        $scope.handover_name = [];
                        for (var i = 0; i < count; i++) {
                            var indexs = $scope.employee_list.map(function (x) { return x.employee_gid; }).indexOf(resp.data.MdlCourierToList[i].employee_gid);
                            $scope.handover_name.push($scope.employee_list[indexs]);
                        }
                    }

                    var params = {
                        customer_gid: resp.data.customer_gid
                    }
                    var url = 'api/loan/customer_getheads';
    
                    SocketService.getparams(url, params).then(function (resp) {
                    
                        $scope.sanctiondtl = resp.data.sanctiondtl;
                        console.log('sanctiondtl',$scope.sanctiondtl);
                    });
                    $scope.cbosanctionGid =sanction_gid;

                }
                
                if($scope.courier_type=="Courier Outward" || $scope.courier_type=="Courier Inward"){
                    document.getElementById("courier_company_name").disabled = false;
                    document.getElementById("pod_no").disabled=false;
                    $scope.physical_value=false;
                }
                if($scope.courier_type=="Courier Outward"){
                    $scope.courier_outward=true;
                    $scope.courier_inward=false;
                    $scope.physical_inward=false;
                    $scope.physical_outward=false;
                
                
                }
    
                if($scope.courier_type=="Courier Inward"){
                    //$scope.courier_inward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=true;
                    $scope.physical_inward=false;
                    $scope.physical_outward=false;
                
                }
    
                if($scope.courier_type=="Physical Inward"){
                  //  $scope.physical_inward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=false;
                    $scope.physical_inward=true;
                    $scope.physical_outward=false;
                
                }
                if($scope.courier_type=="Physical Outward"){
                  //  $scope.physical_outward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=false;
                    $scope.physical_inward=false;
                    $scope.physical_outward=true;
                
                }
                if($scope.courier_type=="Physical Inward" || $scope.courier_type=="Physical Outward"){
                    document.getElementById("courier_company_name").disabled = true;
                    document.getElementById("pod_no").disabled=true;
                    $scope.physical_value=true;
                }
    
            });

            $scope.rdbcustomer_yes = function () {
                $scope.customerno = false;
                $scope.customeryes = true;
            }
            $scope.rdbcustomer_no = function () {
                $scope.customerno = true;
                $scope.customeryes = false;
            }

        }
       
        $scope.onselectedchangecustomer = function (customer) {
            var params = {
                customer_gid: customer
            }
            console.log('customer params',params);
            var url = 'api/loan/customer_getheads';

            SocketService.getparams(url, params).then(function (resp) {
                console.log('sanctionDtls',resp.data);
              if(resp.data.sanctiondtl!=null){
                $scope.sanctiondtl = resp.data.sanctiondtl;
              }
              else{
                $scope.sanctiondtl =null;
              }
                
             
            });
        }
       
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.commondocumentupload = function (val, val1, name) {
           
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_gid', $scope.document_gid);
            frm.append('Trn_Gid',courier_gid);
            frm.append('document_title',$scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasCourierManagement/CourierDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


                $("#addupload").val('');
                $("#editupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                  activate();
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
         $scope.courierback = function () {
            $location.url('app/idasCourierMgmtsummary?lstab='+page);
        }

        $scope.update=function(){
var courier_company_name;
            if($scope.ack_status=='Acknowledged'){
                console.log($scope.ack_date);
                if($scope.ack_date==undefined||$scope.ack_date==""){
                    Notify.alert('Select the Acknowledgement Date');
                    return;
                }
            }

            if($scope.courier_type=="Courier Inward" || $scope.courier_type=="Courier Outward"){
                if($scope.courier_company_name==undefined ||$scope.courier_company_name=="" ){
                    Notify.alert('Select the Courier Company');
                    return;
                }
                else{
                    courier_company_name=$('#courier_company_name :selected').text()
                }

                if($scope.pod_no==undefined||$scope.pod_no==""){
                    Notify.alert('Enter the POD No.');
                    return;
                }
            }
            else{
              courier_company_name="";
                $scope.pod_no="";
            }
            if($scope.cbosanctionGid==(undefined || "")){
                $scope.sanctionref_no='';
                $scope.sanction_gid='';
            }
            else{
                $scope.sanctionref_no= $('#cbosanctionGid :selected').text();
                $scope.sanction_gid= $scope.cbosanctionGid;
            }
            if ($scope.rdbcustomeredit == "No") {
                var customername = $scope.customernameedit;
                $scope.customername = '';
            }
            else {
                var customername = $('#customername :selected').text();
            }
            var params={
                date_of_courier:$scope.date_of_courier,
                document_type:$scope.document_type,
                remarks:$scope.remarks,
                pod_no:$scope.pod_no,
                couriercompany_name:courier_company_name,
                address:$scope.address,
                customer_gid:$scope.customername,
                customer_name:customername,
                sanction_gid:$scope.sanction_gid,
                sanctionref_no:$scope.sanctionref_no,
                courierMgmt_gid :courier_gid,
                courier_type:$scope.courier_type,
                ack_status:$scope.ack_status,
                ack_date:$scope.ack_date,
                MdlCourierByList: $scope.sender_name,  
                MdlCourierToList: $scope.handover_name,
            }
            lockUI();

            var url = 'api/IdasCourierManagement/PostUpdateCourier';
            SocketService.post(url, params).then(function (resp) {
unlockUI();
                if (resp.data.status == true) {
                   
                    $location.url('app/idasCourierMgmtsummary?lstab='+page);
                    Notify.alert(resp.data.message, 'success')
                }

                else {
                    Notify.alert(resp.data.message, 'warning')
                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasCourierMgmtAckList', idasCourierMgmtAckList);

    idasCourierMgmtAckList.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$timeout', 'ngTableParams'];

    function idasCourierMgmtAckList($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $timeout, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasCourierMgmtAckList';

        activate();

        function activate() {
            var url = 'api/IdasCourierManagement/CourierAckList';
            SocketService.get(url).then(function (resp) {
                $scope.courierackpending_list = resp.data.CourierAckPending;
                $scope.courierack_list = resp.data.CourierMgmt;
            });
        }

        $scope.back = function () {
            $state.go('app.idasCourierMgmtsummary');
        }

        // Submit Acknowledgement Code Starts
        $scope.ack_submit = function (courierMgmt_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/sendack.html',
                controller: ModalInstanceCtrl,
                backdrop: 'static',
                keyboard: false,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    modalInstance.close('closed');
                };

                var params = {
                    courierMgmt_gid: courierMgmt_gid
                }
              
                var url = 'api/IdasCourierManagement/CourierAckView';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.courierref_no = resp.data.courierref_no;
                    $scope.date_of_courier = resp.data.date_of_courier;
                    $scope.sanctionref_no = resp.data.sanctionref_no;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.document_type = resp.data.document_type;
                    $scope.sender_name = resp.data.sender_name;
                    $scope.pod_no = resp.data.pod_no;
                    $scope.couriercompany_name = resp.data.couriercompany_name;
                    $scope.courierhandover_to = resp.data.courierhandover_to;
                    $scope.courier_type = resp.data.courier_type;
                    $scope.ack_status = resp.data.ack_status;
                    $scope.remarks = resp.data.remarks;
                    $scope.ack_date = resp.data.ack_date;
                    $scope.ackby_name = resp.data.ackby_name;
                });

                // Submit
                $scope.sendcourierack = function () {
                    var params = {
                        courierMgmt_gid: courierMgmt_gid,
                    }
                    lockUI();
                    var url = "api/IdasCourierManagement/AckStatus"
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                            unlockUI();
                        }
                        else {
                            modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }
                // Click Cancel Button
                $scope.ok = function () {
                    modalInstance.close('closed');
                };
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasCourierMgmtsummary', idasCourierMgmtsummary);

    idasCourierMgmtsummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasCourierMgmtsummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasCourierMgmtsummary';
        var params;
        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            $scope.total = 0;
            $scope.tab = {};

            var url = 'api/IdasCourierManagement/GetCourierMgmt';


            var lstaburl = window.location.href;
            var relPath = lstaburl.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "CI") {
                    $scope.tabci = true;
                    params = {
                        courier_type: "Courier Inward"
                    }

                }
                else if (relpath1 == "CO") {
                    $scope.tabco = true;
                    params = {
                        courier_type: "Courier Outward"
                    }

                }
                else if (relpath1 == "PI") {
                    $scope.tabpi = true;
                    params = {
                        courier_type: "Physical Inward"
                    }

                }
                else if (relpath1 == "PO") {
                    $scope.tabpo = true;
                    params = {
                        courier_type: "Physical Outward"
                    }

                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabci = true;
                    params = {
                        courier_type: "Courier Inward"
                    }

                }
                else if ($scope.tab.activeTabId == 'CI') {
                    $scope.tabci = true;
                    params = {
                        courier_type: "Courier Inward"
                    }


                }
                else if ($scope.tab.activeTabId == 'CO') {
                    $scope.tabco = true;
                    params = {
                        courier_type: "Courier Outward"
                    }

                }
                else if ($scope.tab.activeTabId == 'PI') {
                    $scope.tabpi = true;
                    params = {
                        courier_type: "Physical Inward"
                    }

                }
                else if ($scope.tab.activeTabId == 'PO') {
                    $scope.tabpo = true;
                    params = {
                        courier_type: "Physical Outward"
                    }

                }
            }
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    if (params.courier_type == "Courier Inward") {
                        $scope.courierInward_List = resp.data.CourierMgmt;
                        if ($scope.courierInward_List == null) {
                            $scope.total = 0;
                            $scope.totalDisplayed = 0;
                        }
                        else {
                            $scope.total = $scope.courierInward_List.length;
                            if ($scope.courierInward_List.length < 100) {
                                $scope.totalDisplayed = $scope.courierInward_List.length;
                            }
                        }
                    }
                    if (params.courier_type == "Courier Outward") {
                        $scope.courieroutward_List = resp.data.CourierMgmt;
                        if ($scope.courieroutward_List == null) {
                            $scope.total = 0;
                            $scope.totalDisplayed = 0;
                        }
                        else {
                            $scope.total = $scope.courieroutward_List.length;
                            if ($scope.courieroutward_List.length < 100) {
                                $scope.totalDisplayed = $scope.courieroutward_List.length;
                            }
                        }
                    }
                    if (params.courier_type == "Physical Inward") {
                        $scope.courierphysicalInward_List = resp.data.CourierMgmt;
                        if ($scope.courierphysicalInward_List == null) {
                            $scope.total = 0;
                            $scope.totalDisplayed = 0;
                        }
                        else {
                            $scope.total = $scope.courierphysicalInward_List.length;
                            if ($scope.courierphysicalInward_List.length < 100) {
                                $scope.totalDisplayed = $scope.courierphysicalInward_List.length;
                            }
                        }
                    }

                    if (params.courier_type == "Physical Outward") {
                        $scope.courierphysicaloutward_List = resp.data.CourierMgmt;
                        if ($scope.courierphysicaloutward_List == null) {
                            $scope.total = 0;
                            $scope.totalDisplayed = 0;
                        }
                        else {
                            $scope.total = $scope.courierphysicaloutward_List.length;
                            if ($scope.courierphysicaloutward_List.length < 100) {
                                $scope.totalDisplayed = $scope.courierphysicaloutward_List.length;
                            }
                        }
                    }



                }
                else {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
            });

            var url = "api/IdasCourierManagement/CourierCount";
            SocketService.get(url).then(function (resp) {

                $scope.courier_inward = resp.data.courier_inward;
                $scope.courier_outward = resp.data.courier_outward;
                $scope.physical_inward = resp.data.physical_inward;
                $scope.physical_outward = resp.data.physical_outward;


            });

            var url = 'api/IdasCourierManagement/GetACKNotification';
            SocketService.get(url).then(function (resp) {
                $scope.ack_status = resp.data.ack_status;
            });
        }

        $scope.tabcourierinward = function () {
            var url = 'api/IdasCourierManagement/GetCourierMgmt';
            params = {
                courier_type: "Courier Inward"
            }
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.courierInward_List = resp.data.CourierMgmt;
                    if ($scope.courierInward_List == null) {
                        $scope.total = 0;
                        $scope.totalDisplayed = 0;
                    }
                    else {
                        $scope.total = $scope.courierInward_List.length;
                        if ($scope.courierInward_List.length < 100) {
                            $scope.totalDisplayed = $scope.courierInward_List.length;
                        }
                    }

                }
                else {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
            });


        }
        $scope.tabcourieroutward = function () {
            var url = 'api/IdasCourierManagement/GetCourierMgmt';
            params = {
                courier_type: "Courier Outward"
            }
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.courieroutward_List = resp.data.CourierMgmt;
                    if ($scope.courieroutward_List == null) {
                        $scope.total = 0;
                        $scope.totalDisplayed = 0;
                    }
                    else {
                        $scope.total = $scope.courieroutward_List.length;
                        if ($scope.courieroutward_List.length < 100) {
                            $scope.totalDisplayed = $scope.courieroutward_List.length;
                        }
                    }

                }
                else {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
            });


        }

        $scope.tabphysicalinward = function () {
            var url = 'api/IdasCourierManagement/GetCourierMgmt';
            params = {
                courier_type: "Physical Inward"
            }
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.courierphysicalInward_List = resp.data.CourierMgmt;
                    if ($scope.courierphysicalInward_List == null) {
                        $scope.total = 0;
                        $scope.totalDisplayed = 0;
                    }
                    else {
                        $scope.total = $scope.courierphysicalInward_List.length;
                        if ($scope.courierphysicalInward_List.length < 100) {
                            $scope.totalDisplayed = $scope.courierphysicalInward_List.length;
                        }
                    }

                }
                else {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
            });


        }
        $scope.tabphysicaloutward = function () {
            var url = 'api/IdasCourierManagement/GetCourierMgmt';
            params = {
                courier_type: "Physical Outward"
            }
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.courierphysicaloutward_List = resp.data.CourierMgmt;
                    if ($scope.courierphysicaloutward_List == null) {
                        $scope.total = 0;
                        $scope.totalDisplayed = 0;
                    }
                    else {
                        $scope.total = $scope.courierphysicaloutward_List.length;
                        if ($scope.courierphysicaloutward_List.length < 100) {
                            $scope.totalDisplayed = $scope.courierphysicaloutward_List.length;
                        }
                    }

                }
                else {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
            });


        }

        $scope.loadMore = function (pagecount) {
            console.log('courier_test');
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            // $scope.totalDisplayed += Number;
            // console.log(pagecount);
            unlockUI();
        };
        $scope.popupcourier = function () {
            localStorage.setItem('courier_type', params.courier_type);
            $state.go('app.idasCourierCreation');
        }
        $scope.editCI = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'CI')
            $state.go('app.idasCourierEdit');
        }

        $scope.editCO = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'CO')
            $state.go('app.idasCourierEdit');
        }
        $scope.editPI = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'PI')
            $state.go('app.idasCourierEdit');
        }
        $scope.editPO = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'PO')
            $state.go('app.idasCourierEdit');
        }

        $scope.ViewCI = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'CI')
            $state.go('app.idasTrnCourierView');
        }
        $scope.ViewCO = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'CO')
            $state.go('app.idasTrnCourierView');
        }
        $scope.ViewPI = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'PI')
            $state.go('app.idasTrnCourierView');
        }
        $scope.ViewPO = function (courier_gid) {
            localStorage.setItem('courier_gid', courier_gid)
            localStorage.setItem('page', 'PO')
            $state.go('app.idasTrnCourierView');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasDashboard', idasDashboard);

    idasDashboard.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'Colors', 'ChartData', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams', '$timeout', 'SweetAlert', '$cookies'];

    function idasDashboard($rootScope, $scope, $state, AuthenticationService, Colors, ChartData, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams, $timeout, SweetAlert, $cookies) {
        var vm = this;
        vm.title = 'idasDashboard';

        activate();

        function activate() {
            var url = 'api/IdasDashboard/IdasUserPrivilege';
            
            var params = {
                module_gid: 'IDS'
            };
            SocketService.getparams(url, params).then(function (resp) {
               
                var lsSanctionDocument = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSMSTCOR");
                var lsMaker = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOCMAK");
                var lsChecker = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOCCHK");
                
                var lsRmResponse = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOCRMR");

                var lsLSA = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOCLSA");
                var lsPhysicalDocument = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOCPHY");
                var lsFileMgmt = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOMARC");
                var lsRetrievalReq = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOMRET");
              
                var lsDocUpload = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOMUPL");
                var lsCourierMgmt = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOMCOU");
                var lsDocTagging = resp.data.idasUserPrivilege_List.map(function (e) { return e.idasUserPrivilege }).indexOf("IDSDOMCUL");

                if (lsSanctionDocument != -1) {
                    $scope.SanctionDocument = 'Y';
                }
                else {
                    $scope.SanctionDocument = 'N';
                }
                if (lsMaker != -1) {
                    $scope.Maker = 'Y';
                }
                else {
                    $scope.Maker = 'N';
                }
                if (lsChecker != -1) {
                    $scope.Checker = 'Y';
                }
                else {
                    $scope.Checker = 'N';
                }
                if (lsRmResponse != -1) {
                    $scope.RmResponse = 'Y';
                }
                else {
                    $scope.RmResponse = 'N';
                }
                if (lsLSA != -1) {
                    $scope.lsa = 'Y';
                }
                else {
                    $scope.lsa = 'N';
                }
              
                if (lsPhysicalDocument != -1) {
                    $scope.PhysicalDoc = 'Y';
                }
                else {
                    $scope.PhysicalDoc = 'N';
                }

                if (lsFileMgmt != -1) {
                    $scope.FileMgmt = 'Y';
                }
                else {
                    $scope.FileMgmt = 'N';
                }

                if (lsRetrievalReq != -1) {
                    $scope.RetrievalReq = 'Y';
                }
                else {
                    $scope.RetrievalReq = 'N';
                }


                if (lsCourierMgmt != -1) {
                    $scope.CourierMgmt = 'Y';
                }
                else {
                    $scope.CourierMgmt = 'N';
                }

                if (lsDocUpload != -1) {
                    $scope.DocUpload = 'Y';
                }
                else {
                    $scope.DocUpload = 'N';
                }

                if (lsDocTagging != -1) {
                    $scope.DocumentTagging = 'Y';
                }
                else {
                    $scope.DocumentTagging = 'N';
                }
              
               
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstAddTemplateController', idasMstAddTemplateController);

    idasMstAddTemplateController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function idasMstAddTemplateController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {
    
        $scope.title = 'idasMstAddTemplateController';
        var vm = this;

        activate();

        function activate() {

            var url = "api/idasMstTemplate/GetTemplateType";
            SocketService.get(url).then(function (resp) {
                $scope.cbotemplatetype_list = resp.data.templatetype_list;

            });

        };
        $scope.titleOptions = {

            placeholderText: 'Add a Title',

            charCounterCount: false,

            toolbarInline: true,

            events: {

                'contentChanged': function (e, editor) {

                    console.log('content changed', $scope.titleOptions.froalaEditor.html.get());

                },

                'initialized': function (editor) {

                    console.log('initialized', this);

                }

            }

        };

        $scope.initialize = function (initControls) {

            $scope.initControls = initControls;

            $scope.deleteAll = function () {

                initControls.getEditor().html.set('34434');

            };

        };

        $scope.imgModel = { src: 'image.jpg' };

        $scope.buttonModel = { innerHTML: 'Click Me' };

        $scope.inputModel = { placeholder: 'I am an input!' };
        $scope.inputOptions = {

            angularIgnoreAttrs: ['class', 'ng-model', 'id', 'froala']

        }


        $scope.initializeLink = function (linkInitControls) {

            $scope.linkInitControls = linkInitControls;

        };

        $scope.linkModel = { href: 'https://www.froala.com/wysiwyg-editor' }

        $scope.submitTemplate = function () {

            var params = {
                template_name: $scope.templatename,
                templatetype_name: $scope.cbotemplatetype.templatetype_name,
                template_content: $scope.content

            }


            var url = 'api/idasMstTemplate/IdasTemplateSubmit';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $state.go('app.idasMstTemplateSummary');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }

        $scope.back = function () {
            $state.go('app.idasMstTemplateSummary');

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstCheckerSanctionViewController', idasMstCheckerSanctionViewController);

    idasMstCheckerSanctionViewController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams','cmnfunctionService'];

    function idasMstCheckerSanctionViewController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasMstCheckerSanctionViewController';

        var sanction_gid = $location.search().sanction_gid;
        var lspage = $location.search().lspage;

        activate();

        function activate() {
            var url = 'api/IdasMstSanction/checkertmpdoc_delete';

            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.sanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanction_date;
                $scope.SanctionAmountEdit = resp.data.sanction_amount;
                $scope.customerNameEdit = resp.data.customername;
                $scope.CustomerurnEdit = resp.data.customer_urn;
                $scope.verticalCodeEdit = resp.data.vertical;
                $scope.txtSanctionLimit = resp.data.sanction_limit;
                $scope.checkerletter_flag = resp.data.checkerletter_flag;

            });
            var url = 'api/IdasMstSanction/Getcheckerdocument';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.uploadedfile = true;
                    $scope.file_name = resp.data.document_name;
                    $scope.file_gid = resp.data.document_gid;
                }

            });

            var url = 'api/IdasMstSanction/SanctionmarkerEdit';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.makerfile_name = resp.data.makerfile_name;
                $scope.makerfile_path = resp.data.makerfile_path;
            });

            var url = 'api/IdasMstSanction/SanctioncheckerEdit';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.checkerfile_name = resp.data.checkerfile_name;
                $scope.checkerfile_path = resp.data.checkerfile_path;
                $scope.uploaded_by = resp.data.uploaded_by;
                $scope.uploaded_date = resp.data.updated_date;
            });
        }
        $scope.checkerdoc_download = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }
        $scope.makerdoc_download = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.checkerUpdate = function () {
            var url = 'api/IdasMstSanction/UpdateCheckerdoc';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    $state.go('app.idasMstCheckerPendingSummary')
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
        $scope.Checkerback = function () {
            var url = 'api/IdasMstSanction/checkertmpdoc_delete';

            SocketService.get(url).then(function (resp) {

            });
            if (lspage == 'Pending') {
                $state.go('app.idasMstCheckerPendingSummary')
            }
            else {
                $state.go('app.idasMstCheckerCompletedSummary')
            }
        }

        $scope.canceluploadedfile = function () {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/checkerdoc_delete';

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.uploadedfile = false;
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });
        }

        $scope.uploades_checkerfile = function (val, val1, name) {

            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            lockUI();
            var url = 'api/IdasMstSanction/Checkerupload_file';

            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#uploadwordfile").val('');

                unlockUI();
                if (resp.data.status == true) {
                    var url = 'api/IdasMstSanction/Getcheckertmpdocument';

                    SocketService.get(url).then(function (resp) {
                        if (resp.data.status == true) {

                            $scope.uploadedfile = true;
                            $scope.file_name = resp.data.document_name;
                            $scope.file_gid = resp.data.document_gid;
                            $scope.checkerfile_name = resp.data.checkerfile_name;
                            $scope.checkerfile_path = resp.data.checkerfile_path;
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        $scope.downloadsBAL = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.esdownloaddocument = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }


        $scope.downloadmail = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }


        $scope.downloadsCAM = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }


        $scope.downloadsMOM = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }
        $scope.downloadsanctionletter = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.downloadsgeneral = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasMstCourierCompanyController', IdasMstCourierCompanyController);

        IdasMstCourierCompanyController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function IdasMstCourierCompanyController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'IdasMstCourierCompanyController';

        activate();

        function activate() {
            lockUI();
            $scope.totalDisplayed = 100;
            var url = "api/IdasMstCourierCompany/CourierCompanySummary";
            SocketService.get(url).then(function (resp) {
                unlockUI();
               
                $scope.couriercompany_list = resp.data.MdlCourierCompany;
                 $scope.total = $scope.couriercompany_list.length;
               
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if($scope.pagecount==null){
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#DCDCDC';  
            }
            else{
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#ffa';
            }
        };

        $scope.addCourier = function (val) {
            var modalInstance = $modal.open({
                templateUrl: '/addDocumentModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {



                $scope.Submit = function () {

                    if ($scope.description == undefined)
                    {
                        $scope.description=""
                    }

                    var params = {
                        
                        couriercompany_name: $scope.couriercompany_name,
                        description: $scope.description
                       
                    }
                    console.log(params);
                    lockUI();
                    var url = "api/IdasMstCourierCompany/CourierCompany";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
            }
        }
        $scope.loadMore = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.edit=function(val,CourierName,Description)
        {
            var modalInstance = $modal.open({
                templateUrl: '/editDocumentModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
               
                    $scope.courierNameEdit = CourierName;
                    $scope.descriptionEdit = Description;
                   
             
                $scope.close = function () {
                    $modalInstance.close('closed');
                };

                $scope.Update = function () {
                    lockUI();
                    var params = {
                        couriercompany_name: $scope.courierNameEdit,
                        description: $scope.descriptionEdit,
                        couriercompany_gid: val
                    }
                    var url = "api/IdasMstCourierCompany/UpdateCourierCompany";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            unlockUI();
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
            }
        }
        $scope.delete = function (val) {
            var params = {
                couriercompany_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Courier Company ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasMstCourierCompany/DeleteCourierCompany";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }
      
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstCreateSanction', idasMstCreateSanction);

    idasMstCreateSanction.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasMstCreateSanction($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasMstCreateSanction';
        var vertical_gid;
        var vertical_code;
        activate();

        function activate() {
            $scope.colandingyes = false;
            $scope.colandingyes = false;
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            $scope.mandatorycolending = false;

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            $scope.customer_pnl = false;
            var url = 'api/entity/Entity';

            SocketService.get(url).then(function (resp) {
                $scope.entity_list = resp.data.entity_list;

            });
          
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;

            });
            var url = 'api/customer/state';
            SocketService.get(url).then(function (resp) {
                $scope.state_list = resp.data.state_list;
            });
            var url = 'api/IdasTrnLsaManagement/branch';
            SocketService.get(url).then(function (resp) {
                $scope.branch_list = resp.data.branch_list;
            });
            var url = 'api/IdasMstSanction/tempdelete';
            SocketService.get(url).then(function (resp) {
            });

        }
        $scope.complete = function (string) {

            if (string.length >= 3) {
                $scope.message = "";
                var url = 'api/customer/ExploreCustomer';
                var params = {
                    customername: string
                }
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.message = "";
                        $scope.customer_list = resp.data.Customers;
                    }
                    else {
                        $scope.message = "No Records";
                    }


                });
            }
            else {
                $scope.customer_list = null;
                $scope.message = "Enter atleast three character";
            }
        }
        $scope.fillTextbox = function (customer_gid, customer_name) {
            $scope.customer = customer_name;
            $scope.customer_gid = customer_gid;
            $scope.customer_list = null;


            var params = {
                customer_gid: customer_gid
            }


            var url = 'api/loan/customer_getheads';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer_pnl = true;
                $scope.mdlheadsofcustomer = resp.data;
                $scope.zonalHead = resp.data.zonalGid;
                $scope.businessHead = resp.data.businessHeadGid;
                $scope.clustermanager = resp.data.clustermanagerGid;
                $scope.relationshipMgmt = resp.data.relationshipMgmtGid;
                $scope.creditmgmt_name = resp.data.creditmanager_gid;
                $scope.vertical_code = resp.data.vertical_code;
                vertical_gid = resp.data.vertical_gid;
                vertical_code = resp.data.vertical_code;

            });
        }
       
        $scope.rdbcolanding_yes = function () {
            $scope.mandatorycolending = false;
            $scope.colandingyes = true;

        }
        $scope.rdbcolanding_no = function () {
            $scope.mandatorycolending = false;
            $scope.colandingyes = false;

        }

        $scope.rdbdeclaration_yes = function () {
            $scope.esdeclarationyes = true;
            $scope.esdeclarationno = false;
        }
        $scope.rdbdeclaration_no = function () {
            $scope.esdeclarationyes = false;
            $scope.esdeclarationno = true;
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }


        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');

            var output = Number(str).toLocaleString('en-IN');
            var lswords_requestedloan = inWords(str);


            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtSanctionAmount = "";

            }
            else {
                document.getElementById('words_requestedloan').innerHTML = lswords_requestedloan;

                $scope.txtSanctionAmount = output;
                $scope.sanction_validation = false;
            }
        }
        $scope.ngclickevent = function () {
            $scope.mandatorycolending = false;
        }

        $scope.sanctionSubmit = function () {
            var params = {
                esdeclaration_status: $scope.rdbdeclaration,
            }
            var url = 'api/IdasMstSanction/mandatoryfile_check';
            SocketService.getparams(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    if ($scope.rdbcolanding == "No") {
                        if (vertical_code == 'FPO')
                        {
                            if (($scope.rdbpaycard == "") || ($scope.rdbpaycard == undefined))
                            {
                                Notify.alert("Kindly Select Paycard value");
                            }
                            else {

                           
                        $scope.mandatorycolending = false;
                        var input = $scope.txtSanctionAmount;
                        var arr = input.split(',');
                        var i;
                        for (i = 0; i < arr.length; i++) {
                            var str = input.replace(',', '');
                            input = str;
                        }
                        var zonal_name = $('#zonal_name :selected').text();
                        var businesshead_name = $('#businesshead_name :selected').text();
                        var relationshipmgmt_name = $('#relationshipmgmt_name :selected').text();
                        var cluster_manager_name = $('#cluster_manager_name :selected').text();
                        var creditmgmt_name = $('#creditmanager_name :selected').text();

                        var params = {
                            sanction_refno: $scope.sanctionrefno,
                            sanction_amount: input,
                            sanction_date: $scope.txtSanctionDate,
                            customername: $scope.customer,
                            customer_gid: $scope.customer_gid,
                            vertical_gid: vertical_gid,
                            vertical_code: vertical_code,
                            zonal_name: zonal_name,
                            businesshead_name: businesshead_name,
                            relationshipmgmt_name: relationshipmgmt_name,
                            cluster_manager_name: cluster_manager_name,
                            creditmanager_name: creditmgmt_name,
                            zonalGid: $scope.zonalHead,
                            businessHeadGid: $scope.businessHead,
                            relationshipMgmtGid: $scope.relationshipMgmt,
                            clustermanagerGid: $scope.clustermanager,
                            creditmanagerGid: $scope.creditmgmt_name,
                            sanction_branch_name: $scope.branch_gid.branch_name,
                            sanction_state_name: $scope.state_gid.state_name,
                            sanction_branch_gid: $scope.branch_gid.branch_gid,
                            sanction_state_gid: $scope.state_gid.state_gid,
                            colanding_status: $scope.rdbcolanding,
                            colander_name: $scope.txtcolander_name,
                            entity: $scope.cboentity_type.entity_name,
                            entity_gid: $scope.cboentity_type.entity_gid,
                            paycard: $scope.rdbpaycard,
                            esdeclaration_status: $scope.rdbdeclaration,
                        }
                        
                        var url = 'api/IdasMstSanction/CreateSanction';
                        lockUI();
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                unlockUI();

                                Notify.alert(resp.data.message, 'success')
                                $state.go('app.idasMstSanctionSummary');

                            }
                            else {
                                unlockUI();
                                Notify.alert(resp.data.message)
                            }
                            activate();
                        });
                            }
                        }
                        else {
                            $scope.mandatorycolending = false;
                            var input = $scope.txtSanctionAmount;
                            var arr = input.split(',');
                            var i;
                            for (i = 0; i < arr.length; i++) {
                                var str = input.replace(',', '');
                                input = str;
                            }

                            // var customer_name = $('#customername :selected').text();
                            var zonal_name = $('#zonal_name :selected').text();
                            var businesshead_name = $('#businesshead_name :selected').text();
                            var relationshipmgmt_name = $('#relationshipmgmt_name :selected').text();
                            var cluster_manager_name = $('#cluster_manager_name :selected').text();
                            var creditmgmt_name = $('#creditmanager_name :selected').text();

                            var params = {
                                sanction_refno: $scope.sanctionrefno,
                                sanction_amount: input,
                                sanction_date: $scope.txtSanctionDate,
                                customername: $scope.customer,
                                customer_gid: $scope.customer_gid,
                                vertical_gid: vertical_gid,
                                vertical_code: vertical_code,
                                zonal_name: zonal_name,
                                businesshead_name: businesshead_name,
                                relationshipmgmt_name: relationshipmgmt_name,
                                cluster_manager_name: cluster_manager_name,
                                creditmanager_name: creditmgmt_name,
                                zonalGid: $scope.zonalHead,
                                businessHeadGid: $scope.businessHead,
                                relationshipMgmtGid: $scope.relationshipMgmt,
                                clustermanagerGid: $scope.clustermanager,
                                creditmanagerGid: $scope.creditmgmt_name,
                                sanction_branch_name: $scope.branch_gid.branch_name,
                                sanction_state_name: $scope.state_gid.state_name,
                                sanction_branch_gid: $scope.branch_gid.branch_gid,
                                sanction_state_gid: $scope.state_gid.state_gid,
                                colanding_status: $scope.rdbcolanding,
                                colander_name: $scope.txtcolander_name,
                                entity: $scope.cboentity_type.entity_name,
                                entity_gid: $scope.cboentity_type.entity_gid,
                                paycard: $scope.rdbpaycard,
                                esdeclaration_status: $scope.rdbdeclaration,
                            }
                            var url = 'api/IdasMstSanction/CreateSanction';
                            lockUI();
                            SocketService.post(url, params).then(function (resp) {
                                if (resp.data.status == true) {
                                    unlockUI();

                                    Notify.alert(resp.data.message, 'success')
                                    $state.go('app.idasMstSanctionSummary');

                                }
                                else {
                                    unlockUI();
                                    Notify.alert(resp.data.message)
                                }
                                activate();
                            });
                        }
                    }
                    else {
                        if (vertical_code == 'FPO') {
                            if (($scope.rdbpaycard == "") || ($scope.rdbpaycard == undefined)) {
                                Notify.alert("Kindly Select Paycard value");
                            }
                            else {
                                if (($scope.txtcolander_name == "") || ($scope.txtcolander_name == undefined)) {
                                    $scope.mandatorycolending = true;
                                }
                                else {
                                    $scope.mandatorycolending = false;
                                    var input = $scope.txtSanctionAmount;
                                    var arr = input.split(',');
                                    var i;
                                    for (i = 0; i < arr.length; i++) {
                                        var str = input.replace(',', '');
                                        input = str;
                                    }

                                    // var customer_name = $('#customername :selected').text();
                                    var zonal_name = $('#zonal_name :selected').text();
                                    var businesshead_name = $('#businesshead_name :selected').text();
                                    var relationshipmgmt_name = $('#relationshipmgmt_name :selected').text();
                                    var cluster_manager_name = $('#cluster_manager_name :selected').text();
                                    var creditmgmt_name = $('#creditmanager_name :selected').text();

                                    var params = {
                                        sanction_refno: $scope.sanctionrefno,
                                        sanction_amount: input,
                                        sanction_date: $scope.txtSanctionDate,
                                        customername: $scope.customer,
                                        customer_gid: $scope.customer_gid,
                                        vertical_gid: vertical_gid,
                                        vertical_code: vertical_code,
                                        zonal_name: zonal_name,
                                        businesshead_name: businesshead_name,
                                        relationshipmgmt_name: relationshipmgmt_name,
                                        cluster_manager_name: cluster_manager_name,
                                        creditmanager_name: creditmgmt_name,
                                        zonalGid: $scope.zonalHead,
                                        businessHeadGid: $scope.businessHead,
                                        relationshipMgmtGid: $scope.relationshipMgmt,
                                        clustermanagerGid: $scope.clustermanager,
                                        creditmanagerGid: $scope.creditmgmt_name,
                                        sanction_branch_name: $scope.branch_gid.branch_name,
                                        sanction_state_name: $scope.state_gid.state_name,
                                        sanction_branch_gid: $scope.branch_gid.branch_gid,
                                        sanction_state_gid: $scope.state_gid.state_gid,
                                        colanding_status: $scope.rdbcolanding,
                                        colander_name: $scope.txtcolander_name,
                                        entity: $scope.cboentity_type.entity_name,
                                        entity_gid: $scope.cboentity_type.entity_gid,
                                        paycard: $scope.rdbpaycard,
                                        esdeclaration_status: $scope.rdbdeclaration,
                                    }
                                    var url = 'api/IdasMstSanction/CreateSanction';
                                    lockUI();
                                    SocketService.post(url, params).then(function (resp) {
                                        if (resp.data.status == true) {
                                            unlockUI();

                                            Notify.alert(resp.data.message, 'success')
                                            $state.go('app.idasMstSanctionSummary');

                                        }
                                        else {
                                            unlockUI();
                                            Notify.alert(resp.data.message)
                                        }
                                        activate();
                                    });
                                }
                            }
                        }
                        else {
                            if (($scope.txtcolander_name == "") || ($scope.txtcolander_name == undefined)) {
                                $scope.mandatorycolending = true;
                            }
                            else {
                                $scope.mandatorycolending = false;
                                var input = $scope.txtSanctionAmount;
                                var arr = input.split(',');
                                var i;
                                for (i = 0; i < arr.length; i++) {
                                    var str = input.replace(',', '');
                                    input = str;
                                }

                                // var customer_name = $('#customername :selected').text();
                                var zonal_name = $('#zonal_name :selected').text();
                                var businesshead_name = $('#businesshead_name :selected').text();
                                var relationshipmgmt_name = $('#relationshipmgmt_name :selected').text();
                                var cluster_manager_name = $('#cluster_manager_name :selected').text();
                                var creditmgmt_name = $('#creditmanager_name :selected').text();

                                var params = {
                                    sanction_refno: $scope.sanctionrefno,
                                    sanction_amount: input,
                                    sanction_date: $scope.txtSanctionDate,
                                    customername: $scope.customer,
                                    customer_gid: $scope.customer_gid,
                                    vertical_gid: vertical_gid,
                                    vertical_code: vertical_code,
                                    zonal_name: zonal_name,
                                    businesshead_name: businesshead_name,
                                    relationshipmgmt_name: relationshipmgmt_name,
                                    cluster_manager_name: cluster_manager_name,
                                    creditmanager_name: creditmgmt_name,
                                    zonalGid: $scope.zonalHead,
                                    businessHeadGid: $scope.businessHead,
                                    relationshipMgmtGid: $scope.relationshipMgmt,
                                    clustermanagerGid: $scope.clustermanager,
                                    creditmanagerGid: $scope.creditmgmt_name,
                                    sanction_branch_name: $scope.branch_gid.branch_name,
                                    sanction_state_name: $scope.state_gid.state_name,
                                    sanction_branch_gid: $scope.branch_gid.branch_gid,
                                    sanction_state_gid: $scope.state_gid.state_gid,
                                    colanding_status: $scope.rdbcolanding,
                                    colander_name: $scope.txtcolander_name,
                                    entity: $scope.cboentity_type.entity_name,
                                    entity_gid: $scope.cboentity_type.entity_gid,
                                    paycard: $scope.rdbpaycard,
                                    esdeclaration_status: $scope.rdbdeclaration,
                                }
                                var url = 'api/IdasMstSanction/CreateSanction';
                                lockUI();
                                SocketService.post(url, params).then(function (resp) {
                                    if (resp.data.status == true) {
                                        unlockUI();

                                        Notify.alert(resp.data.message, 'success')
                                        $state.go('app.idasMstSanctionSummary');

                                    }
                                    else {
                                        unlockUI();
                                        Notify.alert(resp.data.message)
                                    }
                                    activate();
                                });
                            }
                        }
                    }
                }
                else {
                    Notify.alert(resp.data.message, 'warning')
                }
            });
        }


        $scope.sanctionback = function (val) {
            $state.go('app.idasMstSanctionSummary');
        }

        $scope.importExcel = function () {
            var modalInstance = $modal.open({
                templateUrl: '/excelImport.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                    $("#excelImport").val('');
                };


                $scope.upload = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('document_name', $scope.documentname);
                    frm.append('uploadtype', $scope.cboexcel_type);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;

                }

                $scope.uploadexcelclick = function () {
                    lockUI();
                    var url = "api/IdasMstSanction/postexcelupload";
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                        $("#excelImport").val('');

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        unlockUI();
                    });
                }

            }
        }
        //Delete CAM Document
        $scope.deleteCAM = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/camdoc_delete_add';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.CAMfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.CAMfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        //Delete MOM Document
        $scope.deleteMOM = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/momdoc_delete_add';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.MOMfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.MOMfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        // Delete the sanction letter
        $scope.document_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/sanctionletter_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.SANfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.SANfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        $scope.uploadclick = function () {
            $scope.uploadddiv = true;
            $scope.uploaddclickdiv = false;
        }

        $scope.cancelupload = function () {
            $scope.uploadddiv = false;
            $scope.uploaddclickdiv = true;
            $("#addupload").val('');
        }
        $scope.uploadclickMOM = function () {
            $scope.uploadMOMdiv = true;
            $scope.uploadMOMclickdiv = false;
        }

        $scope.cancelMOMupload = function () {
            $scope.uploadMOMdiv = false;
            $scope.uploadMOMclickdiv = true;
            $("#addupload").val('');
        }
        $scope.uploadCAM_doc = function (val, val1, name) {
            if (($scope.CAMdocument_type == null) || ($scope.CAMdocument_type == '') || ($scope.CAMdocument_type == undefined)) {
                $("#addCAMupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.CAMdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/EditCAMddocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#addCAMupload").val('');
                    unlockUI();
                    if (resp.data.status == true) {

                        $scope.CAMdocument_type = '';
                        $scope.showdiv = true;
                        $scope.hidediv = false;

                        var url = 'api/IdasMstSanction/Getcamdocmentadd';
                        SocketService.get(url).then(function (resp) {
                            $scope.CAMfilename_list = resp.data.UploadCOMDocumentList;
                        });
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert('File Format Not Supported!', {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                });
            }
        }
        $scope.uploadMOM_doc = function (val, val1, name) {
            if (($scope.MOMdocument_type == null) || ($scope.MOMdocument_type == '') || ($scope.MOMdocument_type == undefined))
            {
                $("#addMOMupload").val('');
                 Notify.alert('Kindly Enter the Document Title', 'warning');
           }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.MOMdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/EditMOMddocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    if (resp.data.status == true) {
                        $("#addMOMupload").val('');
                        unlockUI();
                        $scope.MOMdocument_type = '';
                        $scope.showdiv = true;
                        $scope.hidediv = false;

                        var url = 'api/IdasMstSanction/Getmomdocmentadd';
                        SocketService.get(url).then(function (resp) {
                            $scope.MOMfilename_list = resp.data.UploadMOMDocumentList;
                        });
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('File Format Not Supported!', {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                });
        }
    }
        //Upload Sanction Letter
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.SANdocument_type);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/IdasMstSanction/Uploadsanctionletter';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addSANupload").val('');
              
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.SANdocument_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    var url = 'api/IdasMstSanction/Getsanctionletter';
                    SocketService.get(url).then(function (resp) {
                        $scope.SANfilename_list = resp.data.UploadSANDocumentList;
                    });
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        $scope.downloadsCAM = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

        }

        $scope.downloadsMOM = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.downloadsanctionletter = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");

            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

   //Upload es_declaration available document
        $scope.uploades_declaration = function (val, val1, name) {
            if (($scope.es_declarationdocument_type == null) || ($scope.es_declarationdocument_type == '') || ($scope.es_declarationdocument_type == undefined)) {
                $("#adduploades_declaration").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.es_declarationdocument_type)
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;

                var url = 'api/IdasMstSanction/Uploades_declarationdocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    if (resp.data.status == true) {
                        $("#adduploades_declaration").val('');
                        unlockUI();
                        $scope.es_declarationdocument_type = '';

                        var url = 'api/IdasMstSanction/Getesdocument';
                        SocketService.get(url).then(function (resp) {
                            $scope.uploadesfilename_list = resp.data.UploadES_DocumentList;
                        });

                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                });
            }
        }

        $scope.esdownloaddocument = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        // Delete the Normal Document
        $scope.esdocument_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/uploadesdocumentadd_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.uploadesfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.uploadesfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

   //Upload Deviation Mail Document
        $scope.deviationmailupload = function (val, val1, name) {
            if (($scope.deviationmaildocument_type == null) || ($scope.deviationmaildocument_type == '') || ($scope.deviationmaildocument_type == undefined)) {
                $("#addmailupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.deviationmaildocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;

                var url = 'api/IdasMstSanction/Uploadmaildocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    if (resp.data.status == true) {
                        $("#addmailupload").val('');
                        unlockUI();
                        $scope.deviationmaildocument_type = '';
                        
                        var url = 'api/IdasMstSanction/GetMaildocument';
                        SocketService.get(url).then(function (resp) {
                            $scope.mailfilename_list = resp.data.DeviationMail_DocumentList;
                        });
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }

                });
            }
               
        }

        $scope.downloadmail = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.maildocument_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/Maildocumentadd_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.mailfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.mailfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
    }
})();

(function () {
    'use strict';
    angular
           .module('angle')
           .controller('idasMstDocLabelSummaryController', idasMstDocLabelSummaryController);

           idasMstDocLabelSummaryController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function idasMstDocLabelSummaryController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasMstDocLabelSummaryController';

        activate();
        lockUI();
        function activate() {
            $scope.totalDisplayed = 50;
            var url = 'api/IdasTrnDocumentUpload/DocumentLabelSummary';
          
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.label_list = resp.data.DocumentLabelList;
                // new code start   
                if ($scope.label_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
                else {
                    $scope.total = $scope.label_list.length;
                    if ($scope.label_list.length < 100) {
                        $scope.totalDisplayed = $scope.label_list.length;
                    }
                }
                // new code end
                // $scope.total=$scope.customer_data.length;
            });
        }
        

        $scope.createlabel = function () {
            var modalInstance = $modal.open({
                templateUrl: '/createDocumentLabelModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.documenttname = function (string) {
                    if (string.length > 128) {
                        $scope.message = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message = ""
                    }
                }
                var url = 'api/IdasTrnDocumentUpload/GetDepartmentList';
                SocketService.get(url).then(function (resp) {
                    $scope.department_list = resp.data.department_list;
                });
                
                $scope.documentlabelSubmit = function () {
                    var lsdepartment_name = '';
                    var lsdepartment_gid = '';
                    if ($scope.cbodepartment != undefined || $scope.cbodepartment != null) {
                        lsdepartment_name = $scope.cbodepartment.department_name;
                        lsdepartment_gid = $scope.cbodepartment.department_gid;
                    }

                    var params = {
                        documentlabel_name: $scope.document_label,
                        documentlabel_desc: $scope.label_description,
                        department_name: lsdepartment_name,
                        department_gid: lsdepartment_gid,
                    }
                    lockUI();
                    var url = "api/IdasTrnDocumentUpload/CreateDocumentLabel";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.editlabel = function (val) {
            var modalInstance = $modal.open({
                templateUrl: '/editDocumentLabelModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.documentretname = function (string1) {
                    if (string1.length > 128) {
                        $scope.message1 = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message1 = ""
                    }
                }
                var url = 'api/IdasTrnDocumentUpload/GetDepartmentList';
                SocketService.get(url).then(function (resp) {
                    $scope.department_list = resp.data.department_list;
                });
                var params = {
                    documentlabel_gid: val
                }
                var url = "api/IdasTrnDocumentUpload/GetDocumentLabel";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.editdocument_label = resp.data.documentlabel_name;
                    $scope.editlabel_description = resp.data.documentlabel_desc;
                
                    $scope.cbodepartment = resp.data.department_gid;
                });
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.update_documentlabel = function () {
                    lockUI();
                    var params = {
                        documentlabel_name: $scope.editdocument_label,
                        documentlabel_desc:$scope.editlabel_description,
                        documentlabel_gid: val,
                        department_name: $('#department_name :selected').text(),
                        department_gid: $scope.cbodepartment,
                    }
                    var url = "api/IdasTrnDocumentUpload/UpdateDocumentLabel";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            unlockUI();
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
            }
        }
        
         $scope.deletelabel = function (val) {
            var params = {
                documentlabel_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Document List ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasTrnDocumentUpload/DocumentLabelDelete";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }

        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.label_list != null) {

                if (pagecount < $scope.label_list.length) {
                    $scope.totalDisplayed += Number;
                    if ($scope.label_list.length < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.label_list.length;
                        Notify.alert(" Total Summary " + $scope.label_list.length + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.label_list.length + " Records Only", "warning");
                    return;
                }
                
            }
          
            unlockUI();
        };
       
      
       
    }

   
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasMstDocListController', IdasMstDocListController);

    IdasMstDocListController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams','DownloaddocumentService'];

    function IdasMstDocListController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams,DownloaddocumentService) {
        $scope.title = 'IdasMstDocListController';

        activate();

        function activate() {
            lockUI();
            $scope.totalDisplayed = 100;
            var url = "api/IdasMstDocList/GetDocumentList";
            SocketService.get(url).then(function (resp) {
               
                $scope.documentation_list = resp.data.IDASDocument;

                if ($scope.documentation_list != null){
                 $scope.total = $scope.documentation_list.length;
                }
                unlockUI();
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            if($scope.pagecount==null){
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#DCDCDC';  
            }
            else{
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#ffa';
            }
        };

        $scope.exportdocumentdata = function () {
            lockUI();
            var url = 'api/IdasMstDocList/ExportDocument';
            SocketService.get(url).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.lscloudpath, resp.data.lsname);
                    

                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");                 
                    // var relpath1 = relPath[1].replace("\\", "/");             
                    // var hosts = window.location.host;                  
                    // var prefix = location.protocol + "//";                 
                    // var str = prefix.concat(hosts, relpath1);              
                    // var link = document.createElement("a");               
                    // var name = resp.data.lsname.split('.');                 
                    // link.download = name[0];                 
                    // var uri = str; 
                    // link.href = uri;
                    // link.click();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'success')
                    activate();
                }

            });
        }

        $scope.addDocument = function (val) {
            var modalInstance = $modal.open({
                templateUrl: '/addDocumentModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {



                $scope.documentformSubmit = function () {

                    if ($scope.comments == undefined)
                    {
                        $scope.comments=""
                    }

                    var params = {
                        
                        document_name: $scope.documentListName,
                        display_order: $scope.display_order,
                        comments: $scope.comments
                       
                    }
                    lockUI();
                    var url = "api/IdasMstDocList/PostCreationDocList";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
            }
        }
        $scope.loadMore = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.editDocument=function(val)
        {
            var modalInstance = $modal.open({
                templateUrl: '/editDocumentModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    doclist_gid: val
                }
                var url = 'api/IdasMstDocList/GetEditDocList';
                SocketService.getparams(url, params).then(function (resp) {
                   
                    $scope.documentNameEdit = resp.data.document_name;
                    $scope.documentCodeEdit = resp.data.document_code;
                    $scope.commentsEdit = resp.data.comments;
                    $scope.displayOrderEdit = resp.data.display_order;
                });
                $scope.close = function () {
                    $modalInstance.close('closed');
                };

                $scope.documentformUpdate = function () {
                    lockUI();
                    var params = {
                        document_name: $scope.documentNameEdit,
                        comments: $scope.commentsEdit,
                        display_order:$scope.displayOrderEdit,
                        documentlist_gid: val
                    }
                    var url = "api/IdasMstDocList/PostUpdateDoc";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            unlockUI();
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
            }
        }
        $scope.deleteDocument = function (val) {
            var params = {
                doclist_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Document List ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasMstDocList/PostDocDelete";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }
        $scope.commondocumentupload = function (val, val1, name) {
            for (var i in $scope.documentname) {
            }
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/CommonDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $scope.txtdocument_title = '';
                $("#commonupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {

                        $scope.commondocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.uploadTemplate = function(val){
            $location.url('app/idasMstDocTemplate?documentlist_gid=' + val);
        }
        //$scope.commondocumentupload = function (val, val1, name) {

        //    alert('1');
           
        //    var item = {
        //        name: val[0].name,
        //        file: val[0]
        //    };
        //    var frm = new FormData();
        //    frm.append('fileupload', item.file);
        //    frm.append('file_name', item.name);
        //    //frm.append('document_name', $scope.documentname);
        //    frm.append('document_path', $scope.document_path);
        //    frm.append('doclist_gid', doclist_gid);
        //    frm.append('project_flag', "Default");
        //    $scope.uploadfrm = frm;
        //    var url = 'api/IdasMstDocList/CommonDocUpload';
        //    lockUI();
        //    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

        //        $scope.txtdocument_title = '';
        //        $("#commonupload").val('');
        //        if (resp.data.status == true) {
        //            unlockUI();
        //            Notify.alert('Document Uploaded Successfully..!!', 'success')

        //            //var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
        //            //var params = {
        //            //    sanction_gid: sanction_gid
        //            //};
        //            //SocketService.getparams(url, params).then(function (resp) {

        //            //    $scope.commondocument = resp.data.uploaddocument;

        //            //});
        //        }
        //        else {
        //            unlockUI();
        //            Notify.alert('File Format Not Supported!')

        //        }

        //    });

        //}
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstDocTemplateController', idasMstDocTemplateController);

        idasMstDocTemplateController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function idasMstDocTemplateController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {

        $scope.title = 'idasMstDocTemplateController';
        var vm = this;
        $scope.documentlist_gid = $location.search().documentlist_gid;
        activate();
       
        function activate() {
            var params = {
                doclist_gid: $scope.documentlist_gid
            }
            var url = 'api/IdasMstDocList/GetEditDocList';
            SocketService.getparams(url, params).then(function (resp) {
               
                $scope.documentNameEdit = resp.data.document_name;
                $scope.documentCodeEdit = resp.data.document_code;
                $scope.template_contentEdit = resp.data.template_content;
            });
        };

        $scope.updateTemplate = function () {
            if($scope.template_contentEdit == '' || $scope.template_contentEdit == null || $scope.template_contentEdit == undefined){
                Notify.alert('Kindly Enter Template Content', 'warning');
            }
            else{
                var params = {
                    template_content: $scope.template_contentEdit,
                    documentlist_gid: $scope.documentlist_gid
                }
                var url = 'api/IdasMstDocList/PostDocTemplate';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    unlockUI();
                    if (resp.data.status == true) {
                        $state.go('app.idasMstDocList');
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
    
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'Warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
    
                    }
                });
            }
        }

        $scope.back = function () {
            $state.go('app.idasMstDocList');

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstEditTemplateController', idasMstEditTemplateController);

    idasMstEditTemplateController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function idasMstEditTemplateController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {

        $scope.title = 'idasMstEditTemplateController';
        var vm = this;
        $scope.template_gid = $location.search().template_gid;
        activate();

        function activate() {

            
            var url = "api/idasMstTemplate/GetTemplateType";
            SocketService.get(url).then(function (resp) {
                $scope.cbotemplatetype_list = resp.data.templatetype_list;

            });

            lockUI();
            var url = "api/idasMstTemplate/GetTemplateDtl"
            var param = {
                template_gid: $scope.template_gid
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.template_name = resp.data.template_name;
                $scope.templatetype_gid = resp.data.templatetype_gid;
                $scope.templatetype_name = resp.data.templatetype_name;
                $scope.content = resp.data.template_content;
                
            });

        };
        $scope.titleOptions = {

            placeholderText: 'Add a Title',

            charCounterCount: false,

            toolbarInline: true,

            events: {

                'contentChanged': function (e, editor) {

                    console.log('content changed', $scope.titleOptions.froalaEditor.html.get());

                },

                'initialized': function (editor) {

                    console.log('initialized', this);

                }

            }

        };

        $scope.initialize = function (initControls) {

            $scope.initControls = initControls;

            $scope.deleteAll = function () {

                initControls.getEditor().html.set('34434');

            };

        };

        $scope.imgModel = { src: 'image.jpg' };

        $scope.buttonModel = { innerHTML: 'Click Me' };

        $scope.inputModel = { placeholder: 'I am an input!' };
        $scope.inputOptions = {

            angularIgnoreAttrs: ['class', 'ng-model', 'id', 'froala']

        }


        $scope.initializeLink = function (linkInitControls) {

            $scope.linkInitControls = linkInitControls;

        };

        $scope.linkModel = { href: 'https://www.froala.com/wysiwyg-editor' }
        $scope.updateTemplate = function () {

            var templatetype_name = $('#templatetype_name :selected').text();

            var params = {
                template_gid: $scope.template_gid,
                template_name: $scope.template_name,
                templatetype_name: templatetype_name,
                template_content: $scope.content

            }


            var url = 'api/idasMstTemplate/IdasUpdateTemplate';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $state.go('app.idasMstTemplateSummary');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }

        $scope.back = function () {
            $state.go('app.idasMstTemplateSummary');

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMsthistorysanctionrefno', idasMsthistorysanctionrefno);

    idasMsthistorysanctionrefno.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMsthistorysanctionrefno($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasMsthistorysanctionrefno';

        activate();

        function activate() {
            $scope.customer2sanction_gid = localStorage.getItem('customer2sanction_gid');
          
            lockUI();
           
            var url = 'api/IdasMstSanction/historysanctionref_no';
            var params = {
                customer2sanction_gid: $scope.customer2sanction_gid
            };
         
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.lblcustomer_name = resp.data.customer_name;
                $scope.lblcustomer_urn = resp.data.customer_urn;
                $scope.historySanctionDtlsEdit = resp.data.historySanctionDtlsEdit;
                console.log(resp.data.historySanctionDtlsEdit);

            });
           

        }
        $scope.back = function (relpath1)
        {
            $state.go('app.IdasMstSanctionReset');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanction', idasMstSanction);

    idasMstSanction.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMstSanction($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        var vm = this;
        vm.title = 'idasMstSanction';
        var vertical_gid;
        var vertical_code;

        activate();

        function activate() {
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.calenderEdit = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openEdit = true;
            };
            vm.dateOptionsEdit = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/customer/customer';
            SocketService.get(url).then(function (resp) {
                $scope.customer_list = resp.data.customer_list;
            });
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

            var url = 'api/loan/loan_list';
            SocketService.get(url).then(function (resp) {
                $scope.loan_list = resp.data.loanmasterdtls;
            });

        
        }
     
        $scope.onselectedchangecustomer = function (customer) {
            var params = {
                customer_gid: customer
            }
            var url = 'api/loan/customer_getheads';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.mdlheadsofcustomer = resp.data;
                $scope.zonalHead = resp.data.zonalGid;
                $scope.businessHead = resp.data.businessHeadGid;
                $scope.clustermanager = resp.data.clustermanagerGid;
                $scope.relationshipMgmt = resp.data.relationshipMgmtGid;
                $scope.creditmgmt_name = resp.data.creditmanager_gid;
                $scope.vertical_code = resp.data.vertical_code;
                vertical_gid = resp.data.vertical_gid;
                vertical_code = resp.data.vertical_code;
            });

        }

        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            $scope.txtSanctionAmount = output;
            //console.log(output);
        }

     
      
        $scope.sanctionSubmit = function () {
            var input = $scope.txtSanctionAmount;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {
                var str = input.replace(',', '');
                input = str;
            }
          
            var loan_title = $('#facility_type :selected').text();
            var customer_name = $('#customername :selected').text();
            var zonal_name = $('#zonal_name :selected').text();
            var businesshead_name = $('#businesshead_name :selected').text();
            var relationshipmgmt_name = $('#relationshipmgmt_name :selected').text();
            var cluster_manager_name = $('#cluster_manager_name :selected').text();
            var creditmgmt_name = $('#creditmanager_name :selected').text();
            var facility_type = $('#facility_type:selected').text();

            var params = {
                sanction_refno: $scope.sanctionrefno,
                sanction_amount: input,
                sanction_date: $scope.txtSanctionDate,
                customer_gid: $scope.customer,
                customername: customer_name,
                vertical_gid: vertical_gid,
                vertical_code: vertical_code,
                zonal_name: zonal_name,
                businesshead_name: businesshead_name,
                relationshipmgmt_name: relationshipmgmt_name,
                cluster_manager_name: cluster_manager_name,
                creditmanager_name: creditmgmt_name,
                zonalGid: $scope.zonalHead,
                businessHeadGid: $scope.businessHead,
                relationshipMgmtGid: $scope.relationshipMgmt,
                clustermanagerGid: $scope.clustermanager,
                creditmanagerGid: $scope.creditmgmt_name,
                facility_type: loan_title,
                facilitytype_gid: $scope.facility_type,
                collateral: $scope.collateral,
            }
            var url = 'api/IdasMstSanction/CreateSanction';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    Notify.alert(resp.data.message, 'success')
                    $state.go('app.idasMstSanctionSummary');

                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });

        }

        $scope.sanctionback = function (val) {
            $state.go('app.idasMstSanctionSummary');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanctionEdit', idasMstSanctionEdit);

    idasMstSanctionEdit.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasMstSanctionEdit($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */  var vm = this;
        vm.title = 'idasMstSanctionEdit';
        var sanction_gid;
        activate();

        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1  = relPath[1];
            $scope.uploaddclickdiv = true;
            $scope.uploadMOMclickdiv = true;
            $scope.bal_pnl = false;           
            $scope.warningfacility_amount = true;
            $scope.existing_customer = true;
            $scope.amount_validation = true;
            $scope.facility_pnl = false;
            $scope.addfacility_pnl = true;
            $scope.panel = true;
            $scope.panel1 = true;
            $scope.warningfacility_amount = true;
            $scope.amount_validation = true;
            $scope.interchangeabilityno = false;
            $scope.interchangeabilityyes = false;
            $scope.onchangefacility = false;
            $scope.colandingyes = false;
            $scope.sanction_validation = false;
            $scope.warningcbomember = true;
            $scope.warningcbofacility = true;
            $scope.mandatoryfields = false;
            $scope.validitymonth = false;
            vm.calenderEdit = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.openEdit = true;
            };
            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open2 = true;
            };
            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open3 = true;
            };
            vm.dateOptionsEdit = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            $scope.cboloanfacility_typeedit = [];
            $scope.cbocc_membersedit = [];
            var url = 'api/entity/Entity';
            SocketService.get(url).then(function (resp) {
                $scope.entity_list = resp.data.entity_list;
            });
            var url = 'api/loan/loan_list';
            SocketService.get(url).then(function (resp) {
                $scope.loan_list = resp.data.loanmasterdtls;
            });
            var url = 'api/IdasTrnLsaManagement/loanfacility';
            SocketService.get(url).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });
            var url = 'api/MstCCMember/Getccgroup';
            SocketService.get(url).then(function (resp) {
                $scope.ccgroup_list = resp.data.ccgroup_list;
            });
             sanction_gid=localStorage.getItem('sanction_gid');
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanctionDate;
                $scope.SanctionAmountEdit = resp.data.sanction_amount;
                $scope.FacilityTypeEdit = resp.data.facilitytype_gid;
                $scope.customerNameEdit = resp.data.customername;
                $scope.CustomerurnEdit = resp.data.customer_urn;
                $scope.collateralEdit = resp.data.collateral_security;
                $scope.zonalHeadNameEdit = resp.data.zonal_name;
                $scope.businessHeadNameEdit = resp.data.businesshead_name;
                $scope.clusterManagerEdit = resp.data.cluster_manager_name;
                $scope.creditManagerEdit = resp.data.creditmanager_name;
                $scope.relationshipmgmtEdit = resp.data.relationshipmgmt_name;
                $scope.verticalCodeEdit = resp.data.vertical;
                $scope.txtSanctionLimit = resp.data.sanction_limit;
                $scope.txtpurpose_lendingedit = resp.data.purpose_lending;
                $scope.rdbfacility_typeedit = resp.data.facility_secure_type;
                $scope.txtproduct_solutionedit = resp.data.product_solution;
                $scope.txtmajor_interventionedit = resp.data.major_intervention;
                $scope.txtprimaryvalue_chainedit = resp.data.primary_value_chain;
                $scope.txtsecondaryvalue_chainedit = resp.data.secondary_value_chain;
                $scope.customer2security_list = resp.data.customersecurity_list;
                $scope.filename_list = resp.data.UploadgeneralDocumentList;
                $scope.sanction_branch_gid = resp.data.sanction_branch_gid;
                $scope.sanction_branch_name = resp.data.sanction_branch_name;
                $scope.sanction_state_name = resp.data.sanction_state_name;
                $scope.sanction_state_gid = resp.data.sanction_state_gid;
                $scope.sanctionfilename_list = resp.data.UploadSANDocumentList;
                $scope.MOMfilename_list = resp.data.UploadMOMDocumentList;
                $scope.CAMfilename_list = resp.data.UploadCOMDocumentList;
                $scope.buyer_list = resp.data.buyer_list;
                $scope.rdb_bal = resp.data.status_ofBAL;
                $scope.txtvirtualaccount_no = resp.data.virtual_accountno;
                $scope.txtexternalratingedit = resp.data.external_rating;
                $scope.txtbusiness_descriptionedit = resp.data.business_description;
                $scope.txtassociate_nameedit = resp.data.associate_name;
                $scope.txtsapayoutedit = resp.data.sa_payout;
                $scope.txttypeof_enterprisesedit = resp.data.typeof_enterprise;
                $scope.txtrisk_categorizationedit = resp.data.risk_categorization;
                $scope.txtes_applicationedit = resp.data.es_application;
                $scope.txtesrisk_categorizationedit = resp.data.esrisk_categorization;
                //$scope.txtapplicability_categoryedit = resp.data.applicability_category;
                $scope.txtinternal_ratingedit = resp.data.internal_rating;
                $scope.rdb_psl = resp.data.status_ofPSL;
                $scope.msme_classification = resp.data.msme_classification;
                $scope.txtindustryedit = resp.data.industry;
                $scope.txtinvesment_pmedit = resp.data.invesment_pme;
                $scope.txtturn_overedit = resp.data.turn_over;
                $scope.txtregno_msmeedit = resp.data.regno_msme;
                $scope.txtvalidity_monthsedit = resp.data.validity_months;
                $scope.txtpenal_interestedit = resp.data.penal_interest;
                $scope.rdbdeclaration = resp.data.esdeclaration_status;
                $scope.uploadesfilename_list = resp.data.UploadES_DocumentList;
                $scope.mailfilename_list = resp.data.DeviationMail_DocumentList;
                if (resp.data.status_ofBAL == 'Yes')
                {
                    $scope.bal_pnl=true
                }
                else {
                    $scope.bal_pnl = false
                }
                if (resp.data.colanding_status == 'Yes') {
                    $scope.colandingyes = true
                }
                else {
                    $scope.colandingyes = false
                }
                if (resp.data.esdeclaration_status == 'Yes') {
                    $scope.esdeclarationyes = true
                    $scope.esdeclarationno = false
                }
                if(resp.data.esdeclaration_status == 'No') {
                    $scope.esdeclarationyes = false
                    $scope.esdeclarationno = true
                }
                $scope.cboapproved_byedit = resp.data.ccapprovedby_gid;
                $scope.cbocc_decisionedit = resp.data.ccdecision; 
                $scope.txtccfeedbackedit = resp.data.ccfeedback;
                $scope.txtgeneral_remarksedit = resp.data.general_remarks;
                $scope.mdlccmember = resp.data.mdlccmember;
                $scope.loanfacilitytype_list = resp.data.loanfacilitytype_list;
                console.log(resp.data.loanfacilitytype_list);
                if (resp.data.ccapprovedDate != '0001-01-01T00:00:00') {
                    $scope.txtapproveddateedit = resp.data.ccapprovedDate;
                }
                $scope.rdbsanction_type = resp.data.sanction_type;
               
                if (resp.data.sanction_type == 'Existing Customer')
                {
                    $scope.existing_customer = true;
                }
                else {
                    $scope.existing_customer = false;
                }
                $scope.cbonature_proposal = resp.data.natureof_proposal;
                $scope.rdbcolanding = resp.data.colanding_status;
                $scope.txtcolander_name = resp.data.colander_name;
                $scope.cboentity_type = resp.data.entity_gid;
                $scope.rdbpaycard = resp.data.paycard;
            });
            var url = 'api/IdasMstSanction/GetPenalInterest';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.penal_interest = resp.data.loanfacilitytype_list;

            });
            var url = 'api/customer/state';
            SocketService.get(url).then(function (resp) {
                $scope.state_list = resp.data.state_list;
            });
            var url = 'api/IdasTrnLsaManagement/branch';
            SocketService.get(url).then(function (resp) {
                $scope.branch_list = resp.data.branch_list;
            });
            var url = 'api/IdasMstSanction/tempdelete';
            SocketService.getparams(url, params).then(function (resp) {
            });
            unlockUI();
            var url = 'api/IdasMstSanction/editvalidation';
            SocketService.getparams(url, params).then(function (resp) {              
                if ((resp.data.totalloanfacility_amount == "0")||(resp.data.totalloanfacility_amount == '')) {                  
                    $scope.totalloanfacilityamount = "0,0";
                }
                else {
                    $scope.totalloanfacilityamount = resp.data.totalloanfacility_amount;
                }
                if ((resp.data.total_documentlimit == '') || (resp.data.total_documentlimit == "0")) {
                    $scope.totaldocumentlimitamount = "0,0";
                }
                else {
                    $scope.totaldocumentlimitamount = resp.data.total_documentlimit;
                }
                $scope.interchangeability_amount = resp.data.interchangeability_amount;               
            });          
        }
        // Numeric to Word - Indian Standard...//
        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';
            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }

        $scope.sanctionback = function (relpath1) {       
            $location.url('app/idasMstSanctionSummary?lstab='+relpath1);       
        }

        $scope.sanctiontype_existing=function()
        {
            $scope.existing_customer = true;
        }

        $scope.sanctiontype_new = function () {
            $scope.existing_customer = false;
        }
   
        $scope.interchangeability_yes = function () {
            $scope.interchangeabilityno = false;
            $scope.interchangeabilityyes = true;
            $scope.mandatoryfields = false;
        }
        $scope.interchangeability_no = function () {
            $scope.interchangeabilityno = true;
            $scope.interchangeabilityyes = false;
            $scope.mandatoryfields = false;
        }
        $scope.rdbcolanding_yes = function () {
            $scope.colandingyes = true;
        }
        $scope.rdbcolanding_no = function () {
            $scope.colandingyes = false;
        }
        $scope.rdbdeclaration_yes = function () {
            $scope.esdeclarationyes = true;
            $scope.esdeclarationno = false;
        }
        $scope.rdbdeclaration_no = function () {
            $scope.esdeclarationyes = false;
            $scope.esdeclarationno = true;
        }
        //Sanction Amount
        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.SanctionAmountEdit = "";
            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.SanctionAmountEdit = output;
            }         
        }
    //Sanction Update Event
        $scope.sanctionUpdate = function (relpath1) {
       var lssanctionamount=parseInt($scope.SanctionAmountEdit.replace(/[\s,]+/g, '').trim());
       var lsloanamount = parseInt($scope.totalloanfacilityamount.replace(/[\s,]+/g, '').trim());
       var lsinterchangeability_amount = parseInt($scope.interchangeability_amount.replace(/[\s,]+/g, '').trim());
       if ($scope.rdbsanction_type == 'Existing Customer')
       {
           if ($scope.cbonature_proposal == '' || $scope.cbonature_proposal == null)
           {
               Notify.alert('Kindly Select Nature of Proposal','warning');
           }
           else {
                if (lssanctionamount < (lsloanamount + lsinterchangeability_amount)) {

                   Notify.alert('Loan Facility Amount is exceeded from Sanction Amount', 'warning')
               }
               else {

                   var url = 'api/IdasMstSanction/editmandatory_check';
                   var params = {
                       sanction_gid: sanction_gid,
                       esdeclaration_status: $scope.rdbdeclaration,
                   };
                   SocketService.getparams(url, params).then(function (resp) {
                       if (resp.data.status == true) {
                            if ($scope.verticalCodeEdit == 'FPO') {
                               if (($scope.rdbpaycard == "") || ($scope.rdbpaycard == undefined)) {
                                   Notify.alert("Kindly Select Paycard value");
                               }
                               else
                               {
                               var input = $scope.SanctionAmountEdit;
                               var arr = input.split(',');
                               var i;
                               for (i = 0; i < arr.length; i++) {
                                   var str = input.replace(',', '');
                                   input = str;
                               }

                               var facility_type = $('#FacilityType_Edit :selected').text();
                               var branch_name = $('#branch_name :selected').text();
                               var state_name = $('#state_name :selected').text();
                               var ccapproved_by = $('#ccgroup_name :selected').text();
                               var params = {
                                   sanction_refno: $scope.sanctionrefnoEdit,
                                   sanction_amount: input,
                                   sanction_date: $scope.SanctionDateEdit,
                                   facility_type: facility_type,
                                   facilitytype_gid: $scope.FacilityTypeEdit,
                                   collateral_security: $scope.collateralEdit,
                                   vertical: $scope.verticalCodeEdit,
                                   customer2sanction_gid: sanction_gid,
                                   purpose_lending: $scope.txtpurpose_lendingedit,
                                   facility_secure_type: $scope.rdbfacility_typeedit,
                                   product_solution: $scope.txtproduct_solutionedit,
                                   major_intervention: $scope.txtmajor_interventionedit,
                                   primary_value_chain: $scope.txtprimaryvalue_chainedit,
                                   secondary_value_chain: $scope.txtsecondaryvalue_chainedit,
                                   sanction_branch_name: branch_name,
                                   sanction_state_name: state_name,
                                   sanction_branch_gid: $scope.sanction_branch_gid,
                                   sanction_state_gid: $scope.sanction_state_gid,
                                   virtual_accountno: $scope.txtvirtualaccount_no,
                                   status_ofBAL: $scope.rdb_bal,
                                   ccmember_listedit: $scope.cbocc_membersedit,
                                   ccapprovedby_gid: $scope.cboapproved_byedit,
                                   ccapproved_by: ccapproved_by,
                                   ccapproved_date: $scope.txtapproveddateedit,
                                   ccdecision: $scope.cbocc_decisionedit,
                                   ccfeedback: $scope.txtccfeedbackedit,
                                   general_remarks: $scope.txtgeneral_remarksedit,
                                   colanding_status: $scope.rdbcolanding,
                                   colander_name: $scope.txtcolander_name,
                                   sanction_type: $scope.rdbsanction_type,
                                   natureof_proposal: $scope.cbonature_proposal,
                                   entity: $scope.cboentity_type,
                                   external_rating: $scope.txtexternalratingedit,
                                   business_description: $scope.txtbusiness_descriptionedit,
                                   associate_name: $scope.txtassociate_nameedit,
                                   sa_payout: $scope.txtsapayoutedit,
                                   typeof_enterprise: $scope.txttypeof_enterprisesedit,
                                   risk_categorization: $scope.txtrisk_categorizationedit,
                                   es_application: $scope.txtes_applicationedit,
                                   esrisk_categorization: $scope.txtesrisk_categorizationedit,
                                   //applicability_category: $scope.txtapplicability_categoryedit,
                                   internal_rating: $scope.txtinternal_ratingedit,
                                   status_ofPSL: $scope.rdb_psl,
                                   msme_classification: $scope.msme_classification,
                                   industry: $scope.txtindustryedit,
                                   invesment_pme: $scope.txtinvesment_pmedit,
                                   turn_over: $scope.txtturn_overedit,
                                   regno_msme: $scope.txtregno_msmeedit,
                                   validity_months: $scope.txtvalidity_monthsedit,
                                   penal_interest: $scope.txtpenal_interestedit,
                                   paycard: $scope.rdbpaycard
                               }
                               console.log(ccapproved_by);
                               var url = 'api/IdasMstSanction/UpdateSanction';
                               lockUI();
                               SocketService.post(url, params).then(function (resp) {
                                   if (resp.data.status == true) {
                                       unlockUI();

                                       Notify.alert(resp.data.message, 'success')
                                       $location.url('app/idasMstSanctionSummary?lstab=' + relpath1);

                                   }
                                   else {
                                       unlockUI();
                                       Notify.alert(resp.data.message)
                                   }
                                   activate();
                               });
                           }
                           }
                           else {
                              
                               var input = $scope.SanctionAmountEdit;
                               var arr = input.split(',');
                               var i;
                               for (i = 0; i < arr.length; i++) {
                                   var str = input.replace(',', '');
                                   input = str;
                               }

                               var facility_type = $('#FacilityType_Edit :selected').text();
                               var branch_name = $('#branch_name :selected').text();
                               var state_name = $('#state_name :selected').text();
                               var ccapproved_by = $('#ccgroup_name :selected').text();
                               var params = {
                                   sanction_refno: $scope.sanctionrefnoEdit,
                                   sanction_amount: input,
                                   sanction_date: $scope.SanctionDateEdit,
                                   facility_type: facility_type,
                                   facilitytype_gid: $scope.FacilityTypeEdit,
                                   collateral_security: $scope.collateralEdit,
                                   vertical: $scope.verticalCodeEdit,
                                   customer2sanction_gid: sanction_gid,
                                   purpose_lending: $scope.txtpurpose_lendingedit,
                                   facility_secure_type: $scope.rdbfacility_typeedit,
                                   product_solution: $scope.txtproduct_solutionedit,
                                   major_intervention: $scope.txtmajor_interventionedit,
                                   primary_value_chain: $scope.txtprimaryvalue_chainedit,
                                   secondary_value_chain: $scope.txtsecondaryvalue_chainedit,
                                   sanction_branch_name: branch_name,
                                   sanction_state_name: state_name,
                                   sanction_branch_gid: $scope.sanction_branch_gid,
                                   sanction_state_gid: $scope.sanction_state_gid,
                                   virtual_accountno: $scope.txtvirtualaccount_no,
                                   status_ofBAL: $scope.rdb_bal,
                                   ccmember_listedit: $scope.cbocc_membersedit,
                                   ccapprovedby_gid: $scope.cboapproved_byedit,
                                   ccapproved_by:ccapproved_by,
                                   ccapproved_date: $scope.txtapproveddateedit,
                                   ccdecision: $scope.cbocc_decisionedit,
                                   ccfeedback: $scope.txtccfeedbackedit,
                                   general_remarks: $scope.txtgeneral_remarksedit,
                                   colanding_status: $scope.rdbcolanding,
                                   colander_name: $scope.txtcolander_name,
                                   sanction_type: $scope.rdbsanction_type,
                                   natureof_proposal: $scope.cbonature_proposal,
                                   entity: $scope.cboentity_type,
                                   external_rating: $scope.txtexternalratingedit,
                                   business_description: $scope.txtbusiness_descriptionedit,
                                   associate_name: $scope.txtassociate_nameedit,
                                   sa_payout: $scope.txtsapayoutedit,
                                   typeof_enterprise: $scope.txttypeof_enterprisesedit,
                                   risk_categorization: $scope.txtrisk_categorizationedit,
                                   es_application: $scope.txtes_applicationedit,
                                   esrisk_categorization: $scope.txtesrisk_categorizationedit,
                                   //applicability_category: $scope.txtapplicability_categoryedit,
                                   internal_rating: $scope.txtinternal_ratingedit,
                                   status_ofPSL: $scope.rdb_psl,
                                   msme_classification: $scope.msme_classification,
                                   industry: $scope.txtindustryedit,
                                   invesment_pme: $scope.txtinvesment_pmedit,
                                   turn_over: $scope.txtturn_overedit,
                                   regno_msme: $scope.txtregno_msmeedit,
                                   validity_months: $scope.txtvalidity_monthsedit,
                                   penal_interest: $scope.txtpenal_interestedit,
                                   paycard: $scope.rdbpaycard,
                                   esdeclaration_status: $scope.rdbdeclaration,
                               }
                                console.log(ccapproved_by)
                               var url = 'api/IdasMstSanction/UpdateSanction';
                               lockUI();
                               SocketService.post(url, params).then(function (resp) {
                                   if (resp.data.status == true) {
                                       unlockUI();

                                       Notify.alert(resp.data.message, 'success')
                                       $location.url('app/idasMstSanctionSummary?lstab=' + relpath1);

                                   }
                                   else {
                                       unlockUI();
                                       Notify.alert(resp.data.message)
                                   }
                                   activate();
                               });
                           }
                          
                       }
                       else {

                           Notify.alert(resp.data.message, 'warning')
                       }
                   });
               }
           }
       }
       else
           {
       if (lssanctionamount<(lsloanamount+lsinterchangeability_amount))
            {
                
                Notify.alert('Loan Facility Amount is exceeded from Sanction Amount', 'warning')
            }
            else
            {

                var url = 'api/IdasMstSanction/editmandatory_check';
                var params = {
                    sanction_gid: sanction_gid,
                    esdeclaration_status: $scope.rdbdeclaration,
                };
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        if ($scope.verticalCodeEdit == 'FPO') {
                            if (($scope.rdbpaycard == "") || ($scope.rdbpaycard == undefined)) {
                                Notify.alert("Kindly Select Paycard value");
                            }
                            else {


                                var input = $scope.SanctionAmountEdit;
                                var arr = input.split(',');
                                var i;
                                for (i = 0; i < arr.length; i++) {
                                    var str = input.replace(',', '');
                                    input = str;
                                }

                                var facility_type = $('#FacilityType_Edit :selected').text();
                                var branch_name = $('#branch_name :selected').text();
                                var state_name = $('#state_name :selected').text();
                                var ccapproved_by = $('#ccgroup_name :selected').text();
                                var params = {
                                    sanction_refno: $scope.sanctionrefnoEdit,
                                    sanction_amount: input,
                                    sanction_date: $scope.SanctionDateEdit,
                                    facility_type: facility_type,
                                    facilitytype_gid: $scope.FacilityTypeEdit,
                                    collateral_security: $scope.collateralEdit,
                                    vertical: $scope.verticalCodeEdit,
                                    customer2sanction_gid: sanction_gid,
                                    purpose_lending: $scope.txtpurpose_lendingedit,
                                    facility_secure_type: $scope.rdbfacility_typeedit,
                                    product_solution: $scope.txtproduct_solutionedit,
                                    major_intervention: $scope.txtmajor_interventionedit,
                                    primary_value_chain: $scope.txtprimaryvalue_chainedit,
                                    secondary_value_chain: $scope.txtsecondaryvalue_chainedit,
                                    sanction_branch_name: branch_name,
                                    sanction_state_name: state_name,
                                    sanction_branch_gid: $scope.sanction_branch_gid,
                                    sanction_state_gid: $scope.sanction_state_gid,
                                    virtual_accountno: $scope.txtvirtualaccount_no,
                                    status_ofBAL: $scope.rdb_bal,
                                    ccmember_listedit: $scope.cbocc_membersedit,
                                    ccapprovedby_gid: $scope.cboapproved_byedit,
                                    ccapproved_date: $scope.txtapproveddateedit,
                                    ccdecision: $scope.cbocc_decisionedit,
                                    ccfeedback: $scope.txtccfeedbackedit,
                                    general_remarks: $scope.txtgeneral_remarksedit,
                                    colanding_status: $scope.rdbcolanding,
                                    colander_name: $scope.txtcolander_name,
                                    sanction_type: $scope.rdbsanction_type,
                                    natureof_proposal: $scope.cbonature_proposal,
                                    entity: $scope.cboentity_type,
                                    external_rating: $scope.txtexternalratingedit,
                                    business_description: $scope.txtbusiness_descriptionedit,
                                    associate_name: $scope.txtassociate_nameedit,
                                    sa_payout: $scope.txtsapayoutedit,
                                    typeof_enterprise: $scope.txttypeof_enterprisesedit,
                                    risk_categorization: $scope.txtrisk_categorizationedit,
                                    es_application: $scope.txtes_applicationedit,
                                    esrisk_categorization: $scope.txtesrisk_categorizationedit,
                                    //applicability_category: $scope.txtapplicability_categoryedit,
                                    internal_rating: $scope.txtinternal_ratingedit,
                                    status_ofPSL: $scope.rdb_psl,
                                    msme_classification: $scope.msme_classification,
                                    industry: $scope.txtindustryedit,
                                    invesment_pme: $scope.txtinvesment_pmedit,
                                    turn_over: $scope.txtturn_overedit,
                                    regno_msme: $scope.txtregno_msmeedit,
                                    validity_months: $scope.txtvalidity_monthsedit,
                                    penal_interest: $scope.txtpenal_interestedit,
                                    paycard: $scope.rdbpaycard,
                                    esdeclaration_status: $scope.rdbdeclaration,
                                    ccapproved_by:ccapproved_by
                                }
                                console.log(ccapproved_by)
                                var url = 'api/IdasMstSanction/UpdateSanction';
                                lockUI();
                                SocketService.post(url, params).then(function (resp) {
                                    if (resp.data.status == true) {
                                        unlockUI();

                                        Notify.alert(resp.data.message, 'success')
                                        $location.url('app/idasMstSanctionSummary?lstab=' + relpath1);

                                    }
                                    else {
                                        unlockUI();
                                        Notify.alert(resp.data.message)
                                    }
                                    activate();
                                });
                            }
                        }
                            else {

                           
                            var input = $scope.SanctionAmountEdit;
                            var arr = input.split(',');
                            var i;
                            for (i = 0; i < arr.length; i++) {
                                var str = input.replace(',', '');
                                input = str;
                            }

                            var facility_type = $('#FacilityType_Edit :selected').text();
                            var branch_name = $('#branch_name :selected').text();
                            var state_name = $('#state_name :selected').text();
                            var ccapproved_by = $('#ccgroup_name :selected').text();
                            var params = {
                                sanction_refno: $scope.sanctionrefnoEdit,
                                sanction_amount: input,
                                sanction_date: $scope.SanctionDateEdit,
                                facility_type: facility_type,
                                facilitytype_gid: $scope.FacilityTypeEdit,
                                collateral_security: $scope.collateralEdit,
                                vertical: $scope.verticalCodeEdit,
                                customer2sanction_gid: sanction_gid,
                                purpose_lending: $scope.txtpurpose_lendingedit,
                                facility_secure_type: $scope.rdbfacility_typeedit,
                                product_solution: $scope.txtproduct_solutionedit,
                                major_intervention: $scope.txtmajor_interventionedit,
                                primary_value_chain: $scope.txtprimaryvalue_chainedit,
                                secondary_value_chain: $scope.txtsecondaryvalue_chainedit,
                                sanction_branch_name: branch_name,
                                sanction_state_name: state_name,
                                sanction_branch_gid: $scope.sanction_branch_gid,
                                sanction_state_gid: $scope.sanction_state_gid,
                                virtual_accountno: $scope.txtvirtualaccount_no,
                                status_ofBAL: $scope.rdb_bal,
                                ccmember_listedit: $scope.cbocc_membersedit,
                                ccapprovedby_gid: $scope.cboapproved_byedit,
                                ccapproved_date: $scope.txtapproveddateedit,
                                ccdecision: $scope.cbocc_decisionedit,
                                ccfeedback: $scope.txtccfeedbackedit,
                                general_remarks: $scope.txtgeneral_remarksedit,
                                colanding_status: $scope.rdbcolanding,
                                colander_name: $scope.txtcolander_name,
                                sanction_type: $scope.rdbsanction_type,
                                natureof_proposal: $scope.cbonature_proposal,
                                entity: $scope.cboentity_type,
                                external_rating: $scope.txtexternalratingedit,
                                business_description: $scope.txtbusiness_descriptionedit,
                                associate_name: $scope.txtassociate_nameedit,
                                sa_payout: $scope.txtsapayoutedit,
                                typeof_enterprise: $scope.txttypeof_enterprisesedit,
                                risk_categorization: $scope.txtrisk_categorizationedit,
                                es_application: $scope.txtes_applicationedit,
                                esrisk_categorization: $scope.txtesrisk_categorizationedit,
                                //applicability_category: $scope.txtapplicability_categoryedit,
                                internal_rating: $scope.txtinternal_ratingedit,
                                status_ofPSL: $scope.rdb_psl,
                                msme_classification: $scope.msme_classification,
                                industry: $scope.txtindustryedit,
                                invesment_pme: $scope.txtinvesment_pmedit,
                                turn_over: $scope.txtturn_overedit,
                                regno_msme: $scope.txtregno_msmeedit,
                                validity_months: $scope.txtvalidity_monthsedit,
                                penal_interest: $scope.txtpenal_interestedit,
                                paycard: $scope.rdbpaycard,
                                esdeclaration_status: $scope.rdbdeclaration,
                                ccapproved_by:ccapproved_by
                            }
                            console.log(ccapproved_by)
                            var url = 'api/IdasMstSanction/UpdateSanction';
                            lockUI();
                            SocketService.post(url, params).then(function (resp) {
                                if (resp.data.status == true) {
                                    unlockUI();

                                    Notify.alert(resp.data.message, 'success')
                                    $location.url('app/idasMstSanctionSummary?lstab=' + relpath1);

                                }
                                else {
                                    unlockUI();
                                    Notify.alert(resp.data.message)
                                }
                                activate();
                            });
                        }
                    
                    }
                    else {

                        Notify.alert(resp.data.message, 'warning')
                    }
                });
            }
       }
        }
      
        //Upload General Document
        $scope.upload = function (val, val1, name) {
            if (($scope.document_type == null) || ($scope.document_type == '') || ($scope.document_type == undefined)) {
                $("#addupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }

                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.document_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/Editgeneraldocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    $("#addupload").val('');
                    if (resp.data.status == true) {
                        unlockUI();
                        $scope.document_type = '';
                        $scope.showdiv = true;
                        $scope.hidediv = false;
                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                    generaldocument();
                });
            }
        }
        //Delete CAM Document
        $scope.deleteCAM = function (val, data) {
            var params = { document_gid: val };
            var url = 'api/IdasMstSanction/camdoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.CAMfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.CAMfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

        //Delete MOM Document
        $scope.deleteMOM = function (val, data) {
            var params = { document_gid: val };         
            var url = 'api/IdasMstSanction/momdoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.MOMfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.MOMfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

        // Delete the sanction letter
        $scope.sandocument_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/sanctionletter_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.sanctionfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.sanctionfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

      $scope.document_cancelclick = function (val, data) {
            var params = { document_gid: val };
            var url = 'api/IdasMstSanction/documentdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
       
        function generaldocument() {
            var params = {
                sanction_gid: sanction_gid
            };      
            var url = 'api/IdasMstSanction/Getgeneraldocment';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;
            });
        }     
        $scope.uploadclick = function () {
            $scope.uploadddiv = true;
            $scope.uploaddclickdiv = false;
        }

        $scope.cancelupload = function () {
            $scope.uploadddiv = false;
            $scope.uploaddclickdiv = true;
            $("#addupload").val('');
        }
        $scope.uploadclickMOM = function () {
            $scope.uploadMOMdiv = true;
            $scope.uploadMOMclickdiv = false;
        }

        $scope.cancelMOMupload = function () {
            $scope.uploadMOMdiv = false;
            $scope.uploadMOMclickdiv = true;
            $("#addupload").val('');
        }
        $scope.uploadCAM_doc = function (val, val1, name) {
            if (($scope.CAMdocument_type == null) || ($scope.CAMdocument_type == '') || ($scope.CAMdocument_type == undefined)) {
                $("#addCAMupload").val('');
                 Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.CAMdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/EditCAMddocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#addCAMupload").val('');
                 
                    if (resp.data.status == true) {
                        $scope.CAMdocument_type = '';
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        camdocument();
                    }
                    else {
                        unlockUI();
                        Notify.alert('File Format Not Supported!', {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                });
            }
        }
        $scope.uploadMOM_doc = function (val, val1, name) {
            if (($scope.MOMdocument_type == null) || ($scope.MOMdocument_type == '') || ($scope.MOMdocument_type == undefined)) {
                $("#addMOMupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.MOMdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/EditMOMddocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#addMOMupload").val('');
                    $scope.MOMfilename_list = resp.data.UploadMOMDocumentList;

                    unlockUI();

                    if (resp.data.status == true) {
                        $scope.MOMdocument_type = '';
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        momdocument();
                    }
                    else {
                        Notify.alert('File Format Not Supported!', {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                });
            }
        }     
        function camdocument() {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/Getcamdocment';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.CAMfilename_list = resp.data.UploadDocumentList;               
            });
        }
        function momdocument() {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/Getmomdocment';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.MOMfilename_list = resp.data.UploadMOMDocumentList;
            });
        }

        //Upload Sanction Letter
        $scope.sanupload = function (val, val1, name) {
            if (($scope.SANdocument_type == null) || ($scope.SANdocument_type == '') || ($scope.SANdocument_type == undefined)) {
                $("#addSANupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.SANdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/Uploadsanctionletter';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    if (resp.data.status == true) {
                        $("#addSANupload").val('');
                        unlockUI();
                        $scope.SANdocument_type = '';
                        $scope.showdiv = true;
                        $scope.hidediv = false;
                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                    sandocument();
                });
            }
        }
        function sandocument() {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/GetEditsanctionletter';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionfilename_list = resp.data.UploadSANDocumentList;
            });
        }

        $scope.downloadsCAM = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.downloadsMOM = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }
        $scope.downloadsanctionletter = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.downloadsgeneral = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.addbuyer = function () {
            var modalInstance = $modal.open({
                templateUrl: '/addbuyer.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.txtbuyer_exposure = 0;

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.uploadBAL_doc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
               }
                $scope.submit_buyer = function () {
                    var url = 'api/IdasMstSanction/postBALdocument';
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {                      
                            var params = {
                                buyer_name: $scope.txtbuyer_name,
                                buyer_exposure: $scope.txtbuyer_exposure
                            }                      
                            var url = 'api/IdasMstSanction/PostBuyerInfo';
                            lockUI();
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    buyer_list();
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                            });
                       
                        $modalInstance.close('closed');
                    });
                }
            }
        }
        function buyer_list() {
            var url = 'api/IdasMstSanction/GetBuyerinfoEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url,params).then(function (resp) {
                $scope.buyer_list = resp.data.buyer_list;
            });
        }
        $scope.rdbbal_yes = function () {
            $scope.bal_pnl = true;
        }
        $scope.rdbbal_no = function () {
            $scope.bal_pnl = false;
        }
        $scope.downloadsBAL = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.delete_buyer = function (val, data) {
            var params = { buyer_gid: val };
            var url = 'api/IdasMstSanction/buyerdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.buyer_list, function (value, key) {
                        if (value.buyer_gid == val) {
                            $scope.buyer_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
        $scope.ccmember_add = function () {
            if (!$scope.cbocc_members) {
                $scope.warningcbomember = false;
            }
            else {
                $scope.warningcbomember = true;
                var params =
                    {
                        ccmember_gid: $scope.cbocc_members.ccmember_gid,
                        ccmember_name: $scope.cbocc_members.CCMember_name,
                        ccmember_remarks: $scope.txtccmember_remarks,
                        ccgroup_name: $scope.cboccgroup_name.ccgroup_name,
                        sanction_gid: sanction_gid
                    }
                var url = 'api/IdasMstSanction/updateccmembers';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        $scope.txtccmember_remarks = '';
                        $scope.cbocc_members = '';
                        Notify.alert(resp.data.message, 'success')
                        ccmember_list();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, 'warning')
                    }
                });
            }
        }
        function ccmember_list() {
            var url = 'api/IdasMstSanction/Editccmember';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.mdlccmember = resp.data.mdlccmember;
            });
        }
        $scope.deleteccmember = function (ccmemberlist_gid) {
            var params =
                {
                    ccmemberlist_gid: ccmemberlist_gid
                }
            var url = 'api/IdasMstSanction/deleteccmember';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')
                    ccmember_list();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }
            });
        }
        $scope.onselectedchangeccgroup = function () {
            var params = {
                ccgroupname_gid: $scope.cboccgroup_name.ccgroupname_gid
            }
            var url = 'api/MstCCMember/Getccgroup2member';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.ccmember_list = resp.data.ccmember_list;               
            });
        }
        $scope.addloanfacilitytype = function () {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/editvalidation';
            SocketService.getparams(url, params).then(function (resp) {             
                if (resp.data.totalloanfacility_amount == '') {
                    $scope.totalloanfacilityamount = "0,0";
                }
                else {
                    $scope.totalloanfacilit_amount = resp.data.totalloanfacility_amount;
                }
                if (resp.data.total_documentlimit == '') {
                    $scope.totaldocumentlimit_amount = "0,0";
                }
                else {
                    $scope.totaldocumentlimit_amount = resp.data.total_documentlimit;
                }
            });
            if ($scope.SanctionAmountEdit == undefined) {
                $scope.facility_pnl = false;
                $scope.addfacility_pnl = true;
                $scope.sanction_validation = true;
            }
            else {
                $scope.facility_pnl = true;
                $scope.addfacility_pnl = false;
            }          
        }

        $scope.changevaliditymnt = function (txtvalidity_monthsedit) {
            if ($scope.txtvalidity_monthsedit == undefined) {
                $scope.validitymonth = true;
            }
            else {
                $scope.validitymonth = false;
            }
        }

        $scope.loanfacilitytype_add = function () {
            if (!$scope.cboloanfacility_typeedit) {
                $scope.warningcbofacility = false;
            }
            else {
                $scope.warningcbofacility = true;
                if (!$scope.txtloanfacility_amount) {
                    $scope.warningfacility_amount = false;
                }
                else {
                    $scope.warningcbofacility = true;
                    $scope.warningfacility_amount = true;
                    var params =
                        {
                            loanfacility_gid: $scope.cboloanfacility_typeedit.loanmaster_gid,
                            loanfacility_type: $scope.cboloanfacility_typeedit.loanTitle,
                            loanfacility_amount: $scope.txtloanfacility_amount,
                            sanction_amount: $scope.SanctionAmountEdit,
                            totalloanfacility_amount: $scope.totalloanfacilityamount,
                            total_documentlimit: $scope.totaldocumentlimit_amount
                        }
                    var url = 'api/IdasMstSanction/postloanfacilitytype';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            $scope.cbofacility_type = '';
                            $scope.txtloanfacility_amount = '';
                            Notify.alert(resp.data.message, 'success')
                            loanfacilitytype_list();
                            var params = {
                                sanction_gid: sanction_gid
                            };
                            var url = 'api/IdasMstSanction/editvalidation';
                            SocketService.getparams(url, params).then(function (resp) {                              
                                if (resp.data.totalloanfacility_amount == '') {
                                    $scope.totalloanfacility_amount = "0,0";
                                }
                                else {
                                    $scope.totalloanfacility_amount = resp.data.totalloanfacility_amount;
                                }
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, 'warning')
                        }
                    });
                }
            }
        }
        $scope.onchangemandaotory = function () {
            $scope.mandatoryfields = false;
        }
        $scope.deleteloanfacility = function (sanction2loanfacilitytype_gid) {
            var params =
                {
                    sanction2loanfacilitytype_gid: sanction2loanfacilitytype_gid
                }

            var url = 'api/IdasMstSanction/deleteloanfacilitytype';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    var url = 'api/IdasMstSanction/editvalidation';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.totalloanfacility_amount == '') {
                            $scope.totalloanfacilityamount = "0,0";
                        }
                        else {
                            $scope.totalloanfacilityamount = resp.data.totalloanfacility_amount;
                        }
                        if (resp.data.total_documentlimit == '') {
                           $scope.totaldocumentlimitamount = "0,0";
                        }
                        else {
                            $scope.totaldocumentlimitamount = resp.data.total_documentlimit;
                        }
                        $scope.interchangeability_amount = resp.data.interchangeability_amount;
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }
                loanfacilitytype_list();
            });
        }
        function loanfacilitytype_list() {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/GetPenalInterest';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.penal_interest = resp.data.loanfacilitytype_list;

            });
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/EditLoanfacilitytype';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loanfacilitytype_list = resp.data.loanfacilitytype_list;
                

            });
            //Facility Type Drop Down
            var url = 'api/IdasTrnLsaManagement/loanfacility';
            SocketService.get(url).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
        }
     
        $scope.addloanfacility = function () {          
            if (($scope.txtloanfacility_amount == undefined) || ($scope.loanmaster_gid == undefined) || ($scope.txtdocument_limit == undefined) || ($scope.rdbrevolving == undefined) || ($scope.txtexpiry_date == undefined) || ($scope.rdbinterchangeability == undefined) || ($scope.rdbrevolving == "") || ($scope.rdbinterchangeability == "") || ($scope.txtexpiry_date == "") || ($scope.txtloanfacility_amount == "") || ($scope.txtdocument_limit == "") || ($scope.txtproposed_roi == undefined) || ($scope.txtproposed_roi == "")) {
                $scope.mandatoryfields = true;
            }
            else {
                $scope.mandatoryfields = false;
                if ($scope.rdbinterchangeability == 'No') {
                    if (($scope.cboapplicable_condition == undefined)|| ($scope.cboapplicable_condition == "")) {
                        $scope.mandatoryfields = true;
                    }
                    else {
                        $scope.mandatoryfields = false;
                        var params =
                                {
                                    loanfacility_gid: $scope.loanmaster_gid.loanmaster_gid,
                                    loanfacility_type: $scope.loanmaster_gid.loan_title,
                                    loanfacility_amount: $scope.txtloanfacility_amount,
                                    sanction_amount: $scope.SanctionAmountEdit,
                                    totalloanfacility_amount: $scope.totalloanfacilityamount,
                                    margin: $scope.txtmargin,
                                    document_limit: $scope.txtdocument_limit,
                                    tenure: $scope.txttenure,
                                    revolving_type: $scope.rdbrevolving,
                                    expiry_date: $scope.txtexpiry_date,
                                    interchangeability: $scope.rdbinterchangeability,
                                    report_structure: $scope.$parent.cboreport_structure,
                                    total_documentlimit: $scope.totaldocumentlimitamount,
                                    customer2sanction_gid: sanction_gid,
                                    applicable_condition: $scope.cboapplicable_condition,
                                    proposed_roi: $scope.txtproposed_roi
                                }
                         var url = 'api/IdasMstSanction/updateloanfacilitytype';
                        lockUI();
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                unlockUI();
                                $scope.loanmaster_gid.loanmaster_gid = '';
                                $scope.loanmaster_gid.loan_title = '';
                                $scope.txtloanfacility_amount = '';
                                $scope.txtproposed_roi = '';
                                $scope.totalloanfacility_amount = '';
                                $scope.txtmargin = '';
                                $scope.txtdocument_limit = '';
                                $scope.txttenure = '';
                                $scope.rdbrevolving = '';
                                $scope.txtexpiry_date = '';
                                $scope.rdbinterchangeability = '';
                                $scope.$parent.cboreport_structure = '';
                                var params = {
                                    sanction_gid: sanction_gid
                                };
                                var url = 'api/IdasMstSanction/editvalidation';
                                SocketService.getparams(url, params).then(function (resp) {
                                     if (resp.data.totalloanfacility_amount == '') {
                                        $scope.totalloanfacilityamount = "0,0";
                                    }
                                    else {
                                        $scope.totalloanfacilityamount = resp.data.totalloanfacility_amount;
                                    }
                                    if (resp.data.total_documentlimit == '') {
                                        $scope.totaldocumentlimitamount = "0,0";
                                    }
                                    else {
                                        $scope.totaldocumentlimitamount = resp.data.total_documentlimit;
                                    }
                                    $scope.interchangeability_amount = resp.data.interchangeability_amount;
                                   });
                            }
                            else {
                                unlockUI();
                                Notify.alert(resp.data.message, 'warning')
                            }
                            loanfacilitytype_list();
                            $scope.facility_pnl = false;
                            $scope.addfacility_pnl = true;
                        });
                    }
                }
                else {
                    if (($scope.cboreport_structure == undefined) || ($scope.cboreport_structure == "")) {
                        $scope.mandatoryfields = true;
                    }
                    else {
                        $scope.mandatoryfields = false;
                        var params =
                                {
                                    loanfacility_gid: $scope.loanmaster_gid.loanmaster_gid,
                                    loanfacility_type: $scope.loanmaster_gid.loan_title,
                                    loanfacility_amount: $scope.txtloanfacility_amount,
                                    sanction_amount: $scope.SanctionAmountEdit,
                                    totalloanfacility_amount: $scope.totalloanfacilityamount,
                                    margin: $scope.txtmargin,
                                    document_limit: $scope.txtdocument_limit,
                                    tenure: $scope.txttenure,
                                    revolving_type: $scope.rdbrevolving,
                                    expiry_date: $scope.txtexpiry_date,
                                    interchangeability: $scope.rdbinterchangeability,
                                    report_structure: $scope.$parent.cboreport_structure,
                                    total_documentlimit: $scope.totaldocumentlimitamount,
                                    customer2sanction_gid: sanction_gid,
                                    applicable_condition: $scope.cboapplicable_condition,
                                    proposed_roi: $scope.txtproposed_roi
                                }
                        var url = 'api/IdasMstSanction/updateloanfacilitytype';
                        lockUI();
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                unlockUI();
                                $scope.loanmaster_gid.loanmaster_gid = '';
                                $scope.loanmaster_gid.loan_title = '';
                                $scope.txtloanfacility_amount = '';
                                $scope.txtproposed_roi = '';
                                $scope.totalloanfacility_amount = '';
                                $scope.txtmargin = '';
                                $scope.txtdocument_limit = '';
                                $scope.txttenure = '';
                                $scope.rdbrevolving = '';
                                $scope.txtexpiry_date = '';
                                $scope.rdbinterchangeability = '';
                                $scope.$parent.cboreport_structure = '';
                                var params = {
                                    sanction_gid: sanction_gid
                                };
                                var url = 'api/IdasMstSanction/editvalidation';
                                SocketService.getparams(url, params).then(function (resp) {
                                    if (resp.data.totalloanfacility_amount == '') {
                                        $scope.totalloanfacilityamount = "0,0";
                                    }
                                    else {
                                        $scope.totalloanfacilityamount = resp.data.totalloanfacility_amount;
                                    }
                                    if (resp.data.total_documentlimit == '') {

                                        $scope.totaldocumentlimitamount = "0,0";
                                    }
                                    else {
                                        $scope.totaldocumentlimitamount = resp.data.total_documentlimit;
                                    }
                                    $scope.interchangeability_amount = resp.data.interchangeability_amount;
                                    });
                            }

                            else {
                                unlockUI();
                                Notify.alert(resp.data.message, 'warning')
                            }
                            loanfacilitytype_list();
                            $scope.facility_pnl = false;
                            $scope.addfacility_pnl = true;
                        });
                    }
                }
            }
        }
       
        $scope.loanfacilitycancel = function () {
            $scope.facility_pnl = false;
            $scope.addfacility_pnl = true;
            $scope.loanmaster_gid.loanmaster_gid = '';
            $scope.loanmaster_gid.loan_title = '';
            $scope.txtloanfacility_amount = '';
            $scope.totalloanfacility_amount = '';
            $scope.txtmargin = '';
            $scope.txtdocument_limit = '';
            $scope.txttenure = '';
            $scope.rdbrevolving = '';
            $scope.txtexpiry_date = '';
            $scope.rdbinterchangeability = '';
            $scope.$parent.cboreport_structure = '';
        }
        $scope.cbofacility_msg = function () {
            $scope.warningcbofacility = true;

        }
        $scope.cbomember_msg = function () {
            $scope.warningcbomember = true;
        }
        $scope.facilitytype_amount = function () {
            var input = document.getElementById('txtInputloanfacility_type').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            var lsloanfacilityamount_words = inWords(str);
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtloanfacility_amount = "";
            }
            else {
                $scope.txtloanfacility_amount = output;
                $scope.warningfacility_amount = true;
                document.getElementById('loanfacilityamount_words').innerHTML = lsloanfacilityamount_words;
                if (($scope.SanctionAmountEdit.replace(/[\s,]+/g, '').trim() - $scope.totalloanfacilityamount.replace(/[\s,]+/g, '').trim()) >= ($scope.txtloanfacility_amount.replace(/[\s,]+/g, '').trim())) {
                    $scope.amount_validation = true;
                }
                else {
                    $scope.amount_validation = false;
                }
            }
            $scope.mandatoryfields = false;
        }
        $scope.documentlimitchange = function () {
            var input = document.getElementById('txtInput1').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lswords_documentlimit = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdocument_limit = "";

            }
            else {
                document.getElementById('documentlimitamount_words').innerHTML = lswords_documentlimit;
                $scope.txtdocument_limit = amount;

                if ((($scope.SanctionAmountEdit.replace(/[\s,]+/g, '').trim()) - ($scope.totaldocumentlimitamount.replace(/[\s,]+/g, '').trim())) < ($scope.txtdocument_limit.replace(/[\s,]+/g, '').trim())) {
                    $scope.panel1 = false;
                }
                else {
                    $scope.panel1 = true;
                }
            }
            $scope.mandatoryfields = false;
        }

        //ROI update event
        $scope.btnupdate = function (sanction2loanfacilitytype_gid, loanfacilityref_no, loanfacility_type) {
            var modalInstance = $modal.open({
                templateUrl: '/updateROI.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.loanfacility_type = loanfacility_type;
                $scope.loanfacilityref_no = loanfacilityref_no;

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.UrnUpdate = function () {

                    var params = {
                        sanction2loanfacilitytype_gid: sanction2loanfacilitytype_gid,
                        proposed_roi: $scope.txtroi
                    }

                    lockUI();
                    var url = 'api/IdasMstSanction/UpdateProposedROI';
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            loanfacilitytype_list();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            loanfacilitytype_list();
                        }
                        loanfacilitytype_list();
                    });
                }
            }
        }

        //Upload es_declaration available document
        $scope.uploades_declaration = function (val, val1, name) {
            if (($scope.es_declarationdocument_type == null) || ($scope.es_declarationdocument_type == '') || ($scope.es_declarationdocument_type == undefined)) {
                $("#adduploades_declaration").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.es_declarationdocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/Uploades_declarationdocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    if (resp.data.status == true) {
                        $("#adduploades_declaration").val('');
                        unlockUI();
                        $scope.es_declarationdocument_type = '';

                        var url = 'api/IdasMstSanction/Getesdocument';
                        SocketService.get(url).then(function (resp) {
                            $scope.uploadesfilename_list = resp.data.UploadES_DocumentList;
                        });

                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                });
            }
        }

        $scope.esdownloaddocument = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        // Delete the Normal Document
        $scope.esdocument_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/uploadesdocument_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.uploadesfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.uploadesfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }


        //Upload Deviation Mail Document
        $scope.deviationmailupload = function (val, val1, name) {
            if (($scope.deviationmaildocument_type == null) || ($scope.deviationmaildocument_type == '') || ($scope.deviationmaildocument_type == undefined)) {
                $("#addmailupload").val('');
                Notify.alert('Kindly Enter the Document Title', 'warning');
            }
            else {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_type', $scope.deviationmaildocument_type);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/Uploadmaildocument';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    if (resp.data.status == true) {
                        $("#addmailupload").val('');
                        unlockUI();
                        var url = 'api/IdasMstSanction/GetMaildocument';
                        SocketService.get(url).then(function (resp) {
                            $scope.mailfilename_list = resp.data.DeviationMail_DocumentList;
                        });
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }

                });
            }
            
        }

        $scope.downloadmail = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.maildocument_cancelclick = function (val, data) {
            var params = { document_gid: val };

            var url = 'api/IdasMstSanction/Maildocument_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.mailfilename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.mailfilename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanctionLetterGenerationController', idasMstSanctionLetterGenerationController);

    idasMstSanctionLetterGenerationController.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', '$sce', 'DownloaddocumentService','cmnfunctionService'];

    function idasMstSanctionLetterGenerationController($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, $sce, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */  var vm = this;
        vm.title = 'idasMstSanctionLetterGenerationController';
        var sanction_gid = $location.search().sanction_gid;
        activate();

        function activate() {
            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
          
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanctionDate;
                $scope.sanction_date = resp.data.sanction_date;
                $scope.SanctionAmountEdit = resp.data.sanction_amount;
                $scope.customerNameEdit = resp.data.customername;
            });
               
            var url = 'api/IdasMstSanction/GetTemplate_list';
            SocketService.get(url).then(function (resp) {
                $scope.template_list = resp.data.template_list;
            });
            var url = 'api/IdasMstSanction/GetTemplateDetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionletter_status = resp.data.sanctionletter_status;
                $scope.template_name = resp.data.template_name;
                $scope.content = resp.data.template_content;
                $scope.sanctionletter_flag = resp.data.sanctionletter_flag;
                $scope.checkerpushback_remarks = resp.data.checkerpushback_remarks;
                unlockUI();
                if(resp.data.sanctionletter_status == 'Generated')
                {
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                }
                else {
                    $scope.sanction_template = false;
                    $scope.sanction_template_bind = false;
                }
            });

            var url = 'api/IdasMstSanction/SanctionLetterSummary';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctiontocheckerlist = resp.data.sanctiondetails;
            });

            var url = 'api/IdasMstSanction/SanctionDocumentList';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.uploaddocument = resp.data.UploadDocumentList;
            });
        }

        $scope.sanctionback = function (relpath1) {
            $location.url('app/idasMstSanctionSummary?lstab=' + relpath1);
        }

        // Template Updation
        $scope.sanctiontemplatesubmit = function () {
            lockUI();

            if ($scope.cbotemplate.template_name == 'Sanction - Simplified Norms Single Facility') {
                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/SanctionContent';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }

            else if ($scope.cbotemplate.template_name == 'Sanction - Simplified Norms 2 Facility') {

                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/Sanction2Facility';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }

            else if ($scope.cbotemplate.template_name == 'Sanction - Multiple Facility') {

                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/SanctionMultipleFacility';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }

            else if ($scope.cbotemplate.template_name == 'Sanction - Interchangability') {

                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/SanctionContent';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }

            else if ($scope.cbotemplate.template_name == 'Sanction - DBS Colending') {

                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/DBSColending';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }

            else if ($scope.cbotemplate.template_name == 'Sanction - Stand by line of credit') {

                var param = {
                    sanction_gid: sanction_gid,
                    template_gid: $scope.cbotemplate.template_gid,
                    template_name: $scope.cbotemplate.template_name,
                    lstab: $scope.relpath1,
                };
                var url = 'api/IdasMstSanction/SanctionContent';
                SocketService.post(url, param).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    unlockUI();
                    $scope.sanction_template = true;
                    $scope.sanction_template_bind = true;
                    $scope.template_name = resp.data.template_name
                });

            }
            else {
                Notify.alert("Error occurred", 'warning');
            }
            $scope.cancel = function () {
                $scope.sanction_template = false;
                $scope.sanction_template_bind = false;
            }
        }

        // Sanction Letter Submit Event
        $scope.sanctionletterSubmit = function () {
            lockUI();
            var param = {
                sanction_gid: sanction_gid,
                template_content: $scope.content
            };
            var url = 'api/IdasMstSanction/SanctionLetterSubmit';
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate();
                    $location.hash('sanctionlettertopview');
                    $anchorScroll();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        // Sanction Letter View
        $scope.sanctionletterview = function (relpath1) {
            $location.url('app/idasMstSanctionLetterWordView?sanction_gid=' +sanction_gid +'&lstab=' + relpath1);
        }

        // Sanction Letter Moved to Checker
        $scope.proceedtochecker = function () {
            lockUI();
            var param = {
                sanction_gid: sanction_gid,
                template_content: $scope.content
            };
            var url = 'api/IdasMstSanction/PostProceedToChecker';
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        // Sanction Letter View
        $scope.sanctiontocheckerview = function (sanctionapprovallog_gid, customer2sanction_gid, relpath1) {
            $location.url('app/idasMstSanctionLetterWordView?sanctionapprovallog_gid=' + sanctionapprovallog_gid + '&sanction_gid=' + customer2sanction_gid + '&lstab=' + relpath1);
        }
        // Upload Document
        $scope.uploadattachment = function () {
            var fi = document.getElementById('file');
            if (fi.files.length > 0) {
                var frm = new FormData();
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                }
                frm.append('sanction_gid', sanction_gid);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasMstSanction/SanctionDocAttachment';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#file").val('');
                    if (resp.data.status == true) {
                        var params = {
                            sanction_gid: sanction_gid
                        };
                        var url = 'api/IdasMstSanction/SanctionDocumentList';
                        SocketService.getparams(url, params).then(function (resp) {
                            $scope.uploaddocument = resp.data.UploadDocumentList;
                        });
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        unlockUI();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }

                });
            }
            else {
                alert('Please select a file.')
            }
        }
        // Download Document
        $scope.downloads = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }
        // Delete Document
        $scope.UploadDocCancel = function (sanctiondoc_gid) {
            var params = {
                sanctiondoc_gid: sanctiondoc_gid,
                sanction_gid: sanction_gid
            }
            var url = 'api/IdasMstSanction/SanctionDocumentDelete';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
               
                if (resp.data.status == true) {
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    var url = 'api/IdasMstSanction/SanctionDocumentList';
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.uploaddocument = resp.data.UploadDocumentList;
                    });

                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

        $scope.titleOptions = {
            placeholderText: 'Add a Title',
            charCounterCount: false,
            toolbarInline: true,
            events: {
                'contentChanged': function (e, editor) {
                    console.log('content changed', $scope.titleOptions.froalaEditor.html.get());
                },
                'initialized': function (editor) {
                    console.log('initialized', this);
                }
            }
        };
        $scope.initialize = function (initControls) {
            $scope.initControls = initControls;
            $scope.deleteAll = function () {
                initControls.getEditor().html.set('34434');
            };
        };
        $scope.imgModel = { src: 'image.jpg' };
        $scope.buttonModel = { innerHTML: 'Click Me' };
        $scope.inputModel = { placeholder: 'I am an input!' };
        $scope.inputOptions = {
            angularIgnoreAttrs: ['class', 'ng-model', 'id', 'froala']
        }
        $scope.initializeLink = function (linkInitControls) {
            $scope.linkInitControls = linkInitControls;
        };
        $scope.linkModel = { href: 'https://www.froala.com/wysiwyg-editor' }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanctionLetterWordView', idasMstSanctionLetterWordView);

    idasMstSanctionLetterWordView.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$sce', '$anchorScroll', 'DownloaddocumentService'];

    function idasMstSanctionLetterWordView($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $sce, $anchorScroll, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasMstSanctionLetterWordView';
        var sanction_gid = $location.search().sanction_gid;
        var sanctionapprovallog_gid = $location.search().sanctionapprovallog_gid;
        var lspage = $location.search().lspage;

        activate();

        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            if ($scope.relpath1 == 'completed') {
                $scope.approvalicon = false;
            }
            else {
                $scope.approvalicon = true;
            }

            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanction_refno = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanctionDate;
                $scope.sanction_date = resp.data.sanction_date;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
            });

            var url = 'api/IdasMstSanction/SanctionDocumentList';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.uploaddocument = resp.data.UploadDocumentList;
            });

            $scope.trustAsHtml = function (string) { return $sce.trustAsHtml(string); };

            if (sanctionapprovallog_gid == '' || sanctionapprovallog_gid == undefined || sanctionapprovallog_gid == null) {
                $scope.templatelogdetails = false;
                $scope.templatedetails = true;
                var params = {
                    sanction_gid: sanction_gid
                };
                lockUI();
                var url = 'api/IdasMstSanction/GetTemplateDetails';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.lspath = resp.data.makerfile_path;
                    $scope.lsname = resp.data.makerfile_name;
                    $scope.content = resp.data.template_content;
                    $scope.checkerletter_flag = resp.data.checkerletter_flag;
                    $scope.checkerapproval_flag = resp.data.checkerapproval_flag;
                    $scope.sanctionletter_flag = resp.data.sanctionletter_flag;
                    $scope.sanctionletter_status = resp.data.sanctionletter_status;
                    $scope.digitalsignature_flag = resp.data.digitalsignature_flag;
                    $scope.checkerupdated_by = resp.data.checkerupdated_by;
                    $scope.checkerupdated_on = resp.data.checkerupdated_on;
                    $scope.makersubmitted_by = resp.data.makersubmitted_by;
                    $scope.makersubmitted_on = resp.data.makersubmitted_on;
                    unlockUI();
                });
            }
            else {
                $scope.templatelogdetails = true;
                $scope.templatedetails = false;
                var params = {
                    sanctionapprovallog_gid: sanctionapprovallog_gid,
                    sanction_gid: sanction_gid
                };
                lockUI();
                var url = 'api/IdasMstSanction/GetTemplateLogDetails';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.content = resp.data.template_content;
                    $scope.sanction_status = resp.data.sanction_status;
                    $scope.makersubmitted_by = resp.data.makersubmitted_by;
                    $scope.makersubmitted_on = resp.data.makersubmitted_on;
                    unlockUI();
                });
            }
        }

        $scope.downloaddocument = function (val1, val2) {
           
                DownloaddocumentService.Downloaddocument(val1, val2);
            
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }

        $scope.sanctionlogdocdownload = function () {
            var params = {
                sanctionapprovallog_gid: sanctionapprovallog_gid,
                sanction_gid: sanction_gid
            };
            lockUI();
            var url = 'api/IdasMstSanction/SanctionLetterLogDownload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    var phyPath = resp.data.lspath;
                var filename1 = resp.data;
                var phyPath = phyPath.replace("\\", "/");
                var phyPath = phyPath.replace("//", "/");
                var relPath = phyPath.split("EMS/");
                var relpath1 = relPath[1].replace("\\", "/");
                var url1 = filename1;
                var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
               var url = 'api/azurestorage/FileUploadDocument';
                var params = {
                    file_path : relpath1
                }
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(val1, val2);
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                    //var phyPath = resp.data.lspath;
                    //var relPath = phyPath.split("EMS");
                    //var relpath1 = relPath[1].replace("\\", "/");
                    //var hosts = window.location.host;
                    //var prefix = location.protocol + "//";
                    //var str = prefix.concat(hosts, relpath1);
                    //var link = document.createElement("a");
                    //var name = resp.data.lsname.split(".")
                    //link.download = resp.data.lsname;
                    //var uri = str;
                    //link.href = uri;
                    //link.click();
                    DownloaddocumentService.Downloaddocument(val1, val2);
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                    activate();
                }
            });
        }

        $scope.Back = function (relpath1) {
            if (lspage == 'checkersummary') {
                $state.go('app.MstCheckerSummary');
            }
            else if (lspage == 'checkerapprovalsummary') {
                $state.go('app.MstCheckerApprovalSummary');
            }
            else {
                $location.url('app/idasMstSanctionLetterGeneration?sanction_gid=' + sanction_gid + '&lstab=' + relpath1);
            }
        }

        $scope.proceedtocheckerapproval = function () {
            lockUI();
            var param = {
                sanction_gid: sanction_gid,
            };
            var url = 'api/IdasMstSanction/PostProceedToApproval';
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    $state.go('app.MstCheckerSummary');
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        // Pushback the sanction to maker 
        $scope.pushbacktomaker = function () {
            var modalInstance = $modal.open({
                templateUrl: '/pushbacksanctionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md',
                backdrop: 'static',
                keyboard: false,
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                
                $scope.PushbackSanctionSubmit = function () {
                    var param = {
                        sanction_gid: sanction_gid,
                        pushback_remarks: $scope.pushback_remarks
                    };
                    var url = 'api/IdasMstSanction/PusbackToMaker';
                    SocketService.post(url, param).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            $state.go('app.MstCheckerSummary');
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                        }
                    });
                }

                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.checkerapprove = function () {
            lockUI();
            var param = {
                sanction_gid: sanction_gid,
                sanction_status: 'Approved'
            };
            var url = 'api/IdasMstSanction/UpdateCheckerApproval';
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    $state.go('app.MstCheckerApprovalSummary');
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        // Sanction Reject 
        $scope.checkerreject = function () {
            var modalInstance = $modal.open({
                templateUrl: '/rejectsanctionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md',
                backdrop: 'static',
                keyboard: false,
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.RejectSanctionSubmit = function () {
                    var param = {
                        sanction_gid: sanction_gid,
                        reject_remarks: $scope.reject_remarks,
                        sanction_status: 'Rejected'
                    };
                    var url = 'api/IdasMstSanction/UpdateCheckerApproval';
                    SocketService.post(url, param).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            $state.go('app.MstCheckerApprovalSummary');
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                        }
                    });
                }

                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.insert_signature = function () {
            lockUI();
            var param = {
                sanction_gid: sanction_gid,
            };
            var url = 'api/IdasMstSanction/PostDigitalSignature';
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        $scope.download_signature = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }
        // Download Document
        $scope.downloads = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanctioneset', idasMstSanctioneset);

    idasMstSanctioneset.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMstSanctioneset($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasMstSanctioneset';

        activate();

        function activate() {


            $scope.tab = {};
            lockUI();
            var url = "api/IdasMstSanction/GetSanctionsummary";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.sanctionlist = resp.data.sanctiondetails;
               
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "completed") {
                    $scope.tabcompleted = true;
                }

            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'completed') {
                    $scope.tabcompleted = true;
                }

            }

        }
       
        $scope.history = function (customer2sanction_gid) {
            localStorage.setItem('customer2sanction_gid', customer2sanction_gid);
          $state.go('app.IdasMstHistorySanctionRefNo');


        }
      
       
        $scope.sanction_cancel = function (customer2sanction_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/cancelsanction.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var url = 'api/entity/Entity';

                SocketService.get(url).then(function (resp) {
                    $scope.entity_list = resp.data.entity_list;

                });
                var params = {
                    sanction_gid: customer2sanction_gid
                }

                var url = 'api/IdasMstSanction/GetSanctioninfo';
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.lblcustomername = resp.data.customername;
                    $scope.lblsanction_refno = resp.data.sanction_refno;
                    $scope.lblcustomer_urn = resp.data.customer_urn;
                    $scope.lblsanction_date = resp.data.sanction_date;
                    $scope.lblsanction_amount = resp.data.sanction_amount;
                    $scope.cboentity_type = resp.data.entity_gid;

                    $scope.rdbcolanding = resp.data.colanding_status;
                    $scope.txtcolander_name = resp.data.colander_name;
                    if (resp.data.colanding_status == 'Yes') {
                        $scope.colandingyes = true;
                    }
                });
                $scope.default = true;
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.rdbcolanding_yes = function () {
                    $scope.colandingyes = true;
                    $scope.mandatoryremarks = false;
                }
                $scope.rdbcolanding_no = function () {
                    $scope.colandingyes = false;
                    $scope.mandatoryremarks = false;
                }
                $scope.remarks = function () {
                    $scope.mandatoryremarks = false;
                }
                $scope.reset = function () {
                    if (($scope.txtremarks == "") || ($scope.txtremarks == undefined)) {
                        $scope.mandatoryremarks = true;
                    }
                    else {
                        $scope.mandatoryremarks = false;

                        var params = {
                            customer2sanction_gid: customer2sanction_gid,
                            general_remarks: $scope.txtremarks,
                            colanding_status: $scope.rdbcolanding,
                            colander_name: $scope.txtcolander_name,
                            entity_gid: $scope.cboentity_type,

                        }
                        console.log(params)
                        var url = 'api/IdasMstSanction/Sanction_cancel';
                        lockUI();
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                activate();

                            }
                            else {
                                $modalInstance.close('closed');

                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });


                            }
                        });
                    }
                }
            }

        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstSanctionSummary', idasMstSanctionSummary);

    idasMstSanctionSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMstSanctionSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasMstSanctionSummary';

        activate();

        function activate() {

            $scope.totalDisplayedpending = 100;
            $scope.totalDisplayedapproved = 100;
            $scope.tab = {};
            lockUI();
            var url = "api/IdasMstSanction/PendingSanctionDtl";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.sanctionlist = resp.data.sanctiondetails;
                 $scope.pending_count = resp.data.pending_count;
                $scope.completed_count = resp.data.completed_count;
                $scope.pendingCount = $scope.sanctionlist.length;
              });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "completed") {
                    $scope.tabcompleted = true;
                }
              
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'completed') {
                    $scope.tabcompleted = true;
                }
               
            }
            if(relpath1=='completed')
            {
                $scope.totalDisplayedcompleted = 100;
                lockUI();
                var url = "api/IdasMstSanction/CompletedSanctionDtl";
                SocketService.get(url).then(function (resp) {

                    $scope.completed_sanctiondetails = resp.data.completed_sanctiondetails;
                    $scope.pending_count = resp.data.pending_count;
                    $scope.completed_count = resp.data.completed_count;

                    $scope.completedCount = $scope.completed_sanctiondetails.length;
                });
                unlockUI();
            }
        }
        $scope.completed=function()
        {
            $scope.totalDisplayedcompleted = 100;
            lockUI();
            var url = "api/IdasMstSanction/CompletedSanctionDtl";
            SocketService.get(url).then(function (resp) {
              
                $scope.completed_sanctiondetails = resp.data.completed_sanctiondetails;
                $scope.pending_count = resp.data.pending_count;
                $scope.completed_count = resp.data.completed_count;

                $scope.completedCount = $scope.completed_sanctiondetails.length;
            });
            unlockUI();
        }
        $scope.pending = function () {
            lockUI();
            var url = "api/IdasMstSanction/PendingSanctionDtl";
            SocketService.get(url).then(function (resp) {
                $scope.sanctionlist = resp.data.sanctiondetails;
                $scope.pending_count = resp.data.pending_count;
                $scope.completed_count = resp.data.completed_count;
                $scope.pendingCount = $scope.sanctionlist.length;
            
            });
            unlockUI();
        }
        $scope.createSanction = function () {

            $state.go('app.idasMstCreateSanction');
        }
      
        $scope.EditSanction_completed = function (sanction_gid) {
            localStorage.setItem('sanction_gid', sanction_gid);
            
            $location.url('app/idasMstSanctionEdit?lstab=completed');
           
        }

        $scope.EditSanction_pending = function (sanction_gid) {
            localStorage.setItem('sanction_gid', sanction_gid);
          
            $location.url('app/idasMstSanctionEdit?lstab=pending');

        }

        $scope.editgenerate = function (sanction_gid) {
            $location.url('app/idasMstSanctionLetterGeneration?sanction_gid=' + sanction_gid + '&lstab=pending');
        }
        $scope.generate = function (sanction_gid) {
            $location.url('app/idasMstSanctionLetterGeneration?sanction_gid=' + sanction_gid + '&lstab=completed');
        }

        $scope.loadMorepending = function (pagecountpending) {
            lockUI();
            var Number = parseInt(pagecountpending);

            $scope.totalDisplayedpending += Number;
            unlockUI();
        };
        $scope.loadMorecompleted = function (pagecountcompleted) {
            lockUI();
            var Number = parseInt(pagecountcompleted);

            $scope.totalDisplayedcompleted += Number;
            unlockUI();
        };
      
        $scope.WordGenerate = function (customer2sanction_gid) {
            var params = {
                sanction_gid: customer2sanction_gid
            };
            var url = 'api/IdasMstSanction/GetWordGenerate';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var phyPath = resp.data.lspath;
                var filename1 = resp.data;
                var phyPath = phyPath.replace("\\", "/");
                var phyPath = phyPath.replace("//", "/");
                var relPath = phyPath.split("EMS/");
                var relpath1 = relPath[1].replace("\\", "/");
                var url1 = filename1;
                var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
               var url = 'api/azurestorage/FileUploadDocument';
                var params = {
                    file_path : relpath1
                }
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(relpath1, filename);
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Downloading !', 'warning')
                    activate();

                }
            });
        }
 
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstsecurityAdd', idasMstsecurityAdd);

    idasMstsecurityAdd.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMstsecurityAdd($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        var vm = this;
        vm.title = 'idasMstsecurityAdd';
        var sanction_gid;
        activate();

        function activate() {
            $scope.lsacreate_gid = localStorage.getItem('lsacreate_gid');
        
         
            vm.mytime = new Date();
            vm.hstep = 1;
            vm.mstep = 15;
            vm.ismeridian = false;
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;

            }
           

            var url = 'api/security/getSecuritytype';
            SocketService.get(url).then(function (resp) {
                $scope.security_data = resp.data.securitytype_list;
                console.log(resp.data.securitytype_list);
            });
            $scope.borrower = true;
            $scope.guarantor = true;
            $scope.insurance = true;
            $scope.bank_guarantee = true;
            $scope.fixed_deposits = true;
            $scope.personal_guarantee = true;
            $scope.corporate_guarantee = true;
        }

        $scope.sanctionback = function () {
            $state.go('app.lsaManagementadd');
        }

        $scope.show_additional = function () {
            var str = $('#security_type :selected').text();
           
            if ( str.match(/UDC From Borrower/g) == 'UDC From Borrower') {
                $scope.borrower = false;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            
          else  if (str.match(/UDC From Guarantor/g) == 'UDC From Guarantor') {             
                $scope.guarantor = false;
                $scope.borrower = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           
           else if (str.match(/Personal Guarantee/g) == 'Personal Guarantee') {
                $scope.personal_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.corporate_guarantee = true;
            }
            
            else if (str.match(/Corporate Guarantee/g) == 'Corporate Guarantee') {
                $scope.corporate_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
            }
            else if (str.match(/Bank Guarantee/g) == 'Bank Guarantee') {
                $scope.bank_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           
            else if (str.match(/Fixed Deposits/g) == 'Fixed Deposits') {
                $scope.fixed_deposits = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           else if (str.match(/Assignment of Insurance Policy/g) == 'Assignment of Insurance Policy') {
                $scope.insurance = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else {
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
        }
        $scope.security_submit=function(lsacreate_gid)
        {
            var security_type = $('#security_type :selected').text();
         
            if (security_type.match(/Fixed Deposits/g) == 'Fixed Deposits')
            {
                //Fixed Deposits
                var fd_expiry_date = new Date();
                fd_expiry_date.setFullYear($scope.txtfd_expiry_date.getFullYear());
                fd_expiry_date.setMonth($scope.txtfd_expiry_date.getMonth());
                fd_expiry_date.setDate($scope.txtfd_expiry_date.getDate());
            }
            else {
                fd_expiry_date = null;
            }
            if (security_type.match(/Bank Guarantee/g) == 'Bank Guarantee') {
                ////Bank Guarantee
             
                var bankguarantee_expirydate = new Date();
                bankguarantee_expirydate.setFullYear($scope.txtbankguarantee_expirydate.getFullYear());
                bankguarantee_expirydate.setMonth($scope.txtbankguarantee_expirydate.getMonth());
                bankguarantee_expirydate.setDate($scope.txtbankguarantee_expirydate.getDate());
                
            }
            else
            {
                bankguarantee_expirydate = null;
            }
            if (security_type.match(/Assignment of Insurance Policy/g) == 'Assignment of Insurance Policy') {

                ////Insurance Policy
                var policy_expiry_date = new Date();
                policy_expiry_date.setFullYear($scope.txtpolicy_expiry_date.getFullYear());
                policy_expiry_date.setMonth($scope.txtpolicy_expiry_date.getMonth());
                policy_expiry_date.setDate($scope.txtpolicy_expiry_date.getDate());
            }
            else {
                policy_expiry_date = null;
            }
            var params = {
                security_type:security_type,
                securitytype_gid: $scope.cbosecurity_type,
                account_status: $scope.account_status,
                borrowercheque_no: $scope.txtborrowercheque_no,
                borrowertbank_name: $scope.txtborrowertbank_name,
                borroweraccount_no: $scope.txtborroweraccount_no,
                borrowerdeviation: $scope.txtborrowerdeviation,
                borrowerother_remarks: $scope.txtborrowerother_remarks,
                guarantor_cheque: $scope.txtguarantor_cheque,
                guarantor_bankname: $scope.txtguarantor_bankname,
                guarantor_acno: $scope.txtguarantor_acno,
                guarantor_deviation: $scope.txtguarantor_deviation,
                personalguarantor_name: $scope.txtpersonalguarantor_name,
                guarantor_panno: $scope.txtguarantor_panno,
                corporate_guarantee: $scope.txtcorporate_guarantee,
                personal_guarantee: $scope.txtpersonal_guarantee,
                fd_bank_name: $scope.txtfd_bank_name,
                fd_no: $scope.txtfd_no,
                fd_expiry_date: fd_expiry_date,
                auto_renewal: $scope.rdbauto_renewal,
                bankguarantee_bankname: $scope.txtbankguarantee_bankname,
                bankguarantee_expirydate: bankguarantee_expirydate,
                insurancecompany_name: $scope.txtinsurancecompany_name,
                policy_no: $scope.txtpolicy_no,
               policy_expiry_date: policy_expiry_date,
                security_description: $scope.txtsecurity_description,
                lsacreate_gid: $scope.lsacreate_gid,
                lsacreate_gid1: lsacreate_gid

            }
            console.log(params);
            var url = 'api/IdasTrnLsaManagement/postsecurityinfo';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $state.go('app.lsaManagementadd');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstTemplateSummaryController', idasMstTemplateSummaryController);

    idasMstTemplateSummaryController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function idasMstTemplateSummaryController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {

        $scope.title = 'idasMstTemplateSummaryController';
        var vm = this;

        activate();

        function activate() {
            var url = 'api/idasMstTemplate/GetTemplateSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                $scope.templatelist = resp.data.TemplateDtlsList;
                unlockUI();
            });
        };

        $scope.viewtemplatedtl = function (val) {
            $location.url('app/viewTemplateDetails?template_gid=' + val);
        }

        $scope.edittemplatedtl = function (val) {
         
            $location.url('app/idasMstEditTemplate?template_gid=' + val);
        }

        $scope.popupTemplate = function () {

            $state.go('app.idasMstAddTemplate');
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasSanctionMIS360controller', idasSanctionMIS360controller);

    idasSanctionMIS360controller.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams'];

    function idasSanctionMIS360controller($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasSanctionMIS360controller';
        $scope.sanction_gid = $location.search().sanction_gid;
        var sanction_gid = $scope.sanction_gid;

        activate();

        function activate() {

            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            var url = 'api/IdasSanctionMIS/GetSanctionMISDetails';
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp);
                $scope.txtsanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanction_date;
                $scope.txtSanctionAmountEdit = resp.data.sanction_amount;
                $scope.txtSanctionLimitEdit = resp.data.sanction_limit;
                $scope.entityedit = resp.data.entity;
                $scope.cboFacilityTypeEdit = resp.data.facility_type;

                $scope.customerNameEdit = resp.data.customername;
                $scope.CustomerurnEdit = resp.data.customer_urn;

                $scope.txtcollateralEdit = resp.data.collateral_security;
                $scope.zonalHeadNameEdit = resp.data.zonal_name;
                $scope.businessHeadNameEdit = resp.data.businesshead_name;
                $scope.clusterManagerEdit = resp.data.cluster_manager_name;
                $scope.creditManagerEdit = resp.data.creditmanager_name;
                $scope.relationshipmgmtEdit = resp.data.relationshipmgmt_name;
                $scope.txtapprovalauthority = resp.data.approval_authority;
                $scope.verticalCodeEdit = resp.data.vertical;
                $scope.txtstate = resp.data.state;
                $scope.loan_type = resp.data.loan_type;
                $scope.txtccapproval_date = resp.data.ccapproval_date;
                $scope.txtnatureofproposal = resp.data.nature_ofproposal;
                $scope.txtEditclassificationofMSME = resp.data.classification_MSME;
                $scope.txtEditValidity = resp.data.validity_months;
                $scope.txtEditExpiryDate = resp.data.sanctionexpiry_Date;

                $scope.txtEditReviewDate = resp.data.sanctionreview_Date;

                $scope.earliersancrefnoEdit = resp.data.earlier_sanctionrefno;
                $scope.txtEditconstitution = resp.data.constitution;
                $scope.postalcode = resp.data.postalcode;
                $scope.customer_email = resp.data.customer_email;
                $scope.contact_person = resp.data.contact_person;
                $scope.txtrm_mobileno = resp.data.rm_mobileno;
                $scope.txtrm_emailid = resp.data.rm_email;
                $scope.credit_manager = resp.data.credit_manager;
                $scope.txtEditexistingLimit = resp.data.existing_limit;
                $scope.txtEditAdditProposedLimit = resp.data.additional_proposedlimit;
                $scope.txtEditOverallLimit = resp.data.overall_limit;
                $scope.revisied_limit = resp.data.revisied_limit;
                $scope.txtEditpurpose = resp.data.purpose_lending;
                $scope.txtEdittenureMonths = resp.data.tenure_months;
                $scope.txtEditRepaymentPrinicipal = resp.data.repayment_principal;
                $scope.txtEditRepInterest = resp.data.repayment_interest;
                $scope.txtdateof_receiptofOriginalDoc = resp.data.dateof_receiptofOriginalDoc
                $scope.txtEditCollateralSecurity = resp.data.collateral_security;
                $scope.personal_guarantee = resp.data.personal_guarantee;
                $scope.txtEditMargin = resp.data.margin;
                $scope.txtEditRateofInterest = resp.data.rateof_interest;

                $scope.penal_interest = resp.data.penal_interest;
                //$scope.txtEditPenalInterest = resp.data.penal_interest;
                $scope.txtEditProcessingFee = resp.data.processing_fee;
                $scope.txtEditChequeRealization = resp.data.chequerealizationDate;
                $scope.txtEditDocumentationCharge = resp.data.documentation_clientvisitcharge;
                $scope.txtEditGSTNumber = resp.data.GST_number;
                $scope.receiptdocsDateEdit = resp.data.dateof_receiptDocsVetting;
                $scope.cboEditEscrowAccount = resp.data.escrow_account;
                $scope.txtEditVirtualAccountNo = resp.data.virtual_accountno;
                $scope.txtEditBuyersName = resp.data.nameofthe_buyers;
                $scope.txtEditStatusBAL = resp.data.status_ofBAL;
                $scope.dateofReleaseOrder = resp.data.releaseorder_Date;
                $scope.lblcasesvetted_bycadmaker = resp.data.casesvetted_bycadmaker;
                $scope.lblcasesvetted_bycadchecker = resp.data.casesvetted_bycadchecker;
                $scope.txtothers = resp.data.others;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                $scope.contact_number = resp.data.contact_no;
                $scope.lbldocumentation_list = resp.data.documentationlist;
                $scope.txthypothecation_date = resp.data.hypothecation_date;
                $scope.txtmortgage_date = resp.data.mortgage_date;
                $scope.txtprimaryvalue_chain = resp.data.primaryvalue_chain;
                $scope.txtsecondaryvalue_chain = resp.data.secondaryvalue_chain;
                $scope.txtpan_number = resp.data.pan_number;
                $scope.txtsanctiontype = resp.data.sanction_type;
                $scope.customersecurity_listdtl = resp.data.customersecurity_listdtl;
                $scope.sanction_status = resp.data.sanction_status;
                $scope.esdeclaration_status = resp.data.esdeclaration_status;
                $scope.es_application = resp.data.es_application;
                $scope.esrisk_categorization = resp.data.esrisk_categorization;
                $scope.colander_name = resp.data.colander_name;
                unlockUI();
            });


        }

        $scope.sanctionback = function () {
            $state.go('app.idasTrnSanctionMIS');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnAddNocAndNdcController', idasTrnAddNocAndNdcController);

    idasTrnAddNocAndNdcController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams','cmnfunctionService'];

    function idasTrnAddNocAndNdcController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnAddNocAndNdcController';

        activate();

        function activate() {

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open1 = true;
            };
            vm.calender = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open2 = true;
            };
            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open3 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });
            var url = 'api/IdasNocAndNdc/TempClear';
            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/IdasNocAndNdc/GetDropDown';
            SocketService.get(url).then(function (resp) {
                $scope.vertical_list = resp.data.vertical_list;
               
            });
        }

        $scope.Back = function () {
            $state.go('app.idasTrnNocAndNdc');

        }

        $scope.submit = function () {
            var lsvertical_gid = '';
            var lsvertical_name = '';

            if ($scope.cbovertical != undefined || $scope.cbovertical != null) {
                lsvertical_gid = $scope.cbovertical.vertical_gid;
                lsvertical_name = $scope.cbovertical.vertical_name;
            }

            var params = {
                maker_gid: $scope.cbomaker.employee_gid,
                maker_name: $scope.cbomaker.employee_name,
                checker_gid: $scope.cbochecker.employee_gid,
                checker_name: $scope.cbochecker.employee_name,
                vertical_gid: lsvertical_gid,
                vertical_name: lsvertical_name,
                customer_name: $scope.txtcustomer_name,
                sanction_ref_no: $scope.txtsanction_ref_no,
                sanction_date: $scope.txtsanctiondate,
                loan_account_no: $scope.txtloan_account_no,
                noc_issuance_date: $scope.txtnocissuancedate,
                nocandndc_date: $scope.txtnocrequestdate

            }
            //console.log(params);
            var url = 'api/IdasNocAndNdc/CreateIdasNocAndNdc';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()

                    $state.go('app.idasTrnNocAndNdc');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });
        }


        $scope.NocNDcDocumentUpload = function () {
            
            var fi = document.getElementById('file');
            if (fi.files.length > 0) {
                var frm = new FormData();
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                }
                frm.append('file_name', $scope.txtdoc_name);
                var url = 'api/IdasNocAndNdc/NocDocumentUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    $("#file").val('');

                    unlockUI();
                    if (resp.data.status == true) {
                        
                        var url = 'api/IdasNocAndNdc/GetNocDocumentList';
                        SocketService.get(url).then(function (resp) {
                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                        });

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    unlockUI();
                });
            }
            else {
                alert('Please select a file.')
                unlockUI();
            }

            $scope.txtdoc_name = '';
        }

        $scope.downloads = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.uploaddocumentcancel = function (nocandndcdocument_gid) {

            var params = {
                nocandndcdocument_gid: nocandndcdocument_gid
            }
            var url = 'api/IdasNocAndNdc/GetNocDocumentAddDelete';
            SocketService.getparams(url, params).then(function (resp) {
             
                if (resp.data.status == true) {

                    var url = 'api/IdasNocAndNdc/GetNocDocumentList';
                    SocketService.get(url).then(function (resp) {

                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

                unlockUI();
            });
        }

       

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnBatchConversationView', IdasTrnBatchConversationView);

    IdasTrnBatchConversationView.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function IdasTrnBatchConversationView($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        $scope.title = 'IdasTrnBatchConversationView';
        var sanctiondocument_gid;

        activate();

        function activate() {
            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');

            var url = 'api/IdasTrnPhyDoc/PhyDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversation = resp.data.MdlDocConversation;

                } else {


                }


            });


            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();

                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.phydocument_date = resp.data.phydocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.phyfinal_remarks = resp.data.phyfinal_remarks;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.checker_status = resp.data.checker_status;
                $scope.phydoc_status = resp.data.phydoc_status;
                $scope.types_of_copy = resp.data.phydocument_type;

            });

            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {

                $scope.doc_comments = resp.data.doc_comments;

            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                    $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }


            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;

                }


            });


        }


        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    //var phyPath = val1;

                    //var relPath = phyPath.split("EMS");
                    //var relpath1 = relPath[1].replace("\\", "/");
                    //var hosts = window.location.host;
                    //var prefix = location.protocol + "//";
                    //var str = prefix.concat(hosts, relpath1);
                    //var link = document.createElement("a");
                    //var name = val2.split(".")
                    //link.download = val2;
                    //var uri = str;
                    //link.href = uri;
                    //link.click();
                    DownloaddocumentService.Downloaddocument(val1, val2);
                }

                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;

                });
            }
        }

        $scope.docconback=function()
        {
            $state.go('app.IdasTrnBatchView');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnBatchView', IdasTrnBatchView);

    IdasTrnBatchView.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies', '$filter', 'ngTableParams', '$timeout', 'DownloaddocumentService'];

    function IdasTrnBatchView($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies, $filter, ngTableParams, $timeout, DownloaddocumentService) {
        $scope.title = 'IdasTrnBatchView';
        var sanction_gid;
        var customer_gid;
        var page;

        activate();

        function activate() {
            sanction_gid = localStorage.getItem('sanction_gid');
            page = localStorage.getItem('page');
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefno = resp.data.sanction_refno;
                $scope.SanctionDate = resp.data.sanction_date;
                $scope.SanctionAmount = resp.data.sanction_amount;
                $scope.FacilityType = resp.data.facility_type;
                $scope.customerName = resp.data.customername;
                $scope.Customerurn = resp.data.customer_urn;
                $scope.collateral_security = resp.data.collateral_security;
                $scope.zonalHeadName = resp.data.zonal_name;
                $scope.businessHeadName = resp.data.businesshead_name;
                $scope.clusterManager = resp.data.cluster_manager_name;
                $scope.creditManager = resp.data.creditmanager_name;
                $scope.relationshipmgmt = resp.data.relationshipmgmt_name;
                $scope.customercode = resp.data.customercode;
                $scope.verticalCode = resp.data.vertical;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                customer_gid = resp.data.customer_gid;
                $scope.batch_status = resp.data.batch_status;

            });

            var url = "api/IdasTrnSanctionDoc/ScanDocSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.documentation_list = resp.data.MdlScannDocSummary;

            });

            var url = "api/IdasTrnPhyDoc/GetPhyUnVerifiedCount";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.phydocunverified_count = resp.data.phydocunverified_count;
                console.log('count', resp.data);
            });


            var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {

                $scope.commondocument = resp.data.uploaddocument;

            });

        }

        $scope.export = function () {
            var params = {
                sanction_gid: sanction_gid,
                type_of_copy: 'Physical Copy'
            }
            var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath, resp.data.attachment_name);
                    // var phyPath = resp.data.attachment_path;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.attachment_name.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    Notify.alert(resp.data.message, 'success')
                    activate();

                }

            });
        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.batchviewback = function () {
            if (page == "batch")
            {
                $state.go('app.idasTrnFile2Despatch?lstab=batch');
            }
            else if(page=="box")
            {
                $state.go('app.IdasTrnBoxDtlsView');
            }
            else if (page == "Despatch")
            {
                $state.go('app.IdasTrnDespatchBoxDtlsView');
            }
            else if (page == "pendingbatch") {
                $location.url('app/idasTrnFile2Despatch?lstab=pendingbatch');
            }
            else {
                $location.url('app/idasTrnFile2Despatch?lstab=batch');
            }

           
        }

        $scope.docConMkr=function(sanctiondocument_gid)
        {
            localStorage.setItem('sanctiondocument_gid', sanctiondocument_gid);
            $state.go('app.IdasTrnBatchConversationView');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnBoxDtlsView', IdasTrnBoxDtlsView);

    IdasTrnBoxDtlsView.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function IdasTrnBoxDtlsView($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'IdasTrnBoxDtlsView';
        var cartonbox_gid;
        activate();

        function activate() {

            cartonbox_gid = localStorage.getItem('cartonbox_gid');

            var url = 'api/IdasTrnFile2Despatch/BoxDtls';
            var params = {
                cartonbox_gid: cartonbox_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data);
                $scope.boxref_no = resp.data.boxref_no;
                $scope.stampref_no = resp.data.stampref_no;
                $scope.cartonbox_date = resp.data.cartonbox_date;
                $scope.remarks = resp.data.remarks;
                $scope.boxbarcoderef_no = resp.data.boxbarcoderef_no;
            });

            var url = 'api/IdasTrnFile2Despatch/TaggedBatchDtls';
            var params = {
                cartonbox_gid: cartonbox_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                $scope.batch_list = resp.data.MdlbatchSummary;
             
            });


        }

        $scope.back=function()
        {
            // $state.go('app.idasTrnFile2Despatch');
            $location.url('app/idasTrnFile2Despatch?lstab=box');
        }

        $scope.gotoBatch360=function(sanction_gid)
        {
            localStorage.setItem('page', 'box');
            localStorage.setItem('sanction_gid', sanction_gid);
            $state.go('app.IdasTrnBatchView');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCadDashboardController', idasTrnCadDashboardController);

        idasTrnCadDashboardController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnCadDashboardController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnCadDashboardController';
        lockUI(); 
        activate();
        function activate() { 

            var params = {               
                caddropdown : 'employee',
                from_date : '',
                to_date : ''
                }
            var url = 'api/IdasDashboard/GetCadDashboardSummary';
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.caddashboard_list = resp.data.caddashboard_list;
                
            });
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };  
        }
        
        $scope.search = function () {    
            if ($scope.txtfrom_date == undefined || $scope.txtfrom_date == "") {
                var from_date = null;
                }
            else {
                var from_date1 = $scope.txtfrom_date;
                var from_date = new Date(from_date1.getTime() - (from_date1.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];
                }    
            if ($scope.txtto_date == undefined || $scope.txtto_date == "") {
                var to_date = null;
                }
            else {
                var to_date1 = $scope.txtto_date;
                var to_date = new Date(to_date1.getTime() - (to_date1.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];
                }     
            if (from_date <= to_date){
                var params = {               
                    caddropdown : $scope.cbocaddashboard,
                    from_date : from_date,
                    to_date : to_date
                    }
                var url = 'api/IdasDashboard/GetCadDashboardSummary';
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {
                    if($scope.cbocaddashboard == 'Customer master updation') {
                        $scope.caddashboard_list = resp.data.customerupdation_list;
                    }
                    else if ($scope.cbocaddashboard == 'Sanction Ref.No') {
                        $scope.caddashboard_list = resp.data.sanction_list;
                    }
                    else if ($scope.cbocaddashboard == 'Sanction Master updation') {
                        $scope.caddashboard_list = resp.data.sanctionupdation_list;
                    } 
                    else if ($scope.cbocaddashboard == 'LSA Maker') {
                        $scope.caddashboard_list = resp.data.lsamaker_list;
                    }
                    else if ($scope.cbocaddashboard == 'LSA Checker') {
                        $scope.caddashboard_list = resp.data.lsachecker_list;
                    }
                    else if ($scope.cbocaddashboard == 'Collateral Updation') {
                        $scope.caddashboard_list = resp.data.collateralUpdation_list;
                    } 
                    else if ($scope.cbocaddashboard == 'Deferral Stage updated') {
                        $scope.caddashboard_list = resp.data.deferralstage_list;
                    }
                    else if ($scope.cbocaddashboard == 'Deferral Checker Approval') {
                        $scope.caddashboard_list = resp.data.deferralapproval_list;
                    }
                    else if ($scope.cbocaddashboard == 'CAD Compliance Certificate generated') {
                        $scope.caddashboard_list = resp.data.cadcompliance_list;
                    } 
                    else if ($scope.cbocaddashboard == 'Document Tagged') {
                        $scope.caddashboard_list = resp.data.doctagged_list;
                    }
                    else if ($scope.cbocaddashboard == 'Deferrals Created') {
                        $scope.caddashboard_list = resp.data.deferralcreate_list;
                    }
                    else if ($scope.cbocaddashboard == 'Document Vetting Maker') {
                        $scope.caddashboard_list = resp.data.docvettingmaker_list;
                    }
                    else {
                        $scope.caddashboard_list = resp.data.docvettingchecker_list;
                    }    
                    $scope.showvalue=$scope.cbocaddashboard,
                    $scope.txtto_date="",
                    $scope.txtfrom_date=""
                    unlockUI();
                });
            }
           
            else{
                Notify.alert("Enter Date Format Correctly", {
                    status: 'warning',
                    pos: 'top-center',
                    timeout: 3000
                });   
                $scope.showvalue=$scope.cbocaddashboard,
                $scope.txtto_date="",
                $scope.txtfrom_date=""
            }
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCollateralReportcontroller', idasTrnCollateralReportcontroller);

    idasTrnCollateralReportcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function idasTrnCollateralReportcontroller($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnCollateralReportcontroller';

        activate();

        function activate() {
            var url = 'api/idasTrnLsaReport/GetColletarlSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                $scope.customersecurity_list = resp.data.customersecurity_list;
                unlockUI();
            });
        }

        $scope.export = function () {
            lockUI();
            var url = 'api/idasTrnLsaReport/ColletralReportExcel';
            SocketService.get(url).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.lscloudpath, resp.data.lsname);
                    unlockUI();
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'warning')

                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCourierCreation', idasTrnCourierCreation);

    idasTrnCourierCreation.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$filter', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnCourierCreation($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $filter, DownloaddocumentService,cmnfunctionService) {
        $scope.title = 'idasTrnCourierCreation';
        var vm = this;
        vm.title = 'idasTrnCourierCreation';
        
        activate();

        function activate() {

            $scope.rdbcustomer = 'Yes';
                $scope.customerno = false;
                $scope.customeryes = true;

            $scope.courier_type=localStorage.getItem('courier_type');
            
          
            if($scope.courier_type=="Physical Inward" || $scope.courier_type=="Physical Outward"){
                document.getElementById("txtcourier_company_name").disabled = false;
                $scope.txtcourier_company_name="";
                $scope.txtpod_no="";
                $scope.isDisabled=true;
               
             }
             else{
                $scope.isDisabled=false;
             }


            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1

            };

            var url = 'api/customer/customer';
            SocketService.get(url).then(function (resp) {
                $scope.customer_list = resp.data.customer_list;
            });

            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

            var url = 'api/IdasMstCourierCompany/CourierCompanySummary';
            SocketService.get(url).then(function (resp) {
                $scope.couriercompany_list = resp.data.MdlCourierCompany;
            });


            var params = {
                courierdocument_gid: "undefine"
            }
            var url = 'api/IdasCourierManagement/DeleteCourierDoc';
           
            SocketService.getparams(url, params).then(function (resp) {
               

            });

            $scope.rdbcustomer_yes = function () {
                $scope.customerno = false;
                $scope.customeryes = true;
            }
            $scope.rdbcustomer_no = function () {
                $scope.customerno = true;
                $scope.customeryes = false;
            }

        }

        $scope.courierback = function () {
            if($scope.courier_type=='Courier Inward'){
                $location.url('app/idasCourierMgmtsummary?lstab=CI');
               }
               else if($scope.courier_type=='Courier Outward'){
                $location.url('app/idasCourierMgmtsummary?lstab=CO');
               }
               else if($scope.courier_type=='Physical Outward'){
                $location.url('app/idasCourierMgmtsummary?lstab=PO');
               }
               else if($scope.courier_type=='Physical Inward')
               {
                $location.url('app/idasCourierMgmtsummary?lstab=PI');
               }
               else{
                $location.url('app/idasCourierMgmtsummary?lstab=CI');
               }
               
        }

        $scope.OnChangeCourierType=function(val){
            
            if(val=="Physical Inward" || val=="Physical Outward"){
               $scope.txtcourier_company_name="";
               $scope.txtpod_no="";
               $scope.isDisabled=true;
            }
            else{
                $scope.isDisabled=false;
            }
        }
        $scope.onselectedchangecustomer = function (customer) {
            $scope.customer_gid = localStorage.setItem('onchangecustomer_gid', customer);
            var params = {
                customer_gid: $scope.cbocustomergid.customer_gid

            }
          
            var url = 'api/IdasTrnLsaManagement/customer2sanction';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer2sanction_list = resp.data.customer2sanction_list;

            });

        }
        $scope.onselectedchangesanction = function (sanction) {

            var params = {
                customer2sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid

            }
        }
       
        $scope.deletedocument = function (val) {
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Uploaded Document?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var params = {
                        courierdocument_gid: val
                    }
                    var url = 'api/IdasCourierManagement/DeleteCourierDoc';
                    lockUI();
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            SweetAlert.swal('Document Deleted Successfully!');
        
                            var url = 'api/IdasCourierManagement/GetCourierDoc';
        
                            SocketService.get(url).then(function (resp) {
        
                                $scope.commondocument = resp.data.uploadcourierdocument;
        
                            });
                        }
                        else {
                            unlockUI();
                            SweetAlert.swal('Error Occured');
        
                        }
        
                    });
                }

            });
          
        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.commondocumentupload = function (val, val1, name) {
            for (var i in $scope.documentname) {
                console.log('1');
            }
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_gid', $scope.document_gid);
            frm.append('Trn_Gid',"");
            frm.append('document_title',$scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasCourierManagement/CourierDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


                $("#commonupload").val('');
               
                $scope.txtdocument_title='';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasCourierManagement/GetCourierDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.commondocument = resp.data.uploadcourierdocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.courierSubmit = function () {
            var courier_company_name;
            if($scope.courier_type=="Courier Inward" || $scope.courier_type=="Courier Outward"){
                if($scope.txtcourier_company_name==undefined ||$scope.txtcourier_company_name=="" ){
                    Notify.alert('Select the Courier Company');
                    return;
                }
                else{
                    courier_company_name=$scope.txtcourier_company_name.couriercompany_name;
                }

                if($scope.txtpod_no==undefined||$scope.txtpod_no==""){
                    Notify.alert('Enter the POD No.');
                    return;
                }
            }
            else{
                courier_company_name= "";
                $scope.txtpod_no="";
            }
            if($scope.cbocustomer2sanction_gid==undefined){
                $scope.sanctionref_no='';
                $scope.sanction_gid='';
            }
            else{
                $scope.sanctionref_no= $scope.cbocustomer2sanction_gid.sanctionref_no;
                $scope.sanction_gid= $scope.cbocustomer2sanction_gid.customer2sanction_gid;
            }
            if ($scope.rdbcustomer == "No")
            {
                $scope.customer_name = $scope.txtcustomer_name;
                $scope.customer_gid = '';
            }
            else {
                $scope.customer_name = $scope.cbocustomergid.customername;
                $scope.customer_gid = $scope.cbocustomergid.customer_gid;
            }
            var params = {
                customer_name: $scope.customer_name,
                customer_gid: $scope.customer_gid,
                sanctionref_no: $scope.sanctionref_no,
                sanction_gid: $scope.sanction_gid,
                MdlCourierByList: $scope.txtcourier_sender_name,
               
                MdlCourierToList: $scope.txtcourier_handoverto,
                
                document_type: $scope.txtdocument_type,
                date_of_courier: $scope.txtdate_of_courier,
                pod_no: $scope.txtpod_no,
                couriercompany_name: courier_company_name,
                address: $scope.txtaddress1,
                courier_type: $scope.courier_type,
                remarks: $scope.txtremarks,  
            }
            console.log(params);
            
           
            var url = 'api/IdasCourierManagement/IdasCourierSubmit';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    console.log('courier type',$scope.courier_type);
                   if($scope.courier_type=='Courier Inward'){
                    $location.url('app/idasCourierMgmtsummary?lstab=CI');
                   }
                   else if($scope.courier_type=='Courier Outward'){
                    $location.url('app/idasCourierMgmtsummary?lstab=CO');
                   }
                   else if($scope.courier_type=='Physical Outward'){
                    $location.url('app/idasCourierMgmtsummary?lstab=PO');
                   }
                   else if($scope.courier_type=='Physical Inward')
                   {
                    $location.url('app/idasCourierMgmtsummary?lstab=PI');
                   }
                   
                   // $state.go('app.idasCourierMgmtsummary');
                    Notify.alert(resp.data.message,'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message,'warning')
                }
                activate();
            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCourierReportController', idasTrnCourierReportController);

    idasTrnCourierReportController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function idasTrnCourierReportController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnCourierReportController';
        activate();
        function activate() {
 
        var url = 'api/CourierReport/CourierReportSummary';
        lockUI();
        SocketService.get(url).then(function (resp) {
            $scope.idasTrnCourierReport = resp.data.CourierReportSummaryDtls;
        unlockUI();
            });
        
        }
        $scope.complete = function (string) {

            if (string.length >= 3) {
                $scope.message = "";
                var url = 'api/customer/ExploreCustomer';
                var params = {
                    customername: string
                }
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.message = "";
                        $scope.customer_list = resp.data.Customers;
                    }
                    else {
                        $scope.message = "No Records";
                    }


                });
            }
            else {
                $scope.customer_list = null;
                $scope.message = "Type atleast three character";
            }
        }
        $scope.fillTextbox = function (customer_gid, customer_name) {
            $scope.cbocustomer_name = customer_name;
            $scope.customer_gid = customer_gid;
            $scope.customer_list = null;
        }
        $scope.all = function () {
            $scope.cbocustomer_name = "";
            $scope.cbocourier_type= "";
            activate();
        }
        $scope.search = function () {
           var params={
            courier_type : $scope.cbocourier_type,
            customer_name:$scope.cbocustomer_name
           }
        var url = 'api/CourierReport/ReportSearch';
        lockUI();
        SocketService.getparams(url,params).then(function (resp) {
            $scope.idasTrnCourierReport = resp.data.CourierReportSummaryDtls;
        unlockUI();
            });
        
        }

        $scope.exportcourierreport = function () {
            var params={
                courier_type : $scope.cbocourier_type,
                customer_name:$scope.cbocustomer_name
               }
            lockUI();
            var url = 'api/CourierReport/ExportReport';
            SocketService.getparams(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.lscloudpath, resp.data.lsname);
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'success')
                    
                }

            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCourierView', idasTrnCourierView);

    idasTrnCourierView.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'DownloaddocumentService'];

    function idasTrnCourierView($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService) {
       
        $scope.title = 'idasTrnCourierView';
        var vm = this;
        vm.title = 'idasTrnCourierView';
        var courier_gid;
        var page;
        activate();

        function activate() {
            $scope.courier_value=true;
            $scope.physical_value=false;

            $scope.courier_inward=true;
            $scope.courier_outward=false;
            $scope.physical_inward=false;
            $scope.physical_outward=false;

            courier_gid=localStorage.getItem('courier_gid');   
            page=localStorage.getItem('page');
            $scope.courier_gid=courier_gid;
           
            var  params={
                courier_gid:courier_gid
            }
            var url = 'api/IdasCourierManagement/GetEditCourierDetail';
            SocketService.getparams(url,params).then(function (resp) {
                console.log(resp.data);
                if(resp.data.status==true){
                    $scope.customer_name=resp.data.customer_name;
                    $scope.courierref_no=resp.data.courierref_no;
                    $scope.date_of_courier=resp.data.date_of_courier;
                   //$scope.cbocustomer2sanction_gid=resp.data.sanction_gid;
                    $scope.document_type=resp.data.document_type;
                    $scope.address=resp.data.address;
                    $scope.sender_name=resp.data.sender_name;
                    $scope.pod_no=resp.data.pod_no;
                    $scope.courier_company_name=resp.data.couriercompany_name;
                    $scope.courierhandover_to=resp.data.courierhandover_to;
                   // $scope.courierhandover_to_gid=resp.data.courierhandover_to;
                    $scope.courier_type=resp.data.courier_type;
                    $scope.remarks=resp.data.remarks;
                  //  $scope.courier_sender_name=resp.data.sender_gid;
                    $scope.handover_name=resp.data.courierhandover_to_gid;
                    $scope.uploadDoc_list=resp.data.uploadcourierdocument;
                    $scope.sanctionref_no=resp.data.sanctionref_no;
                    $scope.ack_status=resp.data.ack_status;
                    $scope.ack_date=resp.data.ack_date;
                    $scope.ackby_name=resp.data.ackby_name;
                    $scope.created_by = resp.data.created_by;
                    $scope.created_date = resp.data.created_date;
                }
                
                if($scope.courier_type=="Courier Outward" || $scope.courier_type=="Courier Inward"){
                    $scope.courier_value=true;
                    $scope.physical_value=false;
                }
                if($scope.courier_type=="Courier Outward"){
                    $scope.courier_outward=true;
                    $scope.courier_inward=false;
                    $scope.physical_inward=false;
                    $scope.physical_outward=false;
                
                
                }
    
                if($scope.courier_type=="Courier Inward"){
                    //$scope.courier_inward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=true;
                    $scope.physical_inward=false;
                    $scope.physical_outward=false;
                
                }
    
                if($scope.courier_type=="Physical Inward"){
                  //  $scope.physical_inward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=false;
                    $scope.physical_inward=true;
                    $scope.physical_outward=false;
                
                }
                if($scope.courier_type=="Physical Outward"){
                  //  $scope.physical_outward=true;
    
                    $scope.courier_outward=false;
                    $scope.courier_inward=false;
                    $scope.physical_inward=false;
                    $scope.physical_outward=true;
                
                }
                if($scope.courier_type=="Physical Inward" || $scope.courier_type=="Physical Outward"){
                    $scope.courier_value=false;
                    $scope.physical_value=true;
                }
    
            });

          
            console.log('courier', $scope.courier_value);
           

        }
       
       
       
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

       
         $scope.courierback = function () {
            
            $location.url('app/idasCourierMgmtsummary?lstab='+page);
        }

       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnCreateBox', idasTrnCreateBox);

    idasTrnCreateBox.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams'];

    function idasTrnCreateBox($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {
        var vm = this;
        vm.title = 'idasTrnCreateBox';

        activate();
       

        function activate() {

            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.opened = true;
            };

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            var url = 'api/IdasTrnCartonBox/BatchSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.batch_list = resp.data.MdlbathSummary;
                console.log(resp.data.MdlbathSummary);
            });
   
        }

        
        $scope.box_back=function()
        {
            $state.go('app.boxMgmt');
        }
        $scope.box_submit = function()
        {
            var batch_list = [];

            angular.forEach($scope.batch_list, function (val) {

                if (val.checked == true) {
                    var batch_gid = val.batch_gid;

                    batch_list.push(batch_gid);

                }
            });
            var params = {
                cartonbox_date: $scope.box_date,
                remarks: $scope.boxremarks,
                batch_gid: batch_list,
               
            }

            console.log(params);
            var url = 'api/IdasTrnCartonBox/CartonBoxCreate';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $state.go('app.boxMgmt');
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    $state.go('app.boxMgmt');
                    Notify.alert(resp.data.message)
                }



            });
        }

        $scope.checkall = function (selected) {
            angular.forEach($scope.batch_list, function (val) {
                val.checked = selected;

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnDespatchBoxDtlsView', IdasTrnDespatchBoxDtlsView);

    IdasTrnDespatchBoxDtlsView.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies', '$filter', 'ngTableParams', '$timeout', 'DownloaddocumentService'];

    function IdasTrnDespatchBoxDtlsView($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies, $filter, ngTableParams, $timeout, DownloaddocumentService) {
        $scope.title = 'IdasTrnDespatchBoxDtlsView';
        var despatch_gid;
        var cartonbox_gid;
        activate();

        function activate() {
            despatch_gid = localStorage.getItem('despatch_gid');

            var url = 'api/IdasTrnFile2Despatch/DespatchDtls';
            var params = {
                despatch_gid: despatch_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data);
                $scope.despatchref_no = resp.data.despatchref_no;
                $scope.despatch_date = resp.data.despatch_date;
                $scope.vendor_name = resp.data.vendor_name;
                $scope.remarks = resp.data.remarks;
                $scope.contact_person = resp.data.contact_person;
                $scope.mobile_no = resp.data.mobile_no;
                $scope.desptached_by = resp.data.desptached_by;
                $scope.stampref_no = resp.data.stampref_no;

            });

            var url = 'api/IdasTrnFile2Despatch/DespatchDocument';
            var params = {
                despatch_gid: despatch_gid
            };

            SocketService.getparams(url, params).then(function (resp) {

                $scope.uploaddocument = resp.data.uploaddocument;

            });

            cartonbox_gid = localStorage.getItem('cartonbox_gid');

            var url = 'api/IdasTrnFile2Despatch/BoxDtls';
            var params = {
                cartonbox_gid: cartonbox_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data);
                $scope.boxref_no = resp.data.boxref_no;
                $scope.stampref_no = resp.data.stampref_no;
                $scope.cartonbox_date = resp.data.cartonbox_date;
                $scope.remarks = resp.data.remarks;
                $scope.boxbarcoderef_no = resp.data.boxbarcoderef_no;
            });

            var url = 'api/IdasTrnFile2Despatch/TaggedBatchDtls';
            var params = {
                cartonbox_gid: cartonbox_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                $scope.batch_list = resp.data.MdlbatchSummary;

            });



        }
        $scope.back=function()
        {
            $state.go('app.IdasTrnDespatchDtlsView')
        }
        $scope.gotoBatch360=function(sanction_gid)
        {
            localStorage.setItem('sanction_gid', sanction_gid);
            localStorage.setItem('page', 'Despatch');
            $state.go('app.IdasTrnBatchView');
        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = "http://"
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnDespatchDtlsView', IdasTrnDespatchDtlsView);

    IdasTrnDespatchDtlsView.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function IdasTrnDespatchDtlsView($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService) {
        $scope.title = 'IdasTrnDespatchDtlsView';
        var despatch_gid;
        activate();

        function activate() {

            despatch_gid = localStorage.getItem('despatch_gid');
           
            var url = 'api/IdasTrnFile2Despatch/DespatchDtls';
            var params = {
                despatch_gid: despatch_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
              
                $scope.despatchref_no = resp.data.despatchref_no;
                $scope.despatch_date = resp.data.despatch_date;
                $scope.vendor_name = resp.data.vendor_name;
                $scope.remarks = resp.data.remarks;
                $scope.contact_person = resp.data.contact_person;
                $scope.mobile_no = resp.data.mobile_no;
                $scope.desptached_by = resp.data.desptached_by;
                $scope.stampref_no = resp.data.stampref_no;

            });

            var url = 'api/IdasTrnFile2Despatch/DespatchDocument';
            var params = {
                despatch_gid: despatch_gid
            };

            SocketService.getparams(url,params).then(function (resp) {

                $scope.uploaddocument = resp.data.uploaddocument;

            });

            var url = 'api/IdasTrnFile2Despatch/TaggedBoxDtls';
            var params = {
                despatch_gid:despatch_gid
            }

            SocketService.getparams(url,params).then(function (resp) {
                $scope.box_list = resp.data.MdlCartonBoxSummary;

            });

        }
        $scope.back=function()
        {
            $location.url('app/idasTrnFile2Despatch?lstab=despatch');
           // $state.go('app.idasTrnFile2Despatch');
        }
        $scope.gotoBox360=function(cartonbox_gid)
        {
            localStorage.setItem('cartonbox_gid', cartonbox_gid);
           
            $state.go('app.IdasTrnDespatchBoxDtlsView');
        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = "http://"
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocConversationMkr', idasTrnDocConversationMkr);

    idasTrnDocConversationMkr.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll','cmnfunctionService'];

    function idasTrnDocConversationMkr($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,$anchorScroll,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocConversationMkr';
        var sanctiondocument_gid;
        activate();
      

        function activate() {
            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            $scope.valueExternal = false;
            $scope.valueInternal = false;
          
            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');
            $scope.conversation_count = localStorage.getItem('conversation_count');
        
            if($scope.conversation_count=='0')
            {
                $scope.showraisequery = false;
            }
            else {
                $scope.showraisequery = true;
            }
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1,
               
            };

 
            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                  
                     $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }
               

            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;

                }
              

            });

            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
             
                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.document_date = resp.data.scandocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.checker_status = resp.data.checker_status;
                $scope.types_of_copy = resp.data.types_of_copy;
                $scope.txtfinalremarks = resp.data.finalremarks;

                if (resp.data.finalremarks == 'Others') {
                    $scope.other_remarks = true;
                } else {
                    $scope.other_remarks = false;
                }
            });
            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {
                  
                $scope.doc_comments = resp.data.doc_comments;
               
            });
        }

        $scope.onchangeremarks = function (txtfinalremarks) {
            if (txtfinalremarks == 'Others') {
                $scope.other_remarks = true;
                $scope.scanfinal_remarks = '';
            } else {
                $scope.other_remarks = false;
                $scope.scanfinal_remarks = '';
            }
        }

        $scope.ShowRaiseQuery=function()
        {
            if(  $scope.showraisequery == false)
            {
                $scope.showraisequery = true;
            }
            else {
                $scope.showraisequery = false;
            }
          
        }

        $scope.raiseNoQuery=function()
        {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                sanction_gid: $scope.sanction_gid,
                document_gid: $scope.document_gid,
                cad_query: 'No Query',
                document_name: $scope.document_name,
                type_of_conversation: 'Internal',
                noquery_flag:'Y',
            }

            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to send "No Query"?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Send it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Query Sent Successfully!');
                            unlockUI();
                            $scope.conversation_count = "1";
                            localStorage.setItem('conversation_count','1');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }
            });
        }
        $scope.onchangecopy = function (types_of_copy) {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                type_copy: $scope.types_of_copy
            }
            var url = "api/IdasTrnDocConversation/PostTypeOfCopy";
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                   
                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    activate();
                    Notify.alert(resp.data.message)
                }

            });
        }
        $scope.MkrVerify = function () {
            var url = 'api/IdasTrnSanctionDoc/DocumentConfirmation';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                  //  localStorage.setItem('conversation_count', '1');
                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                   // activate();
                    Notify.alert(resp.data.message)
                }
               
            });
        }
        $scope.btnShow = function (id, reply) {
            $scope.IsVisible = true;
            $scope.Visible = false;

        }
        $scope.btnHide = function () {
            $scope.IsVisible = false;
            $scope.Visible = true;
        }
        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    var phyPath = val1;
                 
                    var relPath = phyPath.split("EMS");
                    var relpath1 = relPath[1].replace("\\", "/");
                    var hosts = window.location.host;
                    var prefix = location.protocol + "//";
                    var str = prefix.concat(hosts, relpath1);
                    var link = document.createElement("a");
                    var name = val2.split(".")
                    link.download = val2;
                    var uri = str;
                    link.href = uri;
                    link.click();
                }

                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;

                });
            }
        }
      
        $scope.raiseQueryRM = function () {

            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                sanction_gid: $scope.sanction_gid,
                document_gid: $scope.document_gid,
                cad_query: $scope.content,
                document_name: $scope.document_name,
                document_title: $scope.txtdocument_title,
                type_of_conversation:'External'
            }

            var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = '';
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });


        }
        $scope.raiseQueryChecker = function () {

            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                sanction_gid: $scope.sanction_gid,
                document_gid: $scope.document_gid,
                cad_query: $scope.content,
                document_name: $scope.document_name,
                document_title: $scope.txtdocument_title,
                type_of_conversation: 'Internal'
            }

            var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = '';
                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });


        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

      

        $scope.update = function () {
          
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                document_date: $scope.document_date
            }

            var url = 'api/IdasTrnSanctionDoc/PostScanDocDate';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')

                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }
               // activate();
            });
        }
        $scope.forwardedRaiseQuery = function (query, ref_no, response) {
            var lssendmsg;

            if (response == 'Query Confirmed.')
            {
                lssendmsg = query;
            }
            else
            {
                lssendmsg = response;
            }

              var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                sanction_gid: $scope.sanction_gid,
                document_gid: $scope.document_gid,
                cad_query: lssendmsg,
                document_name: $scope.document_name,
                type_of_conversation: 'External',
                reference_query: ref_no
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to send this query to RM ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Send it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Query Sent Successfully!');
                            unlockUI();
                           
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }
         $scope.btncopy = function (query,response) {
             if (response == 'Query Confirmed.') {
                 $scope.content = query;
                 
             }
             else {
                 $scope.content = response;
             }
           
             $location.hash('down');
             $anchorScroll();
           
        }
         $scope.updateFinalRemarks = function () {
             if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null))
             {
                 Notify.alert('Kindly Enter Remarks', 'warning')
             } else {
                 var params = {
                     sanctiondocument_gid: sanctiondocument_gid,
                     scanfinal_remarks: $scope.scanfinal_remarks,
                     finalremarks: $scope.txtfinalremarks
                 }

                 var url = 'api/IdasTrnSanctionDoc/DocScanFinalRemarks';
                 lockUI();
                 SocketService.post(url, params).then(function (resp) {
                     if (resp.data.status == true) {
                         unlockUI();
                         Notify.alert(resp.data.message, 'success')
                         activate();
                     }
                     else {
                         unlockUI();
                         Notify.alert(resp.data.message, 'warning'),
                         $scope.txtfinalremarks = '',
                         $scope.scanfinal_remarks = ''
                     }

                 });
             }
        }
        $scope.UploadDocCancel = function (conversationdocument_gid) {
            var params = {
                conversationdocument_gid: conversationdocument_gid
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }

        $scope.docconback = function () {
           
                $state.go('app.idasTrnDocVerifyMkr');
           

        }

        $scope.raiseResponse = function (id, count, textArea) {
            var params = {
                docconversation_gid: id,
                rm_response: textArea
            }

            var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = " ";
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocConversationPhy', idasTrnDocConversationPhy);

    idasTrnDocConversationPhy.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocConversationPhy($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocConversationPhy';
        var sanctiondocument_gid;
        var phydoc_status;
        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            //$scope.history = false;

            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');
            $scope.conversation_count = localStorage.getItem('conversation_count');
            phydoc_status = localStorage.getItem('phydoc_status');
            console.log(phydoc_status);

            if ($scope.conversation_count == '0' && phydoc_status == 'Pending') {
                $scope.showraisequery = false;
                $scope.hideraisequery = false;
            }
            else {
                $scope.showraisequery = true;
                $scope.hideraisequery = true;
            }
          
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1,

            };


            var url = 'api/IdasTrnPhyDoc/PhyDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversation = resp.data.MdlDocConversation;
                 
                } else {
               

                }


            });



            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();

                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.phydocument_date = resp.data.phydocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.phyfinal_remarks = resp.data.phyfinal_remarks;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.checker_status = resp.data.checker_status;
                $scope.phydoc_status = resp.data.phydoc_status;
                $scope.types_of_copy = resp.data.phydocument_type;
                
            });

        

            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {

                $scope.doc_comments = resp.data.doc_comments;

            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                    $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }


            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;

                }


            });


        }
        $scope.ShowRaiseQuery = function () {
            if ($scope.showraisequery == false) {
                $scope.showraisequery = true;
               }
            else {
                $scope.showraisequery = false;
              }

        }


        $scope.raiseNoQuery = function () {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to Confirm this Document ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Confirm it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = 'api/IdasTrnPhyDoc/NoQuery';
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Document Confirmed Successfully!');
                            unlockUI();
                            $scope.conversation_count = "1";
                            localStorage.setItem('conversation_count', '1');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }
            });
        }

        //$scope.Conversationhistory=function()
        //{
          
        //    if($scope.history==true)
        //    {
        //        $scope.history = false;
        //    }
        //    else {
        //        $scope.history = true;
        //    }
        //}

        $scope.Verify = function () {
            var url = 'api/IdasTrnPhyDoc/PhyDocVerify';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    Notify.alert(resp.data.message, 'success')
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });
        }


        $scope.raiseQueryRM = function () {

            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                sanction_gid: $scope.sanction_gid,
                document_gid: $scope.document_gid,
                cad_query: $scope.content,
                document_name: $scope.document_name,
                document_title: $scope.txtdocument_title,
                type_of_conversation: 'External'
            }

            var url = 'api/IdasTrnPhyDoc/PhyDocCadQuery';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = '';
                   
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });


        }

        $scope.raiseResponse = function (id, textArea) {
            var params = {
                docconversation_gid: id,
                rm_response: textArea
            }

            var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = " ";
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }
        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    //var phyPath = val1;

                    //var relPath = phyPath.split("EMS");
                    //var relpath1 = relPath[1].replace("\\", "/");
                    //var hosts = window.location.host;
                    //var prefix = location.protocol + "//";
                    //var str = prefix.concat(hosts, relpath1);
                    //var link = document.createElement("a");
                    //var name = val2.split(".")
                    //link.download = val2;
                    //var uri = str;
                    //link.href = uri;
                    //link.click();

                    DownloaddocumentService.Downloaddocument(val1, val2);
                }

                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;

                });
            }
        }

        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
        $scope.UploadDocCancel = function (conversationdocument_gid) {
            var params = {
                conversationdocument_gid: conversationdocument_gid
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }

        $scope.updateFinalRemarks = function () {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                phyfinal_remarks: $scope.phyfinal_remarks
            }

            var url = 'api/IdasTrnPhyDoc/DocPhyFinalRemarks';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Final Remarks Updated Successfully..!!', 'success')
                    //$scope.content = " "
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }

            });
        }

        $scope.docconback = function () {

            $state.go('app.idasTrnPhyDocVerification');


        }
        $scope.update = function () {

            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                document_date: $scope.phydocument_date
            }

            var url = 'api/IdasTrnPhyDoc/PostPhyDocDate';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')

                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }
                activate();
            });
        }


        $scope.onchangecopy = function (types_of_copy) {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                type_copy: $scope.types_of_copy
            }
            var url = "api/IdasTrnPhyDoc/PostPhyDocumentType";
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    activate();
                    Notify.alert(resp.data.message)
                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocCoversation', idasTrnDocCoversation);

    idasTrnDocCoversation.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','cmnfunctionService'];

    function idasTrnDocCoversation($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocCoversation';
        var sanctiondocument_gid;
        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');
            $scope.lspage = localStorage.getItem('lspage');

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/IdasTrnSanctionDoc/DocConversation';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url,params).then(function (resp) {
                unlockUI();
                $scope.docconversationlist = resp.data.MdlDocConversation;
               
            });
            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.document_date = resp.data.scandocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
              
               
            });

            //var params = {
            //    conversationdocument_gid: 'undefine'
            //}
            //var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            //lockUI();
            //SocketService.getparams(url, params).then(function (resp) {
            //});
        }
        $scope.btnShow = function (id, reply) {
            $scope.IsVisible = true;
            $scope.Visible = false;

        }
        $scope.btnHide = function () {
            $scope.IsVisible = false;
            $scope.Visible = true;
        }
        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    var phyPath = val1;
                    console.log(phyPath);
                    var relPath = phyPath.split("EMS");
                    var relpath1 = relPath[1].replace("\\", "/");
                    var hosts = window.location.host;
                    var prefix = "http://"
                    var str = prefix.concat(hosts, relpath1);
                    var link = document.createElement("a");
                    var name = val2.split(".")
                    link.download = val2;
                    var uri = str;
                    link.href = uri;
                    link.click();
                }
              
                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;
                 
                });
            }
        }
        $scope.raiseQuery = function () {
          
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid:$scope.document_gid,
                    cad_query: $scope.content
                }
             
                var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = '';
                        activate();
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred!')
                    }
                    activate();
                });

           
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')
                   
                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {
                       
                        $scope.uploaddocument = resp.data.uploaddocument;
                      
                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.update=function()
        {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                document_date: $scope.document_date
            }
           
            var url = 'api/IdasTrnSanctionDoc/PostScanDocDate';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')
                   
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }

        $scope.updateFinalRemarks=function()
        {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                scanfinal_remarks: $scope.scanfinal_remarks
            }

            var url = 'api/IdasTrnSanctionDoc/DocScanFinalRemarks';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Final Remarks Updated Successfully..!!', 'success')
                    //$scope.content = " "
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }
        $scope.UploadDocCancel = function (conversationdocument_gid) {
            var params = {
                conversationdocument_gid: conversationdocument_gid
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')
                   
                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }

        $scope.docconback=function()
        {
            if ($scope.lspage=="Maker")
            {
                $state.go('app.idasTrnDocVerifyMkr');
            }
            if ($scope.lspage == "Checker")
            {
                $state.go('app.idasTrnDocVerifyChkr');
            }
            
        }

        $scope.raiseResponse = function (id, count, textArea)
        {
            var params = {
                docconversation_gid: id,
                rm_response: textArea
            }
            
            var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = " ";
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocCoversationChkr', idasTrnDocCoversationChkr);

    idasTrnDocCoversationChkr.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll','cmnfunctionService'];

    function idasTrnDocCoversationChkr($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,$anchorScroll,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocCoversationChkr';
        var sanctiondocument_gid;
        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            $scope.valueExternal = false;
            $scope.valueInternal = false;
            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');
            $scope.conversation_count = localStorage.getItem('conversation_count');
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                    console.log($scope.docconversationlistInternal);
                    $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }


            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;

                }


            });
            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.document_date = resp.data.scandocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.types_of_copy = resp.data.types_of_copy;

                $scope.checker_status = resp.data.checker_status;

                $scope.txtfinalremarks = resp.data.finalremarks;

                if (resp.data.finalremarks == 'Others') {
                    $scope.other_remarks = true;
                } else {
                    $scope.other_remarks = false;
                }
            });

            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {

                $scope.doc_comments = resp.data.doc_comments;

            });
          
        }

        $scope.onchangeremarks = function (txtfinalremarks) {
            if (txtfinalremarks == 'Others') {
                $scope.other_remarks = true;
            } else {
                $scope.other_remarks = false;
            }
        }

    
        $scope.btncopyinternal=function(index,value)
        {
            $scope.docconversationlistInternal[index].reply=value;
        }
      
        $scope.btnShow = function (id, reply) {
            $scope.IsVisible = true;
            $scope.Visible = false;

        }
        $scope.btnHide = function () {
            $scope.IsVisible = false;
            $scope.Visible = true;
        }
        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    var phyPath = val1;
                    console.log(phyPath);
                    var relPath = phyPath.split("EMS");
                    var relpath1 = relPath[1].replace("\\", "/");
                    var hosts = window.location.host;
                    var prefix = location.protocol + "//";
                    var str = prefix.concat(hosts, relpath1);
                    var link = document.createElement("a");
                    var name = val2.split(".")
                    link.download = val2;
                    var uri = str;
                    link.href = uri;
                    link.click();
                }
              
                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;
                 
                });

                var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                SocketService.get(url).then(function (resp) {

                    $scope.uploaddocument = resp.data.uploaddocument;

                });
            }
        }

       

       
        $scope.raiseQuery = function () {
          
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid:$scope.document_gid,
                    cad_query: $scope.content,
                    document_name: $scope.document_name,
                    document_title: $scope.txtdocument_title,
                    type_of_conversation: 'External'
                }
             
                var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = '';
                        activate();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                    activate();
                });

           
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')
                   
                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {
                       
                        $scope.uploaddocument = resp.data.uploaddocument;
                      
                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.update=function()
        {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                document_date: $scope.document_date
            }
           
            var url = 'api/IdasTrnSanctionDoc/PostScanDocDate';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, 'success')
                   
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning')
                }
                activate();
            });
        }

        $scope.updateFinalRemarks=function()
        {
            if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null)) {
                Notify.alert('Kindly Enter Remarks', 'warning')
            }
            else {
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    scanfinal_remarks: $scope.scanfinal_remarks,
                    finalremarks: $scope.txtfinalremarks
                }

                var url = 'api/IdasTrnSanctionDoc/DocScanFinalRemarks';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert(resp.data.message, 'success')
                        activate();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, 'warning'),
                         $scope.txtfinalremarks = '',
                         $scope.scanfinal_remarks = ''
                    }

                });
            }
        }
        $scope.UploadDocCancel = function (conversationdocument_gid) {
            var params = {
                conversationdocument_gid: conversationdocument_gid
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')
                   
                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }
        $scope.ChkrVerify = function () {
            var url = 'api/IdasTrnSanctionDoc/DocumentConfirmation';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    localStorage.setItem('conversation_count', '1');
                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
              //  activate();
            });
        }
        $scope.docconback=function()
        {
           
                $state.go('app.idasTrnDocVerifyChkr');
          
        }
        $scope.forwardQuery = function (val) {
            var params = {
                docconversation_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to forward this query to RM ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Forward it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/idasTrnMakerCheckerDtls/PostForwardedQuery";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Forwarded Successfully!');
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }
        
        $scope.confirmQuery = function (val,noquery_flag) {
           
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to confirm this query to checker ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Confirmed it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var params = {
                        docconversation_gid: val,
                        rm_response: 'Query Confirmed.'
                    }
                    if (noquery_flag=='Y')
                    {
                        var url = 'api/IdasTrnSanctionDoc/DocNoQueryRmResponse';
                        SocketService.getparams(url, params).then(function (resp) {

                            if (resp.data.status == true) {
                                SweetAlert.swal('Document Confirmed Successfully!');
                                unlockUI();

                                activate();
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });
                    }
                    else {
                        var url = "api/IdasTrnSanctionDoc/DocRmResponse";
                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {
                                SweetAlert.swal('Query Confirmed Successfully!');
                                unlockUI();
                                activate();
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });
                    }
                 
                  

                }

            });
        }
        $scope.btncopy = function (data) {

            $scope.content = data;
            $location.hash('down');
            $anchorScroll();
         
        }
       
        $scope.raiseResponse = function (id, textArea)
        {
            var params = {
                docconversation_gid: id,
                rm_response: textArea
            }
            
            var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = " ";
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }

        $scope.onchangecopy = function (types_of_copy) {
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                type_copy: $scope.types_of_copy
            }
            var url = "api/IdasTrnDocConversation/PostTypeOfCopy";
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    activate();
                    Notify.alert(resp.data.message)
                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentGenerationController', idasTrnDocumentGenerationController);

        idasTrnDocumentGenerationController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function idasTrnDocumentGenerationController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {

        $scope.title = 'idasTrnDocumentGenerationController';
        var vm = this;
        $scope.documentlist_gid = $location.search().documentlist_gid;
        $scope.sanction_gid = $location.search().sanction_gid;
        $scope.document_code = $location.search().document_code;
        $scope.doctemplate_flag = $location.search().doctemplate_flag;
        var lspage = $location.search().lspage;

        var sanction_gid = $scope.sanction_gid;

        activate();
       
        function activate() {
            lockUI();
            if($scope.doctemplate_flag == 'Y')
            {
                var params = {
                    document_gid: $scope.documentlist_gid,
                    sanction_gid: $scope.sanction_gid
                }
                var url = 'api/IdasMstDocList/GetEditDoc2sanction';
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.documentNameEdit = resp.data.document_name;
                    $scope.documentCodeEdit = resp.data.document_code;
                    $scope.template_content = resp.data.template_content;
                });
            }
           else{
                var params = {
                    doclist_gid: $scope.documentlist_gid
                }
                var url = 'api/IdasMstDocList/GetEditDocList';
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.documentNameEdit = resp.data.document_name;
                    $scope.documentCodeEdit = resp.data.document_code;
                });

                var url = 'api/IdasMstDocList/GetDocTemplateContent';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.template_content = resp.data.template_content;
                    unlockUI();
                });
           }
        };

        $scope.generatedocument = function () {
            var param = {
                documentlist_gid: $scope.documentlist_gid,
                template_content: $scope.template_content,
                document_code: $scope.document_code,
                sanction_gid: $scope.sanction_gid,
            };
            var url = 'api/IdasMstDocList/PostDocTemplateGenerate';
            lockUI();
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if(resp.data.status == true){
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    if (lspage == 'createprefil') {
                        $state.go('app.idasTrnPreFilManagement');
                    } else {
                        $location.url('app/idasTrnPreFilGeneration?sanction_gid=' + sanction_gid + '&lspage=' + lspage);
                    }      
                }
                else{
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }

        $scope.back = function () {
            if (lspage == 'createprefil') {
                $state.go('app.idasTrnPreFilManagement');
            } else {
                $location.url('app/idasTrnPreFilGeneration?sanction_gid=' + sanction_gid + '&lspage=' + lspage);
            }
        }
    }
})();
(function () {
    'use strict';
    angular
           .module('angle')
           .controller('idasTrnDocumentTaggingController', idasTrnDocumentTaggingController);

           idasTrnDocumentTaggingController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function idasTrnDocumentTaggingController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingController';

        activate();
        lockUI();
        function activate() {
            $scope.totalDisplayed = 50;
            var url = 'api/IdasTrnDocumentUpload/GetDocumentTaggedCustomer';
          
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.customer_data = resp.data.customer_list;
                // new code start   
                if ($scope.customer_data == null) {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
                else {
                    $scope.total = $scope.customer_data.length;
                    if ($scope.customer_data.length < 100) {
                        $scope.totalDisplayed = $scope.customer_data.length;
                    }
                }
                // new code end
                // $scope.total=$scope.customer_data.length;
            });
            var url = 'api/IdasTrnDocumentUpload/GetDocumentCustomerCount';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.tagged_count = resp.data.tagged_count;
                $scope.untagged_count = resp.data.untagged_count;
            });
        }

        $scope.viewcustomerdocument = function (customer_gid) {
            $location.url('app/idasTrnDocumentTaggingView?customer_gid='+customer_gid);
        }

        // UnTagged Customer Tab

        $scope.UnTagged_customer = function () {
            lockUI();
            $scope.totalDisplayed = 50;
            var url = 'api/IdasTrnDocumentUpload/GetDocumentUnTaggedCustomer';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.customer_data = resp.data.customer_list;
                // new code start   
                if ($scope.customer_data == null) {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
                else {
                    $scope.total = $scope.customer_data.length;
                    if ($scope.customer_data.length < 100) {
                        $scope.totalDisplayed = $scope.customer_data.length;
                    }
                }
                
            });
        }
       
        // Tagged Customer Tab

        $scope.Tagged_customer = function () {
            lockUI();
            $scope.totalDisplayed = 50;
            var url = 'api/IdasTrnDocumentUpload/GetDocumentTaggedCustomer';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.customer_data = resp.data.customer_list;
                // new code start   
                if ($scope.customer_data == null) {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
                else {
                    $scope.total = $scope.customer_data.length;
                    if ($scope.customer_data.length < 100) {
                        $scope.totalDisplayed = $scope.customer_data.length;
                    }
                }
                // new code end
                // $scope.total=$scope.customer_data.length;
            });
        }
        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.customer_data != null) {

                if (pagecount < $scope.customer_data.length) {
                    $scope.totalDisplayed += Number;
                    if ($scope.customer_data.length < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.customer_data.length;
                        Notify.alert(" Total Summary " + $scope.customer_data.length + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.customer_data.length + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            // $scope.totalDisplayed += Number;
            // console.log(pagecount);
           
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentTaggingCreditChildController', idasTrnDocumentTaggingCreditChildController);

    idasTrnDocumentTaggingCreditChildController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentTaggingCreditChildController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingCreditChildController';
   
        activate();
        var customer_gid;
        var creditfileupload_gid;
        var parent_directorygid;

        function activate() {
            parent_directorygid = localStorage.getItem('parent_directorygid');
            customer_gid = localStorage.getItem('customer_gid');
            creditfileupload_gid = localStorage.getItem('creditfileupload_gid');

            var params = {
                creditfileupload_gid: creditfileupload_gid
            }

            var url = "api/IdasTrnDocumentUpload/CreditFilesBreadCrumb";


            SocketService.getparams(url, params).then(function (resp) {
                $scope.BreadCrumb_list = resp.data.FolderDtls;
            });
           
            var params = {
                parent_directorygid: creditfileupload_gid,
                customer_gid: customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/CreditFolderDtls';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.CreditDocumentDtls_list = resp.data.DirectoryDtls;

            });

            var params = {
                customer_gid: customer_gid
            }
            var url = 'api/customer/Getcustomerdetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerName = resp.data.customerNameedit;
                $scope.Customerurn = resp.data.customer_urnedit;
            });

            var url = 'api/IdasTrnDocumentUpload/GetCreditTeamFlag';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.creditteam_flag = resp.data.creditteam_flag;
            });
        }

        $scope.goCreditChild = function (val) {
            localStorage.setItem('customer_gid', customer_gid);
            localStorage.setItem('creditfileupload_gid', val);
         
            activate();
        }
        
        $scope.home = function () {
            $location.url('app/idasTrnDocumentTaggingView?customer_gid=' + customer_gid);
        }

        // Credit Document File Upload 

        $scope.CreditpopFileShow = function () {

            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditUnderwritingDocumentLabelList;
                });

                // Credit Document Upload

                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    if (fi.value == "") {
                        Notify.alert('Kindly select the file');
                        return;
                    }
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();

                        var documentlabel_name = $('#documentlabelname :selected').text();

                        frm.append('parent_directorygid', creditfileupload_gid);
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid', customer_gid);
                        frm.append('documentlabel_gid', $scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name', documentlabel_name);
                        frm.append('remarks', $scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
                            frm.append(fi.files[i].name, fi.files[i]);
                           
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }
                        }
                        lockUI();
                        var url = 'api/IdasTrnDocumentUpload/CreditFileUpload';

                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            unlockUI();
                        });
                    }
                    else {
                        alert('Please select a file.')
                    }
                }   

                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }
        
        // Credit Folder Creation

        $scope.CreditFolder = function () {

            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.createFolder = function () {

                    var params = {
                        folder_name: $scope.folderName,
                        directory_type: 'Folder',
                        parent_directorygid: creditfileupload_gid,
                        customer_gid: customer_gid
                    }

                    var url = 'api/IdasTrnDocumentUpload/CreateCreditFolder';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                            activate();
                        }
                    });

                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Folder Rename

        $scope.RenameCreditFolder = function (gid, type, Filerename) {
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder = Filerename;
                $scope.renameSave = function () {
                    var params = {
                        creditfileupload_gid: gid,
                        folder_name: $scope.renameFolder,
                        type: type
                    }
                    var url = 'api/IdasTrnDocumentUpload/RenameCreditFile';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
            }
        }

        // Delete Credit Document

        $scope.DeleteCreditDocument = function (gid) {
            var params = {
                creditfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();

                    var url = "api/IdasTrnDocumentUpload/CreditFileDelete";

                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            unlockUI();
                        }
                    });

                }

            });
        }

        // Download Credit Document

        $scope.downloadcreditdocument = function (val1, val2) {

            // var phyPath = val1;

            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split(".")
            // link.download = val2;
            // var uri = str;
            // link.href = uri;

            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentTaggingCreditOperationsChildController', idasTrnDocumentTaggingCreditOperationsChildController);

    idasTrnDocumentTaggingCreditOperationsChildController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentTaggingCreditOperationsChildController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingCreditOperationsChildController';

        activate();
        var customer_gid;
        var creditoperationsfileupload_gid;
        var parent_directorygid;

        function activate() {
            parent_directorygid = localStorage.getItem('parent_directorygid');
            customer_gid = localStorage.getItem('customer_gid');
            creditoperationsfileupload_gid = localStorage.getItem('creditoperationsfileupload_gid');

            var params = {
                creditoperationsfileupload_gid: creditoperationsfileupload_gid
            }

            var url = "api/IdasTrnDocumentUpload/CreditOperationsFilesBreadCrumb";


            SocketService.getparams(url, params).then(function (resp) {
                $scope.BreadCrumb_list = resp.data.FolderDtls;
            });

            var params = {
                parent_directorygid: creditoperationsfileupload_gid,
                customer_gid: customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/CreditOperationsFolderDtls';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.CreditOperationsDocumentDtls_list = resp.data.DirectoryDtls;

            });

            var params = {
                customer_gid: customer_gid
            }
            var url = 'api/customer/Getcustomerdetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerName = resp.data.customerNameedit;
                $scope.Customerurn = resp.data.customer_urnedit;
            });

            var url = 'api/IdasTrnDocumentUpload/GetCreditOperationsTeamFlag';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.creditoperationteam_flag = resp.data.creditoperationteam_flag;
            });
        }

        $scope.goCreditOperationsChild = function (val) {
            localStorage.setItem('customer_gid', customer_gid);
            localStorage.setItem('creditoperationsfileupload_gid', val);

            activate();
        }

        $scope.home = function () {
            $location.url('app/idasTrnDocumentTaggingView?customer_gid=' + customer_gid);
        }

        // Credit Document File Upload 

        $scope.CreditOperationspopFileShow = function () {

            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditOperationsDocumentLabelList;
                });

                // Credit Document Upload

                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    if (fi.value == "") {
                        Notify.alert('Kindly select the file','warning');
                        return;
                    }
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();

                        var documentlabel_name = $('#documentlabelname :selected').text();

                        frm.append('parent_directorygid', creditoperationsfileupload_gid);
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid', customer_gid);
                        frm.append('documentlabel_gid', $scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name', documentlabel_name);
                        frm.append('remarks', $scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
                            frm.append(fi.files[i].name, fi.files[i]);
                           
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }
                        }

                        var url = 'api/IdasTrnDocumentUpload/CreditOperationsFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            unlockUI();
                        });
                    }
                    else {
                        alert('Please select a file.')
                    }
                }

                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Folder Creation

        $scope.CreditOperationsFolder = function () {

            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.createFolder = function () {

                    var params = {
                        folder_name: $scope.folderName,
                        directory_type: 'Folder',
                        parent_directorygid: creditoperationsfileupload_gid,
                        customer_gid: customer_gid
                    }

                    var url = 'api/IdasTrnDocumentUpload/CreateCreditOperationsFolder';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                            activate();
                        }
                    });

                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Folder Rename

        $scope.RenameCreditOperationsFolder = function (gid, type, Filerename) {
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder = Filerename;
                $scope.renameSave = function () {
                    var params = {
                        creditoperationsfileupload_gid: gid,
                        folder_name: $scope.renameFolder,
                        type: type
                    }
                    var url = 'api/IdasTrnDocumentUpload/RenameCreditOperationsFile';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
            }
        }

        // Delete Credit Document

        $scope.DeleteCreditOperationsDocument = function (gid) {
            var params = {
                creditoperationsfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();

                    var url = "api/IdasTrnDocumentUpload/CreditOperationsFileDelete";

                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            unlockUI();
                        }
                    });
                }
            });
        }

        // Download Credit Document

        $scope.downloadcreditoperationsdocument = function (val1, val2) {

            // var phyPath = val1;

            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split(".")
            // link.download = val2;
            // var uri = str;
            // link.href = uri;

            // link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentTaggingDocChildController', idasTrnDocumentTaggingDocChildController);

        idasTrnDocumentTaggingDocChildController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentTaggingDocChildController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingDocChildController';
        // var customer2sanction_gid=$location.search().customer2sanction_gid;
        // var customer_gid=$location.search().customer_gid;
        // var customerfileupload_gid=$location.search().customerfileupload_gid;
        activate();
        var customer2sanction_gid;
        var customer_gid;
        var customerfileupload_gid;
        var parent_directorygid;

        function activate(){
            parent_directorygid=localStorage.getItem('parent_directorygid');
             customer2sanction_gid=localStorage.getItem('customer2sanction_gid');
             customer_gid=localStorage.getItem('customer_gid');
             customerfileupload_gid=localStorage.getItem('customerfileupload_gid');
             $scope.lspage = localStorage.getItem('lspage');
            
           var params={
                customerfileupload_gid:customerfileupload_gid
            }

            var url="api/IdasTrnDocumentUpload/CustomerFilesBreadCrumb";
           
            
            SocketService.getparams(url,params).then(function (resp) {
                    $scope.BreadCrumb_list = resp.data.FolderDtls;
            });
            var params={
                parent_directorygid:customerfileupload_gid,
                customer2sanction_gid: customer2sanction_gid,
                customer_gid:customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/CustomerFolderDtls';
            SocketService.getparams(url,params).then(function (resp) {
                if(resp.data.status==true){
                    $scope.DocumentDtls_list = resp.data.DirectoryDtls;
                }
                else{
                    $scope.DocumentDtls_list = null;
                }
               
              
            });

            var url = 'api/IdasTrnDocumentUpload/GetCadTeamFlag';
          
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.cadteam_flag = resp.data.cadteam_flag;
            });

            var params = {
                customer_gid: customer_gid
            }
           
            var url = 'api/customer/Getcustomerdetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerName = resp.data.customerNameedit;
                $scope.Customerurn = resp.data.customer_urnedit;
            });
        }

        
        // $scope.goChild=function(val){
        //     console.log(val);
        //     $location.url('app/idasTrnDocumentTaggingDocChild?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid+'&?&customerfileupload_gid='+val);
        // }

        $scope.goChild=function(val){
            localStorage.setItem('customer_gid',customer_gid);
            localStorage.setItem('customer2sanction_gid',customer2sanction_gid);
            localStorage.setItem('customerfileupload_gid',val);
            activate();

          //  $location.url('app/idasTrnDocumentTaggingDocChild?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid+'&?&customerfileupload_gid='+val);
        }
        $scope.back=function()
        {
            if ($scope.lspage=="Sanction")
            {
                $location.url('app/idasTrnDocumentTaggingDocView?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid);
            }
            if ($scope.lspage == "Customer")
            {
                $location.url('app/idasTrnDocumentTaggingView?customer_gid='+customer_gid+'&?&customer2sanction_gid='+'');
            }
            
        }

        /* $scope.back = function () {

            $location.url('app/idasTrnDocumentTaggingDocView?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid);
        }
 */
        $scope.home = function () {
            if ($scope.lspage=="Sanction")
            {
                $location.url('app/idasTrnDocumentTaggingDocView?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid);
            }
            if ($scope.lspage == "Customer")
            {
                $location.url('app/idasTrnDocumentTaggingView?customer_gid='+customer_gid+'&?&customer2sanction_gid='+'');
            }
           
        }

      
        $scope.RenameFolder=function(gid,type,Filerename){
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.folderrename = function (string1) {
                    if (string1.length > 128) {
                        $scope.message1 = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message1 = ""
                    }
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder=Filerename;
                 $scope.renameSave = function () {
                     var params = {
                    
                        customerfileupload_gid:gid,
                        folder_name:$scope.renameFolder,
                        type:type
                     }
                   
                    var url = 'api/IdasTrnDocumentUpload/RenameCustomerFile';

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                             activate();
                         }
                     });

                 }
            }
        } 

        $scope.deleteDocument = function (gid) {
            var params = {
                customerfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                   
                 var url = "api/IdasTrnDocumentUpload/FileDelete";
                  
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            // Notify.alert(resp.data.message, {
                            //     status: 'danger',
                            //     pos: 'top-center',
                            //     timeout: 3000
                            // });
                            unlockUI();
                        }
                    });

                }

            });
        }
        
        $scope.PopupFolder=function(){
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.foldername = function (string) {
                    if (string.length > 128) {
                        $scope.message = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message = ""
                    }
                }
                $scope.createFolder = function () {
                     var params = {
                        folder_name:$scope.folderName,
                        directory_type:'Folder',
                        parent_directorygid:customerfileupload_gid,
                        customer2sanction_gid:customer2sanction_gid,
                        customer_gid:customer_gid,
                        customerfileupload_gid:customerfileupload_gid
                     }
                    
                     var url = 'api/IdasTrnDocumentUpload/CreateCustomerFolder';

                     SocketService.post(url, params).then(function (resp) {
                       
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                             activate();
                         }
                     });

                 }
                 $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.downloadsdocument = function (val1, val2) {

            // var phyPath = val1;
           
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split(".")
            // link.download = val2;
            // var uri = str;
            // link.href = uri;
           
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.FileShow=function(){
            if($scope.DivFile==true){
                $scope.DivFile=false;
            }
            else{
                $scope.DivFile=true;
            }
        }
      

      $scope.popFileShow=function(){
           
            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
               
                $scope.close = function () {
                    $modalInstance.close('closed');
                };

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditAdminDocumentLabelList;
                });
                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();
                        var documentlabel_name = $('#documentlabelname :selected').text();
                        frm.append('parent_directorygid', customerfileupload_gid);
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid',customer_gid);
                        frm.append('customer2sanction_gid',customer2sanction_gid);
                        frm.append('documentlabel_gid',$scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name',documentlabel_name);
                        frm.append('remarks',$scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
        
                            frm.append(fi.files[i].name, fi.files[i]);
                           
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }                     
                        }
                      
                        var url = 'api/IdasTrnDocumentUpload/CustomerFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                           
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                })
                                 activate();
                             }
                             $modalInstance.close('closed');
                            unlockUI();
                        });
        
        
                    }
                    else {
                        alert('Please select a file.')
                    }
                    $modalInstance.close('closed');
                }
               
            }
        } 
       
    }
})();

(function () {
    'use strict';
    angular
           .module('angle')
           .controller('idasTrnDocumentTaggingDocViewController', idasTrnDocumentTaggingDocViewController);

    idasTrnDocumentTaggingDocViewController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$sce', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentTaggingDocViewController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $sce, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingDocViewController';
        var customer2sanction_gid=$location.search().customer2sanction_gid;
        var customer_gid=$location.search().customer_gid;
        
        activate();
      
        function activate() {
            var params = {
                customer2sanction_gid: customer2sanction_gid
            }
           var url = 'api/IdasTrnDocumentUpload/GetDocumentsofSanction';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.document_list = resp.data.MOM_DocumentList;
            });

            var params = {
                customer_gid: customer_gid
            }
           
            var url = 'api/customer/Getcustomerdetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerName = resp.data.customerNameedit;
                $scope.Customerurn = resp.data.customer_urnedit;
            });

            var params = {
                sanction_gid: customer2sanction_gid
            }
           
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionref_no = resp.data.sanction_refno;
                $scope.sanction_date = resp.data.sanction_date;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.entity  = resp.data.entity ;
                $scope.buyerconfirmation_letter = resp.data.status_ofBAL;
                $scope.colanding_status = resp.data.colanding_status;
                $scope.sanction_type = resp.data.sanction_type;
                $scope.ccapproved_by = resp.data.ccapproved_by;
                $scope.ccapproved_date = resp.data.ccapprovedDate;
                $scope.facility_type = resp.data.facility_type;
                $scope.esdeclaration_status = resp.data.esdeclaration_status;
               
            });

            var params = {
                sanction_gid: customer2sanction_gid
            }

            var url = 'api/IdasMstSanction/GetBuyerinfoEdit';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.buyer_list = resp.data.buyer_list;

            });

            var params = {
                parent_directorygid:'$',
                customer2sanction_gid: customer2sanction_gid,
                customer_gid:customer_gid
            }
           var url = 'api/IdasTrnDocumentUpload/CustomerFolderDtls';
          
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.DocumentDtls_list = resp.data.DirectoryDtls;
               
            });
           
            var url = 'api/IdasTrnDocumentUpload/GetCadTeamFlag';
          
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.cadteam_flag = resp.data.cadteam_flag;
            });
                    
           /*  var params={
                customerfileupload_gid:$scope.parent_directorygid
            }

            var url="api/IdasTrnDocumentUpload/CustomerFilesBreadCrumb";
           
            
            SocketService.getparams(url,params).then(function (resp) {
                $scope.BreadCrumb_list = resp.data.FolderDtls;
            }); */

            var params = {
                customer_gid: customer_gid,
                customer2sanction_gid: customer2sanction_gid,
            }
            var url = 'api/IdasTrnDocumentUpload/WorkItemArchivalSpecificSummary';

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                $scope.Documentcustomer_list = resp.data.MdlWorkItem;

            });
            
        }

          
        $scope.goChild=function(val){
            localStorage.setItem('customer_gid',customer_gid);
            localStorage.setItem('customer2sanction_gid',customer2sanction_gid);
            localStorage.setItem('customerfileupload_gid',val);
            localStorage.setItem('parent_directorygid',val);
            localStorage.setItem('lspage','Sanction');
            $state.go('app.idasTrnDocumentTaggingDocChild');

          //  $location.url('app/idasTrnDocumentTaggingDocChild?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid+'&?&customerfileupload_gid='+val);
        }
       
        $scope.back = function () {
            $location.url('app/idasTrnDocumentTaggingView?customer_gid='+customer_gid);
        }

      
      
        $scope.RenameFolder=function(gid,type,Filerename){
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                 $scope.folderrename = function (string1) {
                    if (string1.length > 128) {
                        $scope.message1 = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message1 = ""
                    }
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder=Filerename;
                 $scope.renameSave = function () {
                     var params = {
                    
                        customerfileupload_gid:gid,
                        folder_name:$scope.renameFolder,
                        type:type
                     }
                   
                    var url = 'api/IdasTrnDocumentUpload/RenameCustomerFile';

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                             activate();
                         }
                     });

                 }
            }
        } 

        $scope.deleteDocument = function (gid) {
            var params = {
                customerfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                   
                 var url = "api/IdasTrnDocumentUpload/FileDelete";
                  
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            // Notify.alert(resp.data.message, {
                            //     status: 'danger',
                            //     pos: 'top-center',
                            //     timeout: 3000
                            // });
                            unlockUI();
                        }
                    });

                }

            });
        }
        
        $scope.PopupFolder=function(){
           
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
       
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.foldername = function (string) {
                    if (string.length > 128) {
                        $scope.message = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message = ""
                    }
                }

                $scope.createFolder = function () {

                     var params = {
                        folder_name:$scope.folderName,
                        directory_type:'Folder',
                        parent_directorygid:'$',
                        customer2sanction_gid: customer2sanction_gid,
                        customer_gid:customer_gid
                     }

                     var url = 'api/IdasTrnDocumentUpload/CreateCustomerFolder';

                     SocketService.post(url, params).then(function (resp) {
                       
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                             activate();
                         }
                     });

                 }
                 $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
           
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
           
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);

        }
        $scope.FileShow=function(){
            if($scope.DivFile==true){
                $scope.DivFile=false;
            }
            else{
                $scope.DivFile=true;
            }
        }

        $scope.popFileShow=function(){
           
            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
               
                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditAdminDocumentLabelList;
                });
                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();
                        
                        var documentlabel_name = $('#documentlabelname :selected').text();
                        frm.append('parent_directorygid', '$');
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid',customer_gid);
                        frm.append('customer2sanction_gid',customer2sanction_gid);
                        frm.append('documentlabel_gid',$scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name',documentlabel_name);
                        frm.append('remarks',$scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
        
                            frm.append(fi.files[i].name, fi.files[i]);
                           
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }                    
                        }
                    
                        var url = 'api/IdasTrnDocumentUpload/CustomerFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                           
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            $modalInstance.close('closed');
                            activate();
        
                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                 activate();
                             }
                            unlockUI();
                        });
        
        
                    }
                    else {
                        alert('Please select a file.')
                    }
                    $modalInstance.close('closed');
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
               
            }
        }
       
        $scope.trustAsHtml = function (string) { return $sce.trustAsHtml(string); };

    }
})();

(function () {
    'use strict';
    angular
           .module('angle')
           .controller('idasTrnDocumentTaggingViewController', idasTrnDocumentTaggingViewController);

    idasTrnDocumentTaggingViewController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$sce', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentTaggingViewController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $sce, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnDocumentTaggingViewController';
        var customer_gid = $location.search().customer_gid;
        activate();

        function activate() {
            var params = {
                customer_gid: customer_gid
            }

            var url = 'api/customer/Getcustomerupdatedetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerName = resp.data.customerNameedit;
                $scope.Customerurn = resp.data.customer_urnedit;
                $scope.mobileno = resp.data.mobileNoedit;
                $scope.contactno = resp.data.contactnoedit;
                $scope.clusterManager = resp.data.cluster_manager_name;
                $scope.relationshipmgmt = resp.data.relationshipmgmt_name;
                $scope.creditManager = resp.data.creditmanager_name;
                $scope.zonalHeadName = resp.data.zonal_name;
                $scope.businessHeadName = resp.data.businesshead_name;
                $scope.ContactPerson = resp.data.contactPersonedit;
                $scope.Address1 = resp.data.addressline1edit;
                $scope.Address2 = resp.data.addressline2edit;
                $scope.VerticalCode = resp.data.vertical_code;
                $scope.Constitution = resp.data.constitution_nameedit;
                $scope.emailaddress = resp.data.emailedit;
                $scope.country = resp.data.countryedit;
            });
            var url = 'api/IdasTrnDocumentUpload/sanction2customer';

            SocketService.getparams(url, params).then(function (resp) {

                $scope.sanction_list = resp.data.sanction2customer_list;

            });

            var url = 'api/IdasTrnDocumentUpload/GetCadTeamFlag';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.cadteam_flag = resp.data.cadteam_flag;
            });

            var params = {
                parent_directorygid: '$',
                customer2sanction_gid: '',
                customer_gid: customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/CustomerFolderDtls';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.DocumentDtls_list = resp.data.DirectoryDtls;

            });
            var params = {
                customer_gid: customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/WorkItemArchivalCustomerSummary';

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                $scope.Documentcustomer_list = resp.data.MdlWorkItem;

            });

            var params = {
                parent_directorygid: '$',
                customer_gid: customer_gid
            }
            var url = 'api/IdasTrnDocumentUpload/CreditFolderDtls';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.CreditDocumentDtls_list = resp.data.DirectoryDtls;

            });

            var url = 'api/IdasTrnDocumentUpload/GetCreditTeamFlag';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.creditteam_flag = resp.data.creditteam_flag;
            });

            var params = {
                parent_directorygid: '$',
                customer_gid: customer_gid
            }

            var url = 'api/IdasTrnDocumentUpload/CreditOperationsFolderDtls';

            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.CreditOperationsDocumentDtls_list = resp.data.DirectoryDtls;

            });

            var url = 'api/IdasTrnDocumentUpload/GetCreditOperationsTeamFlag';

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.creditoperationteam_flag = resp.data.creditoperationteam_flag;
            });
        }


        $scope.goChild = function (val) {
            localStorage.setItem('customer_gid', customer_gid);
            localStorage.setItem('customer2sanction_gid', '');
            localStorage.setItem('customerfileupload_gid', val);
            localStorage.setItem('parent_directorygid', val);
            localStorage.setItem('lspage', 'Customer');
            $state.go('app.idasTrnDocumentTaggingDocChild');

            //  $location.url('app/idasTrnDocumentTaggingDocChild?customer_gid='+customer_gid+'&?&customer2sanction_gid='+customer2sanction_gid+'&?&customerfileupload_gid='+val);
        }

        $scope.back = function () {
            $state.go('app.idasTrnDocumentTagging');
        }

        $scope.viewcustomersancdocument = function (customer2sanction_gid) {
            $location.url('app/idasTrnDocumentTaggingDocView?customer2sanction_gid=' + customer2sanction_gid + '&?&customer_gid=' + customer_gid);
        }
        $scope.RenameFolder = function (gid, type, Filerename) {
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.folderrename = function (string1) {
                    if (string1.length > 128) {
                        $scope.message1 = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message1 = ""
                    }
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder = Filerename;
                $scope.renameSave = function () {
                    var params = {

                        customerfileupload_gid: gid,
                        folder_name: $scope.renameFolder,
                        type: type
                    }

                    var url = 'api/IdasTrnDocumentUpload/RenameCustomerFile';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
            }
        }

        $scope.deleteDocument = function (gid) {
            var params = {
                customerfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();

                    var url = "api/IdasTrnDocumentUpload/FileDelete";

                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            // Notify.alert(resp.data.message, {
                            //     status: 'danger',
                            //     pos: 'top-center',
                            //     timeout: 3000
                            // });
                            unlockUI();
                        }
                    });

                }

            });
        }

        $scope.PopupFolder = function () {

            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.foldername = function (string) {
                    if (string.length > 128) {
                        $scope.message = "Allowed only  128 Characters";
                    }
                    else {
                        $scope.message = ""
                    }
                }

                $scope.createFolder = function () {

                    var params = {
                        folder_name: $scope.folderName,
                        directory_type: 'Folder',
                        parent_directorygid: '$',
                        customer2sanction_gid: '',
                        customer_gid: customer_gid
                    }

                    var url = 'api/IdasTrnDocumentUpload/CreateCustomerFolder';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                            activate();
                        }
                    });

                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;

            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }

        $scope.popFileShow = function () {

            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditAdminDocumentLabelList;
                });
                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();

                        var documentlabel_name = $('#documentlabelname :selected').text();
                        frm.append('parent_directorygid', '$');
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid', customer_gid);
                        frm.append('customer2sanction_gid', '');
                        frm.append('documentlabel_gid', $scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name', documentlabel_name);
                        frm.append('remarks', $scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {

                            frm.append(fi.files[i].name, fi.files[i]);
                          
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }
                        }

                        var url = 'api/IdasTrnDocumentUpload/CustomerFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                                $modalInstance.close('closed');
                                activate();

                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                })
                                activate();
                            }
                            unlockUI();
                        });


                    }
                    else {
                        alert('Please select a file.')
                    }
                    $modalInstance.close('closed');
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };

            }
        }

        $scope.trustAsHtml = function (string) { return $sce.trustAsHtml(string); };

        // Credit Document File Upload 

        $scope.CreditpopFileShow = function () {

            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditUnderwritingDocumentLabelList;
                });

                // credit Document Upload

                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    if (fi.value == "") {
                        Notify.alert('Kindly select the file','warning');
                        return;
                    }
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();

                        var documentlabel_name = $('#documentlabelname :selected').text();

                        frm.append('parent_directorygid', '$');
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid', customer_gid);
                        frm.append('documentlabel_gid', $scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name', documentlabel_name);
                        frm.append('remarks', $scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
                            frm.append(fi.files[i].name, fi.files[i]);
                            
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }
                        }

                        var url = 'api/IdasTrnDocumentUpload/CreditFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            unlockUI();
                        });
                    }
                    else {
                        alert('Please select a file.')
                    }
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Folder Creation

        $scope.CreditFolder = function () {

            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.createFolder = function () {

                    var params = {
                        folder_name: $scope.folderName,
                        directory_type: 'Folder',
                        parent_directorygid: '$',
                        customer_gid: customer_gid
                    }

                    var url = 'api/IdasTrnDocumentUpload/CreateCreditFolder';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert('Error Occurred', 'warning')
                            activate();
                        }
                    });

                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Folder Rename

        $scope.RenameCreditFolder = function (gid, type, Filerename) {
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder = Filerename;
                $scope.renameSave = function () {
                    var params = {
                        creditfileupload_gid: gid,
                        folder_name: $scope.renameFolder,
                        type: type
                    }
                    var url = 'api/IdasTrnDocumentUpload/RenameCreditFile';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
            }
        }

        // Delete Credit Document

        $scope.DeleteCreditDocument = function (gid) {
            var params = {
                creditfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();

                    var url = "api/IdasTrnDocumentUpload/CreditFileDelete";

                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            unlockUI();
                        }
                    });

                }

            });
        }

        // Download Credit Document

        $scope.downloadcreditdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;

            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.goCreditChild = function (val) {
            localStorage.setItem('customer_gid', customer_gid);
            localStorage.setItem('creditfileupload_gid', val);
            localStorage.setItem('parent_directorygid', val);

            $state.go('app.idasTrnDocumentTaggingCreditChild');
        }

        // Credit Operations Document File Upload 

        $scope.CreditOperationspopFileShow = function () {

            var modalInstance = $modal.open({
                templateUrl: '/Documentuploadcontent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                var url = 'api/IdasTrnDocumentUpload/GetDocumentLabellist';
                SocketService.get(url).then(function (resp) {
                    $scope.document_labellist = resp.data.CreditOperationsDocumentLabelList;
                });

                // Credit Operations Document Upload

                $scope.uploadfile = function () {
                    var fi = document.getElementById('file');
                    if (fi.value == "") {
                        Notify.alert('Kindly select the file','warning');
                        return;
                    }
                    
                    if (fi.files.length > 0) {
                        var frm = new FormData();

                        var documentlabel_name = $('#documentlabelname :selected').text();

                        frm.append('parent_directorygid', '$');
                        frm.append('directory_type', 'File');
                        frm.append('customer_gid', customer_gid);
                        frm.append('documentlabel_gid', $scope.documentlabel_gid.documentlabel_gid);
                        frm.append('documentlabel_name', documentlabel_name);
                        frm.append('remarks', $scope.remarks);
                        frm.append('project_flag', "Default");
                        for (var i = 0; i <= fi.files.length - 1; i++) {
                            frm.append(fi.files[i].name, fi.files[i]);
                           
                            $scope.uploadfrm = frm;
                            var fname = fi.files.item(i).name;
                            var fsize = fi.files.item(i).size;
                            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                            if (IsValidExtension == false) {
                                alert("File format is not supported..!", {
                                    status: 'danger',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                return false;
                            }
                        }

                        var url = 'api/IdasTrnDocumentUpload/CreditOperationsFileUpload';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $("#file").val('');
                                activate();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            unlockUI();
                        });
                    }
                    else {
                        alert('Please select a file.')
                    }
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Operations Folder Creation

        $scope.CreditOperationsFolder = function () {

            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.createFolder = function () {

                    var params = {
                        folder_name: $scope.folderName,
                        directory_type: 'Folder',
                        parent_directorygid: '$',
                        customer_gid: customer_gid
                    }

                    var url = 'api/IdasTrnDocumentUpload/CreateCreditOperationsFolder';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
            }
        }

        // Credit Operations Folder Rename

        $scope.RenameCreditOperationsFolder = function (gid, type, Filerename) {
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder = Filerename;
                $scope.renameSave = function () {
                    var params = {
                        creditoperationsfileupload_gid: gid,
                        folder_name: $scope.renameFolder,
                        type: type
                    }
                    var url = 'api/IdasTrnDocumentUpload/RenameCreditOperationsFile';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success')
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                            activate();
                        }
                    });

                }
            }
        }

        // Delete Credit Operations Document

        $scope.DeleteCreditOperationsDocument = function (gid) {
            var params = {
                creditoperationsfileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();

                    var url = "api/IdasTrnDocumentUpload/CreditOperationsFileDelete";

                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            unlockUI();
                        }
                    });
                }
            });
        }

        // Download Credit Operations Document

        $scope.downloadcreditoperationsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;

            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.goCreditOperationsChild = function (val) {
            localStorage.setItem('customer_gid', customer_gid);
            localStorage.setItem('creditoperationsfileupload_gid', val);
            localStorage.setItem('parent_directorygid', val);

            $state.go('app.idasTrnDocumentTaggingCreditOperationsChild');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentUploadChild', idasTrnDocumentUploadChild);

    idasTrnDocumentUploadChild.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentUploadChild($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocumentUploadChild';
        
        activate();
        function activate(){
            $scope.DivFile=false;

            $scope.parent_directorygid=localStorage.getItem('parent_directorygid');
            
            var params={
                fileupload_gid:$scope.parent_directorygid
            }

            var url="api/IdasTrnDocumentUpload/BreadCrumb";
           
            
            SocketService.getparams(url,params).then(function (resp) {
             
                    $scope.BreadCrumb_list = resp.data.FolderDtls;
                   
             
            });
            var params={
                parent_directorygid:$scope.parent_directorygid
            }
            var url = 'api/IdasTrnDocumentUpload/FolderDtls';
            SocketService.getparams(url,params).then(function (resp) {
                if(resp.data.status==true){
                    $scope.DirectoryDtls_list = resp.data.DirectoryDtls;
                }
                else{
                    $scope.DirectoryDtls_list = null;
                }
               
              
            });
        }
         $scope.goChild=function(val){
             console.log(val);
            localStorage.setItem('parent_directorygid',val);
           
           activate();

        }

        $scope.RenameFolder=function(gid,type,Filerename){
        
          
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder=Filerename;
                 $scope.renameSave = function () {
                     var params = {
                    
                        fileupload_gid:gid,
                        folder_name:$scope.renameFolder
                     }
                     if(type=="File"){
                        var url = 'api/IdasTrnDocumentUpload/RenameFile';
                     }
                     else{
                        var url = 'api/IdasTrnDocumentUpload/RenameFolder';
                     }
                    
                    

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                             activate();
                         }
                     });

                 }
            }
        }

        $scope.deleteDocument = function (gid) {
            var params = {
                fileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                   
                 var url = "api/IdasTrnDocumentUpload/Delete";
                  
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            // Notify.alert(resp.data.message, {
                            //     status: 'danger',
                            //     pos: 'top-center',
                            //     timeout: 3000
                            // });
                            unlockUI();
                        }
                    });

                }

            });
        }
        $scope.FileDetails = function () {
            var fi = document.getElementById('file');
            if(fi.value==""){
                Notify.alert('Kindly select the file');
                return;
            }
           
            
            if (fi.files.length > 0) {
               
                //document.getElementById('fp').innerHTML =
                //    'Total Files: <b>' + fi.files.length + '</b></br >';

                var frm = new FormData();
                
                frm.append('parent_directorygid', $scope.parent_directorygid);
                frm.append('directory_type', 'File');
                frm.append('project_flag', "Default");
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                    //document.getElementById('fp').innerHTML =
                    //    document.getElementById('fp').innerHTML + '<br /> ' + fname + 'Size ' + fsize;
                }

                var url =  'api/IdasTrnDocumentUpload/FileUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    unlockUI();
                    if (resp.data.status == true) {
                        $("#file").val('');
                        activate();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    unlockUI();
                });


            }
            else {
                alert('Please select a file.')
            }
        }
        // $scope.uploadallocation = function (val, val1, name) {
        //     var item = {
        //         name: val[0].name,
        //         file: val[0]
        //     };
        //     var frm = new FormData();
        //     frm.append('fileupload', item.file);
        //     frm.append('file_name', item.name);
        //     frm.append('parent_directorygid',$scope.parent_directorygid);
        //     frm.append('directory_type', 'File');
        //     frm.append('project_flag', "Default");
        //     $scope.uploadfrm = frm;
        //     var url = 'api/IdasTrnDocumentUpload/FileUpload';
        //     lockUI();
        //     SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


        //         $("#addupload").val('');
               
        //         if (resp.data.status == true) {
        //             unlockUI();
        //             Notify.alert('Document Uploaded Successfully..!!', 'success')

        //            activate();
        //         }
        //         else {
        //             unlockUI();
        //             Notify.alert('File Format Not Supported!')

        //         }

        //     });

        // }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
           
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
           
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.FileShow=function(){
            if($scope.DivFile==true){
                $scope.DivFile=false;
            }
            else{
                $scope.DivFile=true;
            }
        }
        $scope.PopupFolder=function(parent_directorygid){
           
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                 $scope.createFolder = function () {
                     var params = {
                        folder_name:$scope.folderName,
                        directory_type:'Folder',
                        parent_directorygid:parent_directorygid
                     }
                    
                     var url = 'api/IdasTrnDocumentUpload/CreateFolder';

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            Notify.alert('Error Occurred', 'warning')
                             activate();
                         }
                     });

                 }
            }
        }
       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnDocumentUploadMain', idasTrnDocumentUploadMain);

    idasTrnDocumentUploadMain.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnDocumentUploadMain($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        vm.title = 'idasTrnDocumentUploadMain';
        
        activate();
        function activate(){
            $scope.totalDisplayed=0;
            $scope.total = 0;
            $scope.DivFile=false;

            var url = 'api/IdasTrnDocumentUpload/FolderDtls';
            var params={
                parent_directorygid:'$'
            }
            SocketService.getparams(url,params).then(function (resp) {
               // $scope.DirectoryDtls_list = resp.data.DirectoryDtls;
                if(resp.data.status==true){
                    $scope.DirectoryDtls_list=resp.data.DirectoryDtls;
                    if ($scope.DirectoryDtls_list == null) {
                        $scope.total = 0;
                        $scope.totalDisplayed = 0;
                    }
                    else {
                        $scope.total = $scope.DirectoryDtls_list.length;
                        if ($scope.DirectoryDtls_list.length < 100) {
                            $scope.totalDisplayed = $scope.DirectoryDtls_list.length;
                        }
                    }
                   
                   }
                   else{
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                   }
              
            });
        }
        $scope.loadMore= function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
        
            var Number = parseInt(pagecount);
            // new code start
            if ($scope.DirectoryDtls_list != null) {
               
                if (pagecount < $scope.DirectoryDtls_list.length) {
                    $scope.totalDisplayed += Number;
                    if($scope.DirectoryDtls_list.length<$scope.totalDisplayed){
                        $scope.totalDisplayed =$scope.DirectoryDtls_list.length;
                        Notify.alert(" Total Summary " + $scope.DirectoryDtls_list.length + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.DirectoryDtls_list.length + " Records Only", "warning");
                    return;
                }
            }
           
            unlockUI();
        };
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if($scope.pagecount==null){
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#DCDCDC';  
            }
            else{
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#ffa';
            }
        };
        $scope.deleteDocument = function (gid) {
            var params = {
                fileupload_gid: gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete this Folder/File ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                   
                 var url = "api/IdasTrnDocumentUpload/Delete";
                  
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal('Deleted Successfully!');
                            unlockUI();
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            // Notify.alert(resp.data.message, {
                            //     status: 'danger',
                            //     pos: 'top-center',
                            //     timeout: 3000
                            // });
                            unlockUI();
                        }
                    });

                }

            });
        }
        $scope.FileDetails = function () {
            var fi = document.getElementById('file');
           
            if(fi.value==""){
                Notify.alert('Kindly select the file');
                return;
            }
           
            
            if (fi.files.length > 0) {
               
                //document.getElementById('fp').innerHTML =
                //    'Total Files: <b>' + fi.files.length + '</b></br >';

                var frm = new FormData();
                
                frm.append('parent_directorygid', '$');
                frm.append('directory_type', 'File');
                frm.append('project_flag', "Default");
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                    //document.getElementById('fp').innerHTML =
                    //    document.getElementById('fp').innerHTML + '<br /> ' + fname + 'Size ' + fsize;
                }

                var url =  'api/IdasTrnDocumentUpload/FileUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                unlockUI();
                    if (resp.data.status == true) {
                        $("#file").val('');
                        activate();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }
                    unlockUI();
                });


            }
            else {
                alert('Please select a file.')
            }
        }

        // $scope.uploadallocation = function (val, val1, name) {
        //     var item = {
        //         name: val[0].name,
        //         file: val[0]
        //     };
        //     var frm = new FormData();
        //     frm.append('fileupload', item.file);
        //     frm.append('file_name', item.name);
        //     frm.append('parent_directorygid', '$');
        //     frm.append('directory_type', 'File');
        //      frm.append('project_flag', "Default");
        //     $scope.uploadfrm = frm;
        //     var url = 'api/IdasTrnDocumentUpload/FileUpload';
        //     lockUI();
        //     SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


        //         $("#addupload").val('');
               
        //         if (resp.data.status == true) {
        //             unlockUI();
        //             Notify.alert('Document Uploaded Successfully..!!', 'success')

        //            activate();
        //         }
        //         else {
        //             unlockUI();
        //             Notify.alert('File Format Not Supported!')

        //         }

        //     });

        // }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;
           
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
           
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.goChild=function(val){
            localStorage.setItem('parent_directorygid',val);
            $state.go('app.idasTrnDocumentUploadChild');

        }
        $scope.FileShow=function(){
            if($scope.DivFile==true){
                $scope.DivFile=false;
            }
            else{
                $scope.DivFile=true;
            }
        }
        $scope.PopupFolder=function(){
           
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                 $scope.createFolder = function () {
                     var params = {
                        folder_name:$scope.folderName,
                        directory_type:'Folder',
                        parent_directorygid:'$'
                     }
                    
                     var url = 'api/IdasTrnDocumentUpload/CreateFolder';

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            Notify.alert('Error Occurred', 'warning')
                             activate();
                         }
                     });

                 }
            }
        }

        $scope.RenameFolder=function(gid,type,Filerename){
           
          
            var modalInstance = $modal.open({
                templateUrl: '/myModalContent1.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.close = function () {
                    $modalInstance.close('closed');
                };
                $scope.renameFolder=Filerename;
                 $scope.renameSave = function () {
                     var params = {
                    
                        fileupload_gid:gid,
                        folder_name:$scope.renameFolder
                     }
                     if(type=="File"){
                        var url = 'api/IdasTrnDocumentUpload/RenameFile';
                     }
                     else{
                        var url = 'api/IdasTrnDocumentUpload/RenameFolder';
                     }
                    
                    

                     SocketService.post(url, params).then(function (resp) {
                         if (resp.data.status == true) {
                            $modalInstance.close('closed');
                             Notify.alert(resp.data.message, 'success')
                             activate();

                         }
                         else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning')
                             activate();
                         }
                     });

                 }
            }
        }
       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnEditNocAndNdcController', idasTrnEditNocAndNdcController);

    idasTrnEditNocAndNdcController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams','cmnfunctionService'];

    function idasTrnEditNocAndNdcController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnEditNocAndNdcController';
        $scope.nocandndc_gid = $location.search().lsnocandndc_gid;
        var nocandndc_gid = $scope.nocandndc_gid;
        activate();

        function activate() {
            var param = {
                nocandndc_gid: $scope.nocandndc_gid
            };
            var url = 'api/IdasNocAndNdc/GetNocDocumentEditList';
            SocketService.getparams(url, param).then(function (resp) {

                $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
            });

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open1 = true;
            };
            vm.calender = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open2 = true;
            };
            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open3 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

            var url = 'api/IdasNocAndNdc/TempClear';
            SocketService.get(url).then(function (resp) {
            });

            var url = 'api/IdasNocAndNdc/GetDropDown';
            SocketService.get(url).then(function (resp) {
                $scope.vertical_list = resp.data.vertical_list;
          
            });

            var param = {
                nocandndc_gid: $scope.nocandndc_gid
            }
            var url = 'api/IdasNocAndNdc/EditNoc';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.cbomaker = resp.data.maker_gid;
                $scope.cbochecker = resp.data.checker_gid;
                $scope.txtnocrequestdate = resp.data.nocandndc_date;
                $scope.txtcustomer_name = resp.data.customer_name;
                $scope.cboVertical = resp.data.vertical_gid;
             
                $scope.txtsanction_ref_no = resp.data.sanction_ref_no;
                $scope.txtsanctiondate = resp.data.sanction_date;
                $scope.txtloan_account_no = resp.data.loan_account_no;
                $scope.txtnocissuancedate = resp.data.noc_issuance_date;

            });
        }
        $scope.Nocclose = function () {
            $state.go('app.idasTrnNocAndNdc');

        }

        $scope.NocNDcDocumentUpload = function () {
            
            var fi = document.getElementById('file');
            if (fi.files.length > 0) {
                var frm = new FormData();
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                }
                frm.append('file_name', $scope.txtdoc_name);
                var url = 'api/IdasNocAndNdc/NocDocumentUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    $("#file").val('');

                    var param = {
                        nocandndc_gid: $scope.nocandndc_gid
                    };
                    var url = 'api/IdasNocAndNdc/GetNocDocumentTempEditList';
                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });


                    unlockUI();
                    if (resp.data.status == true) {

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    unlockUI();
                });
            }
            else {
                alert('Please select a file.')
                unlockUI();
            }
            $scope.txtdoc_name = '';
        }


        $scope.downloads = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }
        $scope.uploaddocumentcancel = function (nocandndcdocument_gid) {
            var params = {
                nocandndcdocument_gid: nocandndcdocument_gid,
                nocandndc_gid: nocandndc_gid
            }
            var url = 'api/IdasNocAndNdc/GetNocDocumentDelete';
            SocketService.getparams(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    var params = {
                        
                        nocandndc_gid: nocandndc_gid
                    }
                    var url = 'api/IdasNocAndNdc/GetNocDocumentTempEditList';
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                unlockUI();
            });
        }

        $scope.NocUpdate = function () {
            var lsmaker_name = "";
            var lschecker_name = "";
            var lsmaker_gid = "";
            var lschecker_gid = "";
            
            var vertical_Name = $('#Vertical :selected').text();

            if ($scope.cbomaker != undefined || $scope.cbomaker != null) {

                lsmaker_name = $('#maker_name :selected').text();

                lsmaker_gid = $scope.cbomaker;
            }
            if ($scope.cbochecker != undefined || $scope.cbochecker != null) {

                lschecker_name = $('#checker_name :selected').text();

                lschecker_gid = $scope.cbochecker;
            }
           
            
            var params = {
                nocandndc_gid: nocandndc_gid,
                maker_gid: lsmaker_gid,
                maker_name: lsmaker_name,
                checker_gid: lschecker_gid,
                checker_name: lschecker_name,
                
                vertical_gid: $scope.cboVertical,
                vertical_name: vertical_Name,

                customer_name: $scope.txtcustomer_name,
                sanction_ref_no: $scope.txtsanction_ref_no,
                sanction_date: $scope.txtsanctiondate,
                loan_account_no: $scope.txtloan_account_no,
                noc_issuance_date: $scope.txtnocissuancedate, 
                nocandndc_date: $scope.txtnocrequestdate
            }
            var url = 'api/IdasNocAndNdc/UpdateNoc';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                $state.go('app.idasTrnNocAndNdc');
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnFile2Despatch', idasTrnFile2Despatch);

    idasTrnFile2Despatch.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies', '$filter', 'ngTableParams', '$timeout', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnFile2Despatch($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies, $filter, ngTableParams, $timeout, DownloaddocumentService,cmnfunctionService) {
        var vm = this;
        $scope.tabbatch = false;
        $scope.tabbox = false;
        $scope.tabdespatch = false;
        $scope.tabpendingbatch = false;

        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.IsCreate = false;
            $scope.IsCreateBox = false;
            $scope.user = {};
            $scope.box = {};
            $scope.tab = {};
           
            // $scope.totalDisplayedBatch = 100;
            // $scope.totalDisplayedBox = 100;
            $scope.totalDisplayedDespatch = 100;
            $scope.totalDisplayedpendingbatch = 100;
            vm.calenderDespatch = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openDespatch = true;
            };
            vm.calenderBox = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openBox = true;
            };
           
          
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined)
            {
                if(relpath1=="batch")
                {
                    $scope.tabbatch = true;
                }
                else if(relpath1=="box")
                {
                    $scope.tabbox = true;
                }
                else if(relpath1=="despatch")
                {
                    $scope.tabdespatch = true;
                }
                else if (relpath1 == "pendingbatch") {
                    $scope.tabpendingbatch = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined)
                {
                    $scope.tabpendingbatch = true;
                }
                else if ($scope.tab.activeTabId=='batch')
                {
                    $scope.tabbatch = true;

                }
                else if($scope.tab.activeTabId=='box')
                {
                    $scope.tabbox = true;
                }
                else if($scope.tab.activeTabId=='despatch')
                {
                    $scope.tabdespatch = true;
                }
                else if ($scope.tab.activeTabId == 'pendingbatch') {
                    $scope.tabpendingbatch = true;
                }
            }


            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

           

            var url = 'api/IdasTrnFile2Despatch/GetFileCount';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.totalfile_count = resp.data.totalfile_count;
                $scope.taggedfile_count = resp.data.taggedfile_count;
                $scope.untaggedfile_count = resp.data.untaggedfile_count;

                $scope.totalbox_count = resp.data.totalbox_count;
                $scope.taggedbox_count = resp.data.taggedbox_count;
                $scope.untaggedbox_count = resp.data.untaggedbox_count;

                $scope.despatch_count = resp.data.despatch_count;
             

            });

            var url = 'api/IdasTrnFile2Despatch/BatchSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.batch_list = resp.data.MdlbatchSummary;
               
                if( $scope.batch_list==null){
                    $scope.totalBatch=0;
                }
                else{
                    $scope.totalBatch=$scope.batch_list.length;
                 }
               
              
            });

            var url = 'api/IdasTrnFile2Despatch/CartonBoxSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.box_list = resp.data.MdlCartonBoxSummary;
              if($scope.box_list!=null){
                $scope.totalBox=$scope.box_list.length;
              }
               else{
                $scope.totalBox=0;
               }
               
            });

            var url = 'api/IdasTrnFile2Despatch/DespatchSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                if($scope.despatch_list!=null){
                    $scope.totalDespatch=0;
                }
                else{
                    $scope.despatch_list = resp.data.MdlDespatch;
                    $scope.totalDespatch=$scope.despatch_list.length;
                }
               
            });

            var url = 'api/IdasTrnFile2Despatch/BatchPendingSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.pendingbatch_list = resp.data.MdlbatchSummary;

                if ($scope.pendingbatch_list == null) {
                    $scope.totalpendingbatch = 0;
                }
                else {
                    $scope.totalpendingbatch = $scope.pendingbatch_list.length;
                }
            });

        }
      
        $scope.loadMoreDespatch = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedDespatch += Number;
            unlockUI();
        };
        $scope.loadMorependingbatch = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedpendingbatch += Number;
            unlockUI();
        };

        $scope.checkallBatch = function (selected) {
            angular.forEach($scope.batch_list, function (val) {  
                
                    val.checked = selected;
            });
        }
        $scope.checkallBox = function (selected) {
            angular.forEach($scope.box_list, function (val) {
                val.checked = selected;

            });

         
        }
        $scope.UpdateStamp=function(sanction_gid,stampref_no)
        {
            var url = 'api/IdasTrnFile2Despatch/BatchStampNo';
            var params = {
                sanction_gid: sanction_gid,
                stampref_no:stampref_no
            }
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    Notify.alert(resp.data.message)
                }
                $scope.tab.activeTabId = 'batch';
                activate();


            });

        }
        $scope.boxclose=function()
        {
            $scope.IsCreateBox = false;
        }
        $scope.createBox = function () {
            var batch_gid;
            angular.forEach($scope.batch_list, function (val) {

                if (val.checked == true) {
                    batch_gid = val.batch_gid;

                   
                }
            });
            if (batch_gid == undefined)
                {
                Notify.alert('Select Atleast One Record!')
            }
            else {
                $scope.IsCreateBox = true;
            }
        }
        $scope.BoxSubmit=function()
        {
            var batch_list = [];
            var batch_gid;
            angular.forEach($scope.batch_list, function (val) {

                if (val.checked == true) {
                    batch_gid = val.batch_gid;

                    batch_list.push(batch_gid);

                }
            });
            var params = {

                batch_gid: batch_list,
                stampref_no: $scope.box.stampref_no,
                cartonbox_date: $scope.box.BoxedDate,
                remarks: $scope.box.boxRemarks,
                boxbarcoderef_no: $scope.box.barcoderef_no,
            }
            if (batch_gid != undefined) {
                var url = 'api/IdasTrnFile2Despatch/CreateCartonBox';
                lockUI()
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI()
                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();

                        Notify.alert(resp.data.message)
                    }
                    $scope.tab.activeTabId = 'batch';
                    activate();
                });
            }
            else {
                Notify.alert('Select Atleast One Record!')
            }
        }
        $scope.gotodespatchdetails = function () {
            $state.go('app.despatchdetails')
        }
        $scope.boxupdate = function () {
            $state.go('app.boxStampupdate')
        }
        $scope.filedetails = function () {
            $state.go('app.fileStamprefupdate')
        }
        $scope.despatchback = function () {
            $state.go('app.idasTrnFile2Despatch')
        }
        $scope.backfiles = function () {
            $state.go('app.idasTrnFile2Despatch')
        }
        $scope.createDespatch = function () {
            var box_list = [];
            var box_gid;
            angular.forEach($scope.box_list, function (val) {

                if (val.checked == true) {
                    box_gid = val.cartonbox_gid;

                    box_list.push(box_gid);

                }
            });

            if(box_gid!=undefined)
            {
                var params = {
                    conversationdocument_gid: 'undefine'
                }
                var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                });
                unlockUI();
                $scope.IsCreate = true;
            }
            else {
                Notify.alert('Select Atleast One Record!')
            }
          
          
        }
        $scope.close=function()
        {
            $scope.IsCreate = false;
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.despatchdocumentupload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.user.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#commonupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.deletedocument = function (val) {
            var params = {
                conversationdocument_gid: val
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }
        $scope.gotoBatch360 = function (sanction_gid)
        {
            localStorage.setItem('sanction_gid', sanction_gid);
            localStorage.setItem('page', 'Batch');
            $state.go('app.IdasTrnBatchView');
        }
        $scope.gotoBox360 = function (cartonbox_gid) {
            localStorage.setItem('cartonbox_gid', cartonbox_gid);

            $state.go('app.IdasTrnBoxDtlsView');
        }
        $scope.gotoDespatch360=function(despatch_gid)
        {
            localStorage.setItem('despatch_gid', despatch_gid);
          
            $state.go('app.IdasTrnDespatchDtlsView');

        }
        $scope.pendingBatch360 = function (sanction_gid) {
            localStorage.setItem('sanction_gid', sanction_gid);
            localStorage.setItem('page', 'pendingbatch');
            $state.go('app.IdasTrnBatchView');
        }

        $scope.DespatchSubmit = function () {
            var box_list = [];
            var box_gid;
           
            angular.forEach($scope.box_list, function (val) {

                if (val.checked == true) {
                    box_gid = val.cartonbox_gid;

                    box_list.push(box_gid);

                }
            });
          
            var params = {
                cartonbox_gid: box_list,
                despatch_date: $scope.user.txtDespatchDate,
                vendor_name:'Crown',
                contact_person: $scope.user.contactPerson,
                mobile_no: $scope.user.mobileNo,
                stampref_no: $scope.user.stampref_no,
                desptached_by: $scope.user.DespatchedBy,
                remarks: $scope.user.despatchRemarks

            }
          

            var url = 'api/IdasTrnFile2Despatch/CreateDespatch';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $scope.tab.activeTabId = 'despatch';
                    activate();
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();

                    Notify.alert(resp.data.message)
                }
            });

        }

        $scope.UpdateBarCode = function (sanction_gid) {

            var modalInstance = $modal.open({
                templateUrl: '/updatebarcodenumberpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md',
                backdrop: 'static',
                keyboard: false
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params = {
                    sanction_gid: sanction_gid,
                }
                var url = "api/IdasTrnFile2Despatch/EditBarCode";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.customername = resp.data.customer_name;
                    $scope.customer_urn = resp.data.customer_urn;
                    $scope.barcoderef_no = resp.data.barcoderef_no;
                });

                $scope.update = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        barcoderef_no: $scope.barcoderef_no,
                    }
                    var url = "api/IdasTrnFile2Despatch/UpdateBarCode";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.importbatch = function () {
            var modalInstance = $modal.open({
                templateUrl: '/importBatch.html',
                controller: ModalInstanceCtrl,
                backdrop: 'static',
                keyboard: false,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.exportbatchreport = function () {
                    lockUI();
                    var url = 'api/IdasTrnFile2Despatch/BatchExportExcel';
                    SocketService.get(url).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            DownloaddocumentService.Downloaddocument(resp.data.lscloudpath, resp.data.lsname);
                            // var phyPath = resp.data.lspath;
                            // var relPath = phyPath.split("EMS");
                            // var relpath1 = relPath[1].replace("\\", "/");
                            // var hosts = window.location.host;
                            // var prefix = location.protocol + "//";
                            // var str = prefix.concat(hosts, relpath1);
                            // var link = document.createElement("a");
                            // var name = resp.data.lsname.split('.');
                            // link.download = name[0];
                            // var uri = str;
                            // link.href = uri;
                            // link.click();
                        }
                        else {
                            unlockUI();
                            Notify.alert('Error Occurred While Export !', 'warning')
                        }
                    });
                }

                $scope.uploadbatch = function (val, val1, name) {
                  
                    var fileInput = document.getElementById('fileimport');
                    var filePath = fileInput.value;

                    $scope.fileinputvalue = filePath;

                    // Allowing file type
                    var allowedExtensions = /(\.xls|\.xlsx|\.csv)$/i;

                    if (!allowedExtensions.exec(filePath)) {
                        Notify.alert('File Format Not Supported!', 'warning')
                        $modalInstance.close('closed');
                    }
                    //else if (filePath.includes("ImportExcelIndividual") == false) {
                    //    Notify.alert('File Name / Template Not Supported!', 'warning')
                    //    $modalInstance.close('closed');
                    //}
                    else {
                        var item = {
                            name: val[0].name,
                            file: val[0]
                        };
                        var frm = new FormData();
                        frm.append('fileupload', item.file);
                        frm.append('file_name', item.name);
                        frm.append('project_flag', "Default");
                        $scope.uploadfrm = frm;
                    }
                }
                $scope.uploadExcelBatch = function () {

                    if ($scope.fileinputvalue == '' || $scope.fileinputvalue == undefined || $scope.fileinputvalue == null) {
                        Notify.alert('Kindly Select the Excel file', 'warning')
                    }
                    else {
                        var url = 'api/IdasTrnFile2Despatch/BatchImportExcel';
                        lockUI();
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                            if (resp.data.status == true) {
                                unlockUI();
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                                activate();
                                $state.go('app.idasTrnFile2Despatch');
                            }
                            else {
                                unlockUI();
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                            }
                            $("#fileimport").val('');
                        });
                    }

                }

                $scope.uploadExcelCancel = function () {
                    $("#fileimport").val('');
                };
            }
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('angle')
        .controller('limitInfoaddController', limitInfoaddController);

    limitInfoaddController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$parse', 'DownloaddocumentService','cmnfunctionService'];

    function limitInfoaddController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $parse, DownloaddocumentService,cmnfunctionService) {

        var vm = this;
        vm.title = 'limitInfoaddController';

        activate();

        function activate() {

            $scope.lsacreate_gid = localStorage.getItem('lsacreate_gid');

            $scope.document_panel = true;
            $scope.panel = true;
            $scope.panel1 = true;
            $scope.facility = false;
            $scope.amount_validation = false;
            // Calender Popup... //

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            // Calender Popup... //

            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open3 = true;
            };
            $scope.interchangeabilityno = true;
            $scope.interchangeabilityyes = false;
            $scope.onchangefacility = false;
            var date = new Date(),
           mnth = ("0" + (date.getMonth() + 1)).slice(-2),
           day = ("0" + date.getDate()).slice(-2);
            $scope.txtdate = [day, mnth, date.getFullYear()].join("-");
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1

            };
           
            var params=
                {
                    lsacreate_gid: $scope.lsacreate_gid
                }
            var url = 'api/IdasTrnLsaManagement/Getsanction2loanfacility';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
               
            });
            var url = 'api/IdasTrnLsaManagement/limitref_no';
         
            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
            
            });
            var url = 'api/IdasTrnLsaManagement/ODLIM';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.txtodlim = resp.data.odlim;
                if (resp.data.total_document_limit == null)
                {
                    $scope.limit = "0,0";
                }
                else {
                    $scope.limit = resp.data.total_document_limit;
                }
               
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';
         
            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
                $scope.total_document_limit = resp.data.total_document_limit;
                $scope.totol_limit_released = resp.data.totol_limit_released;
            });
           }
     
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.lsaback = function () {
            $state.go('app.lsaManagementadd');
        }
        $scope.loanfacility_amount = function () {
            var input = document.getElementById('txtInputloanfacility_type').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            var lsloanfacilityamount_words = inWords(str);
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtloanfacility_amount = "";

            }
            else {
                document.getElementById('loanfacilityamount_words').innerHTML = lsloanfacilityamount_words;
                $scope.txtloanfacility_amount = output;
            }
           
            $scope.warningfacility_amount = true;
              }
        $scope.lsalimitinfo_submit = function (lsacreate_gid) {
            if ($scope.text == $scope.txtrate_interest)
            {
                lockUI()
            var params = {
                lsacreate_gid: $scope.lsacreate_gid,
                facility_type: $scope.loanmaster_gid.loan_title,
                facility_type_gid:$scope.loanmaster_gid.loanmaster_gid,
                margin: $scope.txtmargin,
                existing_limit: $scope.txtexistinglimit,
                document_limit: $scope.txtdocument_limit,
                limit_released: $scope.txtlimit_released,
                tenure: $scope.txttenure,
                revolving_type: $scope.rdbrevolving,
                sub_limit: $scope.txtsub_limit,
                rate_interest: $scope.txtrate_interest,
                expirydate: $scope.txtexpiry_date,
                limitinfo_remarks: $scope.txtremarks,
                limit_validation:$scope.limit,
                interchangeability: $scope.rdbinterchangeability,
                report_structure:$scope.cboreport_structure,
                odlim: $scope.txtodlim,
                loanfacility_amount: $scope.txtloanfacility_amount,
                change_request: $scope.rdbchangerequest
            };
           
            var url = 'api/IdasTrnLsaManagement/postlimitinfo';
           
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $state.go('app.lsaManagementadd');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
              
            });

            }
            else {
                $scope.document_panel = false;
                if ($scope.uploadfrm != undefined) {
                    lockUI()
                    var url = 'api/IdasTrnLsaManagement/PostROIDocumentUpload';
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        var params = {
                            lsacreate_gid: $scope.lsacreate_gid,
                            facility_type: $scope.loanmaster_gid.loan_title,
                            facility_type_gid: $scope.loanmaster_gid.loanmaster_gid,
                            margin: $scope.txtmargin,
                            existing_limit: $scope.txtexistinglimit,
                            document_limit: $scope.txtdocument_limit,
                            limit_released: $scope.txtlimit_released,
                            tenure: $scope.txttenure,
                            revolving_type: $scope.rdbrevolving,
                            sub_limit: $scope.txtsub_limit,
                            rate_interest: $scope.txtrate_interest,
                            expirydate: $scope.txtexpiry_date,
                            limitinfo_remarks: $scope.txtremarks,
                            limit_validation: $scope.limit,
                            interchangeability: $scope.rdbinterchangeability,
                            report_structure: $scope.cboreport_structure,
                            odlim: $scope.txtodlim,
                            loanfacility_amount: $scope.txtloanfacility_amount,
                            change_request: $scope.rdbchangerequest
                        };

                        var url = 'api/IdasTrnLsaManagement/postlimitinfo';
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                unlockUI()
                                activate();
                                $state.go('app.lsaManagementadd');
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                            }
                            else {
                                unlockUI();
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                            }

                        });
                    });
                }
                else {
                    Notify.alert('ROI amount is changed. Kindly upload the reference document');
                }
            }
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
        }
        $scope.bankdetails = function (lsacreate_gid) {
            var params = {
                lsacreate_gid: $scope.lsacreate_gid,
                bank_name: $scope.txtbank_name,
                account_no: $scope.txtaccount_no,
                ifsc_code: $scope.txtifsc_code,
            };

            var url = 'api/IdasTrnLsaManagement/postbankinfo';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });
            $scope.txtbank_name = '';
            $scope.txtaccount_no = '';
            $scope.txtifsc_code = '';
        }

        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsexistinglimit_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtexistinglimit = "";

            }
            else {
                document.getElementById('existinglimit_words').innerHTML = lsexistinglimit_words;
                $scope.txtexistinglimit = amount;
            }
          

        }
        $scope.amountschange1 = function () {
            var input = document.getElementById('txtInput1').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsdocumentlimit_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdocument_limit = "";

            }
            else {
                document.getElementById('documentlimit_words').innerHTML = lsdocumentlimit_words;
           
            $scope.txtdocument_limit = amount;
            if ((($scope.txtodlim.replace(/[\s,]+/g, '').trim())-($scope.limit.replace(/[\s,]+/g, '').trim())) < ($scope.txtdocument_limit.replace(/[\s,]+/g, '').trim())) {
                $scope.panel1 = false;
            }
            else {
                $scope.panel1 = true;
            }
            }
        }
       
        $scope.amountschange2 = function () {
            var input = document.getElementById('txtInput2').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lslimitreleased_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtlimit_released = "";

            }
            else {
                document.getElementById('limitreleased_words').innerHTML = lslimitreleased_words;
                $scope.txtlimit_released = amount;


                if (($scope.txtlimit_released.replace(/[\s,]+/g, '').trim()) > ($scope.txtdocument_limit.replace(/[\s,]+/g, '').trim() - $scope.txtexistinglimit.replace(/[\s,]+/g, '').trim())) {
                    $scope.panel = false;
                }
                else {
                    $scope.panel = true;
                }
            }
        }
     
        $scope.amountschange3 = function () {
            var input = document.getElementById('txtInput3').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            var lsodlim_words = inWords(str);
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtodlim = "";

            }
            else {
                document.getElementById('odlim_words').innerHTML = lsodlim_words;
                $scope.txtodlim = output;
            }

           
        }
        $scope.interchangeability_yes = function () {
            $scope.interchangeabilityno = false;
            $scope.interchangeabilityyes = true;
          
        }
        $scope.interchangeability_no = function () {
            $scope.interchangeabilityno = true;
            $scope.interchangeabilityyes = false;
            
        }
        $scope.facilityamount=function()
        {
            var params = {
                lsacreate_gid: $scope.lsacreate_gid,
                loanfacility_gid: $scope.loanmaster_gid.loanmaster_gid,
            };
           
            var url = 'api/IdasTrnLsaManagement/Getloanfacilityamount';
            SocketService.post(url, params).then(function (resp) {
                $scope.txtloanfacility_amount = resp.data.loanfacility_amount;
                $scope.txtdocument_limit = resp.data.document_limit;
                $scope.txtmargin = resp.data.margin;
                $scope.txttenure = resp.data.tenure;
                $scope.rdbinterchangeability = resp.data.interchangeability;
                $scope.txtexpiry_date = new Date(resp.data.expiry_date);            
                $scope.rdbrevolving = resp.data.revolving_type;
                $scope.cboreport_structure = resp.data.report_structure;
                if (resp.data.interchangeability == 'Yes')
                {
                    $scope.interchangeabilityyes = true;
                   
                }
                else
                {
                    $scope.interchangeabilityyes = false;
                }
                $scope.onchangefacility = true;
                $scope.amount_validation = true;
                $scope.loanfacilityref_list = resp.data.loanfacilitytype_list;
                if (resp.data.existing_limit == null) {
                    $scope.txtexistinglimit = "0,0";
                }
                else {
                    $scope.txtexistinglimit = resp.data.existing_limit;
                }
                $scope.txtrate_interest = resp.data.proposed_roi;
                $scope.text = resp.data.proposed_roi;
            });
          
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('angle')
        .controller('limitInfoEditController', limitInfoEditController);

    limitInfoEditController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$parse', 'DownloaddocumentService','cmnfunctionService'];

    function limitInfoEditController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $parse, DownloaddocumentService,cmnfunctionService) {

        var vm = this;
        vm.title = 'limitInfoEditController';

        activate();

        function activate() {

            $scope.limitinfodtl_gid = localStorage.getItem('limitinfodtl_gid');

            $scope.document = false;
            $scope.panel = true;
            $scope.panel1 = true;
            $scope.panel2 = true;
            // Calender Popup... //

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            // Calender Popup... //

            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open3 = true;
            };
            $scope.interchangeabilityno = true;
            $scope.interchangeabilityyes = false;
            
            
            var param = {
                limitinfodtl_gid: $scope.limitinfodtl_gid
            };
            var url = 'api/IdasTrnLsaManagement/editsanction2loanfacility';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
            var url = 'api/IdasTrnLsaManagement/GetditLimitInfo';
           
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.cbonode_type = resp.data.node_edit;
                $scope.txtmargin_edit = resp.data.margin_edit;
              //  $scope.txtexpiry_date_edit = resp.data.expiry_date_edit;
                $scope.txtexpiry_date_edit = new Date(resp.data.expirydate_edit);
                $scope.txtdocument_limit_edit = resp.data.document_limit_edit;
                $scope.txtlimit_released_edit = resp.data.limit_released_edit;
                $scope.txttenure_edit = resp.data.tenure_edit;
                $scope.rdbrevolving_edit = resp.data.revolving_type_edit;
                $scope.txtrate_interest_edit = resp.data.rate_interest_edit;
                $scope.txtsub_limit_edit = resp.data.sub_limit_edit;
                $scope.txtremarks_edit = resp.data.limitinfo_remarks_edit;
                $scope.txtexistinglimit_edit = resp.data.existing_limit_edit;
                $scope.cboloanmaster_gid = resp.data.facility_type_gid;
                if (resp.data.interchangeability == 'Yes')
                {
                    $scope.interchangeabilityno = false;
                    $scope.interchangeabilityyes = true;
                }
                else {
                    $scope.interchangeabilityno = true;
                    $scope.interchangeabilityyes = false;
                }
                $scope.rdbinterchangeability = resp.data.interchangeability;
                $scope.limitref_no = resp.data.limitref_no;
                $scope.txtodlim = resp.data.odlim;
                
                $scope.txtloanfacility_amount = resp.data.facility_amount;
                if ((resp.data.total_document_limit == null) || (resp.data.total_document_limit == '') ){
                    $scope.limit = "0,0";
                }
                else {
                    $scope.limit = resp.data.total_document_limit;
                }
                $scope.loanfacilityref_list = resp.data.loanfacilitytype_list;
                $scope.cboreport_structureedit = resp.data.report_structure;
                $scope.rdbchangerequest = resp.data.change_request;
                $scope.text = resp.data.rate_interest_edit;
                $scope.document_name = resp.data.document_name;
                $scope.document_path = resp.data.document_path;
                console.log(resp.data.total_document_limit)
                unlockUI();
            });
        
            
        }

        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.lsaback = function () {
            $state.go('app.lsaManagementadd');
        }
        $scope.facilitytype_amount = function () {
            var input = document.getElementById('txtInputloanfacility_type').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            var lsloanfacilityamount_words = inWords(str);
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtloanfacility_amount = "";

            }
            else {
                document.getElementById('loanfacilityamount_words').innerHTML = lsloanfacilityamount_words;
            $scope.txtloanfacility_amount = output;
            $scope.warningfacility_amount = true;
            }

        }
        $scope.limitinfo_update = function (limitinfodtl_gid) {
            if ($scope.text == $scope.txtrate_interest_edit)
            {

            var loantitle = $('#loan_title :selected').text();
            var params = {
                limitinfodtl_gid: $scope.limitinfodtl_gid,
                facility_type_edit: loantitle,
                facility_type_gid: $scope.cboloanmaster_gid,
                margin_edit: $scope.txtmargin_edit,
                existing_limit_edit: $scope.txtexistinglimit_edit,
                document_limit_edit: $scope.txtdocument_limit_edit,
                limit_released_edit: $scope.txtlimit_released_edit,
                tenure_edit: $scope.txttenure_edit,
                revolving_type_edit: $scope.rdbrevolving_edit,
                sub_limit_edit: $scope.txtsub_limit_edit,
                rate_interest_edit: $scope.txtrate_interest_edit,
               // expirydate_edit: $scope.txtexpiry_date_edit,
                limitinfo_remarks_edit: $scope.txtremarks_edit,
                node_edit: $scope.cbonode_type,
                interchangeability: $scope.rdbinterchangeability,
                expiry_date_edit: $scope.txtexpiry_date_edit,
                odlim: $scope.txtodlim,
                report_structure: $scope.cboreport_structureedit,
                limit_validation: $scope.limit,
                facility_amount: $scope.txtloanfacility_amount,
                change_request: $scope.rdbchangerequest
            };
            
            var url = 'api/IdasTrnLsaManagement/updatelimitinfo';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $state.go('app.lsaManagementadd');
                    activate();
                 
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });

            }
            else {
                if (($scope.document_name == '') || ($scope.document_name == null))
                   { 
                $scope.document = true;
                if ($scope.uploadfrm != undefined) {
                    var url = 'api/IdasTrnLsaManagement/PostROIDocumentUpload';
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        var loantitle = $('#loan_title :selected').text();
                        var params = {
                            limitinfodtl_gid: $scope.limitinfodtl_gid,
                            facility_type_edit: loantitle,
                            facility_type_gid: $scope.cboloanmaster_gid,
                            margin_edit: $scope.txtmargin_edit,
                            existing_limit_edit: $scope.txtexistinglimit_edit,
                            document_limit_edit: $scope.txtdocument_limit_edit,
                            limit_released_edit: $scope.txtlimit_released_edit,
                            tenure_edit: $scope.txttenure_edit,
                            revolving_type_edit: $scope.rdbrevolving_edit,
                            sub_limit_edit: $scope.txtsub_limit_edit,
                            rate_interest_edit: $scope.txtrate_interest_edit,
                            limitinfo_remarks_edit: $scope.txtremarks_edit,
                            node_edit: $scope.cbonode_type,
                            interchangeability: $scope.rdbinterchangeability,
                            expiry_date_edit: $scope.txtexpiry_date_edit,
                            odlim: $scope.txtodlim,
                            report_structure: $scope.cboreport_structureedit,
                            limit_validation: $scope.limit,
                            facility_amount: $scope.txtloanfacility_amount,
                            change_request: $scope.rdbchangerequest
                        };
                        console.log(params);
                        var url = 'api/IdasTrnLsaManagement/updatelimitinfo';
                        lockUI()
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                unlockUI()
                                $state.go('app.lsaManagementadd');
                                activate();
                 
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                            }
                            else {
                                unlockUI();
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                            }

                        });
                    });
                }
                   
                else {
                    Notify.alert('ROI amount is changed. Kindly upload the reference document');
                }
                }
            else{

                    var loantitle = $('#loan_title :selected').text();
                    var params = {
                        limitinfodtl_gid: $scope.limitinfodtl_gid,
                        facility_type_edit: loantitle,
                        facility_type_gid: $scope.cboloanmaster_gid,
                        margin_edit: $scope.txtmargin_edit,
                        existing_limit_edit: $scope.txtexistinglimit_edit,
                        document_limit_edit: $scope.txtdocument_limit_edit,
                        limit_released_edit: $scope.txtlimit_released_edit,
                        tenure_edit: $scope.txttenure_edit,
                        revolving_type_edit: $scope.rdbrevolving_edit,
                        sub_limit_edit: $scope.txtsub_limit_edit,
                        rate_interest_edit: $scope.txtrate_interest_edit,
                        // expirydate_edit: $scope.txtexpiry_date_edit,
                        limitinfo_remarks_edit: $scope.txtremarks_edit,
                        node_edit: $scope.cbonode_type,
                        interchangeability: $scope.rdbinterchangeability,
                        expiry_date_edit: $scope.txtexpiry_date_edit,
                        odlim: $scope.txtodlim,
                        report_structure: $scope.cboreport_structureedit,
                        limit_validation: $scope.limit,
                        facility_amount: $scope.txtloanfacility_amount,
                        change_request: $scope.rdbchangerequest
                    };

                    var url = 'api/IdasTrnLsaManagement/updatelimitinfo';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            $state.go('app.lsaManagementadd');
                            activate();

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }

                    });
                }
            }
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //console.log(val1);
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
        }
        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsexistinglimit_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtexistinglimit_edit = "";

            }
            else {
                document.getElementById('existinglimit_words').innerHTML = lsexistinglimit_words;
                $scope.txtexistinglimit_edit = amount;
              
            }
           
        }
        $scope.amountschange1 = function () {
            var input = document.getElementById('txtInput1').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsdocumentlimit_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdocument_limit_edit = "";

            }
            else {

                document.getElementById('documentlimit_words').innerHTML = lsdocumentlimit_words;
            $scope.txtdocument_limit_edit = amount;
           if ((($scope.txtodlim.replace(/[\s,]+/g, '').trim()) - ($scope.limit.replace(/[\s,]+/g, '').trim())) < ($scope.txtdocument_limit_edit.replace(/[\s,]+/g, '').trim())) {
                $scope.panel2 = false;
            }
            else {
                $scope.panel2 = true;
           }

            }
        }
        $scope.amountschange2 = function () {
            var input = document.getElementById('txtInput2').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lslimitreleased_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtlimit_released_edit = "";

            }
            else {
                document.getElementById('limitreleased_words').innerHTML = lslimitreleased_words;
                $scope.txtlimit_released_edit = amount;


                if (($scope.txtlimit_released_edit.replace(/[\s,]+/g, '').trim()) > ($scope.txtdocument_limit_edit.replace(/[\s,]+/g, '').trim() - $scope.txtexistinglimit_edit.replace(/[\s,]+/g, '').trim())) {
                    $scope.panel = false;
                }
                else {
                    $scope.panel = true;
                }
            }
        }
        $scope.amountschange3 = function () {
            var input = document.getElementById('txtInput3').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            var lsodlim_words = inWords(str);
            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtodlim = "";

            }
            else {

                document.getElementById('odlim_words').innerHTML = lsodlim_words;
                $scope.txtodlim = output;
            }

        }
        $scope.interchangeability_yes = function () {
            $scope.interchangeabilityno = false;
            $scope.interchangeabilityyes = true;
        }
        $scope.interchangeability_no = function () {
            $scope.interchangeabilityno = true;
            $scope.interchangeabilityyes = false;
        }
        $scope.facilityamount = function () {
            var params = {
                limitinfodtl_gid: $scope.limitinfodtl_gid,
                loanfacility_gid: $scope.cboloanmaster_gid,
            };
            var url = 'api/IdasTrnLsaManagement/GetEditloanfacilityamount';
            SocketService.post(url, params).then(function (resp) {
                $scope.txtloanfacility_amount = resp.data.loanfacility_amount;
                $scope.txtdocument_limit_edit = resp.data.document_limit;
                $scope.txtmargin_edit = resp.data.margin;
                $scope.txttenure_edit = resp.data.tenure;
                $scope.rdbinterchangeability = resp.data.interchangeability;
                //$scope.txtexpiry_date_edit = resp.data.expiry_date;
                $scope.txtexpiry_date_edit = new Date(resp.data.expiry_date);
                $scope.rdbrevolving_edit = resp.data.revolving_type;
                $scope.cboreport_structureedit = resp.data.report_structure;
                if (resp.data.interchangeability == 'Yes') {
                    $scope.interchangeabilityyes = true;

                }
                else {
                    $scope.interchangeabilityyes = false;
                }
               
                $scope.onchangefacility = true;
                $scope.amount_validation = true;
                $scope.loanfacilityref_list = resp.data.loanfacilitytype_list;
                $scope.text = resp.data.proposed_roi;
            });
        }

        $scope.cancel = function (limitinfodtl_gid)
        {
            var params = {
                limitinfodtl_gid: limitinfodtl_gid
            }
            var url = 'api/IdasTrnLsaManagement/CancelDocument';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    activate();

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                $scope.document = true;
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lsaapprovalController', lsaapprovalController);

    lsaapprovalController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams','DownloaddocumentService'];

    function lsaapprovalController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService) {
        $scope.title = 'lsaapprovalController';

        activate();

        function activate() {
            $scope.tab = {};
            $scope.totalDisplayedpending = 100;
            $scope.totalDisplayedapproved = 100;
            var url = "api/IdasTrnLsaManagement/LSAapprovalpendinginfo";
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.pendinglist = resp.data.lsa_list;
                $scope.approvedlist = resp.data.approvedlsa_list;
                if ($scope.pendinglist == null) {
                    $scope.pendingCount = 0;
                }
                else {
                    $scope.pendingCount = $scope.pendinglist.length;
                }
                if ($scope.approvedlist == null) {
                    $scope.approvedCount = 0;
                }
                else {
                    $scope.approvedCount = $scope.approvedlist.length;
                }
                $scope.pendinglsa_count = resp.data.pendinglsa_count;
                $scope.approvedlsa_count = resp.data.approvedlsa_count;
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "Pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "Approved") {
                    $scope.tabapproved = true;
                }

            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'Pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'Approved') {
                    $scope.tabapproved = true;
                }

            }
        }
   
        $scope.loadMorepending = function (pagecountpending) {
            lockUI();
            var Number = parseInt(pagecountpending);

            $scope.totalDisplayedpending += Number;
            unlockUI();
        };
        $scope.loadMoreapproved = function (pagecountapproved) {
            lockUI();
            var Number = parseInt(pagecountapproved);

            $scope.totalDisplayedapproved += Number;
            unlockUI();
        };
        $scope.LSApdf = function (lsacreate_gid) {


            var params = {
                lsacreate_gid: lsacreate_gid

            };
            console.log(params);
            var url = 'api/IdasTrnLsaManagement/GetLSApdf';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
               
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.file_path, "LSA Report.pdf");
                    Notify.alert('LSA Report Downloaded Successfully', 'success');
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });

        }
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.View = function (lsacreate_gid)
        {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);

            $location.url('app/IdasTrnLSAapprovalview?lstab=Approved');

          
        }
        $scope.lsaapproval = function (lsacreate_gid) {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);

            $location.url('app/IdasTrnLSAapprovalview?lstab=Pending');

        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lsaapprovalviewController', lsaapprovalviewController);

    lsaapprovalviewController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams', '$parse', 'DownloaddocumentService'];

    function lsaapprovalviewController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams, $parse, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lsaapprovalviewController';

        activate();

        function activate() {
            $scope.lsacreate_gid = localStorage.getItem('lsacreate_gid');
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];

            $scope.stepone = false;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;

            $scope.tobe_recovered = false;
            $scope.already_recovered = false;
            $scope.customer_pnl = true;
            $scope.sanction_pnl = true;
            $scope.signmatching = false;
            $scope.nach_no = false;
            $scope.signmatch_kycprovide = false;
            $scope.escrow_no = false;
            $scope.stamp = false;
            $scope.roc_no = false;

            var params = {
               
                lsacreate_gid: $scope.lsacreate_gid,

            };
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.approval_status = resp.data.approval_status;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
               
            });
            var url = 'api/IdasTrnLsaManagement/Getcustomer2sanctioninfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.txtmargin = resp.data.margin;
                $scope.txttenure = resp.data.tenure;
                $scope.txtexpiry_date = resp.data.expiry_date;
                $scope.txtrate_interest = resp.data.rate_interest;
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
                $scope.total_document_limit = resp.data.total_document_limit;
                $scope.totol_limit_released = resp.data.totol_limit_released;

            });
            var url = 'api/IdasTrnLsaManagement/bankinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.bankinfo_list = resp.data.bankinfo_list;

            });
            var url = 'api/IdasTrnLsaManagement/GetPenalInterest';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.penalinterest_list = resp.data.loanfacilitytype_list;
            });
            var url = 'api/IdasTrnLsaManagement/loanfacility';
            SocketService.get(url).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
            var url = 'api/IdasTrnLsaManagement/Getprocessingfeeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.recovered_type = resp.data.recovered_type;
                $scope.recovered_amount = resp.data.recovered_amount;
                $scope.chequeno_details = resp.data.chequeno_details;
                $scope.chequedate_details = resp.data.chequedate_details;
                $scope.processingfeebank_name = resp.data.processingfeebank_name;
                $scope.processingfeaccount_name = resp.data.processingfeaccount_name;
                $scope.recover_remarks = resp.data.recover_remarks;
            });

            var url = 'api/IdasTrnLsaManagement/Getdocumentchargeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.doc_recovered_amount = resp.data.doc_recovered_amount;
                $scope.doc_chequeno_details = resp.data.doc_chequeno_details;
                $scope.doc_chequedate_details = resp.data.doc_chequedate_details;
                $scope.doc_feebank_name = resp.data.doc_feebank_name;
                $scope.doc_feaccount_name = resp.data.doc_feaccount_name;
                $scope.document_name = resp.data.document_name;
                $scope.document_path = resp.data.document_path;
               
                $scope.document_charge = new Intl.NumberFormat('en-IN').format(Number(resp.data.document_charge)) + ".00";
                $scope.document_charge_gst = resp.data.document_charge_gst + "%";
                if (resp.data.document_name == null) {
                    $scope.document = false;
                }
                else {
                    $scope.document = true;
                }
                $scope.lbldocumentcharge_applicable = resp.data.documentcharge_applicable;
                $scope.lbldocumentcharge_remarks = resp.data.documentcharge_remarks;
            });
            var url = 'api/IdasTrnLsaManagement/Getmakerinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.maker_signature = resp.data.maker_signature;
                $scope.terms_conditions = resp.data.terms_conditions;
                $scope.deferral_captured = resp.data.deferral_captured;
                $scope.head = resp.data.head;

            });
            var url = 'api/IdasTrnLsaManagement/Getcompliancecheckinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.nach_mandate = resp.data.nach_mandate;
                $scope.sign_match = resp.data.sign_match;
                $scope.sign_match_kyc = resp.data.sign_match_kyc;
                $scope.escrow_opened = resp.data.escrow_opened;
                $scope.appropriate_stamp = resp.data.nach_mandate;
                $scope.roc_filling = resp.data.roc_filling;
                $scope.nach_mandate_remarks = resp.data.nach_mandate_remarks;
                $scope.sign_match_remarks = resp.data.sign_match_remarks;
                $scope.sign_match_kyc_remarks = resp.data.sign_match_kyc_remarks;
                $scope.escrow_opened_remarks = resp.data.escrow_opened_remarks;
                $scope.appropriate_stamp_remarks = resp.data.appropriate_stamp_remarks;
                $scope.roc_filling_remarks = resp.data.roc_filling_remarks;
                $scope.cersai = resp.data.cersai;
                $scope.cersai_remarks = resp.data.cersai_remarks;

            });
            var url = 'api/IdasTrnLsaManagement/Getdocument';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;

            });
            var url = "api/IdasTrnLsaManagement/GetdetailsLSA";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.lblcustomer_name = resp.data.customer_name;
                $scope.lblbranch_name = resp.data.branch_name;
                $scope.lblstate = resp.data.state;
                $scope.lblcustomer_urn = resp.data.customer_urn;
                $scope.lblcustomer_location = resp.data.customer_location;
                $scope.lbladdress = resp.data.address1;
                $scope.lblrm_name = resp.data.rm_name;
                $scope.lblcluster_head = resp.data.cluster_head;
                $scope.lblzonal_head = resp.data.zonal_head;
                $scope.lblbusiness_head = resp.data.business_head;
                $scope.lblcredit_manager = resp.data.credit_manager;
                $scope.lblvertical = resp.data.vertical;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblpan_no = resp.data.pan_no;
                $scope.lblsa_code = resp.data.sa_code;
                $scope.lblsanctionref_no = resp.data.sanctionref_no;
                $scope.lblsanction_date = resp.data.sanction_date;
                $scope.lblapproved_by = resp.data.approved_by;
                $scope.lblapproved_date = resp.data.approved_date;
                $scope.lblconstitution = resp.data.constitution;
                $scope.lblpurpose_lending = resp.data.purpose_lending;
                $scope.lblfacility = resp.data.facility;
                $scope.lblmajor_corporate = resp.data.major_corporate;
                $scope.lblhypothecation_date = resp.data.hypothecation_date;
                $scope.lblmortgage_date = resp.data.mortgage_date;
                $scope.lblproduct_solution = resp.data.product_solution;
                $scope.lblmajot_intervention = resp.data.majot_intervention;
                $scope.lblsector = resp.data.sector;
                $scope.lblprimaryvalue_chain = resp.data.primaryvalue_chain;
                $scope.lblsecondaryvalue_chain = resp.data.secondaryvalue_chain;
                $scope.lblremarks = resp.data.remarks;
                $scope.lbllsacreated_date = resp.data.lsacreated_date;
                $scope.lblsanction_type = resp.data.sanction_type;
                $scope.address1 = resp.data.address;
                $scope.lbllsaref_no = resp.data.lsaref_no;
                $scope.MOMfilename_list = resp.data.MOMDocumentList;
                $scope.CAMfilename_list = resp.data.COMDocumentList;
                $scope.sanctionfilename_list = resp.data.SANDocumentList;
                $scope.generalfilename_list = resp.data.GeneralDocumentList;
                $scope.lsaapproved_by = resp.data.lsaapproved_by;
                $scope.lsaapproved_date = resp.data.lsaapproved_date;
            });
            var url = 'api/IdasTrnLsaManagement/Getsanction2Colletarl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer2security_list = resp.data.customersecurity_list;

            });

          
        }



        $scope.downloadsCAM = function (val1, val2) {
            //console.log(val1);
            //console.log(val2);
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadsMOM = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

       
        $scope.downloadsanctionletter = function (val1, val2) {
            ////var phyPath = val1;

            ////var relPath = phyPath.split("EMS");

            ////var relpath1 = relPath[1].replace("\\", "/");
            ////var hosts = window.location.host;
            ////var prefix = location.protocol + "//";
            ////var str = prefix.concat(hosts, relpath1);
            ////var link = document.createElement("a");
            ////var name = val2.split(".")
            ////link.download = val2;
            ////var uri = str;
            ////link.href = uri;
            ////link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadsgeneral = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        
        $scope.lsaback = function (relpath1) {
            $location.url('app/idasTrnLSAapproval?lstab=' + relpath1);
           // $state.go('app.idasTrnLSAapproval');
        }
        $scope.lsaapprove = function (relpath1)
        {

            var params = {
                lsacreate_gid: $scope.lsacreate_gid,

            };
               
            var url = 'api/IdasTrnLsaManagement/postLSAstatusapprove';
                lockUI()
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI()
                        activate();
                        $location.url('app/idasTrnLSAapproval?lstab=' + relpath1);
                     //   $state.go('app.idasTrnLSAapproval');
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
              
                });
            
        }
     
        $scope.lsaback = function () {
            $state.go('app.idasTrnLSAapproval');
        }
       

        $scope.LSApendingpdf = function () {
            var params = {
                lsacreate_gid: $scope.lsacreate_gid,
            };
            var url = 'api/IdasTrnLsaManagement/GetLSApdf';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.file_path, "LSA Report.pdf");
                    Notify.alert('LSA Report Downloaded Successfully', 'success');
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });

        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnLsaReportController', idasTrnLsaReportController);

    idasTrnLsaReportController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams','DownloaddocumentService'];

    function idasTrnLsaReportController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams,DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnLsaReportController';
        activate();
        function activate() {
            var url = 'api/idasTrnLsaReport/GetidasLsaSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                $scope.idasTrnLsaReport = resp.data.idasTrnLsaReportSummaryList;
                unlockUI();
            });
        }
        //Export Excel
        $scope.exportlsareport = function () {
            var customer2sanction_gid;
            if ($scope.cbocustomer2sanction_gid == null || $scope.cbocustomer2sanction_gid == "" || $scope.cbocustomer2sanction_gid == undefined) {
                customer2sanction_gid = "";
            }
            else {
                customer2sanction_gid = $scope.cbocustomer2sanction_gid.customer2sanction_gid;
            }
            var params = {
                customer_gid: $scope.customer_gid,
                customer2sanction_gid: customer2sanction_gid,
            }

            lockUI();
            var url = 'api/idasTrnLsaReport/IdasExportExcel';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.lscloudpath, resp.data.lsname);
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !')

                }

            });
        }

        $scope.complete = function (string) {
            if (string.length >= 3) {
                $scope.message = "";
                var url = 'api/customer/ExploreCustomer';
                var params = {
                    customername: string
                }
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.message = "";
                        $scope.customer_list = resp.data.Customers;
                    }
                    else {
                        $scope.message = "No Records";
                    }
                    
                });
            }
            else {
                $scope.customer_list = null;
                $scope.message = "Type atleast three character";
            }
        }

        $scope.fillTextbox = function (customer_gid, customer_name) {
            $scope.customer = customer_name;
            $scope.customer_gid = customer_gid;
            $scope.customer_list = null;
            var params = {
                customer_gid: customer_gid
            }
            var url = 'api/idasTrnLsaReport/Getcustomer2sanction';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer2sanction_list = resp.data.customersanction_list;

            });
        }

        $scope.all = function () {
            $scope.cbocustomer2sanction_gid.customer2sanction_gid = "";
            $scope.customer_gid = "";
            $scope.cbocustomer2sanction_gid = "";
            $scope.customer = "";
            $scope.customer2sanction_gid = "";
            activate();
        }
        //search for customer
        $scope.search = function () {
            var customer2sanction_gid;
            var params = {
                customer_gid: $scope.customer_gid,
                customer2sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid
                 }

            var url = 'api/idasTrnLsaReport/lsafilter';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                $scope.idasTrnLsaReport = resp.data.idasTrnLsaReportSummaryList;
                unlockUI();
            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnMakerCheckerSummary', idasTrnMakerCheckerSummary);

    idasTrnMakerCheckerSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnMakerCheckerSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasTrnMakerCheckerSummary';

        activate();

        function activate() {
            lockUI();
            $scope.totalDisplayed = 100;
            var url = "api/IdasTrnSanctionDoc/MakerCheckerSummary";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.sanctionlist = resp.data.MdlMakercheckerSummary;
                $scope.total = $scope.sanctionlist.length;
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if($scope.pagecount==null){
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#DCDCDC';  
            }
            else{
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#ffa';
            }
        };
        $scope.docVerifyMaker = function (sanction_gid) {
           
            localStorage.setItem('sanction_gid', sanction_gid);

            $state.go('app.idasTrnDocVerifyMkr');
        }
        $scope.docVerifyChecker = function (sanction_gid) {
          
            localStorage.setItem('sanction_gid', sanction_gid);

            $state.go('app.idasTrnDocVerifyChkr');
        }
        $scope.loadMore = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayed += Number;
            unlockUI();
        };
      
    }

   
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnMkrChkrDocVerify', idasTrnMkrChkrDocVerify);

    idasTrnMkrChkrDocVerify.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnMkrChkrDocVerify($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $anchorScroll, DownloaddocumentService,cmnfunctionService) {

        var sanction_gid;
        var customer_gid;
        activate();

        var vm = this;
        vm.title = 'idasTrnMkrChkrDocVerify';

        function activate() {


            $scope.DivFile = false;
            $scope.show = true;
            $scope.options = false;
            sanction_gid = localStorage.getItem('sanction_gid');

            //$location.hash('down');
            //$anchorScroll();

            var url = 'api/IdasTrnSanctionDoc/SanctionDtlsView';
            var params = {
                sanction_gid: sanction_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefno = resp.data.sanctionrefno;
                $scope.SanctionDate = resp.data.SanctionDate;
                $scope.SanctionAmount = resp.data.SanctionAmount;
                $scope.FacilityType = resp.data.FacilityType;

                $scope.customerName = resp.data.customerName;
                $scope.Customerurn = resp.data.Customerurn;
                $scope.collateral_security = resp.data.collateral_security;
                $scope.zonalHeadName = resp.data.zonalHeadName;
                $scope.businessHeadName = resp.data.businessHeadName;
                $scope.clusterManager = resp.data.clusterManager;
                $scope.creditManager = resp.data.creditManager;
                $scope.relationshipmgmt = resp.data.relationshipmgmt;
                $scope.customercode = resp.data.customercode;
                $scope.verticalCode = resp.data.verticalCode;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                customer_gid = resp.data.customer_gid;
                $scope.rdb_lsastatus = resp.data.lsa_status;
                $scope.maker_status = resp.data.maker_status;
                $scope.checker_status = resp.data.checker_status;
            });

            var url = "api/IdasTrnSanctionDoc/ScanDocSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.documentation_list = resp.data.MdlScannDocSummary;

            });

            var url = "api/IdasTrnSentMail/GetSentMailSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.senddata = resp.data.sendmail;

            });

            var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {

                $scope.commondocument = resp.data.uploaddocument;

            });
        }
        // document.getElementById('pagecount').onkeyup = function () {
        //     // console.log(document.getElementById('pagecount').value);
        //     if($scope.pagecount==null){
        //      var el = document.getElementById('loadmore');
        //      el.style.backgroundColor = '#DCDCDC';  
        //     }
        //     else{
        //      var el = document.getElementById('loadmore');
        //      el.style.backgroundColor = '#ffa';
        //     }
        // };
        $scope.cancel = function () {

            $scope.show = true;

        }
        $scope.deletedocument = function (val) {
            var params = {
                commondocument_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to delete this Document ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasTrnSanctionDoc/CommonDocDelete";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Document Deleted Successfully!');
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }

        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }

        $scope.commondocumentupload = function (val, val1, name) {

            var frm = new FormData();

            // for (i = 0; i < val.length; i++) {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
            // }

            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            if ($scope.uploadfrm != undefined) {
                lockUI();
                var url = 'api/IdasTrnSanctionDoc/CommonDocUpload';
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {

                        $scope.commondocument = resp.data.uploaddocument;

                    });
                    unlockUI();

                    $scope.txtdocument_title = '';
                    $("#commonupload").val('');
                    $scope.uploadfrm = undefined;

                    if (resp.data.status == true) {
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    unlockUI();
                });
            }
            else {
                alert('Document is not Available..!');
                return;
            }
        }

        //$scope.commondocumentupload = function (val, val1, name) {
        //    for (var i in $scope.documentname) {
        //    }
        //    var item = {
        //        name: val[0].name,
        //        file: val[0]
        //    };
        //    var frm = new FormData();
        //    frm.append('fileupload', item.file);
        //    frm.append('file_name', item.name);
        //    frm.append('document_name', $scope.documentname);
        //    frm.append('document_title', $scope.txtdocument_title);
        //    frm.append('sanction_gid', sanction_gid);
        //    frm.append('project_flag', "Default");
        //    $scope.uploadfrm = frm;
        //    var url = 'api/IdasTrnSanctionDoc/CommonDocUpload';
        //    lockUI();
        //    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

        //        $scope.txtdocument_title = '';
        //        $("#commonupload").val('');
        //        if (resp.data.status == true) {
        //            unlockUI();
        //            Notify.alert('Document Uploaded Successfully..!!', 'success')

        //            var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
        //            var params = {
        //                sanction_gid: sanction_gid
        //            };
        //            SocketService.getparams(url, params).then(function (resp) {

        //                $scope.commondocument = resp.data.uploaddocument;

        //            });
        //        }
        //        else {
        //            unlockUI();
        //            Notify.alert('File Format Not Supported!')

        //        }

        //    });

        //}


        $scope.mailconversation = function () {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var url = "api/idasMstTemplate/MailContent";
                SocketService.get(url).then(function (resp) {
                    $scope.mailcontent = resp.data.template_content;

                });

                var url = "api/idasTrnMakerCheckerDtls/GetMailId";
                var params = {
                    customer_gid: customer_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.rmmail_id = resp.data.rmmail_id;

                });

                var params = {
                    sanction_gid: sanction_gid,
                    type_of_copy: 'Scan Copy'
                }
                var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.phyPath = resp.data.attachment_path;
                    }
                    else {
                        Notify.alert('Error in attachment...!', 'success')
                        activate();

                    }

                });
                $scope.sendMail = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        document_path: $scope.phyPath,
                        to_mail: $scope.rmmail_id,
                        cc_mail: $scope.cc_mail,
                        bcc_mail: $scope.bcc_mail,
                        body_content: $scope.mailcontent,
                        subject: $scope.subject_mail
                    }
                    var url = 'api/IdasTrnSentMail/PostSendMail';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success');
                            $scope.subject_mail = '';
                            $scope.bcc_mail = '';
                            $scope.cc_mail = '';
                            activate();
                        }
                        else {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning');
                        }
                    });
                }
                $scope.export = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        type_of_copy: 'Scan Copy'
                    }
                    var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath, resp.data.attachment_name);
                            // var phyPath = resp.data.attachment_path;
                            // var relPath = phyPath.split("EMS");
                            // var relpath1 = relPath[1].replace("\\", "/");
                            // var hosts = window.location.host;
                            // var prefix = location.protocol + "//";
                            // var str = prefix.concat(hosts, relpath1);
                            // var link = document.createElement("a");
                            // var name = resp.data.attachment_name.split('.');
                            // link.download = name[0];
                            // var uri = str;
                            // link.href = uri;
                            // link.click();

                        }
                        else {
                            Notify.alert(resp.data.message, 'success')
                            //  activate();

                        }

                    });
                }
            }
        }
        $scope.MkrVerify = function (sanctiondocument_gid) {
            var url = 'api/IdasTrnSanctionDoc/DocVerifyMkr';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.ShowMkrDocumentConfirmation = false;
                    $location.hash('DocumentVerifiedBy');
                    $anchorScroll();
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });
        }
        $scope.ChkrVerify = function (sanctiondocument_gid) {
            var url = 'api/IdasTrnSanctionDoc/DocVerifyChkr';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.ShowChrDocumentConfirmation = false;
                    $location.hash('DocumentVerifiedBy');
                    $anchorScroll();
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });
        }

        $scope.export = function () {
            var params = {
                sanction_gid: sanction_gid,
                type_of_copy: 'Scan Copy'
            }
            var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath, resp.data.attachment_name);
                    // var phyPath = resp.data.attachment_path;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.attachment_name.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    Notify.alert(resp.data.message, 'success')
                    activate();

                }

            });
        }
        $scope.exportattach = function (path, attchment_name) {

            var phyPath = path;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = attchment_name.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();


        }
        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.openpanel = function () {

            $scope.show = false;
            $scope.options = true;
        }
        $scope.uploadallocation1 = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('sanction_gid', sanction_gid);
            frm.append('types_of_doc', 'Scan Copy');
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


                $("#addupload").val('');
                $("#editupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
        $scope.gotoback = function () {
            $state.go('app.idasTrnMakerSummary');
        }
        $scope.gotobackChkr = function () {
            $state.go('app.idasTrnCheckerSummary');
        }

        $scope.docConMkr = function (sanctiondocument_gid, conversation_count) {


            var url = "api/idasTrnMakerCheckerDtls/RmResponseCadViwed";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                types_of_conversation: 'Internal'
            };
            SocketService.post(url, params).then(function (resp) {

            });
            var url = "api/idasTrnMakerCheckerDtls/RmResponseCadViwed";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                types_of_conversation: 'External'
            };
            SocketService.post(url, params).then(function (resp) {

            });


            $scope.docconClose = function () {

                $scope.ShowMkrDocumentConfirmation = false;
                $location.hash('DocumentVerifiedBy');
                $anchorScroll();
            }

            $scope.ShowMkrDocumentConfirmation = true;

            $location.hash('DocumentConfirmationTab');
            $anchorScroll();

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1,

            };

            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            $scope.valueExternal = false;
            $scope.valueInternal = false;

            if (conversation_count == '0') {
                $scope.showraisequery = false;
                $scope.shownoquery = true;
            }
            else {
                $scope.showraisequery = true;
                $scope.shownoquery = false;
            }

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                    $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }
            });

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;

                }
            });

            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();

                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.document_date = resp.data.scandocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.checker_status = resp.data.checker_status;
                $scope.types_of_copy = resp.data.types_of_copy;
                $scope.txtfinalremarks = resp.data.finalremarks;

                if (resp.data.finalremarks == 'Others') {
                    $scope.other_remarks = true;
                } else {
                    $scope.other_remarks = false;
                }
            });
            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {

                $scope.doc_comments = resp.data.doc_comments;

            });

            $scope.onchangeremarks = function (txtfinalremarks) {
                if (txtfinalremarks == 'Others') {
                    $scope.other_remarks = true;
                    $scope.scanfinal_remarks = '';
                } else {
                    $scope.other_remarks = false;
                    $scope.scanfinal_remarks = '';
                }
            }

            $scope.ShowRaiseQuery = function () {
                if ($scope.showraisequery == false) {
                    $scope.showraisequery = true;
                }
                else {
                    $scope.showraisequery = false;
                }

            }

            $scope.raiseNoQuery = function () {
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid: $scope.document_gid,
                    cad_query: 'No Query',
                    document_name: $scope.document_name,
                    type_of_conversation: 'Internal',
                    noquery_flag: 'Y',
                }

                SweetAlert.swal({
                    title: 'Are you sure?',
                    text: 'Do you want to send "No Query"?',

                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Send it!',
                    closeOnConfirm: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        lockUI();
                        var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {
                                SweetAlert.swal('Query Sent Successfully!');
                                unlockUI();
                                conversation_count = "1";
                                
                                $scope.shownoquery = false;
                                $scope.showraisequery = true;
                                var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                                var params = {
                                    sanctiondocument_gid: sanctiondocument_gid
                                };
                                lockUI();
                                SocketService.getparams(url, params).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                                        $scope.valueInternal = true;
                                    } else {
                                        $scope.valueInternal = false;

                                    }
                                });
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });

                    }
                });
            }
            $scope.onchangecopy = function (types_of_copy) {
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    type_copy: $scope.types_of_copy
                }
                var url = "api/IdasTrnDocConversation/PostTypeOfCopy";
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }

                });
            }
            $scope.MkrVerify = function () {
                var url = 'api/IdasTrnSanctionDoc/DocumentConfirmation';
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    confirmation_type: 'Maker'
                };

                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        $scope.ShowMkrDocumentConfirmation = false;
                        $location.hash('DocumentVerifiedBy');
                        $anchorScroll();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        activate();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }

                });
            }
            $scope.btnShow = function (id, reply) {
                $scope.IsVisible = true;
                $scope.Visible = false;

            }
            $scope.btnHide = function () {
                $scope.IsVisible = false;
                $scope.Visible = true;
            }
            $scope.PopupDownload = function (docconversation_gid) {
                var modalInstance = $modal.open({
                    templateUrl: '/mailconversationdownload.html',
                    controller: ModalInstanceCtrl,
                    size: 'md'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.downloads = function (val1, val2) {

                        //var phyPath = val1;

                        //var relPath = phyPath.split("EMS");
                        //var relpath1 = relPath[1].replace("\\", "/");
                        //var hosts = window.location.host;
                        //var prefix = location.protocol + "//";
                        //var str = prefix.concat(hosts, relpath1);
                        //var link = document.createElement("a");
                        //var name = val2.split(".")
                        //link.download = val2;
                        //var uri = str;
                        //link.href = uri;
                        //link.click();

                        DownloaddocumentService.Downloaddocument(val1, val2);
                    }

                    var url = "api/IdasTrnDocConversation/GetUploadDoc";
                    var params = {
                        docconversation_gid: docconversation_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.viewDocumentList = resp.data.uploaddocument;

                    });
                }
            }

            $scope.raiseQueryRM = function () {

                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid: $scope.document_gid,
                    cad_query: $scope.content,
                    document_name: $scope.document_name,
                    document_title: $scope.txtdocument_title,
                    type_of_conversation: 'External'
                }

                var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = '';
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                                $scope.valueExternal = true;
                            } else {
                                $scope.valueExternal = false;

                            }
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                });


            }
            $scope.raiseQueryChecker = function () {

                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid: $scope.document_gid,
                    cad_query: $scope.content,
                    document_name: $scope.document_name,
                    document_title: $scope.txtdocument_title,
                    type_of_conversation: 'Internal'
                }

                var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = '';
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                                $scope.valueInternal = true;
                                $scope.shownoquery = false;
                            } else {
                                $scope.valueInternal = false;

                            }
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                });


            }
            $scope.FileShow = function () {
                if ($scope.DivFile == true) {
                    $scope.DivFile = false;
                }
                else {
                    $scope.DivFile = true;
                }
            }
            $scope.uploadallocation = function (val, val1, name) {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_title', $scope.txtdocument_title);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#addupload").val('');
                    $scope.txtdocument_title = '';
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Document Uploaded Successfully..!!', 'success')

                        var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                        SocketService.get(url).then(function (resp) {

                            $scope.uploaddocument = resp.data.uploaddocument;

                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('File Format Not Supported!')

                    }

                });

            }

            $scope.update = function () {

                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    document_date: $scope.document_date
                }

                var url = 'api/IdasTrnSanctionDoc/PostScanDocDate';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, 'warning')
                    }
                });
            }
            $scope.forwardedRaiseQuery = function (query, ref_no, response) {
                var lssendmsg;

                if (response == 'Query Confirmed.') {
                    lssendmsg = query;
                }
                else {
                    lssendmsg = response;
                }

                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid: $scope.document_gid,
                    cad_query: lssendmsg,
                    document_name: $scope.document_name,
                    type_of_conversation: 'External',
                    reference_query: ref_no
                }
                SweetAlert.swal({
                    title: 'Are you sure?',
                    text: 'Do you want to send this query to RM ?',

                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Send it!',
                    closeOnConfirm: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        lockUI();
                        var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {
                                SweetAlert.swal('Query Sent Successfully!');
                                unlockUI();
                                var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                                var params = {
                                    sanctiondocument_gid: sanctiondocument_gid
                                };
                                lockUI();
                                SocketService.getparams(url, params).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        $scope.docconversationlistInternal = resp.data.MdlDocConversation;

                                        $scope.valueInternal = true;
                                    } else {
                                        $scope.valueInternal = false;

                                    }
                                });
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });

                    }

                });
            }
            $scope.btncopy = function (query, response) {
                if (response == 'Query Confirmed.') {
                    $scope.content = query;

                }
                else {
                    $scope.content = response;
                }

                $location.hash('down');
                $anchorScroll();

            }
            $scope.updateFinalRemarks = function () {
                if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null)) {
                    Notify.alert('Kindly Enter Remarks', 'warning')
                } else {
                    var params = {
                        sanctiondocument_gid: sanctiondocument_gid,
                        scanfinal_remarks: $scope.scanfinal_remarks,
                        finalremarks: $scope.txtfinalremarks
                    }

                    var url = 'api/IdasTrnSanctionDoc/DocScanFinalRemarks';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            Notify.alert(resp.data.message, 'success')
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, 'warning'),
                            $scope.txtfinalremarks = '',
                            $scope.scanfinal_remarks = ''
                        }
                    });
                }
            }
            $scope.UploadDocCancel = function (conversationdocument_gid) {
                var params = {
                    conversationdocument_gid: conversationdocument_gid
                }
                var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Document deleted Successfully..!!', 'success')

                        var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                        SocketService.get(url).then(function (resp) {

                            $scope.uploaddocument = resp.data.uploaddocument;

                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred')

                    }

                });
            }

            $scope.raiseResponse = function (id, count, textArea) {
                var params = {
                    docconversation_gid: id,
                    rm_response: textArea
                }

                var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = " ";
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                                $scope.valueExternal = true;
                            } else {
                                $scope.valueExternal = false;

                            }
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred!')
                    }
                    activate();
                });
            }
        }

        $scope.docConChkr = function (sanctiondocument_gid, conversation_count) {

            var url = "api/idasTrnMakerCheckerDtls/CadQuieryRMViwed";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                types_of_conversation: 'Internal'
            };
            SocketService.post(url, params).then(function (resp) {


            });

            var url = "api/idasTrnMakerCheckerDtls/RmResponseCadViwed";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                types_of_conversation: 'External'
            };
            SocketService.post(url, params).then(function (resp) {

            });

            //localStorage.setItem('sanctiondocument_gid', sanctiondocument_gid);
            //localStorage.setItem('conversation_count', conversation_count);
            //$state.go('app.idasTrnDocConversationChkr');

            $scope.docconChrClose = function () {

                $scope.ShowChrDocumentConfirmation = false;
                $location.hash('DocumentVerifiedBy');
                $anchorScroll();
            }

            $scope.ShowChrDocumentConfirmation = true;

            $location.hash('ChrDocumentConfirmationTab');
            $anchorScroll();

            $scope.DivFile = false;
            $scope.IsVisible = false;
            $scope.Visible = true;
            $scope.valueExternal = false;
            $scope.valueInternal = false;

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                    $scope.valueInternal = true;
                } else {
                    $scope.valueInternal = false;

                }
            });
            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                    $scope.valueExternal = true;
                } else {
                    $scope.valueExternal = false;
                }
            });
            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.document_date = resp.data.scandocument_date;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.maker_status = resp.data.maker_status;
                $scope.types_of_copy = resp.data.types_of_copy;

                $scope.checker_status = resp.data.checker_status;

                $scope.txtfinalremarks = resp.data.finalremarks;

                if (resp.data.finalremarks == 'Others') {
                    $scope.other_remarks = true;
                } else {
                    $scope.other_remarks = false;
                }
            });

            var url = 'api/IdasTrnSanctionDoc/GetDocComments';
            SocketService.getparams(url, params).then(function (resp) {

                $scope.doc_comments = resp.data.doc_comments;

            });

            // Document Date Updation
            $scope.update = function () {
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    document_date: $scope.document_date
                }

                var url = 'api/IdasTrnSanctionDoc/PostScanDocDate';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert(resp.data.message, 'success')
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, 'warning')
                    }
                });
            }
            // Type of Document Updation
            $scope.onchangecopy = function (types_of_copy) {
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    type_copy: $scope.types_of_copy
                }
                var url = "api/IdasTrnDocConversation/PostTypeOfCopy";
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }

                });
            }

            $scope.raiseResponse = function (id, textArea) {
                var params = {
                    docconversation_gid: id,
                    rm_response: textArea
                }

                var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = " ";
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                                $scope.valueExternal = true;
                            } else {
                                $scope.valueExternal = false;

                            }
                        });
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                                $scope.valueInternal = true;
                            } else {
                                $scope.valueInternal = false;

                            }
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred!')
                    }
                });
            }
            $scope.btncopy = function (data) {

                $scope.content = data;
                $location.hash('down');
                $anchorScroll();

            }

            $scope.confirmQuery = function (val, noquery_flag) {

                SweetAlert.swal({
                    title: 'Are you sure?',
                    text: 'Do you want to confirm this query to checker ?',

                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Confirmed it!',
                    closeOnConfirm: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        lockUI();
                        var params = {
                            docconversation_gid: val,
                            rm_response: 'Query Confirmed.'
                        }
                        if (noquery_flag == 'Y') {
                            var url = 'api/IdasTrnSanctionDoc/DocNoQueryRmResponse';
                            SocketService.getparams(url, params).then(function (resp) {

                                if (resp.data.status == true) {
                                    SweetAlert.swal('Document Confirmed Successfully!');
                                    unlockUI();
                                    var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                                    var params = {
                                        sanctiondocument_gid: sanctiondocument_gid
                                    };
                                    lockUI();
                                    SocketService.getparams(url, params).then(function (resp) {
                                        unlockUI();
                                        if (resp.data.status == true) {
                                            $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                                            $scope.valueInternal = true;
                                        } else {
                                            $scope.valueInternal = false;

                                        }
                                    });
                                    activate();
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                }
                            });
                        }
                        else {
                            var url = "api/IdasTrnSanctionDoc/DocRmResponse";
                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {
                                    SweetAlert.swal('Query Confirmed Successfully!');
                                    unlockUI();
                                    var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                                    var params = {
                                        sanctiondocument_gid: sanctiondocument_gid
                                    };
                                    lockUI();
                                    SocketService.getparams(url, params).then(function (resp) {
                                        unlockUI();
                                        if (resp.data.status == true) {
                                            $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                                            $scope.valueInternal = true;
                                        } else {
                                            $scope.valueInternal = false;

                                        }
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                }
                            });
                        }



                    }

                });
            }

            $scope.forwardQuery = function (val) {
                var params = {
                    docconversation_gid: val
                }
                SweetAlert.swal({
                    title: 'Are you sure?',
                    text: 'Do you want to forward this query to RM ?',

                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Forward it!',
                    closeOnConfirm: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        lockUI();
                        var url = "api/idasTrnMakerCheckerDtls/PostForwardedQuery";
                        SocketService.getparams(url, params).then(function (resp) {

                            if (resp.data.status == true) {
                                SweetAlert.swal('Forwarded Successfully!');
                                unlockUI();
                                var url = 'api/IdasTrnSanctionDoc/ScanDocConversationInternal';
                                var params = {
                                    sanctiondocument_gid: sanctiondocument_gid
                                };
                                lockUI();
                                SocketService.getparams(url, params).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        $scope.docconversationlistInternal = resp.data.MdlDocConversation;
                                        $scope.valueInternal = true;
                                    } else {
                                        $scope.valueInternal = false;

                                    }
                                });
                                var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
                                lockUI();
                                SocketService.getparams(url, params).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                                        $scope.valueExternal = true;
                                    } else {
                                        $scope.valueExternal = false;
                                    }
                                });
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });

                    }

                });
            }

            $scope.UploadDocCancel = function (conversationdocument_gid) {
                var params = {
                    conversationdocument_gid: conversationdocument_gid
                }
                var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Document deleted Successfully..!!', 'success')

                        var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                        SocketService.get(url).then(function (resp) {

                            $scope.uploaddocument = resp.data.uploaddocument;

                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred')

                    }

                });
            }
            $scope.ChkrVerify = function () {
                var url = 'api/IdasTrnSanctionDoc/DocumentConfirmation';
                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    confirmation_type: 'Checker'
                };

                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();

                        localStorage.setItem('conversation_count', '1');
                        $scope.ShowChrDocumentConfirmation = false;
                        $location.hash('DocumentVerifiedBy');
                        $anchorScroll();
                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        activate();
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    //  activate();
                });
                activate();
            }

            $scope.raiseQuery = function () {

                var params = {
                    sanctiondocument_gid: sanctiondocument_gid,
                    sanction_gid: $scope.sanction_gid,
                    document_gid: $scope.document_gid,
                    cad_query: $scope.content,
                    document_name: $scope.document_name,
                    document_title: $scope.txtdocument_title,
                    type_of_conversation: 'External'
                }

                var url = 'api/IdasTrnSanctionDoc/RaiseConversation';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Conversation Added Successfully..!!', 'success')
                        $scope.content = '';
                        var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
                        var params = {
                            sanctiondocument_gid: sanctiondocument_gid
                        };
                        lockUI();
                        SocketService.getparams(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                                $scope.docconversationlistExternal = resp.data.MdlDocConversation;
                                $scope.valueExternal = true;
                            } else {
                                $scope.valueExternal = false;

                            }
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert(resp.data.message)
                    }
                });


            }
            $scope.FileShow = function () {
                if ($scope.DivFile == true) {
                    $scope.DivFile = false;
                }
                else {
                    $scope.DivFile = true;
                }
            }
            $scope.uploadallocation = function (val, val1, name) {
                var item = {
                    name: val[0].name,
                    file: val[0]
                };
                var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
                var frm = new FormData();
                frm.append('fileupload', item.file);
                frm.append('file_name', item.name);
                frm.append('document_name', $scope.documentname);
                frm.append('document_title', $scope.txtdocument_title);
                frm.append('project_flag', "Default");
                $scope.uploadfrm = frm;
                var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                    $("#addupload").val('');
                    $scope.txtdocument_title = '';
                    if (resp.data.status == true) {
                        unlockUI();
                        Notify.alert('Document Uploaded Successfully..!!', 'success')

                        var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                        SocketService.get(url).then(function (resp) {

                            $scope.uploaddocument = resp.data.uploaddocument;

                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert('File Format Not Supported!')

                    }

                });

            }

            $scope.onchangeremarks = function (txtfinalremarks) {
                if (txtfinalremarks == 'Others') {
                    $scope.other_remarks = true;
                } else {
                    $scope.other_remarks = false;
                }
            }


            $scope.btncopyinternal = function (index, value) {
                $scope.docconversationlistInternal[index].reply = value;
            }

            $scope.btnShow = function (id, reply) {
                $scope.IsVisible = true;
                $scope.Visible = false;

            }
            $scope.btnHide = function () {
                $scope.IsVisible = false;
                $scope.Visible = true;
            }
            $scope.PopupDownload = function (docconversation_gid) {
                var modalInstance = $modal.open({
                    templateUrl: '/mailconversation.html',
                    controller: ModalInstanceCtrl,
                    size: 'md'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.downloads = function (val1, val2) {

                        //var phyPath = val1;
                        //console.log(phyPath);
                        //var relPath = phyPath.split("EMS");
                        //var relpath1 = relPath[1].replace("\\", "/");
                        //var hosts = window.location.host;
                        //var prefix = location.protocol + "//";
                        //var str = prefix.concat(hosts, relpath1);
                        //var link = document.createElement("a");
                        //var name = val2.split(".")
                        //link.download = val2;
                        //var uri = str;
                        //link.href = uri;
                        //link.click();
                        DownloaddocumentService.Downloaddocument(val1, val2);
                    }

                    var url = "api/IdasTrnDocConversation/GetUploadDoc";
                    var params = {
                        docconversation_gid: docconversation_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.viewDocumentList = resp.data.uploaddocument;

                    });

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
            }
            // Final Remarks Updation
            $scope.updateFinalRemarks = function () {
                if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null)) {
                    Notify.alert('Kindly Enter Remarks', 'warning')
                }
                else {
                    var params = {
                        sanctiondocument_gid: sanctiondocument_gid,
                        scanfinal_remarks: $scope.scanfinal_remarks,
                        finalremarks: $scope.txtfinalremarks
                    }

                    var url = 'api/IdasTrnSanctionDoc/DocScanFinalRemarks';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            Notify.alert(resp.data.message, 'success')
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, 'warning'),
                             $scope.txtfinalremarks = '',
                             $scope.scanfinal_remarks = ''
                        }

                    });
                }
            }
        }

        $scope.onselectedlsastatus = function (rdb_lsastatus) {
            var params = {
                sanction_gid: sanction_gid,
                lsa_status: $scope.rdb_lsastatus
            }
            var url = "api/IdasTrnPhyDoc/PostLSAStatus";
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    activate();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });
        }

        $scope.checkallDocument = function (selected) {
            angular.forEach($scope.documentation_list, function (val) {
                val.checked = selected;
            });
        }

        $scope.DocumentConfirm = function () {
            var documentation_list = [];
            var sanctiondocument_gid;
            angular.forEach($scope.documentation_list, function (val) {

                if (val.checked == true) {
                    sanctiondocument_gid = val.sanctiondocument_gid;
                    documentation_list.push(sanctiondocument_gid);
                }
            });
            if (sanctiondocument_gid == undefined) {
                Notify.alert('Select Atleast One Record!', 'warning')
            }
            else {
                var modalInstance = $modal.open({
                    templateUrl: '/DocumentConfirmationModalContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'md',
                    backdrop: 'static',
                    keyboard: false
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {

                    $scope.futuredatecheck = function (val) {
                        var params = {
                            date: val.toDateString()
                        }
                        var url = 'api/IdasTrnPhyDoc/FutureDateCheck';
                        SocketService.getparams(url, params).then(function (resp) {
                            if (resp.data.status == false) {
                                $scope.scandocument_date = '';
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, 'warning')
                            }
                        });
                    }

                    $scope.onchangeremarks = function (txtfinalremarks) {
                        if (txtfinalremarks == 'Others') {
                            $scope.other_remarks = true;
                            $scope.scanfinal_remarks = '';
                        } else {
                            $scope.other_remarks = false;
                            $scope.scanfinal_remarks = '';
                        }
                    }

                    $scope.documentconfirmationSubmitMkr = function () {
                        if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null)) {
                            $modalInstance.close('closed');
                            Notify.alert('Kindly Enter Remarks', 'warning')
                        }
                        else {
                            var params = {
                                sanctiondocument_gid: documentation_list,
                                type_copy: $scope.types_of_copy,
                                document_date: $scope.scandocument_date,
                                finalremarks: $scope.txtfinalremarks,
                                scanfinal_remarks: $scope.scanfinal_remarks,
                                confirmation_type: 'Maker'
                            }
                            if (sanctiondocument_gid != undefined) {
                                var url = 'api/IdasTrnSanctionDoc/MkrChrBulkDocVerification';
                                lockUI()
                                SocketService.post(url, params).then(function (resp) {
                                    if (resp.data.status == true) {

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                        $modalInstance.close('closed');
                                        unlockUI();
                                        activate();
                                        $scope.checkallDocument = '';
                                    }
                                    else {
                                        unlockUI();
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                        $modalInstance.close('closed');
                                        unlockUI();
                                    }
                                });
                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert('Select Atleast One Record!', 'warning')
                            }
                        }
                    }

                    $scope.documentconfirmationSubmitChkr = function () {
                        if ($scope.txtfinalremarks == 'Others' && ($scope.scanfinal_remarks == '' || $scope.scanfinal_remarks == undefined || $scope.scanfinal_remarks == null)) {
                            $modalInstance.close('closed');
                            Notify.alert('Kindly Enter Remarks', 'warning')
                        }
                        else {
                            var params = {
                                sanctiondocument_gid: documentation_list,
                                type_copy: $scope.types_of_copy,
                                document_date: $scope.scandocument_date,
                                finalremarks: $scope.txtfinalremarks,
                                scanfinal_remarks: $scope.scanfinal_remarks,
                                confirmation_type: 'Checker'
                            }
                            if (sanctiondocument_gid != undefined) {
                                var url = 'api/IdasTrnSanctionDoc/MkrChrBulkDocVerification';
                                lockUI()
                                SocketService.post(url, params).then(function (resp) {
                                    if (resp.data.status == true) {

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                        $modalInstance.close('closed');
                                        unlockUI();
                                        activate();
                                        $scope.checkallDocument = '';
                                    }
                                    else {
                                        unlockUI();
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                        $modalInstance.close('closed');
                                        unlockUI();
                                    }
                                });
                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert('Select Atleast One Record!', 'warning')
                            }
                        }
                    }
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                }
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnNocAndNdcAddController', idasTrnNocAndNdcAddController);

    idasTrnNocAndNdcAddController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnNocAndNdcAddController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnNocAndNdcAddController';

        activate();

        function activate() {

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open1 = true;
            };
            vm.calender = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open2 = true;
            };
            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open3 = true;
            };
            vm.calender4 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open4 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });
            var url = 'api/IdasNocAndNdc/TempClear';
            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/IdasNocAndNdc/GetDropDown';
            SocketService.get(url).then(function (resp) {
                $scope.vertical_list = resp.data.vertical_list;
               
            });
        }

        $scope.Back = function () {
            $state.go('app.idasTrnNocAndNdc');

        }

        $scope.submit = function () {
            var lsvertical_gid = '';
            var lsvertical_name = '';

            if ($scope.cbovertical != undefined || $scope.cbovertical != null) {
                lsvertical_gid = $scope.cbovertical.vertical_gid;
                lsvertical_name = $scope.cbovertical.vertical_name;
            }

            var params = {
                maker_gid: $scope.cbomaker.employee_gid,
                maker_name: $scope.cbomaker.employee_name,
                checker_gid: $scope.cbochecker.employee_gid,
                checker_name: $scope.cbochecker.employee_name,
                vertical_gid: lsvertical_gid,
                vertical_name: lsvertical_name,
                customer_name: $scope.lblcustomer_name,
                sanction_ref_no: $scope.lblsanction_ref_no,
                sanction_date: $scope.lblsanctiondate,
                loan_account_no: $scope.lblloan_account_no,
                noc_issuance_date: $scope.lblnocissuancedate,
                noc_closure_date: $scope.lblnocclosuredate,
                loan_closure_date: $scope.lblloanclosuredate,
                nocandndc_date: $scope.lblnocrequestdate

            }
            //console.log(params);
            var url = 'api/IdasNocAndNdc/CreateIdasNocAndNdc';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()

                    $state.go('app.idasTrnNocAndNdc');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });
        }


        $scope.NocNDcDocumentUpload = function () {
            
            var fi = document.getElementById('file');
            if (fi.files.length > 0) {
                var frm = new FormData();
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                }
                frm.append('file_name', $scope.txtdoc_name);
                var url = 'api/IdasNocAndNdc/NocDocumentUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    $("#file").val('');

                    unlockUI();
                    if (resp.data.status == true) {
                        
                        var url = 'api/IdasNocAndNdc/GetNocDocumentList';
                        SocketService.get(url).then(function (resp) {
                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                        });

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    unlockUI();
                });
            }
            else {
                alert('Please select a file.')
                unlockUI();
            }

            $scope.txtdoc_name = '';
        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.uploaddocumentcancel = function (nocandndcdocument_gid) {

            var params = {
                nocandndcdocument_gid: nocandndcdocument_gid
            }
            var url = 'api/IdasNocAndNdc/GetNocDocumentAddDelete';
            SocketService.getparams(url, params).then(function (resp) {
             
                if (resp.data.status == true) {

                    var url = 'api/IdasNocAndNdc/GetNocDocumentList';
                    SocketService.get(url).then(function (resp) {

                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

                unlockUI();
            });
        }

       

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnNocAndNdcController', idasTrnNocAndNdcController);

    idasTrnNocAndNdcController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnNocAndNdcController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnNocAndNdcController';

        activate();

        function activate() {
            lockUI();
            var url = 'api/IdasNocAndNdc/GetIdasNocAndNdc';
            SocketService.get(url).then(function (resp) {
                $scope.nocandndc_list = resp.data.nocandndc_list;

                unlockUI();
            });  
        }

        $scope.addnocndc = function () {
            $location.url('app/idasTrnNocAndNdcAdd');
        }

        $scope.editnocndc = function (nocandndc_gid) {
            $location.url('app/idasTrnNocAndNdcEdit?lsnocandndc_gid=' + nocandndc_gid);
        }

        $scope.viewnocndc = function (nocandndc_gid) {
            $location.url('app/idasTrnNocAndNdcView?lsnocandndc_gid=' + nocandndc_gid);
        }

  

        $scope.delete = function (nocandndc_gid) {
            var params = {
                nocandndc_gid: nocandndc_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',
                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/IdasNocAndNdc/NocandNdcDelete';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true)
                        {
                            activate();
                        }
                        else
                        {
                            Notify.alert('Error Occurred While Deleting NOC & NDC!', {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                    SweetAlert.swal('Deleted Successfully!');
                }

            });
        };
    }
})();


(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnNocAndNdcEditController', idasTrnNocAndNdcEditController);

    idasTrnNocAndNdcEditController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnNocAndNdcEditController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnNocAndNdcEditController';
        $scope.nocandndc_gid = $location.search().lsnocandndc_gid;
        var nocandndc_gid = $scope.nocandndc_gid;
        activate();

        function activate() {
            var param = {
                nocandndc_gid: $scope.nocandndc_gid
            };
            var url = 'api/IdasNocAndNdc/GetNocDocumentEditList';
            SocketService.getparams(url, param).then(function (resp) {

                $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
            });

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open1 = true;
            };
            vm.calender = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open2 = true;
            };
            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open3 = true;
            };
            vm.calender4 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.open4 = true;
            };
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

            var url = 'api/IdasNocAndNdc/TempClear';
            SocketService.get(url).then(function (resp) {
            });

            var url = 'api/IdasNocAndNdc/GetDropDown';
            SocketService.get(url).then(function (resp) {
                $scope.vertical_list = resp.data.vertical_list;
          
            });

            var param = {
                nocandndc_gid: $scope.nocandndc_gid
            }

            lockUI();
            var url = 'api/IdasNocAndNdc/EditNoc';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.cbomaker = resp.data.maker_gid;
                $scope.cbochecker = resp.data.checker_gid;
                $scope.lblnocrequestdate = resp.data.nocandndc_date;
                $scope.lblcustomer_name = resp.data.customer_name;
                $scope.cboVertical = resp.data.vertical_gid;
                $scope.lblnocclosuredate = resp.data.noc_closure_date,
                $scope.lblsanction_ref_no = resp.data.sanction_ref_no;
                $scope.lblsanctiondate = resp.data.sanction_date;
                $scope.lblloan_account_no = resp.data.loan_account_no;
                $scope.lblnocissuancedate = resp.data.noc_issuance_date;
                $scope.lblloanclosuredate = resp.data.loan_closure_date;

                unlockUI();
            });
        }
        $scope.Nocclose = function () {
            $state.go('app.idasTrnNocAndNdc');

        }

        $scope.NocNDcDocumentUpload = function () {
            
            var fi = document.getElementById('file');
            if (fi.files.length > 0) {
                var frm = new FormData();
                for (var i = 0; i <= fi.files.length - 1; i++) {

                    frm.append(fi.files[i].name, fi.files[i]);  
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                    var fname = fi.files.item(i).name;
                    var fsize = fi.files.item(i).size;
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(fname, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                }
                frm.append('file_name', $scope.txtdoc_name);
                var url = 'api/IdasNocAndNdc/NocDocumentUpload';
                lockUI();
                SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    $("#file").val('');

                    var param = {
                        nocandndc_gid: $scope.nocandndc_gid
                    };
                    var url = 'api/IdasNocAndNdc/GetNocDocumentTempEditList';
                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });


                    unlockUI();
                    if (resp.data.status == true) {

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'warning',
                            pos: 'top-center',
                            timeout: 3000
                        });
                    }
                    unlockUI();
                });
            }
            else {
                alert('Please select a file.')
                unlockUI();
            }
            $scope.txtdoc_name = '';
        }


        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.uploaddocumentcancel = function (nocandndcdocument_gid) {
            var params = {
                nocandndcdocument_gid: nocandndcdocument_gid,
                nocandndc_gid: nocandndc_gid
            }
            var url = 'api/IdasNocAndNdc/GetNocDocumentDelete';
            SocketService.getparams(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    var params = {
                        
                        nocandndc_gid: nocandndc_gid
                    }
                    var url = 'api/IdasNocAndNdc/GetNocDocumentTempEditList';
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                unlockUI();
            });
        }

        $scope.NocUpdate = function () {
            var lsmaker_name = "";
            var lschecker_name = "";
            var lsmaker_gid = "";
            var lschecker_gid = "";
            
            var vertical_Name = $('#Vertical :selected').text();

            if ($scope.cbomaker != undefined || $scope.cbomaker != null) {

                lsmaker_name = $('#maker_name :selected').text();

                lsmaker_gid = $scope.cbomaker;
            }
            if ($scope.cbochecker != undefined || $scope.cbochecker != null) {

                lschecker_name = $('#checker_name :selected').text();

                lschecker_gid = $scope.cbochecker;
            }
           
            
            var params = {
                nocandndc_gid: nocandndc_gid,
                maker_gid: lsmaker_gid,
                maker_name: lsmaker_name,
                checker_gid: lschecker_gid,
                checker_name: lschecker_name,
                
                vertical_gid: $scope.cboVertical,
                vertical_name: vertical_Name,

                customer_name: $scope.lblcustomer_name,
                sanction_ref_no: $scope.lblsanction_ref_no,
                sanction_date: $scope.lblsanctiondate,
                loan_account_no: $scope.lblloan_account_no,
                noc_issuance_date: $scope.lblnocissuancedate,
                loan_closure_date: $scope.lblloanclosuredate,
                nocandndc_date: $scope.lblnocrequestdate
            }
            var url = 'api/IdasNocAndNdc/UpdateNoc';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                $state.go('app.idasTrnNocAndNdc');
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnNocAndNdcReportController', idasTrnNocAndNdcReportController);

    idasTrnNocAndNdcReportController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function idasTrnNocAndNdcReportController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnNocAndNdcReportController';
        activate();
        function activate() {
            lockUI();
            var url = 'api/IdasNocAndNdc/GetIdasNocReportSummary';
            SocketService.get(url).then(function (resp) {
                $scope.nocandndc_list = resp.data.nocandndc_list;

                unlockUI();
            });
        }
        $scope.excelnocandndc = function () {
            lockUI();
            var url = 'api/IdasNocAndNdc/ExportExcelNoc';
            SocketService.get(url).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.lspath, resp.data.lsname);
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'warning')
                }

            });
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnNocAndNdcViewController', idasTrnNocAndNdcViewController);

    idasTrnNocAndNdcViewController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'AuthenticationService', 'SweetAlert', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function idasTrnNocAndNdcViewController($rootScope, $scope, $modal, $state, AuthenticationService, SweetAlert, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnNocAndNdcViewController';
        $scope.nocandndc_gid = $location.search().lsnocandndc_gid;
        var nocandndc_gid = $scope.nocandndc_gid;
        activate();

        function activate() {
            //$scope.nocandndc_gid = localStorage.getItem('nocandndc_gid');
            
            var param = {
                nocandndc_gid: $scope.nocandndc_gid
            }
            
            lockUI();
            var url = 'api/IdasNocAndNdc/EditNoc';
            
            
            SocketService.getparams(url, param).then(function (resp) {
                $scope.cbomaker = resp.data.maker_name;
                $scope.cbochecker = resp.data.checker_name;
                $scope.lblnocrequestdate = resp.data.nocandndc_date;
                $scope.lblcustomer_name = resp.data.customer_name;
                $scope.cboVertical = resp.data.vertical_name;
                $scope.lblnocclosuredate = resp.data.noc_closure_date,
                $scope.lblsanction_ref_no = resp.data.sanction_ref_no;
                $scope.lblsanctiondate = resp.data.sanction_date;
                $scope.lblloan_account_no = resp.data.loan_account_no;
                $scope.lblnocissuancedate = resp.data.noc_issuance_date;
                $scope.lblloanclosuredate = resp.data.loan_closure_date;

                unlockUI();
            });

            var url = 'api/IdasNocAndNdc/GetNocDocumentEditList';
            SocketService.getparams(url, param).then(function (resp) {

                $scope.UploadDocumentList = resp.data.UploadNocDocumentList;
            });

        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.back = function () {
            $state.go('app.idasTrnNocAndNdc');
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('IdasTrnPhyDocVerify', IdasTrnPhyDocVerify);

    IdasTrnPhyDocVerify.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function IdasTrnPhyDocVerify($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        $scope.title = 'IdasTrnPhyDocVerify';
        var sanction_gid;
        var customer_gid;
        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.show = true;
            $scope.options = false;
            $location.hash('down');
            $anchorScroll();


            sanction_gid = localStorage.getItem('sanction_gid');
            var url = 'api/IdasTrnSanctionDoc/SanctionDtlsView';
            var params = {
                sanction_gid: sanction_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                
                $scope.sanctionrefno = resp.data.sanctionrefno;
                $scope.SanctionDate = resp.data.SanctionDate;
                $scope.SanctionAmount = resp.data.SanctionAmount;
                $scope.FacilityType = resp.data.FacilityType;
                $scope.customerName = resp.data.customerName;
                $scope.Customerurn = resp.data.Customerurn;
                $scope.collateral_security = resp.data.collateral_security;
                $scope.zonalHeadName = resp.data.zonalHeadName;
                $scope.businessHeadName = resp.data.businessHeadName;
                $scope.clusterManager = resp.data.clusterManager;
                $scope.creditManager = resp.data.creditManager;
                $scope.relationshipmgmt = resp.data.relationshipmgmt;
                $scope.customercode = resp.data.customercode;
                $scope.verticalCode = resp.data.verticalCode;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                customer_gid = resp.data.customer_gid;
                $scope.batch_status = resp.data.batch_status;
                $scope.status_ofBAL=resp.data.status_ofBAL;
                $scope.lsa_status = resp.data.lsa_status;
            });

            var url = "api/IdasTrnSanctionDoc/ScanDocSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.documentation_list = resp.data.MdlScannDocSummary;

            });

            var url = "api/IdasTrnSentMail/GetSentMailSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.senddata = resp.data.sendmail;

            });

            var url = "api/IdasTrnPhyDoc/GetPhyUnVerifiedCount";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.phydocunverified_count = resp.data.phydocunverified_count;
              
            });


            var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {

                $scope.commondocument = resp.data.uploaddocument;

            });

        }

        $scope.checkallDocument = function (selected) {
            angular.forEach($scope.documentation_list, function (val) {
                val.checked = selected;
            });
        }
        
        $scope.DocumentVerify = function () {
            var documentation_list = [];
            var sanctiondocument_gid;
            angular.forEach($scope.documentation_list, function (val) {

                if (val.checked == true) {
                    sanctiondocument_gid = val.sanctiondocument_gid;
                    documentation_list.push(sanctiondocument_gid);
                }
            });
            if (sanctiondocument_gid == undefined) {
                Notify.alert('Select Atleast One Record!', 'warning')
            }
            else {
                var modalInstance = $modal.open({
                    templateUrl: '/DocumentVerificationModalContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'md',
                    backdrop: 'static',
                    keyboard: false
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {

                    $scope.futuredatecheck = function (val) {
                        var params = {
                            date: val.toDateString()
                        }
                        var url = 'api/IdasTrnPhyDoc/FutureDateCheck';
                        SocketService.getparams(url, params).then(function (resp) {
                            if (resp.data.status == false) {
                                $scope.phydocument_date = '';
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, 'warning')
                            }
                        });
                    }

                    $scope.documentverificationSubmit = function () {

                        var params = {
                            sanctiondocument_gid: documentation_list,
                            type_copy: $scope.types_of_copy,
                            document_date: $scope.phydocument_date,
                            phyfinal_remarks: $scope.remarks,
                        }

                        if (sanctiondocument_gid != undefined) {
                            var url = 'api/IdasTrnPhyDoc/PostBulkDocVerification';
                            lockUI()
                            SocketService.post(url, params).then(function (resp) {
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');
                                    unlockUI();
                                    activate();
                                    $scope.checkallDocument = '';
                                }
                                else {
                                    unlockUI();
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');
                                    unlockUI();
                                }
                            });
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert('Select Atleast One Record!', 'warning')
                        }
                    }
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                }
            }
        }

        $scope.exportattach = function (path, attchment_name) {
            var phyPath = path;
            var relPath = phyPath.split("EMS/");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = attchment_name.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();


        }
        $scope.BatchConfirm = function () {
            if( $scope.status_ofBAL=='Yes'){
                var modalInstance = $modal.open({
                    templateUrl: '/buyerlist.html',
                    controller: ModalInstanceCtrl,
                    size: 'md'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {
                    $scope.batch_close = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.batch_ok=function(){
                        var url = 'api/IdasTrnPhyDoc/DocBatch';
                        var params = {
                            sanction_gid: sanction_gid,
                            sanctionref_no: $scope.sanctionrefno,
                            customer_gid:customer_gid,
                            customer_urn:$scope.Customerurn,
                            customer_name:$scope.customerName,
                        };
                        lockUI();
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {
                             
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, 'success')
                               
                            }
                            else {
                               
                                Notify.alert(resp.data.message)
                            }
                            activate();
                        });
                    }
                    var url = 'api/IdasMstSanction/GetBuyerinfoEdit';
                    var params = {
                        sanction_gid: sanction_gid
                      };
                      SocketService.getparams(url,params).then(function (resp) {
                        $scope.buyer_list = resp.data.buyer_list;
    
                    });
    
                }
                
               
    
            }
            else{
                SweetAlert.swal({
                    title: 'Are you sure?',
                    text: 'Do You Want To Create the Batch ?',
    
                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Batch It!',
                    closeOnConfirm: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        lockUI();
                        var params = {
                            sanction_gid: sanction_gid,
                            sanctionref_no: $scope.sanctionrefno,
                            customer_gid:customer_gid,
                            customer_urn:$scope.Customerurn,
                            customer_name:$scope.customerName,
                        };
                        var url = 'api/IdasTrnPhyDoc/DocBatch';
                        SocketService.post(url, params).then(function (resp) {
    
                            if (resp.data.status == true) {
                                activate();
                                SweetAlert.swal('Batch Created Successfully!');
                                unlockUI();
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });
    
                    }
    
                });
            }
          
          
        }

        $scope.mailconversation = function () {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var url = "api/idasMstTemplate/MailContent";
                SocketService.get(url).then(function (resp) {
                    $scope.mailcontent = resp.data.template_content;

                });

                var url = "api/idasTrnMakerCheckerDtls/GetMailId";
                var params = {
                    customer_gid: customer_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.rmmail_id = resp.data.rmmail_id;

                });

                var params = {
                    sanction_gid: sanction_gid,
                    type_of_copy: 'Physical Copy'
                }
                var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.phyPath = resp.data.attachment_path;
                    }
                    else {
                        Notify.alert('Error in attachment...!', 'success')
                        activate();

                    }

                });
                $scope.sendMail = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        document_path: $scope.phyPath,
                        to_mail: $scope.rmmail_id,
                        cc_mail: $scope.cc_mail,
                        bcc_mail: $scope.bcc_mail,
                        body_content: $scope.mailcontent,
                        subject: $scope.subject_mail
                    }
                    var url = 'api/IdasTrnSentMail/PostSendMail';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success');
                            $scope.subject_mail = '';
                            $scope.bcc_mail = '';
                            $scope.cc_mail = '';
                            activate();
                        }
                        else {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning');
                        }
                    });
                }
                $scope.export = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        type_of_copy:'Physical Copy'
                    }
                    var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                    SocketService.post(url, params).then(function (resp) {
                        
                        if (resp.data.status == true) {
                            DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath, resp.data.attachment_name);
                            // var phyPath = resp.data.attachment_path;
                            // var relPath = phyPath.split("EMS");
                            // var relpath1 = relPath[1].replace("\\", "/");
                            // var hosts = window.location.host;
                            // var prefix = location.protocol + "//";
                            // var str = prefix.concat(hosts, relpath1);
                            // var link = document.createElement("a");
                            // var name = resp.data.attachment_name.split('.');
                            // link.download = name[0];
                            // var uri = str;
                            // link.href = uri;
                            // link.click();

                        }
                        else {
                            Notify.alert(resp.data.message, 'success')
                         }

                    });
                }
            }
        }

        $scope.export = function () {
            var params = {
                sanction_gid: sanction_gid,
                type_of_copy: 'Physical Copy'
            }
            var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath,resp.data.attachment_name);
                    // var phyPath = resp.data.attachment_path;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.attachment_name.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    Notify.alert(resp.data.message, 'success')
                    activate();

                }

            });
        }

        $scope.openpanel = function () {

            $scope.show = false;
            $scope.options = true;
        }
        $scope.cancel = function () {

            $scope.show = true;

        }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.deletedocument = function (val) {
            var params = {
                commondocument_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to delete this Document ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasTrnSanctionDoc/CommonDocDelete";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Document Deleted Successfully!');
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }

        $scope.Verify = function (sanctiondocument_gid) {
            var url = 'api/IdasTrnPhyDoc/PhyDocVerify';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();

                    Notify.alert(resp.data.message, 'success')
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });
        }

        $scope.docConMkr = function (sanctiondocument_gid, conversation_count, phydoc_status) {
            localStorage.setItem('sanctiondocument_gid', sanctiondocument_gid);
            localStorage.setItem('conversation_count', conversation_count);
            localStorage.setItem('phydoc_status', phydoc_status);
            $state.go('app.idasTrnPhyDocConversation');
        }

        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }

        $scope.commondocumentupload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/CommonDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#commonupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {

                        $scope.commondocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('sanction_gid', sanction_gid);
            frm.append('types_of_doc', 'Physical Copy');
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


                $("#addupload").val('');
                $("#editupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.phydocback = function ()
        {
           if( $scope.batch_status=='Pending')
           {
            $location.url('app/idasTrnPhyDocSummary?lstab=pending');
           // $state.go('app.idasTrnPhyDocSummary');
           }else{
            $location.url('app/idasTrnPhyDocSummary?lstab=created');
          //  $state.go('app.idasTrnPhyDocSummary');
           }
           
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnPhyDocVerifySummary', idasTrnPhyDocVerifySummary);

    idasTrnPhyDocVerifySummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams','DownloaddocumentService'];

    function idasTrnPhyDocVerifySummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams,DownloaddocumentService) {
        $scope.title = 'idasTrnPhyDocVerifySummary';
     
        activate();

        function activate() {
            $scope.tab = {};

            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined)
            {
                if(relpath1=="pending")
                {
                    $scope.tabpending = true;
                }
                else if(relpath1=="created")
                {
                    $scope.tabcreated = true;
                }
               
            }
            else {
               
                $scope.tabpending = true;
            }


            $scope.totalDisplayedPending = 100;
            $scope.totalDisplayedCreated = 100;
            lockUI();
            var url = "api/IdasTrnPhyDoc/PhysicalDocumentPendingSummary";
            SocketService.get(url).then(function (resp) {
               
                $scope.batch_pending = resp.data.MdlPhyDocSummary;
              
                if($scope.batch_pending==null){
                    $scope.total_pending=0;
                }
                else{
                    $scope.total_pending = $scope.batch_pending.length;
                }
                

            });
            unlockUI();
            var url = "api/IdasTrnPhyDoc/PhysicalDocumentCreatedSummary";
            lockUI();
            SocketService.get(url).then(function (resp) {
               
                $scope.batch_created = resp.data.MdlPhyDocSummary;
                console.log(resp.data);
                if( $scope.batch_created==null){
                    $scope.total_created=0;
                }
                else{
                    $scope.total_created = $scope.batch_created.length;
                }
              

            });
            unlockUI(); 
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "completed") {
                    $scope.tabcreated = true;
                }
              
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'completed') {
                    $scope.tabcreated = true;
                }
               
            }

          
        }
       
        $scope.loadMorePending = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedPending += Number;
            unlockUI();
        };
        $scope.loadMoreCreated= function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedCreated += Number;
            unlockUI();
        };
        $scope.GetPdf = function (val) {
            var params = {
                sanction_gid: val
            };
            var url = 'api/idasTrnMakerCheckerDtls/GetComplaintCertificatePdf';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.file_path, "Compliance Certificate Report.pdf");
                    Notify.alert('Compliance Certificate Report Downloaded Successfully', 'success');
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });

        }
        $scope.docVerifyPending = function (sanction_gid) {
            localStorage.setItem('sanction_gid', sanction_gid);
            $location.url('app/idasTrnPhyDocVerification?lstab=pending');
        }
        $scope.docVerifyCreated = function (sanction_gid) {
            localStorage.setItem('sanction_gid', sanction_gid);
           $location.url('app/idasTrnPhyDocVerification?lstab=created');
        }
        $scope.export = function (sanction_gid) {
            lockUI();
            var params = {
                sanction_gid: sanction_gid,
                type_of_copy: 'Scan Copy'
            }
            var url = 'api/IdasTrnLsaManagement/ExportDocumentCoversation';
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.attachment_path, resp.data.attachment_name);
                    // var phyPath = resp.data.attachment_path;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.attachment_name.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    Notify.alert(resp.data.message, 'success')
                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnPreFilGenerationController', idasTrnPreFilGenerationController);

        idasTrnPreFilGenerationController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams','DownloaddocumentService'];

    function idasTrnPreFilGenerationController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams,DownloaddocumentService) {
        $scope.title = 'idasTrnPreFilGenerationController';
        
        $scope.sanction_gid = $location.search().sanction_gid;
        var lspage = $location.search().lspage;
     
        activate();

        function activate() {
            lockUI();
            var params = {
                sanction_gid: $scope.sanction_gid
            }
            var url = 'api/IdasMstDocList/GetDocument2SanctionList';
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.document2sanction_list = resp.data.IDASDocument;
            });

            var url = 'api/IdasTrnSanctionDoc/SanctionDtlsView';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefno = resp.data.sanctionrefno;
                $scope.customerName = resp.data.customerName;
                $scope.Customerurn = resp.data.Customerurn;
            });
        }

       $scope.generate = function(val, val1, val2, val3){
           $location.url('app/idasTrnDocumentGeneration?documentlist_gid=' + val + '&sanction_gid=' + val1 + '&document_code=' + val2 + '&doctemplate_flag=' + val3 + '&lspage=' + lspage);
       }

       $scope.WordGenerate = function (documentlist_gid, sanction_gid) {
           var params = {
               documentlist_gid: documentlist_gid,
               sanction_gid: sanction_gid
           };
           var url = 'api/IdasMstDocList/GetDocWordGenerate';
           lockUI();
           SocketService.getparams(url, params).then(function (resp) {
               if (resp.data.status == true) {
                var phyPath = resp.data.lspath;
                var filename1 = resp.data.lsname;
                var phyPath = phyPath.replace("\\", "/");
                var phyPath = phyPath.replace("//", "/");
                var relPath = phyPath.split("EMS/");
                var relpath1 = relPath[1].replace("\\", "/");
                var url1 = filename1;
                var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
               var url = 'api/azurestorage/FileUploadDocument';
                var params = {
                    file_path : relpath1
                }
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(relpath1, filename1);
                    
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                //    var phyPath = resp.data.lspath;
                //    var relPath = phyPath.split("EMS");
                //    var relpath1 = relPath[1].replace("\\", "/");
                //    var hosts = window.location.host;
                //    var prefix = location.protocol + "//";
                //    var str = prefix.concat(hosts, relpath1);
                //    var link = document.createElement("a");
                //    var name = resp.data.lsname.split('.');
                //    link.download = name[0];
                //    var uri = str;
                //    link.href = uri;
                //    link.click();
                   unlockUI();
               }
               else {
                   unlockUI();
                   Notify.alert('Error Occurred While Downloading !', 'warning')
                   activate();

               }
           });
       }

       $scope.gotoback = function () {
           if (lspage == 'generatedprefil') {
               $state.go('app.idasTrnPreFilManagement');
           }
           else {
               $state.go('app.idasTrnSanctionMgmt');
           }
       }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnPreFilManagementController', idasTrnPreFilManagementController);

    idasTrnPreFilManagementController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams','DownloaddocumentService'];

    function idasTrnPreFilManagementController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams,DownloaddocumentService) {
        $scope.title = 'idasTrnPreFilManagementController';

        activate();

        function activate() {
            $scope.PrefilGenerateDocument = false;
            $scope.GeneratedPrefilDoc = true;

            var url = 'api/IdasMstDocList/GetGeneratedDocList';
            SocketService.get(url).then(function (resp) {
                $scope.generateddoc_list = resp.data.IDASDocument;
            });
        }

        $scope.generate = function (sanction_gid) {

            $location.url('app/idasTrnPreFilGeneration?sanction_gid=' + sanction_gid + '&lspage=generatedprefil');
        }

        $scope.generatedocument = function () {
            $scope.PrefilGenerateDocument = true;
            $scope.GeneratedPrefilDoc = false;

            $scope.back = function () {
                $scope.PrefilGenerateDocument = false;
                $scope.GeneratedPrefilDoc = true;

                $scope.customer = '';
                $scope.cbocustomer2sanction_gid = '';
                $scope.document2sanction_list = '';
            }

            $scope.complete = function (string) {

                if (string.length >= 3) {
                    $scope.message = "";
                    var url = 'api/customer/ExploreCustomer';
                    var params = {
                        customername: string
                    }
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $scope.message = "";
                            $scope.customer_list = resp.data.Customers;
                        }
                        else {
                            $scope.message = "No Records";
                        }
                    });
                }
                else {
                    $scope.customer_list = null;
                    $scope.message = "Enter atleast three character";
                }
            }
            $scope.fillTextbox = function (customer_gid, customer_name) {
                $scope.customer = customer_name;
                $scope.customer_gid = customer_gid;
                $scope.customer_list = null;

                var params = {
                    customer_gid: customer_gid
                }
                var url = 'api/IdasTrnLsaManagement/customer2sanction';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.customer2sanction_list = resp.data.customer2sanction_list;

                });
            }

            $scope.onselectedchangesanction = function (sanction) {
                lockUI();
                var params = {
                    sanction_gid: $scope.cbocustomer2sanction_gid.customer2sanction_gid
                }
                var url = 'api/IdasMstDocList/GetDocument2SanctionList';
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.document2sanction_list = resp.data.IDASDocument;
                });
            }

            $scope.generate = function (val, val1, val2, val3) {
                $location.url('app/idasTrnDocumentGeneration?documentlist_gid=' + val + '&sanction_gid=' + val1 + '&document_code=' + val2 + '&doctemplate_flag=' + val3 + '&lspage=createprefil');
            }

            $scope.WordGenerate = function (documentlist_gid, sanction_gid) {
                var params = {
                    documentlist_gid: documentlist_gid,
                    sanction_gid: sanction_gid
                };
                var url = 'api/IdasMstDocList/GetDocWordGenerate';
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        var phyPath = resp.data.lspath;
                var filename1 = resp.data.lsname;
                var phyPath = phyPath.replace("\\", "/");
                var phyPath = phyPath.replace("//", "/");
                var relPath = phyPath.split("EMS/");
                var relpath1 = relPath[1].replace("\\", "/");
                var url1 = filename1;
                var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
               var url = 'api/azurestorage/FileUploadDocument';
                var params = {
                    file_path : relpath1
                }
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(relpath1, filename1);
                   
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                        // var phyPath = resp.data.lspath;
                        // var relPath = phyPath.split("EMS");
                        // var relpath1 = relPath[1].replace("\\", "/");
                        // var hosts = window.location.host;
                        // var prefix = location.protocol + "//";
                        // var str = prefix.concat(hosts, relpath1);
                        // var link = document.createElement("a");
                        // var name = resp.data.lsname.split('.');
                        // link.download = name[0];
                        // var uri = str;
                        // link.href = uri;
                        // link.click();
                        unlockUI();
                    }
                    else {
                        unlockUI();
                        Notify.alert('Error Occurred While Downloading !', 'warning')
                        activate();

                    }
                });
            }
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('angle')
        .controller('idasTrnReDespatch360View',idasTrnReDespatch360View);
        idasTrnReDespatch360View.$inject=['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies'];
        function idasTrnReDespatch360View($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies)
        {
            var vm = this;
            vm.title = 'idasTrnReDespatch360View';
            var redespatch_gid;
            var retrievalrequest_gid;
            activate();

            function activate(){

                redespatch_gid=localStorage.getItem("redespatch_gid");
                $scope.received_type="Direct";

                
                var params={
                    redespatch_gid:redespatch_gid
                };

                var url="api/IdasTrnRecordRetrieval/ReDespatchView360";

                SocketService.getparams(url,params).then(function (resp) {
                  
                    $scope.retrievalrequest_gid=resp.data.retrievalrequest_gid;
                    retrievalrequest_gid=$scope.retrievalrequest_gid;
                    $scope.requested_date=resp.data.requested_date;
                    $scope.requestedby_name=resp.data.requestedby_name;
                    $scope.retrieval_type=resp.data.retrieval_type;
                    $scope.approved_date=resp.data.approved_date;
                    $scope.approvalby_name=resp.data.approvalby_name;
                    $scope.req_remarks=resp.data.req_remarks;
                    $scope.requested_for=resp.data.requested_for;
                    $scope.documentretrieved_status=resp.data.documentretrieved_status;
                    $scope.documentretrieved_mode=resp.data.documentretrieved_mode;

                    $scope.redespatch_gid=resp.data.redespatch_gid;
                    $scope.redespatched_date=resp.data.redespatched_date;
                    $scope.redespatchedby_name=resp.data.redespatchedby_name;
                    $scope.contact_person=resp.data.contact_person; 
                    $scope.remarks=resp.data.remarks;

                
                    $scope.uploaddocument=resp.data.MdlIdasUploadDocument;
                    $scope.RetrivedDtls_list = resp.data.MdlTrnRequired;
                        $scope.totalDisplayed = 100;
                        $scope.total=$scope.RetrivedDtls_list.length;
                       
                        var url = 'api/IdasTrnRecordRetrieval/GetDocReceived';
                        var params={
                            retrievalrequest_gid:$scope.retrievalrequest_gid
                        };
                        SocketService.getparams(url,params).then(function (resp) {
                         
                            $scope.documentretrieved_type = resp.data.documentretrieved_mode;
                            $scope.documentretrieved_date=resp.data.documentretrieved_date;
                            $scope.documentreceivedto_gid=resp.data.documentreceivedto_gid;
                            $scope.documentreceivedto_name=resp.data.documentreceivedto_name;
                            $scope.contactperson_name=resp.data.contactperson_name;
                            $scope.mobile_no=resp.data.mobile_no;
                          
                        });
                    });

                   
                       

                   
            }
            
$scope.loadMore = function (pagecount) {
    if (pagecount == undefined) {
        Notify.alert("Enter the Total Summary Count", "warning");
        return;
    }
    lockUI();
    var Number = parseInt(pagecount);
    if ($scope.RetrivedDtls_list != null) {
        if ($scope.totalDisplayed < $scope.RetrivedDtls_list.length) {
            $scope.totalDisplayed += Number;
            unlockUI();
        }
        else {
            unlockUI();
            Notify.alert(" Total Summary has" + $scope.RetrivedDtls_list.length + " Records Only", "warning");
            return;
        }
    }
    unlockUI();
};
         
            $scope.downloadsdocument = function (val1, val2) {

                var phyPath = val1;            
                var relPath = phyPath.split("EMS");
                var relpath1 = relPath[1].replace("\\", "/");
                var hosts = window.location.host;
                var prefix = location.protocol + "//";
                var str = prefix.concat(hosts, relpath1);
                var link = document.createElement("a");
                var name = val2.split(".")
                link.download = val2;
                var uri = str;
                link.href = uri;
                link.click();
            }
            $scope.back=function(){
                $state.go('app.idasTrnRetrievalReqSummary');
            }

           
           
          
       
        }

})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnResponseDoc', idasTrnResponseDoc);

    idasTrnResponseDoc.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnResponseDoc($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        $scope.title = 'idasTrnResponseDoc';
        var sanction_gid;
        var customer_gid;
        activate();

        function activate() {
            $scope.DivFile = false;
            $scope.show = true;
            $scope.options = false;

            $location.hash('down');
            $anchorScroll();
            

            sanction_gid = localStorage.getItem('sanction_gid');
            var url = 'api/IdasTrnSanctionDoc/SanctionDtlsView';
            var params = {
                sanction_gid: sanction_gid
            };

            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctionrefno = resp.data.sanctionrefno;
                $scope.SanctionDate = resp.data.SanctionDate;
                $scope.SanctionAmount= resp.data.SanctionAmount;
                $scope.FacilityType = resp.data.FacilityType;
               
                $scope.customerName = resp.data.customerName;
                $scope.Customerurn = resp.data.Customerurn;
                $scope.collateral_security = resp.data.collateral_security;
                $scope.zonalHeadName = resp.data.zonalHeadName;
                $scope.businessHeadName = resp.data.businessHeadName;
                $scope.clusterManager = resp.data.clusterManager;
                $scope.creditManager = resp.data.creditManager;
                $scope.relationshipmgmt = resp.data.relationshipmgmt;
                $scope.customercode = resp.data.customercode;
                $scope.verticalCode = resp.data.verticalCode;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                customer_gid = resp.data.customer_gid;

            });

            var url = "api/IdasTrnSanctionDoc/ScanDocSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.documentation_list = resp.data.MdlScannDocSummary;
                console.log(resp.data);
            });

            var url = "api/IdasTrnSentMail/GetSentMailSummary";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {
                $scope.senddata = resp.data.sendmail;

            });

            var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url, params).then(function (resp) {

                $scope.commondocument = resp.data.uploaddocument;

            });
        }

        $scope.deletedocument = function (val) {
            var params = {
                commondocument_gid: val
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do you want to delete this query to Document ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, Delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    lockUI();
                    var url = "api/IdasTrnSanctionDoc/CommonDocDelete";
                    SocketService.getparams(url, params).then(function (resp) {

                        if (resp.data.status == true) {
                            SweetAlert.swal('Document Deleted Successfully!');
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });

                }

            });
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.commondocumentupload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/CommonDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#commonupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetCommonDoc';
                    var params = {
                        sanction_gid: sanction_gid
                    };
                    SocketService.getparams(url, params).then(function (resp) {

                        $scope.commondocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.downloadsdocument = function (val1, val2) {

            //var phyPath = val1;

            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();

            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.gotoback = function () {
            $state.go('app.idasTrnRmResponseSummary');
        }
        $scope.cancel = function () {

            $scope.show = true;

        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('sanction_gid', sanction_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {


                $("#addupload").val('');
                $("#editupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }

        $scope.mailconversation = function () {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var url = "api/idasMstTemplate/MailContent";
                SocketService.get(url).then(function (resp) {
                    $scope.mailcontent = resp.data.template_content;

                });

                var url = "api/idasTrnMakerCheckerDtls/GetMailId";
                var params = {
                    customer_gid: customer_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.rmmail_id = resp.data.rmmail_id;

                });

                var url = "api/idasTrnMakerCheckerDtls/GetCreditMailId";
                SocketService.get(url).then(function (resp) {
                    $scope.creditmail_id = resp.data.creditmail_id;

                });

                var params = {
                    sanction_gid: sanction_gid,
                }
                var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                SocketService.post(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.phyPath = resp.data.attachment_path;
                    }
                    else {
                        Notify.alert('Error in attachment...!', 'success')
                        activate();

                    }

                });
                $scope.sendMail = function () {
                    var params = {
                        sanction_gid: sanction_gid,
                        document_path: $scope.phyPath,
                        to_mail: $scope.rmmail_id,
                        cc_mail: $scope.cc_mail,
                        bcc_mail: $scope.bcc_mail,
                        body_content: $scope.mailcontent,
                        subject: $scope.subject_mail
                    }
                    var url = 'api/IdasTrnSentMail/PostSendMail';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'success');
                            $scope.subject_mail = '';
                            $scope.bcc_mail = '';
                            $scope.cc_mail = '';
                            activate();
                        }
                        else {
                            unlockUI();
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, 'warning');
                        }
                    });
                }
                $scope.export = function () {
                    var params = {
                        sanction_gid: sanction_gid
                    }
                    var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath,resp.data.attachment_name);
                            // var phyPath = resp.data.attachment_cloudpath;
                            // var relPath = phyPath.split("EMS");
                            // var relpath1 = relPath[1].replace("\\", "/");
                            // var hosts = window.location.host;
                            // var prefix = location.protocol + "//";
                            // var str = prefix.concat(hosts, relpath1);
                            // var link = document.createElement("a");
                            // var name = resp.data.attachment_name.split('.');
                            // link.download = name[0];
                            // var uri = str;
                            // link.href = uri;
                            // link.click();

                        }
                        else {
                            Notify.alert(resp.data.message, 'success')
                            activate();

                        }

                    });
                }
            }
        }

        $scope.export = function () {
            var params = {
                sanction_gid: sanction_gid
            }
            var url = 'api/IdasTrnSanctionDoc/ScanDocConExport';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.attachment_cloudpath,resp.data.attachment_name);
                    // var phyPath = resp.data.attachment_path;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.attachment_name.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    Notify.alert(resp.data.message, 'success')
                    activate();

                }

            });
        }
        $scope.exportattach = function (path, attchment_name) {

            var phyPath = path;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = attchment_name.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();


        }
        $scope.openpanel = function () {

            $scope.show = false;
            $scope.options = true;
        }
        $scope.rmresponse = function (sanctiondocument_gid)
        {
            var url = "api/idasTrnMakerCheckerDtls/CadQuieryRMViwed";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid,
                types_of_conversation: 'External'
            };
            SocketService.post(url, params).then(function (resp) {
                $scope.senddata = resp.data.sendmail;

            });
            localStorage.setItem('sanctiondocument_gid', sanctiondocument_gid);
            $state.go('app.idasTrnRmResponse');
        }
        $scope.cancel = function () {

            $scope.show = true;

        }
       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnRetrievalReqCreate', idasTrnRetrievalReqCreate);

    idasTrnRetrievalReqCreate.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies', '$filter', 'ngTableParams', '$timeout', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnRetrievalReqCreate($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies, $filter, ngTableParams, $timeout, DownloaddocumentService,cmnfunctionService) {
        var vm = this;

        activate();

        function activate() {

            $scope.batch_mode=false;
            $scope.box_mode=false;
            $scope.customer_mode=false;
            $scope.reconciliationmode=false;
            $scope.DivFile = false;
            
            vm.calenderreq = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openreq = true;
            };
            vm.calenderapp = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openapp = true;
            };

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });

             var url = 'api/IdasTrnRecordRetrieval/DespatchCustomer';
             SocketService.get(url).then(function (resp) {
                 $scope.customer_list = resp.data.MdlCustomer;
             });

             var url = 'api/IdasTrnRecordRetrieval/DespatchBox';
             SocketService.get(url).then(function (resp) {
                 $scope.box_list = resp.data.MdlGetBox;
             });

            // var url = 'api/IdasTrnRecordRetrieval/DeleteRequestDtls';
          
            // SocketService.get(url).then(function (resp) {
               
            // });

            var params={
                uploaddocument_gid:undefined
            };

            var url = 'api/IdasTrnRecordRetrieval/TmpDocumentDelete';

            SocketService.getparams(url,params).then(function (resp) {

               // $scope.uploaddocument = resp.data.MdlIdasUploadDocument;

            });

            // var url = 'api/IdasTrnRecordRetrieval/BatchList';
            // SocketService.get(url).then(function (resp) {
            //     $scope.batch_list = resp.data.MdlGetBatch;
            //  //   console.log($scope.batch_list);
            // });

            // var url = 'api/IdasTrnRecordRetrieval/BoxList';
            // SocketService.get(url).then(function (resp) {
            //     $scope.box_list = resp.data.MdlBoxDtls;

            // });

            // var url = 'api/IdasTrnRecordRetrieval/DespatchList';
            //  SocketService.get(url).then(function (resp) {
            //  $scope.despatch_list = resp.data.MdlGetBox;

            //  var url = 'api/IdasTrnRecordRetrieval/DespatchBox';
            //  SocketService.get(url).then(function (resp) {
            //  $scope.despatch_list = resp.data.MdlDespatchDtls;

            // });

          
        }

        // $scope.deleteFiles=function(tmp_gid){
        //    var params={
        //         tmpretrievalrequestdtls_gid:tmp_gid
        //     }
        //     var url = 'api/IdasTrnRecordRetrieval/DeleteRequestDtls';
        //        SocketService.getparams(url,params).then(function (resp) {
        //       if(resp.data.status==true){
        //         url='api/IdasTrnRecordRetrieval/tmpRequestRetrievalDtls'
        //         SocketService.get(url).then(function (resp) {              
        //             $scope.tmpdetails= resp.data.MdltmpRequired;
        //     });
        //         Notify.alert(resp.data.message, 'success')

        //       }
        //       else
        //       {
        //         Notify.alert(resp.data.message, 'warning')

        //       }

        //     });

        // }
        $scope.checkallBatch = function (selected) {
            angular.forEach($scope.batch_list, function (val) {  
                
                    val.checked = selected;
            });
        }
        $scope.onchangemodecustomer=function(){
            $scope.customer_mode=true;
            $scope.box_mode=false;
            $scope.file_mode=false;
            $scope.reconciliationmode=false;
            $scope.customer="";
        }
        $scope.onchangemodebox=function(){
            $scope.customer_mode=false;
            $scope.box_mode=true;
            $scope.file_mode=false;
            $scope.reconciliationmode=false;
            $scope.box="";
        }
        $scope.onchangemodefile=function(){
            $scope.customer_mode=false;
            $scope.box_mode=false;
            $scope.file_mode=true;
            $scope.reconciliationmode=true;

            var params={
                reference_type:$scope.retrieval_mode
            }

            var url = 'api/IdasTrnRecordRetrieval/BatchList';
            SocketService.post(url, params).then(function (resp) {
             if(resp.data.status==true){
                $scope.file_mode=true;
                $scope.batch_list = resp.data.MdlGetBatch;
                $scope.total=$scope.batch_list.length;
             }
              else{
                  $scope.file_mode=false;
                  Notify.alert('No Data to Display','warning');
              }
               
              
            });

            var params={
                reference_type:$scope.retrieval_mode
            }

            var url = 'api/IdasTrnRecordRetrieval/ReconciliationCount';
            SocketService.post(url, params).then(function (resp) {
                $scope.file_count = resp.data.file_count;
                $scope.despatched_count=resp.data.despatched_count;
                $scope.permanet_count=resp.data.permanet_count;
                $scope.temporary_count=resp.data.temporary_count;
            
            });
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.onSelectChangeCustomer=function(val1){
            console.log(val1);
            $scope.reconciliationmode=true;
              var params={
                reference_type:$scope.retrieval_mode,
                MdlCustomer:val1
            }
           if(val1!=undefined){
            var url = 'api/IdasTrnRecordRetrieval/BatchList';
            SocketService.post(url, params).then(function (resp) {
             if(resp.data.status==true){
                $scope.file_mode=true;
               $scope.batch_list = resp.data.MdlGetBatch;
               $scope.total=$scope.batch_list.length;
             }
          else{
                  $scope.file_mode=false;
                  Notify.alert('No Data to Display','warning');
              }
              
              });

           var params={
               reference_type:$scope.retrieval_mode,
               MdlCustomer:val1
           }

            var url = 'api/IdasTrnRecordRetrieval/ReconciliationCount';
            SocketService.post(url, params).then(function (resp) {
              $scope.file_count = resp.data.file_count;
              $scope.despatched_count=resp.data.despatched_count;
              $scope.permanet_count=resp.data.permanet_count;
              $scope.temporary_count=resp.data.temporary_count;
              $scope.insamunnati_count=$scope.permanet_count + $scope.temporary_count;
             
           
            });
      
           }
           else{
            $scope.customer_mode=true;
            $scope.box_mode=false;
            $scope.file_mode=false;
            $scope.reconciliationmode=false;
            $scope.customer="";
           }

           }

        $scope.onSelectChangeBox=function(val1){
            $scope.reconciliationmode=true;
           
            var params={
                reference_type:$scope.retrieval_mode,
                MdlGetBox:val1
            }
            if(val1!=undefined){
                var url = 'api/IdasTrnRecordRetrieval/BatchList';
                SocketService.post(url, params).then(function (resp) {
                 if(resp.data.status==true){
                    $scope.file_mode=true;
                    $scope.batch_list = resp.data.MdlGetBatch;
                    $scope.total=$scope.batch_list.length;
                 }
                  else{
                      $scope.file_mode=false;
                      Notify.alert('No Data to Display','warning');
                  }
                   
                  
                });
    
                var params={
                    reference_type:$scope.retrieval_mode,
                    MdlGetBox:val1
                }
    
                var url = 'api/IdasTrnRecordRetrieval/ReconciliationCount';
                SocketService.post(url, params).then(function (resp) {
                    $scope.file_count = resp.data.file_count;
                    $scope.despatched_count=resp.data.despatched_count;
                    $scope.permanet_count=resp.data.permanet_count;
                    $scope.temporary_count=resp.data.temporary_count;
                
                });
            }
            else{
                $scope.customer_mode=false;
                $scope.box_mode=true;
                $scope.file_mode=false;
                $scope.reconciliationmode=false;
                $scope.box="";
            }

           
        }

      
    
        $scope.deletedocument=function(val){
            var params = {
                uploaddocument_gid: val
            }
            var url = 'api/IdasTrnRecordRetrieval/TmpDocumentDelete';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully!', 'success')

                    var url = 'api/IdasTrnRecordRetrieval/GetTmpUploadDocument';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.MdlIdasUploadDocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }
        $scope.downloadsdocument = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.commonupload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnRecordRetrieval/UploadDocument';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#commonupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnRecordRetrieval/GetTmpUploadDocument';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.MdlIdasUploadDocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
       

        $scope.requestSubmit=function(){
          //  console.log('submiited');
          var batch_value = [];
         
          angular.forEach($scope.batch_list, function (val) {

              if (val.checked == true) {
                 

                  batch_value.push([val.customer_gid,val.customername,val.despatch_gid,val.despatchref_no,val.cartonbox_gid,val.boxstampref_no,val.batch_gid,val.filestampref_no,val.fileref_no]);

              }
          });
         if(batch_value==undefined){
            Notify.alert("Kindly Select Atleast One Record",'warning');
            return;
         }
             var params={
                 requested_date:$scope.requestDate,
                 requestedby_name:$scope.requested_by,
                 approvalby_name:$scope.approved_by,
                 approved_date:$scope.approvalDate,
                 retrieval_type:$scope.retrieval_type,
                 req_remarks:$scope.remarks,
                 requested_for:$scope.reason,
                 reteival_record:batch_value,
                 documentretrieved_mode:$scope.retrieval_mode

             };

             var url='api/IdasTrnRecordRetrieval/CreateRetrievalReq';
             lockUI();
             SocketService.post(url,params).then(function (resp) {
                 unlockUI();
               if(resp.data.status==true){
                 $state.go('app.idasTrnRetrievalReqSummary');
                 Notify.alert(resp.data.message, 'success');
               }
               else{
                 Notify.alert(resp.data.message, 'warning');
               }
             });
           
        }

        $scope.back=function(){
            $state.go('app.idasTrnRetrievalReqSummary');
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnRetrievalReqSummary', idasTrnRetrievalReqSummary);

    idasTrnRetrievalReqSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnRetrievalReqSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams) {
        var vm = this;
        vm.title = 'idasTrnRetrievalReqSummary';

        activate();

        function activate() {
            $scope.user = {};
            $scope.IsCreate=false;
            $scope.totalDisplayedReq = 100;
            $scope.totalDisplayedTemp = 100;
            $scope.totalDisplayedPermanent = 100;
            $scope.totalDisplayedDespath=100;

            vm.calenderDespatch = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openDespatch = true;
            };

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url='api/IdasTrnRecordRetrieval/GetRetrievalReqSummary';

            SocketService.get(url).then(function (resp) {

            $scope.reqsummary_list=resp.data.MdlIdasRecordReqSummary;
            $scope.ReqCount=$scope.reqsummary_list.length;

            });


            var url='api/IdasTrnRecordRetrieval/GetRetrievalTempSummary';

            SocketService.get(url).then(function (resp) {

            $scope.temp_list=resp.data.MdlIdasRecordReceivedSummary;
            
            if($scope.temp_list==null){
                $scope.TempCount=0;
            }
            else{
                $scope.TempCount=$scope.temp_list.length;
            }
    
            });

            var url='api/IdasTrnRecordRetrieval/GetRetrievalPermanentSummary';

            SocketService.get(url).then(function (resp) {

            $scope.permanent_list=resp.data.MdlIdasRecordReceivedSummary;
            if( $scope.TempCount==null){
                $scope.PermanentCount=0;
            }
            else{
                $scope.PermanentCount=$scope.permanent_list.length;
            }
            

            });

            var url='api/IdasTrnRecordRetrieval/GetReDespatchedSummary';

            SocketService.get(url).then(function (resp) {

            $scope.redespatch_list=resp.data.MdlReDespatchSummary;
            console.log($scope.redespatch_list);
            if( $scope.redespatch_list==null){
                $scope.DespatchCount=0;
            }
            else{
                $scope.DespatchCount=$scope.redespatch_list.length;
            }
            

            });
        }
        $scope.checkallRedespatch = function (selected) {
            angular.forEach($scope.temp_list, function (val) {  
              
                if(val.ensure_flag=='Y'){
                    val.checked = selected;
                }
               
            });
        }
        $scope.createDespatch = function () {
            var gid_list = [];
            var gid;
            angular.forEach($scope.temp_list, function (val) {

                if (val.checked == true) {
                    gid = val.retrievalrequestdtls_gid;

                    gid_list.push(gid);

                }
            });

            if(gid!=undefined)
            {
                var url = 'api/employee/employee';
                SocketService.get(url).then(function (resp) {
                    $scope.employee_data = resp.data.employee_list;
                    
                });
               
                $scope.IsCreate = true;
            }
            else {
                Notify.alert('Select Atleast One Record!')
            }
          
          
        }
         $scope.close=function()
        {
            $scope.IsCreate = false;
        }
        $scope.DespatchSubmit = function () {
            var gid_list = [];
            var gid;
            angular.forEach($scope.temp_list, function (val) {

                if (val.checked == true) {
                    gid = val.retrievalrequestdtls_gid;

                    gid_list.push(gid);

                }
            });
            if(gid==undefined)
            {
                Notify.alert('Select Atleast One Record!')
                return;
            }
          
            var params = {
                retrievalrequestdtls_gid: gid_list,
                redespatched_date: $scope.user.txtDespatchDate,
                contact_person: $scope.user.contactPerson,
                redespatchedby_name: $scope.user.DespatchedBy,
                remarks: $scope.user.despatchRemarks

            }
          

            var url = 'api/IdasTrnRecordRetrieval/ReDespatch';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                  
                   
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();

                    Notify.alert(resp.data.message)
                }
                activate();
            });

        }
      $scope.ensure=function(val){
          var params={
            retrievalrequestdtls_gid:val
          }
        SweetAlert.swal({
            title: 'Are you Sure?',
            text: 'The Retrieval Purpose is Completed',
            showCancelButton: true,
            confirmButtonColor: '#DD6B55',
            confirmButtonText: 'Yes, Ensured it!',
            closeOnConfirm: false
        }, function (isConfirm) {
            if (isConfirm) {
                lockUI();
                var url = "api/IdasTrnRecordRetrieval/Ensure";
                SocketService.getparams(url, params).then(function (resp) {

                    if (resp.data.status == true) {
                        activate();
                        SweetAlert.swal('Ensured Successfully!');
                        unlockUI();
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        unlockUI();
                    }
                });

            }

        });
      }

        $scope.loadMoreReq = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedReq += Number;
            unlockUI();
        };
        $scope.loadMoredespatch = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedDespath += Number;
            unlockUI();
        };
        $scope.loadMoreTemp = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedTemp += Number;
            unlockUI();
        };
        $scope.loadMorePermanent = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            
            $scope.totalDisplayedPermanent += Number;
            unlockUI();
        };
        $scope.createRetrievalReq = function () {
            $state.go('app.idasTrnRetrievalReqCreate');
        }

        $scope.back=function () {
            $state.go('app.idasTrnRetrievalReqSummary');
        }

        $scope.Docdtlsview=function(val){
            localStorage.setItem('retrievalrequest_gid',val);
            $state.go('app.idasTrnRetrievalReqView');
        }
        $scope.ReDespatchdtlsview=function(val){
            
            localStorage.setItem('redespatch_gid',val);
            $state.go('app.idasTrnReDespatch360View');
        }

       
    }

})();
(function (){
    'use strict';
    angular
        .module('angle')
        .controller('idasTrnRetrievalReqView',idasTrnRetrievalReqView);
    idasTrnRetrievalReqView.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', 'DownloaddocumentService'];
    function idasTrnRetrievalReqView($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, DownloaddocumentService)
        {
            var vm = this;
            vm.title = 'idasTrnRetrievalReqView';
            var retrievalrequest_gid;
            activate();

            function activate(){

                vm.calenderrec = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
    
                    vm.openrec = true;
                };
               
    
                vm.dateOptions = {
                    formatYear: 'yy',
                    startingDay: 1
                };
    
                vm.formats = ['dd-MM-yyyy'];
                vm.format = vm.formats[0];

                retrievalrequest_gid=localStorage.getItem("retrievalrequest_gid");
                $scope.received_type="Direct";

                
                var params={
                    retrievalrequest_gid:retrievalrequest_gid
                };

                var url="api/IdasTrnRecordRetrieval/RetrievalReqView";

                SocketService.getparams(url,params).then(function (resp) {
                  
                    $scope.requested_date=resp.data.requested_date;
                    $scope.requestedby_name=resp.data.requestedby_name;
                    $scope.retrieval_type=resp.data.retrieval_type;
                    $scope.approved_date=resp.data.approved_date;
                    $scope.approvalby_name=resp.data.approvalby_name;
                    $scope.req_remarks=resp.data.req_remarks;
                    $scope.requested_for=resp.data.requested_for;
                    $scope.documentretrieved_status=resp.data.documentretrieved_status;
                    $scope.documentretrieved_mode=resp.data.documentretrieved_mode;
                    
                    // $scope.customer_urn=resp.data.customer_urn;
                    // $scope.customername=resp.data.customername;
                    // $scope.vertical_code=resp.data.vertical_code;
                    // $scope.businesshead_name=resp.data.businesshead_name;
                    // $scope.zonal_name=resp.data.zonal_name;
                    // $scope.cluster_manager_name=resp.data.cluster_manager_name;
                    // $scope.creditmgmt_name=resp.data.creditmgmt_name;
                    // $scope.relationshipmgmt_name=resp.data.relationshipmgmt_name;

                    // $scope.boxref_no=resp.data.boxref_no;
                    // $scope.stampref_no=resp.data.stampref_no;
                    // $scope.cartonbox_date=resp.data.cartonbox_date;
                    // $scope.remarks=resp.data.remarks;

                    $scope.uploaddocument=resp.data.MdlIdasUploadDocument;
                    if($scope.documentretrieved_mode=="Customer"){
                        $scope.RetrivedDtls_list=resp.data.MdlCustomerDtlsList;
                      
                    }
                    if($scope.documentretrieved_mode=="Box"){
                        $scope.RetrivedDtls_list=resp.data.MdlBoxDtlsList;
                        console.log($scope.RetrivedDtls_list);
                    }
                    if($scope.documentretrieved_mode=="File"){
                        $scope.totalDisplayed = 100;
                        var params = {
                           
                            retrievalrequest_gid:retrievalrequest_gid,
                            documentretrieved_mode:$scope.documentretrieved_mode,
                           
                        };
                        var url = 'api/IdasTrnRecordRetrieval/RetrievalRequestDocDtls';
                        SocketService.post(url, params).then(function (resp) {
                            $scope.RetrivedDtls_list = resp.data.MdlTrnRequired;
                            $scope.total=$scope.RetrivedDtls_list.length;
                            
                        });
                    }
                   
                    });

                    var url = 'api/employee/employee';
                    SocketService.get(url).then(function (resp) {
                        $scope.employee_list = resp.data.employee_list;
                      
                    });

                    if($scope.documentretrieved_status!='Pending'){
                        var url = 'api/IdasTrnRecordRetrieval/GetDocReceived';
                        var params={
                            retrievalrequest_gid:retrievalrequest_gid
                        };
                        SocketService.getparams(url,params).then(function (resp) {
                          
                            $scope.documentretrieved_type = resp.data.documentretrieved_mode;
                            $scope.documentretrieved_date=resp.data.documentretrieved_date;
                            $scope.documentreceivedto_gid=resp.data.documentreceivedto_gid;
                            $scope.documentreceivedto_name=resp.data.documentreceivedto_name;
                            $scope.contactperson_name=resp.data.contactperson_name;
                            $scope.mobile_no=resp.data.mobile_no;
                          
                        });

                    }
            }
            
$scope.loadMore = function (pagecount) {
    if (pagecount == undefined) {
        Notify.alert("Enter the Total Summary Count", "warning");
        return;
    }
    lockUI();
    var Number = parseInt(pagecount);
    if ($scope.RetrivedDtls_list != null) {
        if ($scope.totalDisplayed < $scope.RetrivedDtls_list.length) {
            $scope.totalDisplayed += Number;
            unlockUI();
        }
        else {
            unlockUI();
            Notify.alert(" Total Summary has" + $scope.RetrivedDtls_list.length + " Records Only", "warning");
            return;
        }
    }
    unlockUI();
};
            $scope.customerdetails = function (customer_gid, id) {
                var params = {
                    customer_gid: customer_gid,
                    retrievalrequest_gid:retrievalrequest_gid,
                    documentretrieved_mode:$scope.documentretrieved_mode,
                    box_gid:""
                };
               
                 var url = 'api/IdasTrnRecordRetrieval/RetrievalRequestDocDtls';
             SocketService.post(url, params).then(function (resp) {
                 console.log(resp.data);
                     $scope.RetrivedDtls_list[id][customer_gid] = resp.data.MdlTrnRequired;
                    
             });
            }
            $scope.boxdetails = function (box_gid, id) {
                var params = {
                    customer_gid: "",
                    retrievalrequest_gid:retrievalrequest_gid,
                    documentretrieved_mode:$scope.documentretrieved_mode,
                    box_gid:box_gid
                };
               
                 var url = 'api/IdasTrnRecordRetrieval/RetrievalRequestDocDtls';
                  SocketService.post(url, params).then(function (resp) {
                 console.log(resp.data);
                     $scope.RetrivedDtls_list[id][box_gid] = resp.data.MdlTrnRequired;
                    
             });
            }
            $scope.downloadsdocument = function (val1, val2) {

                //var phyPath = val1;            
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //var name = val2.split(".")
                //link.download = val2;
                //var uri = str;
                //link.href = uri;
                //link.click();

                DownloaddocumentService.Downloaddocument(val1, val2);
            }
            $scope.back=function(){
                $state.go('app.idasTrnRetrievalReqSummary');
            }

            $scope.Docreceived=function(val){
                var params={
                    retrievalrequestdtls_gid:val,
                    received_type: $scope.retrieval_type

                }

                var url='api/IdasTrnRecordRetrieval/DocReceivedDtls';
                lockUI()
                SocketService.post(url,params).then(function (resp) {
                    unlockUI()
                    if (resp.data.status==true){
                        Notify.alert(resp.data.message, 'success')
                        activate();
                    }
                    else{
                        Notify.alert(resp.data.message, 'warning')
                    }
                });

            }
           
           $scope.receivedSubmit = function () {
              
                if($scope.cboemployeegid ==undefined){
                    Notify.alert("Select the Document Received To", 'warning')
                    return;
                }
                if($scope.contact_person ==undefined){
                    Notify.alert("Enter the Vendor Contact Person", 'warning')
                    return;
                }
                if($scope.receivedDate ==undefined){
                    Notify.alert("Pick the Document Retrieved Date", 'warning')
                    return;
                }
                if($scope.mobile_no ==null){
                    Notify.alert("Enter the Valid Mobile No.", 'warning')
                    return;
                }
                var received_to = $('#employee :selected').text();
                var params={
                    retrievalrequest_gid:retrievalrequest_gid,
                    documentretrieved_mode:$scope.received_type,
                    documentretrieved_date:$scope.receivedDate,
                    documentreceivedto_gid: $scope.cboemployeegid.employee_gid,
                    documentreceivedto_name:received_to,
                    contactperson_name:$scope.contact_person,
                    mobile_no:$scope.mobile_no,
                    received_mode:$scope.retrieval_type
                };
               
                var url='api/IdasTrnRecordRetrieval/DocReceived';
                lockUI()
                SocketService.post(url,params).then(function (resp) {
                    unlockUI()
                    console.log(resp.data);
                    if (resp.data.status==true){
                        Notify.alert(resp.data.message, 'success')
                        
                    }
                    else{
                        Notify.alert(resp.data.message, 'warning')
                    }
                    localStorage.setItem('retrievalrequest_gid',retrievalrequest_gid);
                    $state.go('app.idasTrnRetrievalReqView');
                });

           
        }
       
        }

})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnRmResponse', idasTrnRmResponse);

    idasTrnRmResponse.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnRmResponse($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        $scope.title = 'idasTrnRmResponse';
        var sanctiondocument_gid;
        activate();

        function activate() {
            $scope.DivFile = false;
            sanctiondocument_gid = localStorage.getItem('sanctiondocument_gid');
            var url = 'api/IdasTrnSanctionDoc/ScanDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.scandocconversation = resp.data.MdlDocConversation;
             
            });

            var url = 'api/IdasTrnPhyDoc/PhyDocConversationExternal';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.phydocconversation = resp.data.MdlDocConversation;

                } else {


                }


            });


            $scope.typeofcopy = 'Scan Copy';
            var url = 'api/IdasTrnSanctionDoc/GetDocDetailsView';
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
             
                $scope.sanction_gid = resp.data.sanction_gid;
                $scope.document_gid = resp.data.document_gid;
                $scope.document_code = resp.data.document_code;
                $scope.document_name = resp.data.document_name;
                $scope.scandocument_date = resp.data.scandocument_date;
                $scope.phydocument_date = resp.data.phydocument_date;
                $scope.types_of_copy = resp.data.types_of_copy;
                $scope.phydocument_type = resp.data.phydocument_type;
                $scope.documentrecord_id = resp.data.documentrecord_id;
                $scope.scanfinal_remarks = resp.data.scanfinal_remarks;
                $scope.phyfinal_remarks = resp.data.phyfinal_remarks;
               
            });

         
        }
     
        $scope.PopupDownload = function (docconversation_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/mailconversation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.downloads = function (val1, val2) {

                    //var phyPath = val1;
                   
                    //var relPath = phyPath.split("EMS");
                    //var relpath1 = relPath[1].replace("\\", "/");
                    //var hosts = window.location.host;
                    //var prefix = location.protocol + "//";
                    //var str = prefix.concat(hosts, relpath1);
                    //var link = document.createElement("a");
                    //var name = val2.split(".")
                    //link.download = val2;
                    //var uri = str;
                    //link.href = uri;
                    //link.click();

                    DownloaddocumentService.Downloaddocument(val1, val2);
                }

                var url = "api/IdasTrnDocConversation/GetUploadDoc";
                var params = {
                    docconversation_gid: docconversation_gid
                };
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.viewDocumentList = resp.data.uploaddocument;

                });
            }
        }
        $scope.rmresponseback = function () {

            $state.go('app.idasTrnRmResponseDoc');
        }
        $scope.raiseResponse = function (id, count, textArea) {

           

            var params = {
                docconversation_gid: id,
                rm_response: textArea
            }

            var url = 'api/IdasTrnSanctionDoc/DocRmResponse';
            lockUI();
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Conversation Added Successfully..!!', 'success')
                    $scope.content = " ";
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred!')
                }
                activate();
            });
        }
        $scope.FileShow = function () {
            if ($scope.DivFile == true) {
                $scope.DivFile = false;
            }
            else {
                $scope.DivFile = true;
            }
        }
        $scope.uploadallocation = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_title', $scope.txtdocument_title);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/IdasTrnSanctionDoc/ConversationDocUpload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                $("#addupload").val('');
                $scope.txtdocument_title = '';
                if (resp.data.status == true) {
                    unlockUI();
                   
                    Notify.alert('Document Uploaded Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
        $scope.UploadDocCancel = function (conversationdocument_gid) {
            var params = {
                conversationdocument_gid: conversationdocument_gid
            }
            var url = 'api/IdasTrnSanctionDoc/deleteconversedoc';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert('Document deleted Successfully..!!', 'success')

                    var url = 'api/IdasTrnSanctionDoc/GetConverseDoc';

                    SocketService.get(url).then(function (resp) {

                        $scope.uploaddocument = resp.data.uploaddocument;

                    });
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred')

                }

            });
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnRmResponseSummary', idasTrnRmResponseSummary);

    idasTrnRmResponseSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnRmResponseSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasTrnRmResponseSummary';

        activate();

        function activate() {
            lockUI();
            var url = "api/IdasTrnSanctionDoc/RmSummary";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.sanctionlist = resp.data.MdlMakercheckerSummary;

            });
        }

        $scope.doc = function (sanction_gid) {

            localStorage.setItem('sanction_gid', sanction_gid);

            $state.go('app.idasTrnRmResponseDoc');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnSanctionDashboard', idasTrnSanctionDashboard);

    idasTrnSanctionDashboard.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route'];

    function idasTrnSanctionDashboard($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnSanctionDashboard';

        activate();

        function activate() {
            vm.calenderEdit = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openEdit = true;
            };
            vm.dateOptionsEdit = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };

            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open3 = true;
            };
            vm.calender4 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open4 = true;
            };
            vm.calender5 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open5 = true;
            };
            vm.calender6 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open6 = true;
            };

            vm.calender7 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open7 = true;
            };

            var url = 'api/loan/loan_list';
            SocketService.get(url).then(function (resp) {
                $scope.loan_list = resp.data.loanmasterdtls;
            });

            var url = 'api/newServiceTicket/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_list = resp.data.employee_list;
            });
 
            var params = {
                sanction_gid: localStorage.getItem('sanction_gid')
            };
            lockUI();
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp);
                $scope.txtsanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanction_date;
                $scope.txtSanctionAmountEdit = resp.data.sanction_amount;
                $scope.txtSanctionLimitEdit = resp.data.sanction_limit;
                $scope.entityedit = resp.data.entity;
                $scope.cboFacilityTypeEdit = resp.data.facility_type;

                $scope.customerNameEdit = resp.data.customername;
                $scope.CustomerurnEdit = resp.data.customer_urn;

                $scope.txtcollateralEdit = resp.data.collateral_security;
                $scope.zonalHeadNameEdit = resp.data.zonal_name;
                $scope.businessHeadNameEdit = resp.data.businesshead_name;
                $scope.clusterManagerEdit = resp.data.cluster_manager_name;
                $scope.creditManagerEdit = resp.data.creditmanager_name;
                $scope.relationshipmgmtEdit = resp.data.relationshipmgmt_name;
                $scope.txtapprovalauthority = resp.data.approval_authority;
                $scope.verticalCodeEdit = resp.data.vertical;
                $scope.txtstate = resp.data.state;
                $scope.loan_type = resp.data.loan_type;
                $scope.txtccapproval_date = resp.data.ccapproval_date;
                $scope.txtnatureofproposal = resp.data.nature_ofproposal;
                $scope.txtEditclassificationofMSME = resp.data.classification_MSME;
                $scope.txtEditValidity = resp.data.sanction_validity;
                $scope.txtEditExpiryDate = resp.data.sanctionexpiry_Date;

                $scope.txtEditReviewDate = resp.data.sanctionreview_Date;

                $scope.earliersancrefnoEdit = resp.data.earlier_sanctionrefno;
                $scope.txtEditconstitution = resp.data.constitution;
                $scope.pincode = resp.data.pincode;
                $scope.contact_number = resp.data.contact_number;
                $scope.email_id = resp.data.email_id;
                $scope.contact_person = resp.data.contact_person;
                $scope.txtrm_phoneno = resp.data.rm_phoneno;
                $scope.txtrm_emailid = resp.data.rm_emailid;
                $scope.cboEditauthorizedsignatory = resp.data.authorized_signatory;
                $scope.credit_manager = resp.data.credit_manager;
                $scope.txtEditexistingLimit = resp.data.existing_limit;
                $scope.txtEditAdditProposedLimit = resp.data.additional_proposedlimit;
                $scope.txtEditOverallLimit = resp.data.overall_limit;
                $scope.revisied_limit = resp.data.revisied_limit;
                $scope.txtEditpurpose = resp.data.purpose;
                $scope.txtEdittenureMonths = resp.data.tenure_months;
                $scope.txtEditRepaymentPrinicipal = resp.data.repayment_principal;
                $scope.txtEditRepInterest = resp.data.repayment_interest;
                $scope.txtEditPrimarySecurity = resp.data.primary_security;
                $scope.txtEditCollateralSecurity = resp.data.collateral_security;
                $scope.personal_guarantee = resp.data.personal_guarantee;
                $scope.txtEditSecurityBank = resp.data.securitycheque_bankname;
                $scope.txtEditSecurityAccount = resp.data.securitycheque_accountnumber;
                $scope.txtEditMargin = resp.data.margin;
                $scope.txtEditRateofInterest = resp.data.rateof_interest;
                $scope.txtEditPenalInterest = resp.data.penal_interest;
                $scope.txtEditProcessingFee = resp.data.processing_fee;
                $scope.txtEditBankCheque = resp.data.bankand_chequeno;
                $scope.txtEditChequeRealization = resp.data.chequerealizationDate;
                $scope.txtEditDocumentationCharge = resp.data.documentation_clientvisitcharge;
                $scope.txtEditGSTNumber = resp.data.GST_number;
                $scope.txtEditModeOperation = resp.data.modeof_operations;
                $scope.txtEditspecificcondition = resp.data.specific_condition;
                $scope.receiptdocsDateEdit = resp.data.dateof_receiptDocsVetting;
                $scope.txtEditNACHForm = resp.data.NACH_form;
                $scope.cboEditEscrowAccount = resp.data.escrow_account;
                $scope.txtEditVirtualAccountNo = resp.data.virtual_accountno;
                $scope.txtEditBuyersName = resp.data.nameofthe_buyers;
                $scope.txtEditStatusBAL = resp.data.status_ofBAL;
                $scope.txtEditROCApplicable = resp.data.roc_applicable;
                $scope.txtEditROCStatus = resp.data.roc_status;
                $scope.txtEditcersai = resp.data.cersai_status;
                $scope.txtEditNesl = resp.data.nesl_status;
                $scope.txtEditPreDisburse = resp.data.predisbursement_deferal;
                $scope.dateofdeviation = resp.data.deviation_Date;
                $scope.txtEditPreDisburseStatus = resp.data.statuspre_disbursementdeferal;
                $scope.txtEditPostDisb = resp.data.postdisbursement_covanent;
                $scope.txtEditPostDisbStatus = resp.data.statuspost_disbursementcovanent;
                $scope.dateofReleaseOrder = resp.data.releaseorder_Date;
                $scope.txtroissuing_totalamount = resp.data.roissuing_totalamount;
                $scope.txtcasesvetted_bycad = resp.data.casesvetted_bycad;
                $scope.txtEditoriginaldocs_receivedHO = resp.data.originaldocs_receivedHO;
                $scope.txtscanneduploaded_Drive = resp.data.scanneduploaded_Drive;
                $scope.txtmonitoring_visit = resp.data.monitoring_visit;
                $scope.txtbank_statement = resp.data.bank_statement;
                $scope.txtaudited_financials = resp.data.audited_financials;
                $scope.txtstock_statement = resp.data.stock_statement;
                $scope.txtpurchase_statement = resp.data.purchase_statement;
                $scope.txtsales_statement = resp.data.sales_statement;
                $scope.txtdebtors_statement = resp.data.debtors_statement;
                $scope.txtprovisionalfinancial_gst = resp.data.provisionalfinancial_gst;
                $scope.txtroc_30daysfromSLonetime = resp.data.roc_30daysfromSLonetime;
                $scope.txtnoliability_certificate = resp.data.noliability_certificate;
                $scope.txtbuyerconfirmation_letter = resp.data.buyerconfirmation_letter;
                $scope.txtcopyof_warehousereceipt = resp.data.copyof_warehousereceipt;
                $scope.txtinsurance_30daysfromSLonetime = resp.data.insurance_30daysfromSLonetime;
                $scope.txtloandisbursement_dtlfarmermember = resp.data.loandisbursement_dtlfarmermember;
                $scope.txtothers = resp.data.others;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                unlockUI();
            });


        }

        $scope.sanctiondetails1Update = function () {
            lockUI();
            var params = {
                approval_authority: $scope.txtapprovalauthority,
                CCapproval_date: $scope.txtccapproval_date,
                earlier_sanctionrefno: $scope.earliersancrefnoEdit,
                nature_ofproposal: $scope.txtnatureofproposal,
                classification_MSME: $scope.txtEditclassificationofMSME,
                sanction_validity: $scope.txtEditValidity,
                sanction_expirydate: $scope.txtEditExpiryDate,
                sanction_reviewdate: $scope.txtEditReviewDate,
                constitution: $scope.txtEditconstitution,
                authorized_signatory: $scope.cboEditauthorizedsignatory,
                existing_limit: $scope.txtEditexistingLimit,
                additional_proposedlimit: $scope.txtEditAdditProposedLimit,
                overall_limit: $scope.txtEditOverallLimit,
                purpose: $scope.txtEditpurpose,
                tenure_months: $scope.txtEdittenureMonths,
                repayment_principal: $scope.txtEditRepaymentPrinicipal,
                repayment_interest: $scope.txtEditRepInterest,
                primary_security: $scope.txtEditPrimarySecurity,
                collateral_security: $scope.txtEditCollateralSecurity,
                customer2sanction_gid: localStorage.getItem('sanction_gid')
            }

            var url = "api/IdasMstSanction/PostSanctionDetails1"
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        $scope.sanctiondetails2Update = function () {
            lockUI();
            var params = {
                securitycheque_bankname: $scope.txtEditSecurityBank,
                securitycheque_accountnumber: $scope.txtEditSecurityAccount,
                margin: $scope.txtEditMargin,
                rateof_interest: $scope.txtEditRateofInterest,
                penal_interest: $scope.txtEditPenalInterest,
                processing_fee: $scope.txtEditProcessingFee,
                bankand_chequeno: $scope.txtEditBankCheque,
                cheque_realizationdate: $scope.txtEditChequeRealization,
                documentation_clientvisitcharge: $scope.txtEditDocumentationCharge,
                GST_number: $scope.txtEditGSTNumber,
                modeof_operations: $scope.txtEditModeOperation,
                specific_condition: $scope.txtEditspecificcondition,
                dateof_receiptDocsVetting: $scope.receiptdocsDateEdit,
                NACH_form: $scope.txtEditNACHForm,
                escrow_account: $scope.cboEditEscrowAccount,
                virtual_accountno: $scope.txtEditVirtualAccountNo,
                nameofthe_buyers: $scope.txtEditBuyersName,
                status_ofBAL: $scope.txtEditStatusBAL,
                roc_applicable: $scope.txtEditROCApplicable,
                roc_status: $scope.txtEditROCStatus,
                cersai_status: $scope.txtEditcersai,
                nesl_status: $scope.txtEditNesl,
                customer2sanction_gid: localStorage.getItem('sanction_gid')
            }

            var url = "api/IdasMstSanction/PostSanctionDetails2"
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }

        $scope.sanctiondetails3Update = function () {
            lockUI();
            var params = {
                predisbursement_deferal: $scope.txtEditPreDisburse,
                dateof_deviation: $scope.dateofdeviation,
                statuspre_disbursementdeferal: $scope.txtEditPreDisburseStatus,
                postdisbursement_covanent: $scope.txtEditPostDisb,
                statuspost_disbursementcovanent: $scope.txtEditPostDisbStatus,
                dateof_releaseorder: $scope.dateofReleaseOrder,
                roissuing_totalamount: $scope.txtroissuing_totalamount,
                casesvetted_bycad: $scope.txtcasesvetted_bycad,
                originaldocs_receivedHO: $scope.txtEditoriginaldocs_receivedHO,
                scanneduploaded_Drive: $scope.txtscanneduploaded_Drive,
                monitoring_visit: $scope.txtmonitoring_visit,
                bank_statement: $scope.txtbank_statement,
                audited_financials: $scope.txtaudited_financials,
                stock_statement: $scope.txtstock_statement,
                purchase_statement: $scope.txtpurchase_statement,
                sales_statement: $scope.txtsales_statement,
                debtors_statement: $scope.txtdebtors_statement,
                provisionalfinancial_gst: $scope.txtprovisionalfinancial_gst,
                roc_30daysfromSLonetime: $scope.txtroc_30daysfromSLonetime,
                noliability_certificate: $scope.txtnoliability_certificate,
                buyerconfirmation_letter: $scope.txtbuyerconfirmation_letter,
                copyof_warehousereceipt: $scope.txtcopyof_warehousereceipt,
                insurance_30daysfromSLonetime: $scope.txtinsurance_30daysfromSLonetime,
                loandisbursement_dtlfarmermember: $scope.txtloandisbursement_dtlfarmermember,
                others: $scope.txtothers,
                customer2sanction_gid: localStorage.getItem('sanction_gid')
            }

            var url = "api/IdasMstSanction/PostSanctionDetails3"
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI();
                }
            });
        }


        $scope.sanctionback = function () {
            $state.go('app.idasTrnSanctionMIS');
        }

 
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnSanctionDoc', idasTrnSanctionDoc);

    idasTrnSanctionDoc.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams'];

    function idasTrnSanctionDoc($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {
        $scope.title = 'idasTrnSanctionDoc';
        var sanction_gid = $location.search().sanction_gid;
        $scope.documentation_list = [];
        activate();

        function activate() {
          
            var url = 'api/IdasTrnSanctionDoc/SanctionDtlsView';
            var params = {
                sanction_gid: sanction_gid
            };
           
            SocketService.getparams(url, params).then(function (resp) {
               
                $scope.sanctionrefno = resp.data.sanctionrefno;
                $scope.SanctionDate = resp.data.SanctionDate;
                $scope.SanctionAmount= resp.data.SanctionAmount;
                $scope.FacilityType = resp.data.FacilityType;
               
                $scope.customerName = resp.data.customerName;
                $scope.Customerurn = resp.data.Customerurn;
                $scope.collateral_security = resp.data.collateral_security;
                $scope.zonalHeadName = resp.data.zonalHeadName;
                $scope.businessHeadName = resp.data.businessHeadName;
                $scope.clusterManager = resp.data.clusterManager;
                $scope.creditManager = resp.data.creditManager;
                $scope.relationshipmgmt = resp.data.relationshipmgmt;
                $scope.customercode = resp.data.customercode;
                $scope.verticalCode = resp.data.verticalCode;
                $scope.contactperson = resp.data.contactperson;
                $scope.mobileno = resp.data.mobileno;
                $scope.addressline1 = resp.data.addressline1;
                $scope.addressline2 = resp.data.addressline2;
                $scope.customer_gid = resp.data.customer_gid;
               });
            var url = "api/IdasMstDocList/GetDocumentList";
            var params = {
                sanction_gid: sanction_gid
            };
            SocketService.getparams(url,params).then(function (resp) {

                $scope.documentlist_gid = resp.data.IDASDocument;
            });

            var url = "api/IdasTrnSanctionDoc/GetTaggedDocList";
            var params = {
                sanction_gid:sanction_gid
            };
            SocketService.getparams(url,params).then(function (resp) {
                $scope.taggeddoc_list = resp.data.MdlTaggedDocument;
              
            });
        }

        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        $scope.addDoc=function()
        {
            var doc_gid;
            var doclistGId = [];
            angular.forEach($scope.documentlist_gid, function (val) {

                if (val.checked == true) {
                    var doclist_gid = val.documentlist_gid;
                    doc_gid = val.documentlist_gid;
                    doclistGId.push(doclist_gid);
                }
               
 });

            var params = {
                documentlist_gid: doclistGId,
                sanction_gid: sanction_gid,
               customer_gid: $scope.customer_gid
            }

            if (doc_gid != undefined) {
                var url = 'api/IdasTrnSanctionDoc/SanctionDocCreate';
                lockUI();
                SocketService.post(url, params).then(function (resp) {

                    if (resp.data.status == true) {
                        unlockUI();
                        activate();
                        Notify.alert('Document Tagged Successfully!', 'success');
                      
                    }
                    else {
                        unlockUI();
                        Notify.alert('Oops something went wrong!')
                    }

                });
            }
            else {
                Notify.alert('Select Atleast One Document!')
            }
        }
        $scope.untag= function (sanctiondocument_gid)
        {
            var url = "api/IdasTrnSanctionDoc/SanctionDocDelete";
            var params = {
                sanctiondocument_gid: sanctiondocument_gid
            };
            SocketService.getparams(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    unlockUI();
                    activate();
                    Notify.alert('Document Un-Tagged Successfully!', 'success');

                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, 'warning');
                }

            });
        }
       

        $scope.gotoback=function()
        {
            $state.go('app.idasTrnSanctionMgmt');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnSanctionDocSummary', idasTrnSanctionDocSummary);

    idasTrnSanctionDocSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasTrnSanctionDocSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        $scope.title = 'idasTrnSanctionDocSummary';

        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            lockUI();
            var url = "api/IdasTrnSanctionDoc/SanctionSummary";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    $scope.sanctionlist = resp.data.MdlSanctionDocSummary;
                    $scope.total = $scope.sanctionlist.length;
                }
                else {
                    console.log(resp.data.message);
                }


            });
        }
      
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if($scope.pagecount==null){
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#DCDCDC';  
            }
            else{
             var el = document.getElementById('loadmore');
             el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            if(pagecount==undefined){
                Notify.alert("Enter the Total Summary Count","warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };

        $scope.DocSanction = function (sanction_gid) {

            $location.url('app/idasTrnSanctionDoc?sanction_gid=' + sanction_gid);

            //localStorage.setItem('sanction_gid', sanction_gid);

            //$state.go('app.idasTrnSanctionDoc');
        }
        $scope.generate = function (sanction_gid) {

            $location.url('app/idasTrnPreFilGeneration?sanction_gid=' + sanction_gid + '&lspage=sanctiondocprefil');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasTrnSanctionMIS', idasTrnSanctionMIS);

    idasTrnSanctionMIS.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function idasTrnSanctionMIS($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'idasTrnSanctionMIS';

        activate();

        function activate() {
            lockUI();
            $scope.totalDisplayed = 100;
            var url = "api/IdasSanctionMIS/GetSanctionMISSummary";
            SocketService.get(url).then(function (resp) {
                $scope.sanctionlist = resp.data.sanctionMISdtl;
                if ($scope.sanctionlist == null) {
                    $scope.total = 0;
                    $scope.totalDisplayed = 0;
                }
                else {
                    $scope.total = $scope.sanctionlist.length;
                    if ($scope.sanctionlist.length < 100) {
                        $scope.totalDisplayed = $scope.sanctionlist.length;
                    }
                }
                unlockUI();
            });
        }

        document.getElementById('pagecount').onkeyup = function () {

            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };

        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();
            var Number = parseInt(pagecount);
            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.export = function () {

            lockUI();
            var url = 'api/IdasSanctionMIS/GetSanctionMISExport';

            SocketService.get(url).then(function (resp) {

                if (resp.data.status == true) {
                    unlockUI();
                    DownloaddocumentService.Downloaddocument(resp.data.excel_cloudpath, resp.data.excel_name);
                    //DownloaddocumentService.Downloaddocument(val1, val2);
                    var phyPath = resp.data.excel_path;
                    var relPath = phyPath.split("EMS");
                    var relpath1 = relPath[1].replace("\\", "/");
                    var hosts = window.location.host;
                    var prefix = location.protocol + "//";
                    var str = prefix.concat(hosts, relpath1);
                    var link = document.createElement("a");
                    var name = resp.data.excel_name.split('.');
                    link.download = name[0];
                    var uri = str;
                    link.href = uri;
                    link.click();

                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }

            });
        }


        $scope.importExcel = function () {
            var modalInstance = $modal.open({
                templateUrl: '/excelImport.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                    $("#excelImport").val('');
                };


                $scope.upload = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                    if (IsValidExtension == false) {
                        Notify.alert("File format is not supported..!", {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        return false;
                    }
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('document_name', $scope.documentname);
                    frm.append('uploadtype', $scope.cboexcel_type);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;

                }

                $scope.uploadexcelclick = function () {
                    lockUI();
                    var url = "api/IdasMstSanction/postexcelupload";
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                        $("#excelImport").val('');

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        unlockUI();
                    });
                }

            }
        }

        $scope.sanctionMIS360 = function (sanction_gid) {
            $location.url('app/idasSanctionMIS360?sanction_gid=' + sanction_gid);
        }

        $scope.EditSanction = function (sanction_gid) {
           
            localStorage.setItem('sanction_gid', sanction_gid);
            $state.go('app.idasTrnSanctionDashboard');
           
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('idasMstsecurityEdit', idasMstsecurityEdit);

    idasMstsecurityEdit.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function idasMstsecurityEdit($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        var vm = this;
        vm.title = 'idasMstsecurityAdd';
        var sanction_gid;
        activate();

        function activate() {
            $scope.collateral_gid = localStorage.getItem('collateral_gid');

            
            vm.calenderEdit = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.openEdit = true;
            };
            vm.dateOptionsEdit = {
                formatYear: 'yy',
                startingDay: 1
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var url = 'api/security/getSecuritytype';
            SocketService.get(url).then(function (resp) {
                $scope.security_data = resp.data.securitytype_list;
                console.log(resp.data.securitytype_list);
            });
            var params = {
                collateral_gid:$scope.collateral_gid
            }
            var url = 'api/IdasTrnLsaManagement/GetColletarl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.security_type = resp.data.security_type;
                $scope.cbosecurity_type = resp.data.securitytype_gid;
                $scope.txtsecurity_description = resp.data.security_description;
                $scope.cboaccount_status = resp.data.account_status;
                $scope.collateralref_no = resp.data.collateralref_no;
                $scope.security_code = resp.data.security_code;
                $scope.collateral_gid = resp.data.collateral_gid;
                $scope.txtborrowercheque_no = resp.data.borrowercheque_no;
                $scope.txtborroweraccount_no = resp.data.borroweraccount_no;
                $scope.txtborrowertbank_name = resp.data.borrowertbank_name;
                $scope.txtborrowerdeviation = resp.data.borrowerdeviation;
                $scope.txtborrowerother_remarks = resp.data.borrowerother_remarks;
                $scope.txtguarantor_cheque = resp.data.guarantor_cheque;
                $scope.txtguarantor_acno = resp.data.guarantor_acno;
                $scope.txtguarantor_bankname = resp.data.guarantor_bankname;
                $scope.txtguarantor_deviation = resp.data.guarantor_deviation;
                $scope.txtpersonalguarantor_name = resp.data.personalguarantor_name;
                $scope.txtguarantor_panno = resp.data.guarantor_panno;
                $scope.txtcorporate_guarantee = resp.data.corporate_guarantee;
                $scope.txtpersonal_guarantee = resp.data.personal_guarantee;
                $scope.txtfd_bank_name = resp.data.fd_bank_name;
                $scope.txtfd_no = resp.data.fd_no;
                $scope.txtfd_expiry_date = new Date(resp.data.fdexpiry_date);
                $scope.txtauto_renewal = resp.data.auto_renewal;
                $scope.txtbankguarantee_bankname = resp.data.bankguarantee_bankname;
                $scope.txtbankguarantee_expirydate = new Date(resp.data.bankguarantee_expiry_date); 
                $scope.txtinsurancecompany_name = resp.data.insurancecompany_name;
                $scope.txtpolicy_no = resp.data.policy_no;
                $scope.txtpolicy_expiry_date = new Date(resp.data.policyexpiry_date);
                console.log(resp.data.securitytype_gid);
                console.log(resp.data.security_type);
            if (resp.data.security_type == 'UDC From Borrower') {
                $scope.borrower = false;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           else if (resp.data.security_type == 'UDC From Guarantor') {
                $scope.guarantor = false;
                $scope.borrower = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           else if (resp.data.security_type == 'Personal Guarantee') {
                $scope.personal_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.corporate_guarantee = true;
            }
           else if (resp.data.security_type == 'Corporate Guarantee') {
                $scope.corporate_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
            }
           else if (resp.data.security_type == 'Bank Guarantee') {
                $scope.bank_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
           else if (resp.data.security_type == 'Fixed Deposits') {
                $scope.fixed_deposits = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else if (resp.data.security_type == 'Assignment of Insurance Policy') {
                $scope.insurance = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else {
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            });
        }

        $scope.securityback = function () {
            $state.go('app.lsaManagementadd');
        }

        $scope.show_additional = function () {
            var str = $('#security_type :selected').text();

            if (str.match(/UDC From Borrower/g) == 'UDC From Borrower') {
                $scope.borrower = false;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else if (str.match(/UDC From Guarantor/g) == 'UDC From Guarantor') {
                $scope.guarantor = false;
                $scope.borrower = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else if (str.match(/Personal Guarantee/g) == 'Personal Guarantee') {
                $scope.personal_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.corporate_guarantee = true;
            }
            else if (str.match(/Corporate Guarantee/g) == 'Corporate Guarantee') {
                $scope.corporate_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
            }
            else if (str.match(/Bank Guarantee/g) == 'Bank Guarantee') {
                $scope.bank_guarantee = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else if (str.match(/Fixed Deposits/g) == 'Fixed Deposits') {
                $scope.fixed_deposits = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else if (str.match(/Assignment of Insurance Policy/g) == 'Assignment of Insurance Policy') {
                $scope.insurance = false;
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
            else {
                $scope.borrower = true;
                $scope.guarantor = true;
                $scope.insurance = true;
                $scope.bank_guarantee = true;
                $scope.fixed_deposits = true;
                $scope.personal_guarantee = true;
                $scope.corporate_guarantee = true;
            }
        }
        $scope.security_submit = function (lsacreate_gid) {
            var security_type = $('#security_type :selected').text();
           
            if (security_type.match(/Fixed Deposits/g) == 'Fixed Deposits') {
                //Fixed Deposits
               var fd_expiry_date = $scope.txtfd_expiry_date;

            }
            else {
                 var fd_expiry_date = null;
            }
            if (security_type.match(/Bank Guarantee/g) == 'Bank Guarantee') {
                ////Bank Guarantee
                var bankguarantee_expirydate= $scope.txtbankguarantee_expirydate;
            }
            else
            {
                var bankguarantee_expirydate = null;
            }
            if (security_type.match(/Assignment of Insurance Policy/g) == 'Assignment of Insurance Policy') {

                ////Insurance Policy
                var policy_expiry_date = $scope.txtpolicy_expiry_date;
            }
            else {
                var policy_expiry_date = null;
            }
           
            var params = {
                security_type: security_type,
                securitytype_gid: $scope.cbosecurity_type,
                account_status: $scope.cboaccount_status,
                borrowercheque_no: $scope.txtborrowercheque_no,
                borrowertbank_name: $scope.txtborrowertbank_name,
                borroweraccount_no: $scope.txtborroweraccount_no,
                borrowerdeviation: $scope.txtborrowerdeviation,
                borrowerother_remarks: $scope.txtborrowerother_remarks,
                guarantor_cheque: $scope.txtguarantor_cheque,
                guarantor_bankname: $scope.txtguarantor_bankname,
                guarantor_acno: $scope.txtguarantor_acno,
                guarantor_deviation: $scope.txtguarantor_deviation,
                personalguarantor_name: $scope.txtpersonalguarantor_name,
                guarantor_panno: $scope.txtguarantor_panno,
                corporate_guarantee: $scope.txtcorporate_guarantee,
                personal_guarantee: $scope.txtpersonal_guarantee,
                fd_bank_name: $scope.txtfd_bank_name,
                fd_no: $scope.txtguarantor_bankname,
                fd_expiry_date: fd_expiry_date,
                auto_renewal: $scope.txtguarantor_deviation,
                bankguarantee_bankname: $scope.txtbankguarantee_bankname,
                bankguarantee_expirydate: bankguarantee_expirydate,
                insurancecompany_name: $scope.txtinsurancecompany_name,
                policy_no: $scope.txtpolicy_no,
                policy_expiry_date: policy_expiry_date,
                security_description: $scope.txtsecurity_description,
                collateral_gid:$scope.collateral_gid
           
            }
            console.log(params);
            var url = 'api/IdasTrnLsaManagement/updatesecurityinfo';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $state.go('app.lsaManagementadd');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lsaManagementController', lsaManagementController);

    lsaManagementController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function lsaManagementController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, DownloaddocumentService) {
        $scope.title = 'lsaManagementController';

        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            lockUI();
            var url = "api/IdasTrnLsaManagement/lsadetails";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.list = resp.data.lsa_list;
                $scope.total = $scope.list.length;
            });
          
        }
        document.getElementById('pagecount').onkeyup = function () {
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);
            $scope.totalDisplayed += Number;
            unlockUI();
        };

        $scope.clickadd = function (lsacreate_gid)
        {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);
            $scope.lsastatus = localStorage.setItem('lsacreate_gid', lsacreate_gid);
            $state.go('app.lsaManagementadd');
        }
        $scope.lsaadd = function (lsacreate_gid) {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);
           
            $location.url('app/lsaManagementadd?lstab=approved');
        }
        $scope.createlsa=function()
        {
            $state.go('app.createLSA');
        }
        $scope.clickView = function (lsacreate_gid) {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);          
            $state.go('app.viewLSA');
        }
        $scope.LSApdf = function (lsacreate_gid) {
            var params = {
                lsacreate_gid: lsacreate_gid
            };
            var url = 'api/IdasTrnLsaManagement/GetLSApdf';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {   
                unlockUI();
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.file_path, "LSA Report.pdf");
                    Notify.alert('LSA Report Downloaded Successfully', 'success');
                }
                else {
                   
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }           
                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "LSA Report";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('LSA Report Downloaded Successfully', 'success')
                unlockUI();
            //     var phyPath = resp.data;
            //     var filename1 = resp.data;
            //     var phyPath = phyPath.replace("\\", "/");
            //     var phyPath = phyPath.replace("//", "/");
            //     var relPath = phyPath.split("EMS/");
            //     var relpath1 = relPath[1].replace("\\", "/");
            //     var url1 = filename1;
            //     var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
            //    var url = 'api/azurestorage/FileUploadDocument';
            //     var params = {
            //         file_path : relpath1
            //     }
            //     SocketService.post(url,params).then(function (resp) {
            //     if (resp.data.status == true) {
            //         DownloaddocumentService.Downloaddocument(relpath1, "LSA Report.pdf");
            //         Notify.alert('LSA Report Downloaded Successfully', 'success');
            //     }
            //     else {
            //         unlockUI();
            //         Notify.alert('Error Occurred While Export PDF !', 'warning');
            //     }
            //     });
            });
        }
      
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lsaManagementaddController', lsaManagementaddController);

    lsaManagementaddController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams', '$parse', 'DownloaddocumentService','cmnfunctionService'];

    function lsaManagementaddController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams, $parse, DownloaddocumentService,cmnfunctionService) {

        var vm = this;
        vm.title = 'lsaManagementaddController';

        activate();

        function activate() {

            $scope.lsacreate_gid = localStorage.getItem('lsacreate_gid');
         
            $scope.stepone = false;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;

            $scope.tobe_recovered = false;
            $scope.already_recovered = false;
            $scope.yes = false;
            $scope.no = false;
            $scope.customer_pnl = true;
            $scope.sanction_pnl = true;
            $scope.signmatching = false;
            $scope.nach_no = false;
            $scope.signmatch_kycprovide = false;
            $scope.escrow_no = false;
            $scope.stamp = false;
            $scope.roc_no = false;
            $scope.cersai_no=false;
            $scope.panel1 = false;
            $scope.panel2 = false;
            $scope.panel3 = false;
            $scope.hidephotodiv = true;
            $scope.showphotodiv = false;
            // Calender Popup... //

            vm.calender1 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open1 = true;
            };
            // Calender Popup... //

            vm.calender2 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open2 = true;
            };
            // Calender Popup... //

            vm.calender3 = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.open3 = true;
            };

            var date = new Date(),
           mnth = ("0" + (date.getMonth() + 1)).slice(-2),
           day = ("0" + date.getDate()).slice(-2);
            $scope.txtdate = [day, mnth, date.getFullYear()].join("-");
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1

            };
           
            var params = {
                lsacreate_gid: $scope.lsacreate_gid,

            };
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
                $scope.approval_status = resp.data.approval_status;
               
            });
          
            var url = 'api/employee/employee';
            SocketService.get(url).then(function (resp) {
                $scope.employee_dropdown = resp.data.employee_list;            
            });
            var url = 'api/IdasTrnLsaManagement/tempdelete';
            SocketService.get(url).then(function (resp) {
               
            });
            var url = 'api/IdasTrnLsaManagement/GetPenalInterest';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.penalinterest_list = resp.data.loanfacilitytype_list;
                console.log(resp.data.loanfacilitytype_list)
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';
         
            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
                $scope.total_document_limit = resp.data.total_document_limit;
                $scope.totol_limit_released = resp.data.totol_limit_released;
                $scope.final_flag = resp.data.final_flag;
               
            });
            var url = 'api/IdasTrnLsaManagement/bankinfodtl';
          
            SocketService.getparams(url, params).then(function (resp) {
                $scope.bankinfo_list = resp.data.bankinfo_list;

            });
           
            var url = 'api/IdasTrnLsaManagement/loanfacility';
            SocketService.get(url).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
            var url = 'api/IdasTrnLsaManagement/Getprocessingfeeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.recovered_type = resp.data.recovered_type;
                $scope.recovered_amount = resp.data.recovered_amount;
                $scope.chequeno_details = resp.data.chequeno_details;
                $scope.chequedate_details = resp.data.chequedate_details;
                $scope.processingfeebank_name = resp.data.processingfeebank_name;
                $scope.processingfeaccount_name = resp.data.processingfeaccount_name;
                $scope.recover_remarks = resp.data.recover_remarks;
                $scope.to_be_recoveredamount = resp.data.to_be_recoveredamount;
              
            });

            var url = 'api/IdasTrnLsaManagement/Getdocumentchargeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.doc_recovered_amount = resp.data.doc_recovered_amount;
                $scope.doc_chequeno_details = resp.data.doc_chequeno_details;
                $scope.doc_chequedate_details = resp.data.doc_chequedate_details;
                $scope.doc_feebank_name = resp.data.doc_feebank_name;
                $scope.doc_feaccount_name = resp.data.doc_feaccount_name;
                $scope.document_name = resp.data.document_name;
                $scope.document_path = resp.data.document_path;
                $scope.document_charge = new Intl.NumberFormat('en-IN').format(Number(resp.data.document_charge)) + ".00";
                $scope.document_charge_gst=resp.data.document_charge_gst+"%";
                if (resp.data.document_name == null) {
                    $scope.document = false;
                }
                else
                {
                    $scope.document = true;
                }
                $scope.lbldocumentcharge_applicable = resp.data.documentcharge_applicable;
                $scope.lbldocumentcharge_remarks = resp.data.documentcharge_remarks;
            });
            var url = 'api/IdasTrnLsaManagement/Getmakerinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.maker_signature = resp.data.maker_signature;
                console.log(resp.data.maker_signature);
                $scope.terms_conditions = resp.data.terms_conditions;
                $scope.deferral_captured = resp.data.deferral_captured;
                $scope.head = resp.data.head;
              
            });
            var url = 'api/IdasTrnLsaManagement/Getcompliancecheckinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.nach_mandate = resp.data.nach_mandate;
                $scope.sign_match = resp.data.sign_match;
                $scope.sign_match_kyc = resp.data.sign_match_kyc;
                $scope.escrow_opened = resp.data.escrow_opened;
                $scope.appropriate_stamp = resp.data.nach_mandate;
                $scope.roc_filling = resp.data.roc_filling;
                $scope.nach_mandate_remarks = resp.data.nach_mandate_remarks;
                $scope.sign_match_remarks = resp.data.sign_match_remarks;
                $scope.sign_match_kyc_remarks = resp.data.sign_match_kyc_remarks;
                $scope.escrow_opened_remarks = resp.data.escrow_opened_remarks;
                $scope.appropriate_stamp_remarks = resp.data.appropriate_stamp_remarks;
                $scope.roc_filling_remarks = resp.data.roc_filling_remarks;
                $scope.cersai = resp.data.cersai;
                $scope.cersai_remarks = resp.data.cersai_remarks;

            });
            var url = 'api/IdasTrnLsaManagement/Getdocument';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;


            });
            var url = 'api/IdasTrnLsaManagement/Getsanction2Colletarl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer2security_list = resp.data.customersecurity_list;
               
            });
        }
      
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.addlimitinfo = function (lsacreate_gid)
        {
            $state.go('app.idasTrnaddLimitinfo');
        }
        $scope.recoveredstatus=function()
        {
            $scope.tobe_recovered = false;
            $scope.already_recovered = true;
                
        }
        $scope.recoveredstatus1 = function () {
            $scope.tobe_recovered = true;
            $scope.already_recovered = false;

        }
        $scope.lsaback = function () {
            $state.go('app.lsaManagement');
        }
      
   
        $scope.addbankinfo = function (lsacreate_gid) {
            var lsacreate_gid = lsacreate_gid;
           
        
            var modalInstance = $modal.open({
                templateUrl: '/customerbankinformation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.bankdetails = function () {
                   
                    var params = {
                       
                        bank_name: $scope.txtbank_name,
                        account_no: $scope.txtaccount_no,
                        ifsc_code: $scope.txtifsc_code,
                        lsacreate_gid: lsacreate_gid,
                    };
                    var url = 'api/IdasTrnLsaManagement/postbankinfo';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        banklist();
                    });
             
                }
            }
        }
        
        $scope.editbankinfo = function (lsacustomer2bankinfo) {
       
            var lsacustomer2bankinfo = lsacustomer2bankinfo;


            var modalInstance = $modal.open({
                templateUrl: '/customerbankinformation_edit.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params = {
                    lsacustomer2bankinfo: lsacustomer2bankinfo
                }
             
                var url = 'api/IdasTrnLsaManagement/GetBankinfo';
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.txtbank_nameedit = resp.data.bank_name;
                    $scope.txtaccount_noedit = resp.data.account_no;
                    $scope.txtifsc_codeedit = resp.data.ifsc_code;
                    $scope.lsacustomer2bankinfo = resp.data.lsacustomer2bankinfo;
                });
                $scope.bankdetails_edit = function () {

                    var params = {

                        bank_name: $scope.txtbank_nameedit,
                        account_no: $scope.txtaccount_noedit,
                        ifsc_code: $scope.txtifsc_codeedit,
                        lsacustomer2bankinfo:lsacustomer2bankinfo,
                    };
                    var url = 'api/IdasTrnLsaManagement/updatebankinfo';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        banklist();
                    });

                }
            }
        }
        function banklist() {
            var params =
                {
                    lsacreate_gid: $scope.lsacreate_gid,
                }
           
            var url = 'api/IdasTrnLsaManagement/bankinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.bankinfo_list = resp.data.bankinfo_list;

            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
              
                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.nachform_no = function () {
        
            $scope.nach_no = true;
           
        }
        $scope.signmatch_no = function () {
           
            $scope.signmatching = true;
          
        }
        $scope.signmatch_kyc_no = function () {

            $scope.signmatch_kycprovide = true;

        }
        $scope.escrowac_no = function () {

            $scope.escrow_no = true;

        }
        $scope.stamping_no = function () {

            $scope.stamp_no = true;

        }
        $scope.roc_filling_no = function () {

            $scope.roc_no = true;

        }
        $scope.nachform_yes = function () {

            $scope.nach_no = false;

        }
        $scope.signmatch_yes = function () {

            $scope.signmatching = false;

        }
        $scope.signmatch_kyc_yes = function () {

            $scope.signmatch_kycprovide = false;

        }
        $scope.escrowac_yes = function () {

            $scope.escrow_no = false;

        }
        $scope.stamping_yes = function () {

            $scope.stamp_no = false;

        }
        $scope.roc_filling_yes = function () {

            $scope.roc_no = false;

        }
        $scope.rdbcersai_no = function () {

            $scope.cersai_no = true;

        }
        $scope.rdbcersai_yes = function () {

            $scope.cersai_no = false;

        }
        $scope.clickstep1 = function () {
            $scope.stepone = false;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep2 = function () {
            $scope.stepone = true;
            $scope.steptwo = false;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep3 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = false;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep4 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = false;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep5 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = false;
            $scope.stepsix = true;
        }
        $scope.clickstep6 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = false;
        }

        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');

            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtexistinglimit = "";

            }
            else {

                $scope.txtexistinglimit = amount;
            }

        }
        $scope.amountschange1 = function () {
            var input = document.getElementById('txtInput1').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');

            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdocument_limit = "";

            }
            else {
                $scope.txtdocument_limit = amount;
            }

        }
        $scope.amountschange2 = function () {
            var input = document.getElementById('txtInput2').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');

            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtlimit_released = "";

            }
            else {
                $scope.txtlimit_released = amount;

            }
         
        }
        $scope.amountschange3 = function () {
            var input = document.getElementById('txtInput3').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsrecoveredamount_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtrecovered_amount = "";

            }
            else {
                document.getElementById('recoveredamount_words').innerHTML = lsrecoveredamount_words;
                $scope.txtrecovered_amount = amount;

            }

        }
        $scope.amountschange4 = function () {
            var input = document.getElementById('txtInput4').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsdocumentchargerecoverd_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdoc_recovered_amount = "";

            }
            else {
                document.getElementById('documentchargerecoverd_words').innerHTML = lsdocumentchargerecoverd_words;
                $scope.txtdoc_recovered_amount = amount;

            }

        }
        $scope.amountschange5 = function () {
            var input = document.getElementById('txtInput5').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lstoberecoveredamount_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtto_be_recoveredamount = "";

            }
            else {
                document.getElementById('toberecoveredamount_words').innerHTML = lstoberecoveredamount_words;
                $scope.txtto_be_recoveredamount = amount;
            }
        }
        $scope.amountschange04 = function () {
            var input = document.getElementById('txtInput04').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-US');
            var lsdocumentcharge_words = inWords(str);
            var amount = new Intl.NumberFormat('en-IN').format(Number(str));
            if (amount == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdocument_charges = "";

            }
            else {
                document.getElementById('documentcharge_words').innerHTML = lsdocumentcharge_words;
                $scope.txtdocument_charges = amount;
                if ($scope.txtgst != null) {
                    var amount1 = (($scope.txtdocument_charges.replace(/[\s,]+/g, '').trim()) * ($scope.txtgst) / 100);
                    var doc = ($scope.txtdocument_charges.replace(/[\s,]+/g, '').trim());
                    var output1 = (parseInt(amount1) + parseInt(doc));

                    $scope.txtdoc_recovered_amount = new Intl.NumberFormat('en-IN').format(Number(output1));
                }
            }
        }
        $scope.amountschange10 = function () {
            var amount=(($scope.txtdocument_charges.replace(/[\s,]+/g, '').trim()) * ($scope.txtgst)/100);
            var doc=($scope.txtdocument_charges.replace(/[\s,]+/g, '').trim());
            var output = (parseInt(amount) + parseInt(doc));
            var lsdocumentchargerecoverd_words = inWords(output);
            document.getElementById('documentchargerecoverd_words').innerHTML = lsdocumentchargerecoverd_words;
            $scope.txtdoc_recovered_amount = new Intl.NumberFormat('en-IN').format(Number(output));

        }
        $scope.update_limit = function (limitinfodtl_gid)
        {
            var params = {
                principal: $scope.txtprincipal,
                interest: $scope.txtinterest,
                moratorium: $scope.txtmoratorium,
                calloption: $scope.txtcalloption,
                limitinfodtl_gid: limitinfodtl_gid
            };
         
            var url = 'api/IdasTrnLsaManagement/repaymentdtl';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
              
            });
        }

        $scope.recoveredsubmit = function (lsacreate_gid)
        {
            var params = {
                recovered_type: $scope.rdbrecovered_type,
                recovered_amount: $scope.txtrecovered_amount,
                chequeno_details: $scope.txtcheque_no,
                chequedate_details: $scope.txtcheque_date,
                processingfeebank_name: $scope.txtrecoveredbank_name,
                processingfeaccount_name: $scope.txtrecoveredaccount_no,
                recover_remarks: $scope.txtrecovered_remarks,
                lsacreate_gid: $scope.lsacreate_gid,
                to_be_recoveredamount: $scope.txtto_be_recoveredamount,

            };
 
            var url = 'api/IdasTrnLsaManagement/processingfee';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    processingfeeslist();
                    
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                processingfeeslist();
            });
        }
       
        $scope.doc_charges_submit = function (lsacreate_gid) {

            var params = {
                
                doc_feaccount_name: $scope.txtdoc_account_no,
                lsacreate_gid: $scope.lsacreate_gid,
            };
            var url = 'api/IdasTrnLsaManagement/Getaccountno_validation';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if ($scope.txtdocumentcharge_remarks == undefined) {
                    var remarks = 'NA';
                }
                else {
                    var remarks = $scope.txtdocumentcharge_remarks;
                }
                if (resp.data.status == true) {
                    var params = {
                        document_charge:$scope.txtdocument_charges,
                        doc_recovered_amount: $scope.txtdoc_recovered_amount,
                        doc_chequeno_details: $scope.txtdoc_cheque_no,
                        doc_chequedate_details: $scope.txtdoc_cheque_date,
                        doc_feebank_name: $scope.txtdoc_bank_name,
                        doc_feaccount_name: $scope.txtdoc_account_no,
                        lsacreate_gid: $scope.lsacreate_gid,
                        document_charge_gst: $scope.txtgst,
                        documentcharge_applicable: $scope.rdbdocumentcharge,
                        documentcharge_remarks: remarks
                    };
   

                    var url = 'api/IdasTrnLsaManagement/documentcharge';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                    
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        documentcharges();
                    });
                }
                else {
                    unlockUI();

                
                    var modalInstance = $modal.open({
                        templateUrl: '/warning.html',
                        controller: ModalInstanceCtrl,
                        size: 'md'
                    });

                    ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                    function ModalInstanceCtrl($scope, $modalInstance) {
                        
                        $scope.ok = function () {
                            $modalInstance.close('closed');
                            $scope.panel1 = false;
                            $scope.panel2 = false;
                            $scope.panel3 = false;
                        };
                        $scope.yes = function () {
                          
                            $modalInstance.close('closed');
                          
                            popuplist();
                        };

                      
                    }
                 
                }
              
            });
          
        }
        function  popuplist()
        {
        
            $scope.panel1 = true;
            $scope.panel2 = true;
            $scope.panel3 = true;

        }
        $scope.doc_charge = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            localStorage.setItem($scope.uploadfrm, '$scope.uploadfrm');

            var url = 'api/IdasTrnLsaManagement/Uploaddoc';
            lockUI()
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                unlockUI()
                $("#adduploadphoto").val('');
               
                if (resp.data.status == true) {

                    $scope.hidephotodiv = false;
                    $scope.showphotodiv = true;
                    Notify.alert('Document Uploaded Successfully', 'success');
                }
                else {

                    Notify.alert('Error Occured while uploading', 'warning');
                }


            });

        }
    
        $scope.doc_charges_with_doc = function (lsacreate_gid) {

            var url = 'api/IdasTrnLsaManagement/documentmandatory_check';

            SocketService.get(url).then(function (resp) {
                if (resp.data.status == true) {
                    if ($scope.txtdocumentcharge_remarks == undefined) {
                        var remarks = 'NA';
                    }
                    else {
                        var remarks = $scope.txtdocumentcharge_remarks;
                    }
                    var url = 'api/IdasTrnLsaManagement/documentchargewithdoc';
                    lockUI()
                    var params = {
                        document_charge: $scope.txtdocument_charges,
                        doc_recovered_amount: $scope.txtdoc_recovered_amount,
                        doc_chequeno_details: $scope.txtdoc_cheque_no,
                        doc_chequedate_details: $scope.txtdoc_cheque_date,
                        doc_feebank_name: $scope.txtdoc_bank_name,
                        doc_feaccount_name: $scope.txtdoc_account_no,
                        lsacreate_gid: $scope.lsacreate_gid,
                        document_charge_gst: $scope.txtgst,
                        documentcharge_applicable: $scope.rdbdocumentcharge,
                        documentcharge_remarks: remarks
                    };
                    console.log(params);
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                         
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        documentcharges();
                    });
               
                }
                else {

                    Notify.alert(resp.data.message, 'warning')
                }
            });
           
        }
     
        $scope.edit = function (limitinfodtl_gid) {
           
            var limitinfodtl_gid = limitinfodtl_gid;
            var modalInstance = $modal.open({
                templateUrl: '/editrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    limitinfodtl_gid: limitinfodtl_gid
                }
                var url = 'api/IdasTrnLsaManagement/Getrepaymentinfo';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.txtprincipal = resp.data.principal;
                    $scope.txtinterest = resp.data.interest;
                    $scope.txtcalloption = resp.data.call_option;
                    $scope.txtmoratorium = resp.data.moratorium;

                });
          
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                      

                $scope.update_repayment = function () {

                    var params = {
                        principal: $scope.txtprincipal,
                        interest: $scope.txtinterest,
                        call_option: $scope.txtcalloption,
                        moratorium: $scope.txtmoratorium,
                        limitinfodtl_gid: limitinfodtl_gid
                    }


                    var url = 'api/IdasTrnLsaManagement/repaymentdtl';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            repaymentlist();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                           
                        }
                        
                    });
                    repaymentlist();

                }
            }
        }

        function repaymentlist()
        {
            var params =
            {
                lsacreate_gid: $scope.lsacreate_gid,
            }
            console.log(params);
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
                $scope.total_document_limit = resp.data.total_document_limit;
                $scope.totol_limit_released = resp.data.totol_limit_released;
                $scope.final_flag = resp.data.final_flag;

            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                
                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.final = function (lsacreate_gid)
        {
            var params = {
                terms_conditions: $scope.rdbterms_conditions,
                deferral_captured: $scope.rdbdeferral_captured,            
                head: $scope.credit_manager,
               
                lsacreate_gid: $scope.lsacreate_gid,
            };
     
            var url = 'api/IdasTrnLsaManagement/postfinal';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    finallist();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
               
            });
           
        }
        function finallist() {
            var params =
            {
                lsacreate_gid: $scope.lsacreate_gid,
            }
            var url = 'api/IdasTrnLsaManagement/Getmakerinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.maker_signature = resp.data.maker_signature;
                $scope.terms_conditions = resp.data.terms_conditions;
                $scope.deferral_captured = resp.data.deferral_captured;
                $scope.head = resp.data.head;

            });
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
            });

            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {

                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.compliance_submit = function (lsacreate_gid)
        {
            var params = {
                nach_mandate: $scope.rdbnach,
                sign_match: $scope.rdbsign,
                sign_match_kyc: $scope.rdbkyc_provided,
                escrow_opened: $scope.rdbescrow,
                appropriate_stamp: $scope.rdbstamp,
                roc_filling: $scope.rdbroc,
                cersai: $scope.rdbcersai,
                nach_mandate_remarks: $scope.txtnach_remarks,
                sign_match_remarks: $scope.txtsign_remarks,
                sign_match_kyc_remarks: $scope.txtsign_kyc_remarks,
                escrow_opened_remarks: $scope.txtescrow_remarks,
                appropriate_stamp_remarks: $scope.txtstamp_remarks,
                roc_filling_remarks: $scope.txtroc_remarks,
                cersai_remarks:$scope.txtcersai_remarks,
                lsacreate_gid: $scope.lsacreate_gid,
            };
     
            var url = 'api/IdasTrnLsaManagement/compliancecheck';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                 

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                compliancechacklist();
            });

        }
        function compliancechacklist()
        {
            var params =
                     {
                         lsacreate_gid: $scope.lsacreate_gid,
                     }
            var url = 'api/IdasTrnLsaManagement/Getcompliancecheckinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.nach_mandate = resp.data.nach_mandate;
                $scope.sign_match = resp.data.sign_match;
                $scope.sign_match_kyc = resp.data.sign_match_kyc;
                $scope.escrow_opened = resp.data.escrow_opened;
                $scope.appropriate_stamp = resp.data.nach_mandate;
                $scope.roc_filling = resp.data.roc_filling;
                $scope.nach_mandate_remarks = resp.data.nach_mandate_remarks;
                $scope.sign_match_remarks = resp.data.sign_match_remarks;
                $scope.sign_match_kyc_remarks = resp.data.sign_match_kyc_remarks;
                $scope.escrow_opened_remarks = resp.data.escrow_opened_remarks;
                $scope.appropriate_stamp_remarks = resp.data.appropriate_stamp_remarks;
                $scope.roc_filling_remarks = resp.data.roc_filling_remarks;
                $scope.cersai = resp.data.cersai;
                $scope.cersai_remarks = resp.data.cersai_remarks;

            });
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {

                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.proceed = function (lsacreate_gid) {
            var params = { 
                lsacreate_gid: $scope.lsacreate_gid,
            };
   
            var url = 'api/IdasTrnLsaManagement/proceed_finalinfo';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    $state.go('app.lsaManagement');
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                
            });

        }

        $scope.lsaback = function () {
            $state.go('app.lsaManagement');
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

                if (IsValidExtension == false) {
                    Notify.alert("File format is not supported..!", {
                        status: 'danger',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    return false;
                }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type);
            frm.append('lsacreate_gid', $scope.lsacreate_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/IdasTrnLsaManagement/Uploaddocument';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;
             
                $("#addupload").val('');
                if (resp.data.status == true) {
                    var params = {
                        lsacreate_gid: $scope.lsacreate_gid,

                    };
                    var url = 'api/IdasTrnLsaManagement/Getdocument';
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.filename_list = resp.data.UploadDocumentList;


                    });
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1; 
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
       
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.edit_limitinfo = function (val) {
            $scope.limitinfodtl_gid = val;
            $scope.limitinfodtl_gid = localStorage.setItem('limitinfodtl_gid', val);
     
            $state.go('app.idasTrnlimitInfoEdit');
        }

        $scope.editprocessing_fee = function (lsacreate_gid) {
            var lsacreate_gid = lsacreate_gid;
            var modalInstance = $modal.open({
                templateUrl: '/editprocessigninfo.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    lsacreate_gid: lsacreate_gid,

                };
                var url = 'api/IdasTrnLsaManagement/Getprocessingfeeinfo';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.rdbrecovered_type = resp.data.recovered_type;
                    $scope.txtrecovered_amount = resp.data.recovered_amount;
                    $scope.txtcheque_no = resp.data.chequeno_details;
                    $scope.txtcheque_date = new Date(resp.data.cheque_date);
                    $scope.txtrecoveredbank_name = resp.data.processingfeebank_name;
                    $scope.txtrecoveredaccount_no = resp.data.processingfeaccount_name;
                    $scope.txtrecovered_remarks = resp.data.recover_remarks;
                    $scope.txtto_be_recoveredamount = resp.data.to_be_recoveredamount;
                  
                    if (resp.data.recovered_type == "To be Recovered") {
                        $scope.tobe_recovered = true;
                        $scope.already_recovered = false;
                    }
                    if (resp.data.recovered_type == "Already Recovered") {
                        $scope.tobe_recovered = false;
                        $scope.already_recovered = true;
                    }
                });
                
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.recoveredstatus=function()
                {
                    if ($scope.rdbrecovered_type == "Already Recovered") {
                        $scope.tobe_recovered = false;
                        $scope.already_recovered = true;
                    }
                }
                $scope.recoveredstatus1 = function () {
                    if ($scope.rdbrecovered_type == "To be Recovered") {
                        $scope.tobe_recovered = true;
                        $scope.already_recovered = false;
                    }
                    
                }
            
                $scope.amountschange0=function()
                {
                    var input = document.getElementById('txtInput0').value;
                    var arr = input.split(',');
                    var i;
                    for (i = 0; i < arr.length; i++) {

                        var str = input.replace(',', '');
                        input = str;
                    }
                    var output = Number(str).toLocaleString('en-US');
                    var lseditrecoveredamount_words = inWords(str);
                    var amount = new Intl.NumberFormat('en-IN').format(Number(str));
                    if (amount == 'NaN') {
                        Notify.alert('Accept Numeric Only..!', {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        $scope.txtrecovered_amount = "";

                    }
                    else {
                        document.getElementById('editrecoveredamount_words').innerHTML = lseditrecoveredamount_words;
                        $scope.txtrecovered_amount = amount;
                    }
                }
                $scope.amountschange01 = function () {
                    var input = document.getElementById('txtInput01').value;
                    var arr = input.split(',');
                    var i;
                    for (i = 0; i < arr.length; i++) {

                        var str = input.replace(',', '');
                        input = str;
                    }
                    var output = Number(str).toLocaleString('en-US');

                    var lsedittoberecoveredamount_words = inWords(str);
                    var amount = new Intl.NumberFormat('en-IN').format(Number(str));
                    if (amount == 'NaN') {
                        Notify.alert('Accept Numeric Only..!', {
                            status: 'danger',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        $scope.txtto_be_recoveredamount = "";

                    }
                    else {
                        document.getElementById('edittoberecoveredamount_words').innerHTML = lsedittoberecoveredamount_words;
                        $scope.txtto_be_recoveredamount = amount;
                    }
                }
                $scope.processignfee_update = function () {

                    var params = {
                        recovered_type: $scope.rdbrecovered_type,
                        recovered_amount: $scope.txtrecovered_amount,
                        chequeno_details: $scope.txtcheque_no,
                        chequedate_details: $scope.txtcheque_date,
                        processingfeebank_name: $scope.txtrecoveredbank_name,
                        processingfeaccount_name: $scope.txtrecoveredaccount_no,
                        recover_remarks: $scope.txtrecovered_remarks,
                        lsacreate_gid: lsacreate_gid,
                        to_be_recoveredamount: $scope.txtto_be_recoveredamount,
                    }

                    var url = 'api/IdasTrnLsaManagement/updateprocessingfee';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {
                            processingfeeslist();
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        
                    });


                }
            }
        }
        function processingfeeslist() {
            var params =
                       {
                           lsacreate_gid: $scope.lsacreate_gid,
                       }
            var url = 'api/IdasTrnLsaManagement/Getprocessingfeeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.recovered_type = resp.data.recovered_type;
                $scope.recovered_amount = resp.data.recovered_amount;
                $scope.chequeno_details = resp.data.chequeno_details;
                $scope.chequedate_details = resp.data.chequedate_details;
                $scope.processingfeebank_name = resp.data.processingfeebank_name;
                $scope.processingfeaccount_name = resp.data.processingfeaccount_name;
                $scope.recover_remarks = resp.data.recover_remarks;
                $scope.to_be_recoveredamount = resp.data.to_be_recoveredamount;

            });
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {

                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.editdocumentcharges = function (lsacreate_gid) {
            var lsacreate_gid = lsacreate_gid;
            var modalInstance = $modal.open({
                templateUrl: '/editdocumentcharge.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
          
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    lsacreate_gid: lsacreate_gid,

                };
                var url = 'api/IdasTrnLsaManagement/Getdocumentchargeinfo';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.txtdoc_recovered_amount = resp.data.doc_recovered_amount;
                    $scope.txtdoc_cheque_no = resp.data.doc_chequeno_details;
                    $scope.txtdoc_cheque_date = new Date(resp.data.doc_cheque_date);
                    $scope.txtdoc_bank_name = resp.data.doc_feebank_name;
                    $scope.txtdoc_account_no = resp.data.doc_feaccount_name;
                    $scope.txtdocument_charges_edit = new Intl.NumberFormat('en-IN').format(Number(resp.data.document_charge)) + ".00";
                    $scope.txtgst_edit = resp.data.document_charge_gst;
                    $scope.rdbdocumentcharge = resp.data.documentcharge_applicable;
                    $scope.lbldocumentcharge_applicable = resp.data.documentcharge_applicable;
                    $scope.txtdocumentcharge_remarks = resp.data.documentcharge_remarks;
                    if (resp.data.documentcharge_applicable == "Yes") {
                        $scope.documentcharge_yes = true;
                        $scope.documentcharge_no = false;
                    }
                    if (resp.data.documentcharge_applicable == "No") {
                        $scope.documentcharge_yes = false;
                        $scope.documentcharge_no = true;
                    }
                });
             
                vm.calender3 = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();

                    vm.open3 = true;
                };
                $scope.documentchargestatus_yes=function()
                {
                    $scope.documentcharge_yes = true;
                    $scope.documentcharge_no = false;
                }
                $scope.documentchargestatus_no=function()
                {
                    $scope.documentcharge_yes = false;
                    $scope.documentcharge_no = true;
                }
                $scope.documentchargesedit = function () {
                    var input = document.getElementById('documentcharge_edit').value;
                    var arr = input.split(',');
                    var i;
                    for (i = 0; i < arr.length; i++) {

                        var str = input.replace(',', '');
                        input = str;
                    }
                    var output = Number(str).toLocaleString('en-US');
                    var lseditdocumentamount_words = inWords(str);
                    var amount = new Intl.NumberFormat('en-IN').format(Number(str));
                    $scope.txtdocument_charges_edit = amount;

                    document.getElementById('editdocumentamount_words').innerHTML = lseditdocumentamount_words;

                    if ($scope.txtgst_edit != null) {
                        var amount1 = (($scope.txtdocument_charges_edit.replace(/[\s,]+/g, '').trim()) * ($scope.txtgst_edit) / 100);
                        var doc = ($scope.txtdocument_charges_edit.replace(/[\s,]+/g, '').trim());
                        var output1 = (parseInt(amount1) + parseInt(doc));

                        $scope.txtdoc_recovered_amount = new Intl.NumberFormat('en-IN').format(Number(output1));
                    }

                }
                $scope.gstedit = function () {
                    var amount = (($scope.txtdocument_charges_edit.replace(/[\s,]+/g, '').trim()) * ($scope.txtgst_edit) / 100);
                    var doc = ($scope.txtdocument_charges_edit.replace(/[\s,]+/g, '').trim());
                    var output = (parseInt(amount) + parseInt(doc));
                    var lseditdocumentrecoveredamount_words = inWords(str);
                    document.getElementById('editdocumentrecoveredamount_words').innerHTML = lseditdocumentrecoveredamount_words;
                    $scope.txtdoc_recovered_amount = new Intl.NumberFormat('en-IN').format(Number(output));

                }
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.amountschange02 = function () {
                    var input = document.getElementById('txtInput02').value;
                    var arr = input.split(',');
                    var i;
                    for (i = 0; i < arr.length; i++) {

                        var str = input.replace(',', '');
                        input = str;
                    }
                    var output = Number(str).toLocaleString('en-US');
                    var lseditdocumentrecoveredamount_words = inWords(str);
                    document.getElementById('editdocumentrecoveredamount_words').innerHTML = lseditdocumentrecoveredamount_words;
                    var amount = new Intl.NumberFormat('en-IN').format(Number(str));
                    $scope.txtdoc_recovered_amount = amount;
                }
           
                $scope.documentcharges_update = function () {
                   
                    var params = {
                        doc_recovered_amount: $scope.txtdoc_recovered_amount,
                        doc_chequeno_details: $scope.txtdoc_cheque_no,
                        doc_chequedate_details: $scope.txtdoc_cheque_date,
                        doc_feebank_name: $scope.txtdoc_bank_name,
                        doc_feaccount_name: $scope.txtdoc_account_no,
                        lsacreate_gid: lsacreate_gid,
                        document_charge: $scope.txtdocument_charges_edit,
                        document_charge_gst: $scope.txtgst_edit,
                        documentcharge_remarks: $scope.txtdocumentcharge_remarks,
                        documentcharge_applicable: $scope.rdbdocumentcharge
                    }

                   
                 
                    var url = 'api/IdasTrnLsaManagement/updatedocumentcharges';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {
                            documentcharges();
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                      
                    });


                }
            }
        }
        function documentcharges() {
            var params =
                       {
                           lsacreate_gid: $scope.lsacreate_gid,
                       }
            var url = 'api/IdasTrnLsaManagement/Getdocumentchargeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.doc_recovered_amount = resp.data.doc_recovered_amount;
                $scope.doc_chequeno_details = resp.data.doc_chequeno_details;
                $scope.doc_chequedate_details = resp.data.doc_chequedate_details;
                $scope.doc_feebank_name = resp.data.doc_feebank_name;
                $scope.doc_feaccount_name = resp.data.doc_feaccount_name;
                $scope.document_name = resp.data.document_name;
                $scope.document_path = resp.data.document_path;
                $scope.document_charge = new Intl.NumberFormat('en-IN').format(Number(resp.data.document_charge)) + ".00";
                $scope.document_charge_gst = resp.data.document_charge_gst + "%";
                if (resp.data.document_name == null) {
                    $scope.document = false;
                }
                else {
                    $scope.document = true;
                }
                $scope.lbldocumentcharge_applicable = resp.data.documentcharge_applicable;
                $scope.lbldocumentcharge_remarks = resp.data.documentcharge_remarks;
            });
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {

                $scope.final_flag = resp.data.final_flag;

            });
        }
        $scope.processingfee_clear=function()
        {
            $scope.rdbrecovered_type = '';
            $scope.txtrecovered_amount = '';
            $scope.txtcheque_no = '';
            $scope.txtcheque_date = '';
            $scope.txtrecoveredbank_name = '';
            $scope.txtrecoveredaccount_no = '';
            $scope.txtto_be_recoveredamount = '';
            $scope.txtrecovered_remarks = '';
        }
        $scope.documentcharge_clear=function()
        {
            $scope.txtdoc_recovered_amount = '';
            $scope.txtdoc_cheque_no = '';
            $scope.txtdoc_cheque_date = '';
            $scope.txtdoc_bank_name = '';
            $scope.txtdoc_account_no = '';
            $scope.txtdocument_charges = '';
            $scope.txtgst = '';
            $scope.txtdocumentcharge_remarks = '';
        }

        $scope.addsecurityinfo = function (lsacreate_gid) {
            $scope.lsacreate_gid = localStorage.setItem('lsacreate_gid', lsacreate_gid);
   
            $state.go('app.IdasMstSecurityAdd');
          
        }
        $scope.delete_securityinfo = function (val, data) {
            var params = { collateral_gid: val };

            var url = 'api/IdasTrnLsaManagement/securityinfo_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var params =
                       {
                           lsacreate_gid: $scope.lsacreate_gid,
                       }
                    var url = 'api/IdasTrnLsaManagement/Getsanction2Colletarl';
                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.customer2security_list = resp.data.customersecurity_list;

                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                
            });
        }

        $scope.edit_security = function (collateral_gid)
        {

            $scope.collateral_gid = localStorage.setItem('collateral_gid', collateral_gid);

            $state.go('app.IdasTrnSecurityEdit');
           
        }
        
    
    $scope.documentchargestatus_yes = function () {
        console.log($scope.rdbdocumentcharge);
        if ($scope.rdbdocumentcharge == "Yes") {
            $scope.Yes = false;
            $scope.No = true;
        }
    }
    $scope.documentchargestatus_no = function () {
     
        if ($scope.rdbdocumentcharge == "No") {
            $scope.Yes = true;
            $scope.No = false;
        }
    }
    $scope.documentchargestatus = function ()
    {
        if ($scope.txtdocumentcharge_remarks == undefined)
        {
            var remarks = 'NA';
        }
        else {
            var remarks = $scope.txtdocumentcharge_remarks;
        }
        var params = {
           
            documentcharge_applicable: $scope.rdbdocumentcharge,            
            documentcharge_remarks: remarks,
            lsacreate_gid: $scope.lsacreate_gid,                    
        };    
        var url = 'api/IdasTrnLsaManagement/documentchargeapplicable';
        lockUI()
        SocketService.post(url, params).then(function (resp) {
            if (resp.data.status == true) {
                unlockUI()
                
                Notify.alert(resp.data.message, {
                    status: 'success',
                    pos: 'top-center',
                    timeout: 3000
                });
            }
            else {
                unlockUI();
                Notify.alert(resp.data.message, {
                    status: 'warning',
                    pos: 'top-center',
                    timeout: 3000
                });
            }
            documentcharges();
        });
       
    }
    $scope.proceed_approval=function()
    {
        var params = {

            lsacreate_gid: $scope.lsacreate_gid,

        };
        var url = 'api/IdasTrnLsaManagement/LSAapproval';
        lockUI()
        SocketService.post(url, params).then(function (resp) {
            if (resp.data.status == true) {
                unlockUI()

                Notify.alert(resp.data.message, {
                    status: 'success',
                    pos: 'top-center',
                    timeout: 3000
                });
                $state.go('app.lsaManagement');
            }
            else {
                unlockUI();
                Notify.alert(resp.data.message, {
                    status: 'warning',
                    pos: 'top-center',
                    timeout: 3000
                });
            }
           
        });
    }
}
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('MstCheckerApprovalSummaryController', MstCheckerApprovalSummaryController);

    MstCheckerApprovalSummaryController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams','DownloaddocumentService'];

    function MstCheckerApprovalSummaryController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams,DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'MstCheckerApprovalSummaryController';

        activate();

        function activate() {
            lockUI();

            var url = "api/IdasMstSanction/CheckerApprovalSummary";
            SocketService.get(url).then(function (resp) {
                $scope.sanctionlist = resp.data.sanctiondetails;
                unlockUI();
            });
        }
        
        $scope.checkerapprovalview = function (customer2sanction_gid) {
            $location.url('app/idasMstSanctionLetterWordView?sanction_gid=' + customer2sanction_gid + '&lspage=checkerapprovalsummary');
        }

        $scope.SanctionletterPDF = function (customer2sanction_gid) {
            var params = {
                sanction_gid: customer2sanction_gid
            };
            var url = 'api/IdasMstSanction/GetPDFGenerate';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                var phyPath =resp.data.lspath1;
                var filename1 = resp.data.lsname1;
                var phyPath = phyPath.replace("\\", "/");
                var phyPath = phyPath.replace("//", "/");
                var relPath = phyPath.split("EMS/");
                var relpath1 = relPath[1].replace("\\", "/");
                var url1 = filename1;
                var filename = url1.substring(url1.lastIndexOf('/')+1);                                                                      
               var url = 'api/azurestorage/FileUploadDocument';
                var params = {
                    file_path : relpath1
                }
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(relpath1,filename1);
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                // var phyPath = resp.data.lspath1;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // var name = resp.data.lsname1.split(".")
                // link.download = name[0];
                // var uri = str;
                // link.href = uri;
                // link.click();
                unlockUI();
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('MstCheckerapprovalViewController', MstCheckerapprovalViewController);

    MstCheckerapprovalViewController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function MstCheckerapprovalViewController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'MstCheckerapprovalViewController';
        var sanction_gid = $location.search().sanction_gid;
        var lspage = $location.search().lspage;

        activate();
        
        function activate() {
            var url = 'api/IdasMstSanction/SanctionDtlsEdit';
            var params = {
                sanction_gid: sanction_gid
            };
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.sanctionrefnoEdit = resp.data.sanction_refno;
                $scope.SanctionDateEdit = resp.data.sanction_date;
                $scope.SanctionAmountEdit = resp.data.sanction_amount;
                $scope.customerNameEdit = resp.data.customername;
                $scope.CustomerurnEdit = resp.data.customer_urn;
                $scope.verticalCodeEdit = resp.data.vertical;
                $scope.checkerapproval_flag = resp.data.checkerapproval_flag;
            });
            var url = 'api/IdasMstSanction/SanctioncheckerEdit';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.checkerfile_name = resp.data.checkerfile_name;
                $scope.checkerfile_path = resp.data.checkerfile_path;
                $scope.uploaded_by = resp.data.uploaded_by;
                $scope.uploaded_date = resp.data.updated_date;
            });
        }

        $scope.downloadsWordFile = function () {
            var params = {
                sanction_gid: sanction_gid
            };
            var url = 'api/IdasMstSanction/GetWordGenerate';
            var phyPath = val1;
            var relPath = phyPath.split("EMS");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            link.download = val2;
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.CheckerApprovalBack = function () {
            if (lspage == 'Pending') {
                $state.go('app.MstCheckerApprovalSummary')
            }
            else {
                $state.go('app.MstCheckerApprovalCompletedSummary')
            }
        }

        $scope.checkerapprove = function () {
            var params = {
                sanction_gid: sanction_gid
            }
            var url = 'api/IdasMstSanction/UpdateCheckerApproval';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    $state.go('app.MstCheckerApprovalSummary')
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('MstCheckerSummaryController', MstCheckerSummaryController);

    MstCheckerSummaryController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', 'SweetAlert', '$route', 'ngTableParams'];

    function MstCheckerSummaryController($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, apiManage, SweetAlert, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'MstCheckerSummaryController';

        activate();

        function activate() {
            lockUI();

            var url = "api/IdasMstSanction/SanctionToCheckerSummary";
            SocketService.get(url).then(function (resp) {
                $scope.sanctionlist = resp.data.sanctiondetails;
                unlockUI();
            });
        }

        $scope.checkerview = function (customer2sanction_gid) {
            $location.url('app/idasMstSanctionLetterWordView?sanction_gid=' + customer2sanction_gid + '&lspage=checkersummary');
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('viewLSA', viewLSA);

    viewLSA.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'SweetAlert', '$route', 'ngTableParams', '$parse', 'DownloaddocumentService'];

    function viewLSA($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, SweetAlert, $route, ngTableParams, $parse, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'viewLSA';

        activate();

        function activate() {
            $scope.lsacreate_gid = localStorage.getItem('lsacreate_gid');
            $scope.stepone = false;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
            $scope.tobe_recovered = false;
            $scope.already_recovered = false;
            $scope.customer_pnl = true;
            $scope.sanction_pnl = true;
            $scope.signmatching = false;
            $scope.nach_no = false;
            $scope.signmatch_kycprovide = false;
            $scope.escrow_no = false;
            $scope.stamp = false;
            $scope.roc_no = false;

            var params = {
                lsacreate_gid: $scope.lsacreate_gid,

            };
            var url = 'api/IdasTrnLsaManagement/Getlsainfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.document_charge_flag = resp.data.document_charge_flag;
                $scope.recover_flag = resp.data.recover_flag;
                $scope.approval_status = resp.data.approval_status;
                $scope.customername = resp.data.customer_name;
                $scope.clarify_flag = resp.data.clarify_flag;
                $scope.compliance_flag = resp.data.compliance_flag;
                $scope.proceed_flag = resp.data.proceed_flag;
            });
            var url = 'api/IdasTrnLsaManagement/Getcustomer2sanctioninfo';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.txtmargin = resp.data.margin;
                $scope.txttenure = resp.data.tenure;
                $scope.txtexpiry_date = resp.data.expiry_date;
                $scope.txtrate_interest = resp.data.rate_interest;
            });
            var url = 'api/IdasTrnLsaManagement/limitinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.limitinfo_limit = resp.data.limitinfo_limit;
                $scope.total_document_limit = resp.data.total_document_limit;
                $scope.totol_limit_released = resp.data.totol_limit_released;
               
            });
            var url = 'api/IdasTrnLsaManagement/bankinfodtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.bankinfo_list = resp.data.bankinfo_list;

            });
            var url = 'api/IdasTrnLsaManagement/GetPenalInterest';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.penalinterest_list = resp.data.loanfacilitytype_list;
                console.log(resp.data.loanfacilitytype_list)
            });

            var url = 'api/IdasTrnLsaManagement/loanfacility';
            SocketService.get(url).then(function (resp) {
                $scope.loanfacility_list = resp.data.loanfacility_list;
            });
            var url = 'api/IdasTrnLsaManagement/Getprocessingfeeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.recovered_type = resp.data.recovered_type;
                $scope.recovered_amount = resp.data.recovered_amount;
                $scope.chequeno_details = resp.data.chequeno_details;
                $scope.chequedate_details = resp.data.chequedate_details;
                $scope.processingfeebank_name = resp.data.processingfeebank_name;
                $scope.processingfeaccount_name = resp.data.processingfeaccount_name;
                $scope.recover_remarks = resp.data.recover_remarks;
            });

            var url = 'api/IdasTrnLsaManagement/Getdocumentchargeinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.doc_recovered_amount = resp.data.doc_recovered_amount;
                $scope.doc_chequeno_details = resp.data.doc_chequeno_details;
                $scope.doc_chequedate_details = resp.data.doc_chequedate_details;
                $scope.doc_feebank_name = resp.data.doc_feebank_name;
                $scope.doc_feaccount_name = resp.data.doc_feaccount_name;
                $scope.document_name = resp.data.document_name;
                $scope.document_path = resp.data.document_path;
                $scope.document_charge = new Intl.NumberFormat('en-IN').format(Number(resp.data.document_charge)) + ".00";
                $scope.document_charge_gst = resp.data.document_charge_gst + "%";
                if (resp.data.document_name == null) {
                    $scope.document = false;
                }
                else {
                    $scope.document = true;
                }
                $scope.lbldocumentcharge_applicable = resp.data.documentcharge_applicable;
                $scope.lbldocumentcharge_remarks = resp.data.documentcharge_remarks;
            });
            var url = 'api/IdasTrnLsaManagement/Getmakerinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.maker_signature = resp.data.maker_signature;
                $scope.terms_conditions = resp.data.terms_conditions;
                $scope.deferral_captured = resp.data.deferral_captured;
                $scope.head = resp.data.head;

            });
            var url = 'api/IdasTrnLsaManagement/Getcompliancecheckinfo';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.nach_mandate = resp.data.nach_mandate;
                $scope.sign_match = resp.data.sign_match;
                $scope.sign_match_kyc = resp.data.sign_match_kyc;
                $scope.escrow_opened = resp.data.escrow_opened;
                $scope.appropriate_stamp = resp.data.nach_mandate;
                $scope.roc_filling = resp.data.roc_filling;
                $scope.nach_mandate_remarks = resp.data.nach_mandate_remarks;
                $scope.sign_match_remarks = resp.data.sign_match_remarks;
                $scope.sign_match_kyc_remarks = resp.data.sign_match_kyc_remarks;
                $scope.escrow_opened_remarks = resp.data.escrow_opened_remarks;
                $scope.appropriate_stamp_remarks = resp.data.appropriate_stamp_remarks;
                $scope.roc_filling_remarks = resp.data.roc_filling_remarks;
                $scope.cersai = resp.data.cersai;
                $scope.cersai_remarks = resp.data.cersai_remarks;
            });
            var url = 'api/IdasTrnLsaManagement/Getdocument';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;
              
            });
            var url = "api/IdasTrnLsaManagement/GetdetailsLSA";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.lblcustomer_name = resp.data.customer_name;
                $scope.lblbranch_name = resp.data.branch_name;
                $scope.lblstate = resp.data.state;
                $scope.lblcustomer_urn = resp.data.customer_urn;
                $scope.lblcustomer_location = resp.data.customer_location;
                $scope.lbladdress = resp.data.address1;
                $scope.lblrm_name = resp.data.rm_name;
                $scope.lblcluster_head = resp.data.cluster_head;
                $scope.lblzonal_head = resp.data.zonal_head;
                $scope.lblbusiness_head = resp.data.business_head;
                $scope.lblcredit_manager = resp.data.credit_manager;
                $scope.lblvertical = resp.data.vertical;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblpan_no = resp.data.pan_no;
                $scope.lblsa_code = resp.data.sa_code;
                $scope.lblsanctionref_no = resp.data.sanctionref_no;
                $scope.lblsanction_date = resp.data.sanction_date;
                $scope.lblapproved_by = resp.data.approved_by;
                $scope.lblapproved_date = resp.data.approved_date;
                $scope.lblconstitution = resp.data.constitution;
                $scope.lblpurpose_lending = resp.data.purpose_lending;
                $scope.lblfacility = resp.data.facility;
                $scope.lblmajor_corporate = resp.data.major_corporate;
                $scope.lblhypothecation_date = resp.data.hypothecation_date;
                $scope.lblmortgage_date = resp.data.mortgage_date;
                $scope.lblproduct_solution = resp.data.product_solution;
                $scope.lblmajot_intervention = resp.data.majot_intervention;
                $scope.lblsector = resp.data.sector;
                $scope.lblprimaryvalue_chain = resp.data.primaryvalue_chain;
                $scope.lblsecondaryvalue_chain = resp.data.secondaryvalue_chain;
                $scope.lblremarks = resp.data.remarks;
                $scope.lbllsacreated_date = resp.data.lsacreated_date;
                $scope.lblsanction_type = resp.data.sanction_type;
                $scope.address1 = resp.data.address;
                $scope.lbllsaref_no = resp.data.lsaref_no;
                $scope.lsaapproved_by = resp.data.lsaapproved_by;
                $scope.lsaapproved_date = resp.data.lsaapproved_date;
               
                 });
            var url = 'api/IdasTrnLsaManagement/Getsanction2Colletarl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer2security_list = resp.data.customersecurity_list;
             
            });
        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split(".")
            //link.download = val2;
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.clickstep1 = function () {
            $scope.stepone = false;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep2 = function () {
            $scope.stepone = true;
            $scope.steptwo = false;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep3 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = false;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep4 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = false;
            $scope.stepfive = true;
            $scope.stepsix = true;
        }
        $scope.clickstep5 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = false;
            $scope.stepsix = true;
        }
        $scope.clickstep6 = function () {
            $scope.stepone = true;
            $scope.steptwo = true;
            $scope.stepthree = true;
            $scope.stepfour = true;
            $scope.stepfive = true;
            $scope.stepsix = false;
        }

        $scope.lsaback = function () {
            $state.go('app.lsaManagement');
        }

        $scope.view_security = function (collateral_gid) {
          
            var collateral_gid = collateral_gid;
            var modalInstance = $modal.open({
                templateUrl: '/viewcollateral.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    collateral_gid: collateral_gid
                }
                var url = 'api/IdasTrnLsaManagement/GetColletarl';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.security_type = resp.data.security_type;
                   
                    $scope.txtsecurity_description = resp.data.security_description;
                    $scope.cboaccount_status = resp.data.account_status;
                    $scope.collateralref_no = resp.data.collateralref_no;
                    $scope.security_code = resp.data.security_code;
                    $scope.collateral_gid = resp.data.collateral_gid;
                    $scope.txtborrowercheque_no = resp.data.borrowercheque_no;
                    $scope.txtborroweraccount_no = resp.data.borroweraccount_no;
                    $scope.txtborrowertbank_name = resp.data.borrowertbank_name;
                    $scope.txtborrowerdeviation = resp.data.borrowerdeviation;
                    $scope.txtborrowerother_remarks = resp.data.borrowerother_remarks;
                    $scope.txtguarantor_cheque = resp.data.guarantor_cheque;
                    $scope.txtguarantor_acno = resp.data.guarantor_acno;
                    $scope.txtguarantor_bankname = resp.data.guarantor_bankname;
                    $scope.txtguarantor_deviation = resp.data.guarantor_deviation;
                    $scope.txtpersonalguarantor_name = resp.data.personalguarantor_name;
                    $scope.txtguarantor_panno = resp.data.guarantor_panno;
                    $scope.txtcorporate_guarantee = resp.data.corporate_guarantee;
                    $scope.txtpersonal_guarantee = resp.data.personal_guarantee;
                    $scope.txtfd_bank_name = resp.data.fd_bank_name;
                    $scope.txtfd_no = resp.data.fd_no;
                    $scope.txtfd_expiry_date =(resp.data.fd_expiry_date);
                    $scope.txtauto_renewal = resp.data.auto_renewal;
                    $scope.txtbankguarantee_bankname = resp.data.bankguarantee_bankname;
                    $scope.txtbankguarantee_expirydate = (resp.data.bankguarantee_expirydate);
                    $scope.txtinsurancecompany_name = resp.data.insurancecompany_name;
                    $scope.txtpolicy_no = resp.data.policy_no;
                    $scope.txtpolicy_expiry_date = resp.data.policy_expiry_date;
                    
                    if (resp.data.security_type == 'UDC From Borrower') {
                        $scope.borrower = false;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                    else if (resp.data.security_type == 'UDC From Guarantor') {
                        $scope.guarantor = false;
                        $scope.borrower = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                    else if (resp.data.security_type == 'Personal Guarantee') {
                        $scope.personal_guarantee = false;
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.corporate_guarantee = true;
                    }
                    else if (resp.data.security_type == 'Corporate Guarantee') {
                        $scope.corporate_guarantee = false;
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                    }
                    else if (resp.data.security_type == 'Bank Guarantee') {
                        $scope.bank_guarantee = false;
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                    else if (resp.data.security_type == 'Fixed Deposits') {
                        $scope.fixed_deposits = false;
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                    else if (resp.data.security_type == 'Assignment of Insurance Policy') {
                        $scope.insurance = false;
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                    else {
                        $scope.borrower = true;
                        $scope.guarantor = true;
                        $scope.insurance = true;
                        $scope.bank_guarantee = true;
                        $scope.fixed_deposits = true;
                        $scope.personal_guarantee = true;
                        $scope.corporate_guarantee = true;
                    }
                });

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.borrowerinfo_submit = function () {
                
                    var params = {
                        borrower_chequeno: $scope.txtborrowercheque_no,
                        borrower_bankname: $scope.txborrowertbank_name,
                        borrower_acno: $scope.txtborroweraccount_no,
                        borrower_deviation: $scope.txtborrowerdeviation,
                        borrower_remarks: $scope.txtborrowerother_remarks,
                        lsacreate_gid: lsacreate_gid

                    }
                  
                    var url = 'api/IdasTrnLsaManagement/borrowerinfo';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');




                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });


                }
            }
        }

        $scope.editlsa = function (lsacreate_gid)
        {
            
            //var lsacreate_gid = lsacreate_gid;
            var modalInstance = $modal.open({
                templateUrl: '/editlsainfo.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    lsacreate_gid: $scope.lsacreate_gid,
                    lsacreate_gid: lsacreate_gid,
                };
                console.log(params);
                var url = "api/IdasTrnLsaManagement/GetdetailsLSA";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.lblcustomer_name = resp.data.customer_name;                 
                    $scope.lblcustomer_urn = resp.data.customer_urn;               
                    $scope.lblsanctionref_no = resp.data.sanctionref_no;
                    $scope.lblsanction_date = resp.data.sanction_date;
                    $scope.txtsa_code = resp.data.sa_code;
                    console.log(resp.data.hypothecationdate)
                    if (resp.data.hypothecationdate != '0001-01-01T00:00:00')
                    {
                        $scope.txthypothecation_date = new Date(resp.data.hypothecationdate);
                    }
                    if (resp.data.mortgagedate != '0001-01-01T00:00:00') {
                        $scope.txtmortgage_date = new Date(resp.data.mortgagedate);
                    }                 
                   
                    $scope.txtremarks = resp.data.remarks;

                });
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.update_lsa = function () {

                    var params = {
                        remarks: $scope.txtremarks,
                        hypothecation_date: $scope.txthypothecation_date,
                        mortgage_date: $scope.txtmortgage_date,
                        sa_code:$scope.txtsa_code,
                        lsacreate_gid: lsacreate_gid

                    }
                    console.log(params);
                    var url = 'api/IdasTrnLsaManagement/updatelsa';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });


                }
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('viewTemplateDetailsController', viewTemplateDetailsController);

    viewTemplateDetailsController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function viewTemplateDetailsController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'viewTemplateDetailsController';
        $scope.template_gid = $location.search().template_gid;
        activate();


        function activate() {

            lockUI();
            var url = "api/idasMstTemplate/GetTemplateDtl"
            var param = {
                template_gid: $scope.template_gid
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.template_name = resp.data.template_name;
                $scope.templatetype_name = resp.data.templatetype_name;
                $scope.template_content = resp.data.template_content;
                
            });
        }

        $scope.back = function () {
            $state.go('app.idasMstTemplateSummary');

        }

    }
})();
