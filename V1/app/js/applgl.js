(function () {
    'use strict';

    angular
        .module('angle')
        .controller('addLawfirmcontroller', addLawfirmcontroller);

    addLawfirmcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function addLawfirmcontroller($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'addLawfirmcontroller';
        activate();
        function activate() {
            $scope.hidediv = true;
            $scope.showdiv = false;
           
            var url = 'api/lawFirm/lawfirm2lawyer';
            SocketService.get(url).then(function (resp) {
                $scope.lawfirm2lawyer_list = resp.data.lawfirm2lawyer_list;
            
            });
            var url = 'api/lawFirm/tempdelete';
            
            SocketService.get(url).then(function (resp) {
    
            });

        }

   
    $scope.lawfirmSubmit = function () {
            var lawyerdata = $('#lawyerdata :selected').text();
        var params = {
            firm_refno: $scope.txtfirm_refno,
            firm_name: $scope.txtfirm_name,
            contact_details: $scope.txtcontact_no,
            mail_address: $scope.txtemailaddress,
            fax_no: $scope.txtfaxno,
            firm_years: $scope.txtexperience,
            firm_address: $scope.txtaddress1,
            remarks: $scope.txtremarks,
            website: $scope.txtwebsite,
            lawfirm2lawyer_list: $scope.$parent.lawfirm2lawyer
           
        }

        var url = 'api/lawFirm/createLawfirm';
        lockUI()
      SocketService.post(url, params).then(function (resp) {
            if (resp.data.status == true) {
                unlockUI()
                activate();
                $state.go('app.lawfirmSummary');
                Notify.alert('Law Firm Added Successfully', 'success')
             

            }
            else {
                unlockUI();
                activate();
                $state.go('app.lawfirmSummary');
                Notify.alert('Error Occurred While Adding Law Firm', 'warning')
               
            }
            
        });
      
    }
    $scope.document_cancelclick = function (val, data) {
        var params = { document_gid: val };
        var url = 'api/lawFirm/documentdelete';
        lockUI()
        SocketService.getparams(url, params).then(function (resp) {
            if (resp.data.status == true) {
                angular.forEach($scope.filename_list, function (value, key) {
                    if (value.document_gid == val) {
                        $scope.filename_list.splice(key, 1);
                    }
                });
                Notify.alert('Document Deleted Successfully', {
                    status: 'success',
                    pos: 'top-center',
                    timeout: 3000
                });
                unlockUI()
              //  activate();
            }
            else {
                Notify.alert('Internal Error Occurred', {
                    status: 'Warning',
                    pos: 'top-center',
                    timeout: 3000
                });

            }
        });
    }
    $scope.upload = function (val, val1, name) {
        var item = {
            name: val[0].name,
            file: val[0]
        };

        var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

        if (IsValidExtension == false) {
            Notify.alert("File format is not supported..!", {
                status: 'danger',
                pos: 'top-center',
                timeout: 3000
            });
            return false;
        }
        var frm = new FormData();
        frm.append('fileupload', item.file);
        frm.append('file_name', item.name);
        frm.append('document_name', $scope.documentname);
        frm.append('document_type', $scope.document_type);
        frm.append('project_flag', "Default");
        $scope.uploadfrm = frm;
        var url = 'api/lawFirm/Uploadbankcertificate';
        lockUI();
        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
            $scope.filename_list = resp.data.UploadDocument;
            $("#addupload").val('');
            if (resp.data.status == true) {
                $scope.document_type='';
                unlockUI();
               
             Notify.alert('Document Uploaded Successfully', 'success')

            }
            else {
                unlockUI();
             Notify.alert('File Format Not Supported')

            }

        });

    }
    $scope.lawfirmback = function () {
        var url = 'api/lawFirm/tempdelete';
        lockUI()
        SocketService.get(url).then(function (resp) {
           
        });

        $state.go('app.lawfirmSummary');
    }

    $scope.addlawfirm2member = function () {
        var modalInstance = $modal.open({
            templateUrl: '/addmember.html',
            controller: ModalInstanceCtrl,
            size: 'md'
        });
        ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
        function ModalInstanceCtrl($scope, $modalInstance) {
           //Checking Enrolment No duplication
 $scope.enrolmentno_validation=function()
 {
     var params = {
         enrolment_no:$scope.txtenrolment_no
     }
     var url = 'api/lawFirm/GetLawfirmenrolment_validation';

     SocketService.getparams(url,params).then(function (resp) {
         console.log(resp.data.enrolment_no);
         if (resp.data.enrolment_no == 'Y') {
             $scope.validationMsg = true;
         }
         else {
             $scope.validationMsg = false;
         }
     });
 }
            $scope.ok = function () {
                $modalInstance.close('closed');
            };
    
            $scope.submitmember = function () {

                    var params = {
                        lawyer_name: $scope.txtmember_name,
                        mobile_no: $scope.txtmobileno,
                        email_address: $scope.txtemailaddress,
                        designation: $scope.txtdesignation,
                        enrolment_no: $scope.txtenrolment_no,
                    }
                    var url = 'api/lawFirm/postmembers';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            memberlist();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }

                    });

                    $modalInstance.close('closed');
         

            }
        }
    }
    function memberlist() {
        var url = 'api/lawFirm/Gettempmember';
        
        SocketService.get(url).then(function (resp) {
            $scope.member_list = resp.data.member_list;
            
        });
    }
    $scope.memberdelete = function (val, data) {
        var params = { lawfirmmember_gid: val };
        console.log(params);
        var url = 'api/lawFirm/memberdelete';
        lockUI()
        SocketService.getparams(url, params).then(function (resp) {
            if (resp.data.status == true) {
                angular.forEach($scope.member_list, function (value, key) {
                    if (value.lawfirmmember_gid == val) {
                        $scope.member_list.splice(key, 1);
                    }
                });
                Notify.alert('Document Deleted Successfully', {
                    status: 'success',
                    pos: 'top-center',
                    timeout: 3000
                });
                unlockUI()
                memberlist();
            }
            else {
                Notify.alert('Internal Error Occurred', {
                    status: 'Warning',
                    pos: 'top-center',
                    timeout: 3000
                });

            }
        });
    }

    $scope.taglawyer=function()
    {
        var modalInstance = $modal.open({
            templateUrl: '/taglawyer.html',
            controller: ModalInstanceCtrl,
            size: 'md'
        });
        ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
        function ModalInstanceCtrl($scope, $modalInstance) {
 
            $scope.ok = function () {
                $modalInstance.close('closed');
            };
            var url = 'api/lawFirm/lawfirm2lawyer';
            SocketService.get(url).then(function (resp) {
                $scope.lawfirm2lawyer_list = resp.data.lawfirm2lawyer_list;

            });
            $scope.submittag = function () {

                var params = {
                    lawyerregister_gid: $scope.cbolawfirm2lawyer.lawyerregister_gid,
                    designation: $scope.txtdesignation,
                   
                }
                console.log(params);
                var url = 'api/lawFirm/TagLawyer2lawfirm';
                lockUI();
                SocketService.post(url, params).then(function (resp) {
                    unlockUI();
                    if (resp.data.status == true) {

                        Notify.alert(resp.data.message, {
                            status: 'success',
                            pos: 'top-center',
                            timeout: 3000
                        });
                        memberlist();
                    }
                    else {
                        Notify.alert(resp.data.message, {
                            status: 'info',
                            pos: 'top-center',
                            timeout: 3000
                        });

                    }

                });

                $modalInstance.close('closed');


            }
        }
    }
    
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('cboCustomer2loandetailscontroller', cboCustomer2loandetailscontroller);

        cboCustomer2loandetailscontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function cboCustomer2loandetailscontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'cboCustomer2loandetailscontroller';

        activate();


        function activate() {
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.otherloan = true;
            $scope.click = true;
            $scope.initiatedn = true;
            $scope.dn2format = true;
            $scope.button=true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });

            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.otherloan_list = resp.data.otherloan_list;
                $scope.customer_name = resp.data.customer_name;
                $scope.cbo_status = resp.data.cbo_status;
                if ((resp.data.cbo_status == 'DN Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn = true;
                }

                if ((resp.data.cbo_status == 'DN Skip')) {
                    $scope.skip = true;
                }

            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.cbotemplate_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status=resp.data.DN1_status;
                console.log(resp.data.DN1_status);
                  
                if ((resp.data.DN1_status == 'DN Generated')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert=false;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
        
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.CBOhistory_list = resp.data.CBOhistory_list;
           
                if ((resp.data.cbo_status == 'DN Skip') || (resp.data.cbo_status == 'DN Sent') || (resp.data.cbo_status == 'DN Generated')) {
                    $scope.dndetails = false;
                }
              
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };
          
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.CBOcouriered_by = resp.data.CBOcouriered_by;
                $scope.CBOcourier_center = resp.data.CBOcourier_center;
                $scope.CBOcourier_date = resp.data.CBOcourier_date;
                $scope.CBOcourier_refno = resp.data.CBOcourier_refno;
                $scope.CBOremarks = resp.data.CBOremarks;
                $scope.CBOcourier_status = resp.data.CBOcourier_status;
                 });
                 var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };
          
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
               
                 });
        }
        $scope.cbogenerate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/cbogenerate"
            var param = {
                urn: $scope.urn,
                template_content: $scope.content

            };
         
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    
                    Notify.alert('DN Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN')
                }
                activate();
                $state.go('app.dnTrackerCBO');
            });

        }

        $scope.DNsend = function () {
            var url = "api/misDataimport/CBOStatus"
            var param = {
                urn: $scope.urn,
                dncase_gid: $scope.dncase_gid,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                activate();
                $state.go('app.dnTrackerCBO');
            });
            $scope.courier_info = false;
         
            $scope.info = true;
        }
        $scope.DNskip = function () {
            var url = "api/misDataimport/CBOskip"
            var param = {
                urn: $scope.urn,
                dncase_gid:$scope.dncase_gid
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                activate();
            });
            $scope.skip = true;
        }
        $scope.Dnback = function () {
            $state.go('app.dnTrackerCBO')
        }
        $scope.cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn= true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.clickinitiatedn = function () {
            $scope.initiatedn = true;
            $scope.courier_info = false;
            $scope.sanctiondtl = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnCBOsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnCBOsanction_date = resp.data.sanction_date;
                $scope.txtdnCBOsanction_amount = resp.data.sanction_amount;
                $scope.txtdnCBOref_no = "SAMFIN/RMD/";

            });

            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.dnCBOref_no = resp.data.dnCBOref_no;
                $scope.dnCBOsanctionref_no = resp.data.dnCBOsanctionref_no;
                $scope.dnCBOsanction_date = resp.data.dnCBO_date;
               
                var amount_dn = new Intl.NumberFormat('en-IN').format(resp.data.dnCBOsanction_amount);
                $scope.dnCBOsanction_amount = amount_dn;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn_flag == "N") {
                    $scope.initiatedn = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dnCBO_flag == "Y") {
                    $scope.initiatedn = false;
                    $scope.sanctiondtl = true;
                }
                if (resp.data.dnCBO_flag == "N") {
                    $scope.initiatedn = true;
                    $scope.sanctiondtl = false;
                }
            });

            var url = 'api/misDataimport/DNCBOContent';
            var param = {
                urn: $scope.urn

            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });
            $scope.info = true;
        }
        $scope.otherloandetails = function () {
            $scope.otherloan = false;
            $scope.click = false;
        }
        $scope.minimizeloan = function () {
            $scope.otherloan = true;
            $scope.click = true;
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.revert_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN_CBO';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        $state.go('app.dnTrackerCBO');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.hold_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN_CBO';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        $state.go('app.dnTrackerCBO');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.unhold_yes = function () {

                    var params = {
                       
                        urn:urn,
                       }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN_CBO';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                        }
                        $state.go('app.dnTrackerCBO');
                        activate();
                    });
                }
            }
        }

        $scope.dnCBOsanctionsubmit = function () {
            var url = 'api/misDataimport/DNCBOsanctiondtl';

            var param = {
                urn: $scope.urn,
                dnCBOsanctionref_no: $scope.txtdnCBOsanctionref_no,
                dnCBOsanction_date: $scope.txtdnCBOsanction_date,
                dnCBOsanction_amount: $scope.txtdnCBOsanction_amount,
                dnCBOref_no: $scope.txtdnCBOref_no
            };
            console.log(param);
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {

                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn

                    };

                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dnCBOref_no = resp.data.dnCBOref_no;
                        $scope.dnCBOsanctionref_no = resp.data.dnCBOsanctionref_no;
                        $scope.dnCBOsanction_date = resp.data.dnCBOsanction_date;
                        //   $scope.dnCBOsanction_amount = resp.data.dnCBOsanction_amount;

                        var amount_dn = new Intl.NumberFormat('en-IN').format(resp.data.dnCBOsanction_amount);
                        $scope.dnCBOsanction_amount = amount_dn;
                        $scope.dn_flag = resp.data.dn_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn = false;
                            $scope.sanctiondtl = true;
                        }
                        
                        if (resp.data.dnCBO_flag == "Y") {
                            $scope.initiatedn= false;
                            $scope.sanctiondtl = true;
                        }
                    });
                    var url = 'api/misDataimport/DNCBOContent';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
        $scope.dnCBOcancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnCBOsanctionref_no='';
            $scope.txtdnCBOsanction_date = '';
            $scope.txtdnCBOsanction_amount = '';
            $scope.txtdnCBOref_no = '';
        }
        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var arr = input.split(',');
            var i;
            for (i = 0; i < arr.length; i++) {

                var str = input.replace(',', '');
                input = str;
            }
            var output = Number(str).toLocaleString('en-IN');
            $scope.txtdnCBOsanction_amount = output;

        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('complianceManagementcontroller', complianceManagementcontroller);

    complianceManagementcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function complianceManagementcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'complianceManagementcontroller';

        activate();


        function activate() {
            $scope.totalDisplayedpending= 100;
            $scope.totalDisplayedcompleted= 100;
            $scope.totalDisplayedrejected = 100; 
            $scope.totalDisplayedworkinprogress = 100;
            $scope.totalDisplayedtaggedlawyer = 100;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "Pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "Completed") {
                    $scope.tabcompleted = true;
                }
                else if (relpath1 == "Rejected") {
                    $scope.tabrejected = true;
                }
                else if (relpath1 == "Tagged-Lawyer") {
                    $scope.tabtaggedlawyer = true;
                }
                else if (relpath1 == "Work-InProgress") {
                    $scope.tabworkinprogress = true;
                }

            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'Pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'Completed') {
                    $scope.tabcompleted = true;
                }
                else if ($scope.tab.activeTabId == 'Rejected') {
                    $scope.tabrejected = true;
                }
                else if ($scope.tab.activeTabId == 'Tagged-Lawyer') {
                    $scope.tabtaggedlawyer = true;
                }
                else if ($scope.tab.activeTabId == 'Work-InProgress') {
                    $scope.tabworkinprogress = true;
                }

            }
            var url = 'api/requestCompliance/Compliancemanagementsummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.requestcompliance_data = resp.data.requestcompliance_list;
                $scope.requestcomplianceworkinprogress_data = resp.data.requestcomplianceworkinprogress_list;
                $scope.requestcompliancerejected_data = resp.data.requestcompliancerejected_list;
                $scope.requestcompliancecompleted_data = resp.data.requestcompliancecompleted_list;
                $scope.requestcompliancetaggedlawyer_data = resp.data.requestcompliancetaggedlawyer_list;
                $scope.pending_count = resp.data.pending_count;
                $scope.completed_count = resp.data.completed_count;
                $scope.rejected_count = resp.data.rejected_count;
                $scope.workinprogress_count = resp.data.workinprogress_count;
                $scope.taggedlawyer_count = resp.data.taggedlawyer_count;

                for (var i = 0; i < $scope.requestcompliance_data.length; i++) {
                    if ($scope.requestcompliance_data[i].response_flag == "Y") {
                        $scope.pendingtab_alert = "Y";
                        break;
                    }
                }
                for (var i = 0; i < $scope.requestcomplianceworkinprogress_data.length; i++) {
                    if ($scope.requestcomplianceworkinprogress_data[i].response_flag == "Y") {
                        $scope.workinprogresstab_alert = "Y";
                        break;
                    }
                }
                for (var i = 0; i < $scope.requestcompliancerejected_data.length; i++) {
                    if ($scope.requestcompliancerejected_data[i].response_flag == "Y") {
                        $scope.rejectedtab_alert = "Y";
                        break;
                    }
                }
                for (var i = 0; i < $scope.requestcompliancecompleted_data.length; i++) {
                    if ($scope.requestcompliancecompleted_data[i].response_flag == "Y") {
                        $scope.completedtab_alert = "Y";
                        break;
                    }
                }
                for (var i = 0; i < $scope.requestcompliancetaggedlawyer_data.length; i++) {
                    if ($scope.requestcompliancetaggedlawyer_data[i].response_flag == "Y") {
                        $scope.taggedlawyertab_alert = "Y";
                        break;
                    }
                }

                

                if ($scope.requestcompliance_data == null) {
                    $scope.pendingCount = 0;
                }
                else {
                    $scope.pendingCount = $scope.requestcompliance_data.length;
                }
                if ($scope.requestcomplianceworkinprogress_data == null) {
                    $scope.workinprogressCount = 0;
                }
                else {
                    $scope.workinprogressCount = $scope.requestcomplianceworkinprogress_data.length;
                }
                $scope.requestcompliancetaggedlawyer_data = resp.data.requestcompliancetaggedlawyer_list;
                if ($scope.requestcompliancetaggedlawyer_data == null) {
                    $scope.taggedlawyerCount = 0;
                }
                else {
                    $scope.taggedlawyerCount = $scope.requestcompliancetaggedlawyer_data.length;
                }
                $scope.requestcompliancecompleted_data = resp.data.requestcompliancecompleted_list;
                if ($scope.requestcompliancecompleted_data == null) {
                    $scope.completedCount = 0;
                }
                else {
                    $scope.completedCount = $scope.requestcompliancecompleted_data.length;
                }
                $scope.requestcompliancerejected_data = resp.data.requestcompliancerejected_list;
                if ($scope.requestcompliancerejected_data == null) {
                    $scope.rejectedCount = 0;
                }
                else {
                    $scope.rejectedCount = $scope.requestcompliancerejected_data.length;
                }
            });
           
        }
 
   
        $scope.loadMorepending = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedpending += Number;
            unlockUI();
        };
        $scope.loadMorecompleted= function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedcompleted += Number;
            unlockUI();
        };
        $scope.loadMorerejected = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedrejected += Number;
            unlockUI();
        };
        $scope.loadMoretaggedlawyer = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedtaggedlawyer += Number;
            unlockUI();
        };
        $scope.loadMoreworkinprogress= function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedworkinprogress += Number;
            unlockUI();
        };
        $scope.pendingview360 = function (val) {
            $scope.requestcompliance_gid = val;
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $location.url('app/LglTrnCompliancePending?lstab=Pending');
        }
        $scope.rejectedview360 = function (val) {
            $scope.requestcompliance_gid = val;
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $location.url('app/LglTrnComplianceRejected?lstab=Rejected');
        }
        $scope.completedview360 = function (val) {
            $scope.requestcompliance_gid = val;
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $location.url('app/LglTrnComplianceCompleted?lstab=Completed');
        }
        $scope.taggedlawyerview360 = function (val) {
            $scope.requestcompliance_gid = val;
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $location.url('app/LglMstCompliance2TagLawyer?lstab=Tagged-Lawyer');
        }
        $scope.workinprogressview360 = function (val) {
            $scope.requestcompliance_gid = val;
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $location.url('app/requestCompliance360?lstab=Work-InProgress');
        }
        $scope.showPopover = function (requestcompliance_gid, requestref_no) {
            var modalInstance = $modal.open({
                templateUrl: '/addcompliance.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    requestcompliance_gid : requestcompliance_gid
                }
                var url = 'api/requestCompliance/GetlawyerStatus';
                SocketService.getparams(url,params).then(function (resp) {
                    if(resp.data.status == true)
                    {
                        $scope.MdlLawyerSummary = resp.data.MdlLawyerSummary;
                        $scope.lawyeruser_name = resp.data.lawyeruser_name;
                        $scope.request_status = resp.data.request_status;

                        $scope.requestref_no = requestref_no;
                    
                    }
                    else {
                    }
                });
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
            }
        }
       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('customer2misdataController', customer2misdataController);

    customer2misdataController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function customer2misdataController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'editRegisterlawyercontroller';
        activate();
        function activate() {

            $scope.urn = localStorage.getItem('urn');
            var url = 'api/misDataimport/Getcutomer2misdata';

            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.customer_name = resp.data.customer_name;
                $scope.urn = resp.data.urn;
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;

              
                console.log(resp.data.customer_name);
            });

        }
        $scope.requestback = function () {
            $state.go('app.misDataimport')
        }
        }
    })();
        
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dn2Customer2loandetailscontroller', dn2Customer2loandetailscontroller);

    dn2Customer2loandetailscontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function dn2Customer2loandetailscontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dn2Customer2loandetailscontroller';

        activate();


        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];

            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.otherloan = true;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button=true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });

            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.otherloan_list = resp.data.otherloan_list;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN2status = resp.data.DN2status;
                console.log(resp.data.DN1status);
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
               
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;
          
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
        
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }
              
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };
          
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                console.log(resp.data.dn2courier_refno);
                console.log(resp.data.dn2remarks);
                console.log(resp.data.dn2courier_center);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };
          
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
                 });
        }
        $scope.DN2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            $scope.dn1status = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content

            };
          
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();
                   
                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2')
                }
                $location.url('app/dnTracker?lstab=dn2tracker');
                activate();
            });

        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN2send = function () {
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                dncase_gid: $scope.dncase_gid,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/dnTracker?lstab=dn2tracker');
                activate();
            });
            $scope.courier_info = false;
            $scope.dn1status = true;
            $scope.info = true;
        }
        $scope.DN2skip = function () {
            var url = "api/misDataimport/DN2skip"
            var param = {
                urn: $scope.urn,
                dncase_gid:$scope.dncase_gid
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                activate();
            });
            $scope.skip = true;
            $scope.dn1status = true;
        }
        $scope.Dn2back = function () {
            $location.url('app/dnTracker?lstab=dn2tracker');
        }
        $scope.cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn2 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.clickinitiatedn2 = function () {
            $scope.initiatedn2 = true;
            $scope.courier_info = false;
            $scope.dn1status = true;
            $scope.sanctiondtl = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdn2sanctionref_no = resp.data.sanction_refno;
                $scope.txtdn2sanction_date = resp.data.sanction_date;
                $scope.txtdn2sanction_amount = resp.data.sanction_amount;
                $scope.txtdn2ref_no = "SAMFIN/RMD/";

            });

            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.dn2ref_no = resp.data.dn2ref_no;
                $scope.dn2sanctionref_no = resp.data.dn2sanctionref_no;
                $scope.dn2sanction_date = resp.data.dn2_date;
              //  $scope.dn2sanction_amount = resp.data.dn2sanction_amount;

                var amount_dn2 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                $scope.dn2sanction_amount = amount_dn2;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn2_flag == "N") {
                    $scope.initiatedn2 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn2_flag == "Y") {
                    $scope.initiatedn2 = false;
                    $scope.sanctiondtl = true;
                }

            });


            var url = 'api/misDataimport/DN2Content';
            var param = {
                urn: $scope.urn

            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });
            $scope.info = true;
        }
        $scope.otherloandetails = function () {
            $scope.otherloan = false;
            $scope.click = false;
        }
        $scope.minimizeloan = function () {
            $scope.otherloan = true;
            $scope.click = true;
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.revert_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN2';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn2tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.hold_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN2';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn2tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.unhold_yes = function () {

                    var params = {
                       
                        urn:urn,
                       }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN2';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn2tracker');
                        activate();
                    });
                }
            }
        }

        $scope.dn2sanctionsubmit = function () {
            var url = 'api/misDataimport/DN2sanctiondtl';
            lockUI();
            var param = {
                urn: $scope.urn,
                dn2sanctionref_no: $scope.txtdn2sanctionref_no,
                dn2sanction_date: $scope.txtdn2sanction_date,
                dn2sanction_amount: $scope.txtdn2sanction_amount,
                dn2ref_no: $scope.txtdn2ref_no
            };
       
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn

                    };

                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dn2ref_no = resp.data.dn2ref_no;
                        $scope.dn2sanctionref_no = resp.data.dn2sanctionref_no;
                        $scope.dn2sanction_date = resp.data.dn2_date;
                      //  $scope.dn2sanction_amount = resp.data.dn2sanction_amount;

                        var amount_dn2 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                        $scope.dn2sanction_amount = amount_dn2;
                        $scope.dn_flag = resp.data.dn_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn2 = false;
                            $scope.sanctiondtl = true;
                        }
                        if (resp.data.dn2_flag == "Y") {
                            $scope.initiatedn2 = false;
                            $scope.sanctiondtl = true;
                        }
                    });
                    var url = 'api/misDataimport/DN2Content';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }


            });
        }
        $scope.dn2cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn2 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdn2sanctionref_no = '';
            $scope.txtdn2sanction_date = '';
            $scope.txtdn2sanction_amount = '';
            $scope.txtdn2ref_no = '';
        }
        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdn2sanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdn2sanction_amount = output;
            }
         
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dn3Customer2loandetailscontroller', dn3Customer2loandetailscontroller);

    dn3Customer2loandetailscontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function dn3Customer2loandetailscontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dn3Customer2loandetailscontroller';

        activate();


        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];

            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.otherloan = true;
            $scope.click = true;
            $scope.initiatedn3 = true;
            $scope.dn3format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.dn3_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status=resp.data.DN1_status;
               
                if ((resp.data.DN1_status == 'DN3 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn3format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN3 Reverted') {
                    $scope.initiatedn3 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn3format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert=false;
                }
                if ((resp.data.DN1_status == 'DN3 Hold')) {
                    $scope.dn3format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
            });

            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
                console.log(resp.data.dncase_gid);
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
              
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.otherloan_list = resp.data.otherloan_list;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN3status = resp.data.DN3status;
                console.log(resp.data.customer_name);
                if ((resp.data.DN3status == 'DN3 Sent')) {
                    $scope.dn3format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn3 = true;
                }
                if ((resp.data.DN3status == 'DN3 Skip')) {
                    $scope.skip = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                }
                if ((resp.data.DN2status == 'DN2 Skip') || (resp.data.DN2status == 'DN2 Sent') || (resp.data.DN2status == 'DN2 Generated')) {
                    $scope.dndetails = false;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };
          
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
                 });
        }
        $scope.DN3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();
                    $state.go('app.dnTracker');

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                activate();
                $location.url('app/dnTracker?lstab=dn3tracker');
              
            });

        }

        $scope.DN3send = function () {
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                dncase_gid: $scope.dncase_gid,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                activate();
                $location.url('app/dnTracker?lstab=dn3tracker');
            });
            $scope.courier_info = false;
            $scope.skip = false;
            $scope.info = true;
            $scope.courierdetails = true;
        }
        $scope.DN3skip = function () {
            var url = "api/misDataimport/DN3skip"
            var param = {
                urn: $scope.urn,
                dncase_gid: $scope.dncase_gid
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                activate();
            });
            $scope.skip = false;
        }

        $scope.Dn3back = function () {
            $location.url('app/dnTracker?lstab=dn3tracker');
        }

        $scope.cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn3 = true;
            $scope.sanctiondtl=true
            $scope.info = false;
          
        }

        $scope.clickinitiatedn3 = function () {
            $scope.courier_info = true;
            $scope.initiatedn3=true;
            $scope.info = true;
            $scope.sanctiondtl = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdn3sanctionref_no = resp.data.sanction_refno;
                $scope.txtdn3sanction_date = resp.data.sanction_date;
                $scope.txtdn3sanction_amount = resp.data.sanction_amount;
                $scope.txtdn3ref_no = "SAMFIN/RMD/";

            });

            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.dn3ref_no = resp.data.dn3ref_no;
                $scope.dn3sanctionref_no = resp.data.dn3sanctionref_no;
                $scope.dn3sanction_date = resp.data.dn3_date;
             //   $scope.dn3sanction_amount = resp.data.dn3sanction_amount;
                var amount_dn3 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                $scope.dn3sanction_amount = amount_dn3;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn3_flag == "N") {
                    $scope.initiatedn3 = true;
                    $scope.sanctiondtl = false;
                }
                
                if (resp.data.dn3_flag == "Y") {
                    $scope.initiatedn3 = false;
                    $scope.sanctiondtl = true;
                }

            });
            var url = 'api/misDataimport/DN3Content';
            var param = {
                urn: $scope.urn

            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });
            

        }
        $scope.otherloandetails = function () {
            $scope.otherloan = false;
            $scope.click = false;
        }
        $scope.minimizeloan = function () {
            $scope.otherloan = true;
            $scope.click = true;
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.revert_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN3';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn3tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.hold_yes = function () {

                    var params = {
                       
                        urn:urn,
                        remarks:$scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN3';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn3tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
           
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
               
                $scope.unhold_yes = function () {

                    var params = {
                       
                        urn:urn,
                       }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN3';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/dnTracker?lstab=dn3tracker');
                        activate();
                    });
                }
            }
        }

        $scope.dn3sanctionsubmit = function () {
            var url = 'api/misDataimport/DN3sanctiondtl';
            lockUI();
            var param = {
                urn: $scope.urn,
                dn3sanctionref_no: $scope.txtdn3sanctionref_no,
                dn3sanction_date: $scope.txtdn3sanction_date,
                dn3sanction_amount: $scope.txtdn3sanction_amount,
                dn3ref_no: $scope.txtdn3ref_no
            };
            console.log(param);
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                   
                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn

                    };

                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dn3ref_no = resp.data.dn3ref_no;
                        $scope.dn3sanctionref_no = resp.data.dn3sanctionref_no;
                        $scope.dn3sanction_date = resp.data.dn3_date;
                   //     $scope.dn3sanction_amount = resp.data.dn3sanction_amount;
                        var amount_dn3 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                        $scope.dn3sanction_amount = amount_dn3;
                        $scope.dn_flag = resp.data.dn_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn3 = true;
                            $scope.sanctiondtl = false;
                        }
                        if (resp.data.dn3_flag == "Y") {
                            $scope.initiatedn3 = false;
                            $scope.sanctiondtl = true;
                        }
                    });
                    var url = 'api/misDataimport/DN3Content';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            });
        }
        $scope.dn3cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn3 = true;
            $scope.sanctiondtl = true
            $scope.info = false;
            $scope.txtdn3sanctionref_no = '';
            $scope.txtdn3sanction_date = '';
            $scope.txtdn3sanction_amount = '';
            $scope.txtdn3ref_no = '';
        }
        $scope.amountschange = function () {
            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdn3sanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdn3sanction_amount = output;
            }
          
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnCustomer2loandetailscontroller', dnCustomer2loandetailscontroller);

    dnCustomer2loandetailscontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnCustomer2loandetailscontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnCustomer2loandetailscontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;

            $scope.urn = localStorage.getItem('urn');
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.DN1status == 'DN1 Sent')) {
      
                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
        }
        $scope.onselectedchangeusertype=function()
        {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
           
            
            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });
           
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            console.log('dn2');
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            console.log('test')

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/template_list';
          
            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;
               
            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                 $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel=function()
        {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {
           
            if ($scope.cbousertype == 'guarantor')
            {
                if(($scope.cboguarantor=='')||($scope.cboguarantor==undefined))
                {
                    $scope.Sanctioninfo = true;
                }
            }
            else {
                $scope.Sanctioninfo = false;
            if ($scope.cbousertype == 'guarantor')
            {
                var guarantor_name = $scope.cboguarantor.name;
                var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

            }
            else {
                var guarantor_name = '';
                var guarantor_gid = '';
            }
            var param = {
                urn: $scope.urn,
                dnsanctionref_no: $scope.txtdnsanctionref_no,
                dnsanction_date: $scope.txtdnsanction_date,
                dnsanction_amount: $scope.txtdnsanction_amount,
                dnref_no: $scope.txtdnref_no,
                user_type: $scope.cbousertype,
                template_type: $scope.cbotemplate.template_name,
                template_gid: $scope.cbotemplate.template_gid,
                guarantor_name: guarantor_name,
                guarantor_gid: guarantor_gid
            };
                
            if ($scope.cbotemplate.template_name == 'Legal-DN1')
            {

           
             var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
             lockUI();
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn
                    };
                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dnref_no = resp.data.dn1ref_no;
                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                        $scope.dnsanction_date = resp.data.dn1_date;
                        $scope.dn_type = resp.data.dn_type;
                        console.log(resp.data.dn1sanction_amount);
                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                        $scope.dnsanction_amount = amount_dn1;
                        $scope.dn1_flag = resp.data.dn1_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                        if (resp.data.dn1_flag == "Y") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                    });

                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }


            });
            }
            
           
        else if($scope.cbotemplate.template_name == 'Legal-DN2')
        {
            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
            lockUI();
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn
                    };
                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dnref_no = resp.data.dn2ref_no;
                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                        $scope.dnsanction_date = resp.data.dn2_date;
                        $scope.dn_type = resp.data.dn_type;
                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                        $scope.dnsanction_amount = amount_dn1;
                        $scope.dn2_flag = resp.data.dn2_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                        if (resp.data.dn2_flag == "Y") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                    });

                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }


            });
        }
        else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
            lockUI();
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = 'api/misDataimport/GetSanctiondtl';
                    var param = {
                        urn: $scope.urn
                    };
                    SocketService.getparams(url, param).then(function (resp) {

                        $scope.dnref_no = resp.data.dn3ref_no;
                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                        $scope.dnsanction_date = resp.data.dn3_date;
                        $scope.dn_type = resp.data.dn_type;
                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                        $scope.dnsanction_amount = amount_dn1;
                        $scope.dn3_flag = resp.data.dn3_flag;
                        if (resp.data.dn_flag == "N") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                        if (resp.data.dn3_flag == "Y") {
                            $scope.initiatedn1 = false;
                            $scope.sanctiondtl = true;
                        }
                    });

                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                    var param = {
                        urn: $scope.urn

                    };
                    console.log(param);
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.content = resp.data.template_content;

                    });

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }


            });
        }
        }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnReportcontroller', dnReportcontroller);

    dnReportcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route'];

    function dnReportcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnReportcontroller';

        activate();
        function activate() {
            lockUI();
            var url = "api/lglDashboard/getdnTAT"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.dnTAT_list = resp.data.dnTAT_list;
                console.log(resp.data.dnTAT_list);
            });

        }



    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerCBOcontroller', dnTrackerCBOcontroller);

    dnTrackerCBOcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function dnTrackerCBOcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerCBOcontroller';
        activate();
        function activate() {
            $scope.total = 0;
            $scope.totalDisplayed = 0;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }

        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOSkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });

        }
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerCBO/getCBOLegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }

        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBOGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBO2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBO3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNCBOGenerateTab?lstab=generated');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');

                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');

                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate();
                        });
                    }

                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }

        $scope.DNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        validity: $scope.txtskipvalid_date,
                        skip_reason: $scope.txtskip_reason
                    }
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                // SocketService.post(url,params).then(function (resp) {

                // });
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN1";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                // unlockUI();
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN2";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN3";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackercontroller', dnTrackercontroller);

    dnTrackercontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService'];

    function dnTrackercontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackercontroller';

        activate();


        function activate() {
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "dn1tracker") {
                    $scope.tabdn1tracker = true;
                }
                else if (relpath1 == "dn2tracker") {
                    $scope.tabdn2tracker = true;
                }
                else if (relpath1 == "dn3tracker") {
                    $scope.tabdn3tracker = true;
                }

            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabdn1tracker = true;
                }
                else if ($scope.tab.activeTabId == 'dn1tracker') {
                    $scope.tabdn1tracker = true;

                }
                else if ($scope.tab.activeTabId == 'dn2tracker') {
                    $scope.tabdn2tracker = true;
                }
                else if ($scope.tab.activeTabId == 'dn3tracker') {
                    $scope.tabdn3tracker = true;
                }

            }
            lockUI();
            var url = "api/misDataimport/GetDN1list"
        
            SocketService.get(url).then(function (resp) {            
           
                $scope.DN1LIST = resp.data.mdlMisdataimport;
               
            });
            var url = "api/misDataimport/GetDN2list"
          
            SocketService.get(url).then(function (resp) {
                
                $scope.DN2LIST = resp.data.mdlMisdataimport;
            });
            var url = "api/misDataimport/GetDN3list"
          
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DN3LIST = resp.data.mdlMisdataimport;
               
            });
            var url = "api/misDataimport/RecoveredCases"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.RecoverCases = resp.data.mdlMisdataimport;
            });
            var url = "api/misDataimport/GetDNcount"
           
            SocketService.get(url).then(function (resp) {
              
                $scope.DN1_total_count = resp.data.dn1_total_count;
                $scope.DN1_today_count = resp.data.dn1_today_count;
                $scope.DN2_total_count = resp.data.dn2_total_count;
                $scope.DN2_today_count = resp.data.dn2_today_count;
                $scope.DN3_total_count = resp.data.dn3_total_count;
                $scope.DN3_today_count = resp.data.dn3_today_count;
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
         
        }
        $scope.dn1customerdetails = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/dnCustomer2loandetails?lstab=dn1tracker');
        }
        $scope.dn2customerdetails = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/dn2Customer2loandetails?lstab=dn2tracker');

        }
        $scope.dn3customerdetails = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/dn3Customer2loandetails?lstab=dn3tracker');

        }
        $scope.dn1ackstatus = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }          
                $scope.dn1ackstatusupdation = function () {
                    var params = {
                      urn:urn,
                      courier_status: $scope.dn1ackstatus,
                        delivered_date:$scope.txtdelivered_date,
                        returened_date:$scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn1ackstatusupdate';
                   
                    SocketService.post(url, params).then(function (resp) {
                       
                        if (resp.data.status == true) {
                         
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                          
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                           
                        }
                        activate();
                    });
                }
            }
        }
        $scope.dn2ackstatus = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';
                
                    SocketService.post(url, params).then(function (resp) {
                     
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn1pdf = function (urn) {
           
          
            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success');
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                

                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN1";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });
            
                }
               
        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    unlockUI();
                    Notify.alert('DN2 Report Downloaded Successfully', 'success');
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
            });
            
        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    unlockUI();
                    Notify.alert('DN3 Report Downloaded Successfully', 'success');
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });
            
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerReportcontroller', dnTrackerReportcontroller);

    dnTrackerReportcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route','DownloaddocumentService'];

    function dnTrackerReportcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route,DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerReportcontroller';

        activate();
        function activate() {
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            var date = new Date(),
             mnth = ("0" + (date.getMonth() + 1)).slice(-2),
             day = ("0" + date.getDate()).slice(-2);
            $scope.date = [date.getFullYear(), mnth, day].join("-");
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            var params = {
                date:$scope.date
            }

            var url = 'api/lglDashboard/GetdntrackerReport';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
 
                $scope.dn_list = resp.data.dn_list;
                $scope.dn1send_count = resp.data.dn1send_count;
                $scope.dn2send_count = resp.data.dn2send_count;
                $scope.dn3send_count = resp.data.dn3send_count;
                $scope.dn1skip_count = resp.data.dn1skip_count;
                $scope.dn2skip_count = resp.data.dn2skip_count;
                $scope.dn3skip_count = resp.data.dn3skip_count;
                unlockUI();
            });
         

            }
      
        $scope.export = function () {
            var params = {
                //customer_gid: $scope.customer_gid,
                //vertical_gid: $scope.vertical,
                //branch_gid: $scope.branch,
                //entity_gid: $scope.entity_gid,
                //relationshipMgmt: $scope.relationshipMgmt,
                //zonalHead: $scope.zonalHead,
                //businessHead: $scope.businessHead,
                //clustermanager: $scope.clustermanager,
                //creditmanager: $scope.creditmanager
            }
            lockUI();
            var url = 'api/lglDashboard/DNexport';
            SocketService.post(url, params).then(function (resp) {
                console.log(resp.data.status)
               if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.lspath, resp.data.lsname);
                    unlockUI();
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'success')
                    activate();

                }

            });
        }

        $scope.search = function () {
            if ($scope.date == undefined || $scope.date == "") {
                var date = 'null';
            }
            else {
                var date = $scope.date;

                var date = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                                    .toISOString()
                                    .split("T")[0];
            }
            var params = {
                date: date
            }
            console.log(params)
            var url = 'api/lglDashboard/GetdntrackerReport_IST';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {           
                $scope.dn_list = resp.data.dn_list;
                $scope.dn1send_count = resp.data.dn1send_count;
                $scope.dn2send_count = resp.data.dn2send_count;
                $scope.dn3send_count = resp.data.dn3send_count;
                $scope.dn1skip_count = resp.data.dn1skip_count;
                $scope.dn2skip_count = resp.data.dn2skip_count;
                $scope.dn3skip_count = resp.data.dn3skip_count;
                unlockUI();
            });
        }
        

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('editLawfirmcontroller', editLawfirmcontroller);

    editLawfirmcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams','cmnfunctionService'];

    function editLawfirmcontroller($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'editLawfirmcontroller';
        activate();
        function activate() {

          

            $scope.lawfirm2lawyerEdit = [];
            var url = 'api/lawFirm/lawfirm2lawyer';
            SocketService.get(url).then(function (resp) {
                $scope.lawfirm2lawyer_list = resp.data.lawfirm2lawyer_list;
                
            });
            $scope.lawfirm_gid = localStorage.getItem('lawfirm_gid');
            var url = 'api/lawFirm/Getlawfirmdetails';

            var param = {
                lawfirm_gid: $scope.lawfirm_gid
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtfirm_refnoedit = resp.data.txtfirm_refnoedit;
                $scope.txtfirm_nameedit = resp.data.txtfirm_nameedit;
                $scope.txtcontact_noedit = resp.data.txtcontact_noedit;
                $scope.txtemailaddressedit = resp.data.txtemailaddressedit;
                $scope.txtwebsiteedit = resp.data.txtwebsiteedit;
                $scope.txtexperienceedit = resp.data.txtexperienceedit;
                $scope.txtaddress1edit = resp.data.txtaddress1edit;
                $scope.txtremarksedit = resp.data.txtremarksedit;
                $scope.filename_list = resp.data.UploadDocument;
                for (var i = 0; i < resp.data.lawyerlist_edit.length; i++)                   
                {  
                    var workerIndex = $scope.lawfirm2lawyer_list.map(function (x) { return x.lawyerregister_gid; }).indexOf(resp.data.lawyerlist_edit[i].lawyerregister_gid);
                    // var indexs = $scope.lawfirm2lawyer_list.findIndex(x => x.lawyerregister_gid == resp.data.lawyerlist_edit[i].lawyerregister_gid);                 
                    $scope.lawfirm2lawyerEdit.push($scope.lawfirm2lawyer_list[workerIndex]);
                 
                    // var indexs = $scope.lawfirm2lawyer_list.findIndex(x => x.lawyerregister_gid == resp.data.lawyerlist_edit[i].lawyerregister_gid);                 
                    // $scope.lawfirm2lawyerEdit.push($scope.lawfirm2lawyer_list[indexs]);
                }
            });         
            var url = 'api/lawFirm/tempdelete';

            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/lawFirm/getlawfirm2member';
            
            SocketService.getparams(url, param).then(function (resp) {
                $scope.member_list = resp.data.member_list;
            });
            unlockUI();
        }
        $scope.document_cancelclick = function (val, data) {
            var params = { document_gid: val };
            var url = 'api/lawFirm/documentdelete';
            lockUI()
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI()
                   // activate();
                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }

        
            $scope.lawfirm_gid = localStorage.getItem('lawfirm_gid');
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type);
            frm.append('lawfirm_gid', $scope.lawfirm_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            var url = 'api/lawFirm/Editploadbankcertificate';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocument;    
                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type='';
                    Notify.alert('Document Uploaded Successfully', 'success')

                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported')

                }

            });

        }
        $scope.lawfirmUpdate = function () {

            var params = {
                lawfirm_gid: $scope.lawfirm_gid,
                txtfirm_refnoedit: $scope.txtfirm_refnoedit,
                txtfirm_nameedit: $scope.txtfirm_nameedit,
                txtcontact_noedit: $scope.txtcontact_noedit,
                txtemailaddressedit: $scope.txtemailaddressedit,
                txtexperienceedit: $scope.txtexperienceedit,
                txtaddress1edit: $scope.txtaddress1edit,
                txtremarksedit: $scope.txtremarksedit,
                txtwebsiteedit: $scope.txtwebsiteedit,
                lawyerlist_edit: $scope.lawfirm2lawyerEdit
            }
          
            var url = 'api/lawFirm/updateLawfirm';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    $state.go('app.lawfirmSummary');
                    Notify.alert('Lawfirm Updated Successfully', 'success')
                }

                else {
                    Notify.alert('Error Occurred While Updating Lawfirm ')
                }
                activate();
            });
        }

        $scope.lawfirmback = function () {
            var url = 'api/lawFirm/tempdelete';
            lockUI()
            SocketService.get(url).then(function (resp) {

            });
            $state.go('app.lawfirmSummary');
        }
        $scope.addlawfirm2member = function () {
            var modalInstance = $modal.open({
                templateUrl: '/addmember.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                 //Checking Enrolment No duplication
         $scope.enrolmentno_validation=function()
         {
             var params = {
                 enrolment_no:$scope.txtenrolment_no
             }
             var url = 'api/lawFirm/GetLawfirmenrolment_validation';
 
             SocketService.getparams(url,params).then(function (resp) {
                 console.log(resp.data.enrolment_no);
                 if (resp.data.enrolment_no == 'Y') {
                     $scope.validationMsg = true;
                 }
                 else {
                     $scope.validationMsg = false;
                 }
             });
         }

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.submitmember = function () {

                    var params = {
                        lawyer_name: $scope.txtmember_name,
                        mobile_no: $scope.txtmobileno,
                        email_address: $scope.txtemailaddress,
                        designation: $scope.txtdesignation,
                        enrolment_no:$scope.txtenrolment_no

                    }
                    var url = 'api/lawFirm/postmembers';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            memberlist();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }

                    });

                    $modalInstance.close('closed');


                }
            }
        }
        function memberlist() {

            var url = 'api/lawFirm/getEditlawfirm2member';
            var params = {
                lawfirm_gid: $scope.lawfirm_gid,
            }
            SocketService.getparams(url,params).then(function (resp) {
                $scope.member_list = resp.data.member_list;

            });
        }
        $scope.memberdelete = function (val, data) {
            var params = { lawfirmmember_gid: val };
            console.log(params);
            var url = 'api/lawFirm/memberdelete';
            lockUI()
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.member_list, function (value, key) {
                        if (value.lawfirmmember_gid == val) {
                            $scope.member_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI()
                    memberlist();
                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        $scope.taglawyer = function () {
            var modalInstance = $modal.open({
                templateUrl: '/taglawyer.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var url = 'api/lawFirm/lawfirm2lawyer';
                SocketService.get(url).then(function (resp) {
                    $scope.lawfirm2lawyer_list = resp.data.lawfirm2lawyer_list;

                });
                $scope.submittag = function () {

                    var params = {
                        lawyerregister_gid: $scope.cbolawfirm2lawyer.lawyerregister_gid,
                        designation: $scope.txtdesignation,

                    }
                    console.log(params);
                    var url = 'api/lawFirm/TagLawyer2lawfirm';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            memberlist();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }

                    });

                    $modalInstance.close('closed');


                }
            }
        }
        
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('editLegalSRcontroller', editLegalSRcontroller);

    editLegalSRcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function editLegalSRcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'editLegalSRcontroller';

        activate();


        function activate() {
            //var url = 'api/Lawfirm/lawfirmdetail';
            //lockUI();
            //SocketService.get(url).then(function (resp) {
            //    unlockUI();
            //    $scope.lawfirm_data = resp.data.lawfirm_list;

            //});

        }

        $scope.srback = function (val) {
            $state.go('app.legalSRsummary');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('editRegisterlawyercontroller', editRegisterlawyercontroller);

    editRegisterlawyercontroller.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route','cmnfunctionService'];

    function editRegisterlawyercontroller($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'editRegisterlawyercontroller';
        activate();
        function activate() {
            vm.today = function () {
                vm.dt = new Date();
            };
            vm.today();
            $scope.hidephotodiv = true;
            $scope.showphotodiv = false;
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            var url = 'api/registerlawyer/tempdelete';
            SocketService.get(url).then(function (resp) {
               
            });         
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.lawyerregister_gid = localStorage.getItem('lawyerregister_gid');

            var url = 'api/registerLawyer/Getlawyerdetails';
            var param = {
                lawyerregister_gid: $scope.lawyerregister_gid
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.txtlawyerref_noedit = resp.data.txtlawyerref_noedit;
                $scope.txtlawyernameedit = resp.data.txtlawyernameedit;
                $scope.txtdobedit = resp.data.dobedit;
                $scope.txtdobedit = Date.parse($scope.txtdobedit);
                $scope.genderedit = resp.data.genderedit;
             
                $scope.txtmobilenoedit = resp.data.txtmobilenoedit;
                $scope.txttelephonenoedit = resp.data.txttelephonenoedit;
                $scope.txtemailaddressedit = resp.data.txtemailaddressedit;
                $scope.txtqualificationedit = resp.data.txtqualificationedit;
                $scope.txtdateenrol_counciledit = resp.data.txtdateenrol_counciledit;
                $scope.txtdateenrol_counciledit = Date.parse($scope.txtdateenrol_counciledit);           
                $scope.txtpannoedit = resp.data.txtpannoedit;
                $scope.txtexperienceedit = resp.data.txtexperienceedit;
                $scope.txtplace_practiceedit = resp.data.txtplace_practiceedit;
                $scope.txtaddress1edit = resp.data.txtaddress1edit;
                $scope.txtaddress2edit = resp.data.txtaddress2edit;
                $scope.txtstateedit = resp.data.txtstateedit;
                $scope.txtcountryedit = resp.data.txtcountryedit;
                $scope.txtpostalcodeedit = resp.data.txtpostalcodeedit;
                $scope.filename_list = resp.data.UploadDocumentList;
                $scope.txtenrolment_no = resp.data.txtenrolment_no;
                $scope.txtaadhar_noedit = resp.data.aadhar_no;
                $scope.txtbank_nameedit = resp.data.bank_name;
                $scope.txtaccount_noedit = resp.data.account_no;
                $scope.txtifsc_codeedit = resp.data.ifsc_code;
                unlockUI();
                console.log(resp.data.txtlawyernameedit);
            });        
        }

        $scope.lawyerUpdate = function () {                      
            var params = {
                lawyerregister_gid: $scope.lawyerregister_gid,
                txtlawyerref_noedit: $scope.txtlawyerref_noedit,
                txtlawyernameedit: $scope.txtlawyernameedit,
                dob_edit: $scope.txtdobedit,
                genderedit: $scope.genderedit,
                txtfather_nameedit: $scope.txtfather_nameedit,
                txtmobilenoedit: $scope.txtmobilenoedit,
                txttelephonenoedit: $scope.txttelephonenoedit,
                txtemailaddressedit: $scope.txtemailaddressedit,
                txtqualificationedit: $scope.txtqualificationedit,
                txt_dateenrol_counciledit: $scope.txtdateenrol_counciledit,
                txtgstnoedit: $scope.txtgstnoedit,
                txtpannoedit: $scope.txtpannoedit,
                txtexperienceedit: $scope.txtexperienceedit,
                txtplace_practiceedit: $scope.txtplace_practiceedit,
                txtaddress1edit: $scope.txtaddress1edit,
                txtaddress2edit: $scope.txtaddress2edit,
                txtstateedit: $scope.txtstateedit,
                txtcountryedit: $scope.txtcountryedit,
                txtpostalcodeedit: $scope.txtpostalcodeedit,
                txtenrolment_no: $scope.txtenrolment_no,
                aadhar_no: $scope.txtaadhar_noedit,
                bank_name: $scope.txtbank_nameedit,
                account_no: $scope.txtaccount_noedit,
                ifsc_code: $scope.txtifsc_codeedit
            }
            console.log(params);
            var url = 'api/registerLawyer/lawyerUpdate';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    $state.go('app.lawyerManagement');
                    Notify.alert('Lawyer Details Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating Lawyer Details')
                }              
            });
        }

        $scope.lawyerback = function () {
            var url = 'api/registerlawyer/tempdelete';
            lockUI()
            SocketService.get(url).then(function (resp) {
                
            });
            $state.go('app.lawyerManagement');
        }

        $scope.document_cancelclick = function (val, data) {
            var params = { document_gid: val };
            var url = 'api/registerLawyer/documentdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                  
                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        $scope.photo = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "photo");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "photo");
            $scope.uploadfrm = frm;
            localStorage.setItem($scope.uploadfrm, '$scope.uploadfrm');
           
            var url = 'api/registerLawyer/Uploadphoto';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
               // $scope.filename_list = resp.data.filename_list;

                $("#adduploadphoto").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.hidephotodiv = false;
                    $scope.showphotodiv = true;
                 
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported')
                }
            });

        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.lawyerregister_gid = localStorage.getItem('lawyerregister_gid');
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type);
            frm.append('lawyerregister_gid',$scope.lawyerregister_gid);
            frm.append('project_flag', "Default");

            $scope.uploadfrm = frm;
            var url = 'api/registerLawyer/edituploadEnrollcertificate';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;
                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert('Document Uploaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')
                }
            });
        }

        //Checking Enrolment No duplication
        $scope.enrolmentno_validation=function()
        {
            var params = {
                enrolment_no:$scope.txtenrolment_no
            }
            var url = 'api/registerlawyer/Getenrolment_validation';

            SocketService.getparams(url,params).then(function (resp) {
                console.log(resp.data.enrolment_no);
                if (resp.data.enrolment_no == 'Y') {
                    $scope.validationMsg = true;
                }
                else {
                    $scope.validationMsg = false;
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('editRequestcompliancecontroller', editRequestcompliancecontroller);

    editRequestcompliancecontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','cmnfunctionService'];

    function editRequestcompliancecontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'editRequestcompliancecontroller';

        activate();


        function activate() {
            $scope.others_title = false;
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.opened = true;
            };

            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.closed = true;
            };
            
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');
            var url = 'api/requestCompliance/Getrequestcompliance';

            var param = {
                requestcompliance_gid: $scope.requestcompliance_gid
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtrequestref_noedit = resp.data.requestref_no;
                $scope.txtrequest_dateedit = resp.data.request_date;
              
                $scope.cborequest_typeedit = resp.data.requesttype_gid;
                $scope.txtothers_title = resp.data.others_title;
                $scope.txtremarksedit = resp.data.remarks;
                $scope.txtdocument_typeedit = resp.data.document_type;             
                $scope.filename_list = resp.data.upload_list;
                if (resp.data.request_type == 'Others') {
                    $scope.others_title = true;
                }
          
                else {
                    $scope.others_title = false;
                }
                unlockUI();
                
            });
           
            var url = 'api/requestCompliance/getrequesttype2compliance';

            SocketService.get(url).then(function (resp) {
                $scope.requesttype_list = resp.data.requesttype_list;

            });

            var url = 'api/requestCompliance/reqtempdelete';
            SocketService.get(url).then(function (resp) {  
           });
        }
        $scope.onselectedrequsttype = function () {
            var url = 'api/requestCompliance/Geteditrequesttype';
            var param = {
                requesttype_gid: $scope.cborequest_typeedit
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                if (resp.data.request_type == 'Others') {
                    $scope.others_title = true;
                }
                else {
                    $scope.others_title = false;
                }
            });
        }
        $scope.requestupdate = function () {
           
            var url = 'api/requestCompliance/editmandatory_check';
            var param = {
                requestcompliance_gid: $scope.requestcompliance_gid
            };
          
            SocketService.getparams(url, param).then(function (resp) {
               
                if(resp.data.status == false)
                {
                    Notify.alert(resp.data.message, 'warning')
                }
                else {

            var params = {
                requestcompliance_gid: $scope.requestcompliance_gid,
                requestref_no: $scope.txtrequestref_noedit,              
                requesttype_gid: $scope.cborequest_typeedit,
                others_title:$scope.txtothers_title,
                remarks:$scope.txtremarksedit,
            }
         
            var url = 'api/requestCompliance/updateRequestcompliance';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    $state.go('app.requestCompliancesummary');
                    Notify.alert(resp.data.message,'success')
                }

                else {
                    Notify.alert(resp.data.message, 'warning')
                }
                activate();
            });
                }
                
            });
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.lawfirm_gid = localStorage.getItem('requestcompliance_gid');
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_type', $scope.document_type);
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");

            $scope.uploadfrm = frm;
            var url = 'api/requestCompliance/Edituploaddocument';

            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.upload_list;
                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    //  Notify.alert('Document Uploaded Successfully..!!', 'success')

                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported')

                }

            });
        }
        $scope.document_cancelclick = function (val, data) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/documentdelete';
            lockUI()
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.uploaddocument_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    unlockUI()
                    //activate();
                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        $scope.requestback = function () {
            var url = 'api/requestCompliance/tempdelete';          
            SocketService.get(url).then(function (resp) {
                
            });

            $state.go("app.requestCompliancesummary");
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lawfirmSummarycontroller', lawfirmSummarycontroller);

    lawfirmSummarycontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function lawfirmSummarycontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lawfirmSummarycontroller';

        activate();


        function activate() {
            $scope.totalDisplayed = 100;
            var url = 'api/lawFirm/lawfirmdetail';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.lawfirm_data = resp.data.lawfirm_list;
                $scope.total = $scope.lawfirm_data.length;
            });

        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.popuplawfirm = function () {
           
            $state.go('app.addLawfirm');
        }

        $scope.edit = function (val) {
            $scope.lawfirm_gid = val;
            $scope.lawfirm_gid = localStorage.setItem('lawfirm_gid', val);
            $state.go('app.editLawfirm');
 
        }

        $scope.delete = function (lawfirm_gid) {
            var params = {
                lawfirm_gid: lawfirm_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/lawFirm/lawfirmDelete';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                        }
                        else {
                            Notify.alert('Error Occurred ', {
                                status: 'warning',
                                pos: 'top-right',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                    SweetAlert.swal('Deleted Successfully');
                }
            });
        };
   
        $scope.Viewfirm = function (val) {
            $scope.lawfirm_gid = val;
            $scope.lawfirm_gid = localStorage.setItem('lawfirm_gid', val);
            $state.go('app.viewLawfirm');

        }
        $scope.logincreation = function (lawfirm_gid) {
            var params = {
                lawfirm_gid: lawfirm_gid
            }
            var modalInstance = $modal.open({
                templateUrl: '/lawfirmLoginContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                var url = 'api/lawFirm/lawfirmView'
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.firm_refno = resp.data.firm_refno;
                    $scope.firm_name = resp.data.firm_name;
                });
                $scope.sendaccouncreate = function () {
                    var params = {
                        lawfirmuser_code: $scope.firm_refno,
                        lawfirmuser_password: $scope.lawfirm_userpassword,
                    
                        lawfirm_gid: lawfirm_gid
                    }
                    console.log(params);
                    var url = "api/lawFirm/lawfirmlogincreation";
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        console.log(resp.data.status);
                        if (resp.data.status == true) {

                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }
            }
        }

        $scope.viewlogin = function (lawfirm_gid) {
            var params = {
                lawfirm_gid: lawfirm_gid
            }
            $scope.resetpassword = false;
            var modalInstance = $modal.open({
                templateUrl: '/ViewlawfirmLoginContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.mandatorycheck = function () {
                   
                    $scope.mandatoryfields = false;
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                $scope.resetpwd = function () {
                    $scope.resetpassword = true;
                    $scope.lawfirmruser_password = '';
                }
                var url = 'api/lawFirm/lawfirmView'
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.firm_refno = resp.data.firm_refno;
                    $scope.firm_name = resp.data.firm_name;
                    $scope.lawfirmuser_password = resp.data.lawfirmuser_password;
                    $scope.loginuserstatus = resp.data.lawfirmuser_status;
                    $scope.lawyerstatus_remarks = resp.data.block_remarks;
                    $scope.block_remarks = resp.data.block_remarks;
                });
                $scope.sendaccounstatus = function () {
                    if ($scope.loginuserstatus != 'Block') {

                        if ($scope.lawyerstatus_remarks == '') {
                            var lsblock_remarks = $scope.txtblockremarks
                        }
                        else {
                            lsblock_remarks = $scope.lawyerstatus_remarks
                        }
                        var params = {

                            lawfirmuser_activation: $scope.loginuserstatus,
                            lawfirm_gid: lawfirm_gid,
                            blockremarks: lsblock_remarks,
                            lawfirmuser_password: $scope.lawfirmuser_password
                        }
                        console.log(params);
                        var url = "api/lawFirm/lawfirmactivationstatus";
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                                activate();
                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });
                    }
                    else {
                        if (($scope.txtblockremarks == '') || ($scope.txtblockremarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                         
                            $scope.mandatoryfields = false;
                            if ($scope.lawyerstatus_remarks == '') {
                                var lsblock_remarks = $scope.txtblockremarks
                            }
                            else {
                                lsblock_remarks = $scope.lawyerstatus_remarks
                            }
                            var params = {

                                lawfirmuser_activation: $scope.loginuserstatus,
                                lawfirm_gid: lawfirm_gid,
                                blockremarks: lsblock_remarks,
                                lawfirmuser_password: $scope.lawfirmuser_password
                            }

                            var url = "api/lawFirm/lawfirmactivationstatus";
                            SocketService.post(url, params).then(function (resp) {
                                if (resp.data.status == true) {
                                    $modalInstance.close('closed');
                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                    activate();
                                }
                                else {
                                    $modalInstance.close('closed');
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                }
                            });
                        }
                    }
                }
            }
        }
        $scope.remarks = function () {
            $scope.mandatoryfields = false;
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('angle')
        .controller('lawyerManagementcontroller', lawyerManagementcontroller);
    lawyerManagementcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];
    function lawyerManagementcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lawyerManagementcontroller';
        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            var url = 'api/registerLawyer/lawyerdetail';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.lawyer_data = resp.data.lawyer_list;
              
                $scope.total = $scope.lawyer_data.length;
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.popuplawyer = function () {
            $state.go('app.registerLawyer');
        }

        $scope.edit = function (val) {
            $scope.lawyerregister_gid = val;
            $scope.lawyerregister_gid = localStorage.setItem('lawyerregister_gid', val);
            $state.go('app.editRegisterlawyer');
        }
       
        $scope.delete = function (lawyerregister_gid) {
            var params = {
                lawyerregister_gid: lawyerregister_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/registerLawyer/lawyerDelete';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            SweetAlert.swal(resp.data.message);
                        }
                        else {
                            SweetAlert.swal(resp.data.message);
                            activate();
                        }
                    });
                }
            });
        };

        $scope.Viewfirm = function (val) {
            $scope.lawyerregister_gid = val;
            $scope.lawyerregister_gid = localStorage.setItem('lawyerregister_gid', val);
            $state.go('app.viewLawyer');
        }

        $scope.logincreation = function (lawyerregister_gid) {
            var params = {
                lawyerregister_gid: lawyerregister_gid
            }
            var modalInstance = $modal.open({
                templateUrl: '/lawyerLoginContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                var url = 'api/registerLawyer/lawyerView';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.lawyerref_no = resp.data.lawyerref_no;
                    $scope.lawyer_name = resp.data.lawyer_name;
                    $scope.email_address = resp.data.email_address;
                });
                $scope.sendaccouncreate = function () {
                    var params = {
                        lawyeruser_code: $scope.lawyerref_no,
                        lawyer_userpassword: $scope.lawyer_userpassword,
                        email_address: $scope.email_address,
                        lawyerregister_gid: lawyerregister_gid
                    }
                  
                    var url = "api/registerLawyer/lawyerlogincreation";
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        console.log(resp.data.status);
                        if (resp.data.status == true) {

                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }
            }
        }

        $scope.viewlogin = function (lawyerregister_gid) {
            var params = {
                lawyerregister_gid: lawyerregister_gid
            }
            $scope.resetpassword = false;
            var modalInstance = $modal.open({
                templateUrl: '/ViewlawyerLoginContent.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.mandatorycheck = function () {
                   
                    $scope.mandatoryfields = false;
                }
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                $scope.resetpwd=function()
                {
                    $scope.resetpassword = true;
                    $scope.lawyeruser_password = '';
                }
                var url = 'api/registerLawyer/lawyerView';
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.lawyerref_no = resp.data.lawyerref_no;
                    $scope.lawyer_name = resp.data.lawyer_name;
                    $scope.lawyeruser_password = resp.data.lawyeruser_password;
                    $scope.loginuserstatus = resp.data.lawyeruser_status;
                    $scope.lawyerstatus_remarks = resp.data.block_remarks;
                    $scope.block_remarks = resp.data.block_remarks;
                    console.log(resp.data.block_remarks)
                });
                $scope.sendaccounstatus = function () {
                    if ($scope.loginuserstatus != 'Block') {

                        if ($scope.lawyerstatus_remarks == '') {
                            var lsblock_remarks = $scope.txtblockremarks
                        }
                        else {
                            lsblock_remarks = $scope.lawyerstatus_remarks
                        }
                        var params = {

                            lawyeruser_activation: $scope.loginuserstatus,
                            lawyerregister_gid: lawyerregister_gid,
                            blockremarks: lsblock_remarks,
                            lawyeruser_password: $scope.lawyeruser_password
                        }

                        var url = "api/registerLawyer/lawyeractivationstatus";
                        SocketService.post(url, params).then(function (resp) {
                            if (resp.data.status == true) {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                                activate();
                            }
                            else {
                                $modalInstance.close('closed');
                                Notify.alert(resp.data.message, {
                                    status: 'warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                unlockUI();
                            }
                        });
                    }
                    else {
                        if (($scope.txtblockremarks == '') || ($scope.txtblockremarks == undefined))
                        {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            console.log($scope.txtblockremarks);
                            $scope.mandatoryfields = false;
                            if ($scope.lawyerstatus_remarks == '') {
                                var lsblock_remarks = $scope.txtblockremarks
                            }
                            else {
                                lsblock_remarks = $scope.lawyerstatus_remarks
                            }
                            var params = {

                                lawyeruser_activation: $scope.loginuserstatus,
                                lawyerregister_gid: lawyerregister_gid,
                                blockremarks: lsblock_remarks,
                                lawyeruser_password: $scope.lawyeruser_password
                            }

                            var url = "api/registerLawyer/lawyeractivationstatus";
                            SocketService.post(url, params).then(function (resp) {
                                if (resp.data.status == true) {
                                    $modalInstance.close('closed');
                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                    activate();
                                }
                                else {
                                    $modalInstance.close('closed');
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    unlockUI();
                                }
                            });
                        }
                    }
                }
            }
        }
        $scope.remarks=function()
        {
            $scope.mandatoryfields = false;
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lawyerPaymentcontroller', lawyerPaymentcontroller);

    lawyerPaymentcontroller.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location','$route', 'ngTableParams'];

    function lawyerPaymentcontroller($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lawyerPaymentcontroller';

        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            var url = "api/LawyerInvoice/GetPaymentSummary";
            SocketService.get(url).then(function (resp) {
                $scope.invoicelist = resp.data.invoicedtl;
                $scope.total = $scope.invoicelist.length;
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.viewinvoice = function (caseref_gid) {
            localStorage.setItem('caseref_gid', caseref_gid)
            $state.go('app.LglTrnInvoiceSummary');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lawyerPaymentViewcontroller', lawyerPaymentViewcontroller);

    lawyerPaymentViewcontroller.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams', 'DownloaddocumentService'];

    function lawyerPaymentViewcontroller($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lawyerPaymentViewcontroller';

        activate();

        function activate() {
            $scope.lawyerinvoicedtl_gid = localStorage.getItem('lawyerinvoicedtl_gid')
            var params = {
                lawyerinvoicedtl_gid: localStorage.getItem('lawyerinvoicedtl_gid')
            }
            var url = "api/LawyerInvoice/getinvoicedetails";
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp);
                $scope.invoicedetail = resp.data;
                $scope.filename_list = resp.data.uploaddocument
            });

        }

        //$scope.downloads = function (val1, val2) {
         
        //    var phyPath = val1;
        //    var relPath = phyPath.split("StoryboardAPI");
        //    var relpath1 = relPath[1].replace("\\", "/");
        //    var hosts = window.location.host;
        //    var prefix = location.protocol + "//";
        //    var str = prefix.concat(hosts, relpath1);
        //    var link = document.createElement("a");
        //    var name = val2.split(".")
        //    link.download = name[0];
        //    var uri = str;
        //    link.href = uri;
        //    link.click();
        //}
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.cancel = function () {
            $state.go('app.LglTrnInvoiceSummary');
        }
        $scope.updatestatus = function () {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        lawyerinvoicedtl_gid: localStorage.getItem('lawyerinvoicedtl_gid')
                    }
                console.log(params);
                lockUI();
                var url = 'api/LawyerInvoice/getinvoicedetails';

                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.service_type = resp.data.servicetype_gid;
                    $scope.caseref_no = resp.data.caseref_gid;
                    $scope.invoiceref_no = resp.data.invoice_refno;
                    $scope.case_type = resp.data.case_type;
                    $scope.invoice_amount = resp.data.invoice_amount;
                    $scope.invoice_date = resp.data.invoice_date;
                    $scope.servicerender_date = resp.data.servicerender_date;
                    $scope.invoice_remarks = resp.data.invoice_remarks;
                    console.log(resp.data.invoice_refno)
                });
                $scope.submit = function () {

                    var url = 'api/LawyerInvoice/updateinvoicestatus';
                    lockUI();
                    var params = {
                        lawyerinvoicedtl_gid: localStorage.getItem('lawyerinvoicedtl_gid'),
                        invoice_status: $scope.cbostatus
                    }
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                           activate()
                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate()
                    });

                    $modalInstance.close('closed');

                }
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalapprovalmgmt', legalapprovalmgmt);

    legalapprovalmgmt.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function legalapprovalmgmt($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalapprovalmgmt';

        activate();

        function activate() {
            var url = 'api/raiseLegalSR/legalSRAppovesummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.RaiselegalSR_list;
                
            });
        }
        $scope.approve360 = function (legalsr_gid, customer_gid, approval_status) {
            $scope.legalsr_gid = localStorage.setItem('legalsr_gid', legalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $scope.approval_status = localStorage.setItem('approval_status', approval_status);
            $state.go('app.legalSRapprovemgmt360');
            console.log(customer_gid);
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSLNmgmt', legalSLNmgmt);

    legalSLNmgmt.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function legalSLNmgmt($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSLNmgmt';

        activate();


        function activate() {
            var url = 'api/raiseLegalSR/getlegalSRAppovemgmtSummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.RaiselegalSR_list;
              console.log(resp.data);
            });

        }

        $scope.raiseapprove = function (legalsr_gid, customer_gid, auth_status) {
            $scope.legalsr_gid = localStorage.setItem('legalsr_gid', legalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $scope.auth_status = localStorage.setItem('auth_status', auth_status);
            $state.go('app.legalSR360');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSR360controller', legalSR360controller);

    legalSR360controller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', 'DownloaddocumentService','cmnfunctionService'];

    function legalSR360controller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSR360controller';

        activate();

        function activate() {
            $scope.uploaddclickdiv = true;
            $scope.mailclickdiv = true;
            
            $scope.legalsr_gid = localStorage.getItem('legalsr_gid');
            var params = {
                customer_gid: localStorage.getItem('customer_gid'),
                legalsr_gid :localStorage.getItem('legalsr_gid')
            }
            var url = "api/raiseLegalSR/Getcustomerdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerdetails = resp.data;
                //console.log(resp.data);
            });
            var url = 'api/raiseLegalSR/GetDemandNoticedtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.demandnotice_list = resp.data.demandnotice_list;
                $scope.demand_status = resp.data.demand_status;

            });
            var url = "api/raiseLegalSR/getsamgdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.constitution = resp.data.constitution;
                $scope.financed_by = resp.data.financed_by;
                $scope.deal_year = resp.data.deal_year;
                $scope.address = resp.data.address;
                $scope.business_activity = resp.data.business_activity;
                $scope.email_id = resp.data.email_id;
                $scope.primary_securities = resp.data.primary_securities;
                $scope.collateral_securities = resp.data.collateral_securities;
                $scope.details_UDC_PDC = resp.data.details_UDC_PDC;
                $scope.unit_working_status = resp.data.unit_working_status;
                $scope.other_banker_exposures = resp.data.other_banker_exposures;
                $scope.cibil_data = resp.data.cibil_data;
                $scope.restructuring_data = resp.data.restructuring_data;
                $scope.status_current_overdue = resp.data.status_current_overdue;
                $scope.other_group_companies = resp.data.other_group_companies;
                $scope.meeting_details = resp.data.meeting_details;
                $scope.cycles_sanctiondated = resp.data.cycles_sanctiondated;
                $scope.limit_sanction = resp.data.limit_sanction;
                $scope.churing_account = resp.data.churing_account;
                $scope.created_date = resp.data.created_date;
                $scope.statuslegal_action = resp.data.statuslegal_action;
                $scope.instances_PTP = resp.data.instances_PTP;
                $scope.demandnotice_details = resp.data.demandnotice_details;
                $scope.other_banker_borrower = resp.data.other_banker_borrower;
                $scope.auth_remarks_list = resp.data.auth_remarks_list;
            });
            var url = "api/raiseLegalSR/getcustomerPromoter";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerPromotorlist = resp.data.customerPromoter;
            });

            var url = 'api/raiseLegalSR/getcustomerGuarantors';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.guarantors_list = resp.data.customerGuarantors;
                $scope.remarks = resp.data.remarks;
            });

            var url = "api/CustomerDashboard/Getcustomerloandetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loandetails = resp.data.loandtl;
            });
            var param1 = {
                raiselegalSR_gid: $scope.legalsr_gid
            }

            var url = 'api/raiseLegalSR/Getcontactdtl';

            SocketService.getparams(url, param1).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });
            var url = "api/CustomerDashboard/Getcustomerdocumentdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.filename_list;
            });

            var url = "api/CustomerDashboard/Getcustomermaildetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.composemail_list = resp.data.composemail;
            });

            var url = "api/requestCompliance/lawyerList";
            SocketService.get(url).then(function (resp) {
                $scope.assignlawyerlist = resp.data.assignlawyer;
            });

            var url = "api/CustomerDashboard/GetLawyerPayment";
            SocketService.get(url).then(function (resp) {
                $scope.invoicelist = resp.data.invoicedtl;
            });

            var param = {
                legalSR_gid: localStorage.getItem('legalsr_gid')
            }
            var url = "api/raiseLegalSR/getlegalSRapprovals";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.approvals = resp.data.approvallist;
               
            });
       
            var url = "api/CustomerDashboard/GetlawyerSRassign"
            SocketService.getparams(url, param).then(function (resp) {
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assignlawyer = resp.data.assign_lawyergid;
                $scope.assignedlawyer_by = resp.data.assignedlawyer_by;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.SLN_remarks = resp.data.SLN_remarks;
            });

            var url = "api/raiseLegalSR/getSLNdocument";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.seeklawyerdocument=resp.data.uploadseek_list;
            });
           
            var url = "api/raiseLegalSR/getcollateralinfo";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.customerCollateral = resp.data.customerCollateral;
            });
            var url = "api/raiseLegalSR/getrequesteddtl";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.requesteddetails = resp.data;
            });
        }

        $scope.uploadclick = function () {
            $scope.uploadddiv = true;
            $scope.uploaddclickdiv = false;
        }

        $scope.cancelupload = function () {
            $scope.uploadddiv = false;
            $scope.uploaddclickdiv = true;
            $("#addupload").val('');
        }

        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('customer_gid', localStorage.getItem('customer_gid'));
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }

        $scope.handleFile = function () {
            var url = 'api/CustomerDashboard/UploadDocument';

            SocketService.postFile(url, $scope.uploadfrm).then(function (resp){
                $scope.filename_list = resp.data.filename_list;
                $("#addupload").val('');

              
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type='';
                    Notify.alert('Document Uploaded Successfully', 'success')

                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported','danger')


                }
            });

        
        }
                    
                     

                
        $scope.downloads = function (val1, val2) {
            var phyPath = val1;
            //console.log(val1);
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            //console.log(str);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.createmail = function () {

            var modalInstance = $modal.open({
                templateUrl: '/CustomerCreateMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.sendcomposemail = function () {
                    var params = {
                        to_mail: $scope.tomail,
                        cc_mail: $scope.ccmail,
                        bcc_mail: $scope.bccmail,
                        subject_mail: $scope.mailsubject,
                        content_mail: $scope.mailcontent,
                        customer_gid: localStorage.getItem('customer_gid')
                    }

                    var url = "api/CustomerDashboard/sendcomposemail";
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
            }
        }

        $scope.viewMailContent = function (composemail_gid) {
    
            var params = {
                composemail_gid: composemail_gid
            }

            var modalInstance = $modal.open({
                templateUrl: '/CustomerViewMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                var url = "api/CustomerDashboard/Getcustomermail";
                SocketService.getparams(url, params).then(function (resp) {
                    //console.log(resp);
                    $scope.frommail_view = resp.data.from_mail;
                    $scope.tomail_view = resp.data.to_mail;
                    $scope.ccmail_view = resp.data.cc_mail;
                    $scope.bccmail_view = resp.data.bcc_mail;
                    $scope.mailsubject_view = resp.data.subject_mail;
                    $scope.mailcontent_view = resp.data.content_mail;
                    $scope.created_by = resp.data.created_by;
                    $scope.created_date = resp.data.created_date;
                });
            }
            
        }

        $scope.legarSRapprove= function ()
        {
          
            var params = {
                legalsr_gid:localStorage.getItem('legalsr_gid'),
                approval_remarks:$scope.txtremarks
            }
           
            var url = 'api/raiseLegalSR/legalSRApproval';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                 
                    Notify.alert(' Successfully..!!', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
                activate();
            });
        }

        $scope.legalSRreject = function () {
            var params = {
                legalsr_gid: $scope.legalsr_gid
            }

            var url = 'api/raiseLegalSR/legalSRreject';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    Notify.alert('Legal SR Hold', 'success')


                }
                else {
                    unlockUI();
                    Notify.alert('Error Occured While Updating the Status', 'warning')

                }

            });
        }

        $scope.assignLawyerSubmit = function () {
            var lawyeruser_gid = $scope.cboassignlawyer;
            var lawyeruser_name = $('#assignlawyer :selected').text();


            var params = {
                legalSR_gid: localStorage.getItem('legalsr_gid'),
                lawyeruser_gid: $scope.cboassignlawyer
              
            }
            //console.log(params);
            var url = "api/raiseLegalSR/tmpSLNdocumentclear";
            SocketService.get(url).then(function (resp) {

            });

            var modalInstance = $modal.open({
                templateUrl: '/lawyeruploadContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.lawyeruser_name = lawyeruser_name;

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.uploadseek = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('document_name', $scope.documentname);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;

                    var url = 'api/raiseLegalSR/SLNUpload';

                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                        $("#addSLNupload").val('');

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                    });

                }

                $scope.uploadcancel = function (tmpSLN_documentgid) {
                    var seekupload = {
                        tmpSLN_documentgid: tmpSLN_documentgid
                    }
                    //console.log(seekupload);
                    var url = 'api/raiseLegalSR/SLNuploadcancel';
                    SocketService.getparams(url, seekupload).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                    });
                }

                $scope.assignconfirm = function () {
                    var params = {
                        legalSR_gid: localStorage.getItem('legalsr_gid'),
                        lawyeruser_gid: lawyeruser_gid,
                        SLN_remarks: $scope.SLNlawyerremarks
                    }
                    //console.log(params);
                    lockUI();
                    var url = "api/CustomerDashboard/assignSRLawyer";
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                            unlockUI();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                    });
                }

            }


        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = "";
          }


        $scope.back = function () {
            $state.go('app.legalSLNmgmt');
           
        }
       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSRapproval', legalSRapproval);

    legalSRapproval.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function legalSRapproval($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSRapproval';

        activate();


        function activate() {
            var url = 'api/raiseLegalSR/GetraiselegalSR';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.RaiselegalSR_list;
            //    console.log(resp.data);
            });

        }

        $scope.raiseapprove = function (legalsr_gid, customer_gid, auth_status) {
            
            
            $location.url('app/legalSRapproval360?lslegalsr_gid=' + legalsr_gid + '&customer_gid=' + customer_gid + '&lsauth_status=' + auth_status);
            //$scope.legalsr_gid = localStorage.setItem('legalsr_gid', legalsr_gid);
            //$scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            //$scope.auth_status = localStorage.setItem('auth_status', auth_status);
            //$state.go('app.legalSRapproval360');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSRapproval360', legalSRapproval360);

    legalSRapproval360.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams','cmnfunctionService'];

    function legalSRapproval360($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSRapproval360';

        activate();

        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.uploaddclickdiv = true;
            var legalsr_gid = $location.search().lslegalsr_gid;
            var auth_status = $location.search().lsauth_status;
            var customer_gid = $location.search().customer_gid;
           
             $scope.legalsr_gid = legalsr_gid;
            $scope.auth_status = auth_status;
            //$scope.legalsr_gid = localStorage.getItem('legalsr_gid');
            //$scope.auth_status = localStorage.getItem('auth_status');


            var params = {

                customer_gid: customer_gid,
                legalsr_gid: legalsr_gid
            }

            var url = "api/raiseLegalSR/Getcustomerdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.remarks = resp.data.remarks;
            });
            var url = 'api/raiseLegalSR/GetDemandNoticedtl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.demandnotice_list = resp.data.demandnotice_list;
                $scope.demand_status = resp.data.demand_status;


            });
            var url = "api/raiseLegalSR/getsamgdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.constitution = resp.data.constitution;
                $scope.financed_by = resp.data.financed_by;
                $scope.deal_year = resp.data.deal_year;
                $scope.address = resp.data.address;
                $scope.business_activity = resp.data.business_activity;
                $scope.email_id = resp.data.email_id;
                $scope.primary_securities = resp.data.primary_securities;
                $scope.collateral_securities = resp.data.collateral_securities;
                $scope.details_UDC_PDC = resp.data.details_UDC_PDC;
                $scope.unit_working_status = resp.data.unit_working_status;
                $scope.other_banker_exposures = resp.data.other_banker_exposures;
                $scope.cibil_data = resp.data.cibil_data;
                $scope.restructuring_data = resp.data.restructuring_data;
                $scope.status_current_overdue = resp.data.status_current_overdue;
                $scope.other_group_companies = resp.data.other_group_companies;
                $scope.meeting_details = resp.data.meeting_details;
                $scope.cycles_sanctiondated = resp.data.cycles_sanctiondated;
                $scope.limit_sanction = resp.data.limit_sanction;
                $scope.churing_account = resp.data.churing_account;
                $scope.created_date = resp.data.created_date;
                $scope.statuslegal_action = resp.data.statuslegal_action;
                $scope.instances_PTP = resp.data.instances_PTP;
                $scope.demandnotice_details = resp.data.demandnotice_details;
                $scope.other_banker_borrower = resp.data.other_banker_borrower;
                $scope.auth_remarks_list = resp.data.auth_remarks_list;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
              
               
                
            });

            var url = "api/raiseLegalSR/getcustomerPromoter";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerPromotorlist = resp.data.customerPromoter;
            });
            
            var url = 'api/raiseLegalSR/getcustomerGuarantors';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.guarantors_list = resp.data.customerGuarantors;
                $scope.remarks = resp.data.remarks;
            });


            var url = "api/CustomerDashboard/Getcustomerloandetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loandetails = resp.data.loandtl;
            });

            var url = "api/CustomerDashboard/Getcustomerdocumentdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.filename_list;
            });

            var url = "api/CustomerDashboard/Getcustomermaildetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.composemail_list = resp.data.composemail;
            });
            var param1 = {
                raiselegalSR_gid: $scope.legalsr_gid
            }
            
            var url = 'api/raiseLegalSR/Getcontactdtl';
           
            SocketService.getparams(url, param1).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });
            var param = {
                legalsr_gid: $scope.legalsr_gid
            }
            var url = "api/raiseLegalSR/getlegalSRapprovals";
            SocketService.getparams(url, param).then(function (resp) {
             
                $scope.approvals = resp.data.approvallist;
            });

            var url = "api/raiseLegalSR/getcollateralinfo";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.customerCollateral = resp.data.customerCollateral;
            });
            var url = "api/raiseLegalSR/getrequesteddtl";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.requesteddetails = resp.data;
            });
            
        }

        $scope.uploadclick = function () {
            $scope.uploadddiv = true;
            $scope.uploaddclickdiv = false;
        }

        $scope.cancelupload = function () {
            $scope.uploadddiv = false;
            $scope.uploaddclickdiv = true;
            $("#addupload").val('');
        }

        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('customer_gid', localStorage.getItem('customer_gid'));
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }

        $scope.handleFile = function () {
            var url = 'api/CustomerDashboard/UploadDocument';

            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.filename_list;
                $("#addupload").val('');

                if (resp.data.status == true) {

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        $scope.downloads = function (val1, val2) {
            console.log(val1);
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.createmail = function () {

            var modalInstance = $modal.open({
                templateUrl: '/CustomerCreateMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.sendcomposemail = function () {
                    var params = {
                        to_mail: $scope.tomail,
                        cc_mail: $scope.ccmail,
                        bcc_mail: $scope.bccmail,
                        subject_mail: $scope.mailsubject,
                        content_mail: $scope.mailcontent,
                        customer_gid: localStorage.getItem('customer_gid')
                    }

                    var url = "api/CustomerDashboard/sendcomposemail";
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            //var url = "api/CustomerDashboard/Getcustomermaildetails";
                            //SocketService.getparams(url, params).then(function (resp) {
                            //    $scope.composemail_list = resp.data.composemail;
                            //});
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
            }
        }

        $scope.viewMailContent = function (composemail_gid) {
            var params = {
                composemail_gid: composemail_gid
            }

            var modalInstance = $modal.open({
                templateUrl: '/CustomerViewMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                var url = "api/CustomerDashboard/Getcustomermail";
                SocketService.getparams(url, params).then(function (resp) {
                    console.log(resp);
                    $scope.frommail_view = resp.data.from_mail;
                    $scope.tomail_view = resp.data.to_mail;
                    $scope.ccmail_view = resp.data.cc_mail;
                    $scope.bccmail_view = resp.data.bcc_mail;
                    $scope.mailsubject_view = resp.data.subject_mail;
                    $scope.mailcontent_view = resp.data.content_mail;
                    $scope.created_by = resp.data.created_by;
                    $scope.created_date = resp.data.created_date;
                });
            }

        }

        $scope.legarSRapprove = function () {
         
            var params = {
                legalsr_gid: $scope.legalsr_gid,
                approval_remarks: $scope.txtremarks
            }

            var url = 'api/raiseLegalSR/legalSRApproval';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $scope.auth_status = localStorage.setItem('auth_status', 'Approved');
                    activate();
                    Notify.alert('Legal SR Approved Successfully..!!', 'success')
                    $state.go('app.legalSRapproval')
                }
                else {
                    unlockUI();
                    Notify.alert('You are Not Able to Approve because Approval Hiearchy Not Assigned', 'warning')
                }
                activate();
            });
        }

        $scope.legalSRreject = function () {
            var params = {
                legalsr_gid: $scope.legalsr_gid,
                approval_remarks: $scope.txtremarks
            }

            var url = 'api/raiseLegalSR/legalSRreject';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $location.url('app/legalSRapproval?lstab=legalsr');
                    Notify.alert('Legal SR in Hold', 'success')


                }
                else {
                    unlockUI();
                    Notify.alert('Error Occured While Updating the Status', 'warning')

                }

            });
        }


        $scope.legalSRrejected = function () {
            var params = {
                legalsr_gid: $scope.legalsr_gid,
                approval_remarks: $scope.txtremarks
            }

            var url = 'api/raiseLegalSR/legalSRrejected';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $location.url('app/legalSRapproval?lstab=legalsr');
                    Notify.alert('Legal SR Rejected', 'success')


                }
                else {
                    unlockUI();
                    Notify.alert('Error occured while reject', 'warning')

                }

            });
        }

       
        //$scope.legarSRreapprove = function () {

        //    var params = {
        //        legalsr_gid: localStorage.getItem('legalsr_gid'),
        //        approval_remarks: $scope.txtremarks
        //    }

        //    var url = 'api/raiseLegalSR/legalSRReApproval';
        //    lockUI()
        //    SocketService.post(url, params).then(function (resp) {
        //        if (resp.data.status == true) {
        //            unlockUI()
        //            $scope.auth_status = localStorage.setItem('auth_status', 'Approved');
        //            activate();
        //            Notify.alert('Legal SR Approved Successfully..!!', 'success')
        //        }
        //        else {
        //            unlockUI();
        //            Notify.alert('Error Occured', 'warning')
        //        }
        //        activate();
        //    });
        //}


        //$scope.legalSRrereject = function () {
        //    var params = {
        //        legalsr_gid: $scope.legalsr_gid,
        //        approval_remarks: $scope.txtremarks
        //    }

        //    var url = 'api/raiseLegalSR/legalSRrereject';
        //    lockUI()
        //    SocketService.post(url, params).then(function (resp) {
        //        if (resp.data.status == true) {
        //            unlockUI()
        //            Notify.alert('Legal SR in Hold', 'success')


        //        }
        //        else {
        //            unlockUI();
        //            Notify.alert('Error Occured While Updating the Status', 'warning')

        //        }

        //    });
        //}


        $scope.back = function () {
            $state.go('app.legalSRapproval');
           
          
        }



    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSRapprovemgmt360', legalSRapprovemgmt360);

    legalSRapprovemgmt360.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams','cmnfunctionService'];

    function legalSRapprovemgmt360($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSRapprovemgmt360';

        activate();

        function activate() {
            $scope.uploaddclickdiv = true;
            $scope.legalsr_gid = localStorage.getItem('legalsr_gid');
            $scope.approval_status = localStorage.getItem('approval_status');
         

            var params = {
                customer_gid: localStorage.getItem('customer_gid'),
              legalsr_gid : localStorage.getItem('legalsr_gid')
            }
            console.log(localStorage.getItem('customer_gid'));
            var url = "api/raiseLegalSR/Getcustomerdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerdetails = resp.data;
               
            });
            var url = 'api/raiseLegalSR/GetDemandNoticedtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.demandnotice_list = resp.data.demandnotice_list;
                $scope.demand_status = resp.data.demand_status;

            });
            var url = "api/raiseLegalSR/getsamgdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.constitution = resp.data.constitution;
                $scope.financed_by = resp.data.financed_by;
                $scope.deal_year = resp.data.deal_year;
                $scope.address = resp.data.address;
                $scope.business_activity = resp.data.business_activity;
                $scope.email_id = resp.data.email_id;
                $scope.primary_securities = resp.data.primary_securities;
                $scope.collateral_securities = resp.data.collateral_securities;
                $scope.details_UDC_PDC = resp.data.details_UDC_PDC;
                $scope.unit_working_status = resp.data.unit_working_status;
                $scope.other_banker_exposures = resp.data.other_banker_exposures;
                $scope.cibil_data = resp.data.cibil_data;
                $scope.restructuring_data = resp.data.restructuring_data;
                $scope.status_current_overdue = resp.data.status_current_overdue;
                $scope.other_group_companies = resp.data.other_group_companies;
                $scope.meeting_details = resp.data.meeting_details;
                $scope.cycles_sanctiondated = resp.data.cycles_sanctiondated;
                $scope.limit_sanction = resp.data.limit_sanction;
                $scope.churing_account = resp.data.churing_account;
                $scope.created_date = resp.data.created_date;
                $scope.statuslegal_action = resp.data.statuslegal_action;
                $scope.instances_PTP = resp.data.instances_PTP;
                $scope.demandnotice_details = resp.data.demandnotice_details;
                $scope.other_banker_borrower = resp.data.other_banker_borrower;
                $scope.auth_remarks_list = resp.data.auth_remarks_list;yy
            });
            var url = "api/raiseLegalSR/getcustomerPromoter";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerPromotorlist = resp.data.customerPromoter;
            });

            var url = 'api/raiseLegalSR/getcustomerGuarantors';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.guarantors_list = resp.data.customerGuarantors;
                $scope.remarks = resp.data.remarks;
            });

            var url = "api/CustomerDashboard/Getcustomerloandetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loandetails = resp.data.loandtl;
            });

            var url = "api/CustomerDashboard/Getcustomerdocumentdetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.filename_list = resp.data.filename_list;
            });

            var url = "api/CustomerDashboard/Getcustomermaildetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.composemail_list = resp.data.composemail;
            });
            var param1 = {
                raiselegalSR_gid: $scope.legalsr_gid
            }

            var url = 'api/raiseLegalSR/Getcontactdtl';

            SocketService.getparams(url, param1).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });

            var param = {
                legalsr_gid: $scope.legalsr_gid
            }
            var url = "api/raiseLegalSR/getlegalSRapprovals";
            SocketService.getparams(url, param).then(function (resp) {
              
                $scope.approvals = resp.data.approvallist;
            });
            var url = "api/raiseLegalSR/getcollateralinfo";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.customerCollateral = resp.data.customerCollateral;
            });
            var url = "api/raiseLegalSR/getrequesteddtl";
            SocketService.getparams(url, param).then(function (resp) {

                $scope.requesteddetails = resp.data;
            });

           
        }

        $scope.uploadclick = function () {
            $scope.uploadddiv = true;
            $scope.uploaddclickdiv = false;
        }

        $scope.cancelupload = function () {
            $scope.uploadddiv = false;
            $scope.uploaddclickdiv = true;
            $("#addupload").val('');
        }

        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('customer_gid', localStorage.getItem('customer_gid'));
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }

        $scope.handleFile = function () {
            var url = 'api/CustomerDashboard/UploadDocument';

            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.filename_list;
                $("#addupload").val('');

                if (resp.data.status == true) {

                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }

        $scope.downloads = function (val1, val2) {
           
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split(".")
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.createmail = function () {

            var modalInstance = $modal.open({
                templateUrl: '/CustomerCreateMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.sendcomposemail = function () {
                    var params = {
                        to_mail: $scope.tomail,
                        cc_mail: $scope.ccmail,
                        bcc_mail: $scope.bccmail,
                        subject_mail: $scope.mailsubject,
                        content_mail: $scope.mailcontent,
                        customer_gid: localStorage.getItem('customer_gid')
                    }

                    var url = "api/CustomerDashboard/sendcomposemail";
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            var url = "api/CustomerDashboard/Getcustomermaildetails";
                            SocketService.getparams(url, params).then(function (resp) {
                                $scope.composemail_list = resp.data.composemail;
                            });
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }
            }
        }

        $scope.viewMailContent = function (composemail_gid) {
            var params = {
                composemail_gid: composemail_gid
            }

            var modalInstance = $modal.open({
                templateUrl: '/CustomerViewMailContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }
                var url = "api/CustomerDashboard/Getcustomermail";
                SocketService.getparams(url, params).then(function (resp) {
                    console.log(resp);
                    $scope.frommail_view = resp.data.from_mail;
                    $scope.tomail_view = resp.data.to_mail;
                    $scope.ccmail_view = resp.data.cc_mail;
                    $scope.bccmail_view = resp.data.bcc_mail;
                    $scope.mailsubject_view = resp.data.subject_mail;
                    $scope.mailcontent_view = resp.data.content_mail;
                    $scope.created_by = resp.data.created_by;
                    $scope.created_date = resp.data.created_date;
                });
            }

        }

        $scope.legarSRapprove = function () {
            
            var params = {
                legalsr_gid: localStorage.getItem('legalsr_gid'),
                approval_remarks: $scope.txtremarks
            }

            var url = 'api/raiseLegalSR/legalSRApprovalMgmt';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $scope.approval_status = localStorage.setItem('approval_status', 'Approved');
                    activate();
                    Notify.alert('Legal SR Approved Successfully..!!', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occured while approve', 'success')
                }
                activate();
            });
        }
      $scope.legalSRreject = function () {
            var params = {
                legalsr_gid: $scope.legalsr_gid,
                approval_remarks: $scope.txtremarks
            }

            var url = 'api/raiseLegalSR/legalSRrejectMgmt';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    $scope.approval_status = localStorage.setItem('approval_status', 'Rejected');
                    activate();
                    Notify.alert('Legal SR in  Hold', 'success')


                }
                else {
                    unlockUI();
                    Notify.alert('Error Occured While Updating the Status', 'warning')

                }

            });
      }
      $scope.back = function () {
          $state.go('app.legalapprovalmgmt');
      }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalsrreportcontroller', legalsrreportcontroller);

    legalsrreportcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'DownloaddocumentService'];

    function legalsrreportcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalsrreportcontroller';

        activate();
        function activate() {
           

            var url = 'api/lglDashboard/Getlegalsrreport';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.legalSR_list = resp.data.legalSR_list;
              
            });


        }

        $scope.export = function () {
            var params = {       
            srref_no: $scope.srref_no,
            raised_by: $scope.raised_by,
            raised_date: $scope.raised_date,
            raised_by_department: $scope.raised_by_department,
            customer_urn: $scope.customer_urn,
            customer_name: $scope.customer_name,
            auth_status: $scope.auth_status,
            auth_date: $scope.auth_date,
            auth_remarks: $scope.auth_remarks,
            approval_status: $scope.approval_status
            }
            lockUI();
            var url = 'api/lglDashboard/GetSRexport';
            SocketService.post(url, params).then(function (resp) {
                console.log(resp.data.status)
                if (resp.data.status == true) {
                    DownloaddocumentService.Downloaddocument(resp.data.lspath, resp.data.lsname);
                    unlockUI();
                    // var phyPath = resp.data.lspath;
                    // var relPath = phyPath.split("EMS");
                    // var relpath1 = relPath[1].replace("\\", "/");
                    // var hosts = window.location.host;
                    // var prefix = location.protocol + "//";
                    // var str = prefix.concat(hosts, relpath1);
                    // var link = document.createElement("a");
                    // var name = resp.data.lsname.split('.');
                    // link.download = name[0];
                    // var uri = str;
                    // link.href = uri;
                    // link.click();

                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export !', 'warning')
                    activate();

                }

            });
        }
        //$scope.complete = function (string ) {

        //    if (string.length >= 3) {
        //        $scope.message = "";
        //        var url = 'api/lglDashboard/GetCustomerName';
        //        //var url = 'api/customer/GetExploreCustomer';
        //        var params = {
        //            customername: string
                   
        //        }
        //        SocketService.getparams(url, params).then(function (resp) {
        //            if (resp.data.status == true) {
        //                $scope.message = "";
                      
        //                $scope.legalSR_list = resp.data.customers_list;
                      
        //            }
        //            else {
        //                $scope.message = "No Records";
        //            }


        //        });
        //    }
        //    else {
        //        $scope.customers_list = null;
        //        $scope.message = "Type atleast three character";
        //    }
        //}

        //$scope.fillTextbox = function (customer_gid, customer_name) {
        //    //console.log('string', customer_name, customer_gid);
        //    $scope.customer = customer_name;
        //    $scope.customer_gid = customer_gid;
        //    $scope.customers_list = null;



        //}

        $scope.all = function () {
            $scope.customername = "";
            $scope.month_date = "";
            $scope.year_date = "";

        activate();
    }

    $scope.search = function () {
        var params = {
            customername: $scope.customer,
            month_date: $scope.month_date,
            year_date: $scope.year_date
        }

        var url = 'api/lglDashboard/GetLegalreportsummary';
        lockUI();
        SocketService.post(url, params).then(function (resp) {
            unlockUI();
            $scope.legalSR_list = resp.data.Legalreportsummary;
        });
    }


       
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('legalSRsummarycontroller', legalSRsummarycontroller);

    legalSRsummarycontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function legalSRsummarycontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'legalSRsummarycontroller';

        activate();


        function activate() {
            var url = 'api/raiseLegalSR/GetSR';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.RaiselegalSR_list;
                console.log(resp.data);
            });

        }
      
        $scope.raisesr = function (templegalsr_gid, customer_gid)
        {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            console.log(templegalsr_gid);
            $state.go('app.raiseSR2authentication');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            console.log(templegalsr_gid); //console.log(legalsr_gid);
            $state.go('app.viewlegalSR');
        }

        $scope.popuplegalSR = function () {

            $state.go('app.raiselegalSR');
        }

        //$scope.popuplegalSR = function () {
        //    var modalInstance = $modal.open({
        //        templateUrl: '/LegalSRraise.html',
        //        controller: ModalInstanceCtrl,
        //        size: 'md'
        //    });
        //    ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
        //    function ModalInstanceCtrl($scope, $modalInstance) {
        //        var url = 'api/raiseLegalSR/Customer';
        //        SocketService.get(url).then(function (resp) {
        //            $scope.customer_list = resp.data.customer_list;

        //        });

        //        $scope.ok = function () {
        //            $modalInstance.close('closed');
        //        };
        //        $scope.legalsrsubmit = function (customer) {
        //            var account_name = $('#customername :selected').text();

        //            var params = {
        //                customer_gid: customer,
        //                account_name: account_name,
        //                remarks: $scope.txtremarks
        //            }
        //            console.log(params);
        //            var url = 'api/raiseLegalSR/raiselegalsr';

        //            lockUI();
        //            SocketService.post(url, params).then(function (resp) {
        //                unlockUI();
        //                if (resp.data.status == true) {

        //                    $modalInstance.close('closed');
        //                    Notify.alert(resp.data.message, {
        //                        status: 'success',
        //                        pos: 'top-center',
        //                        timeout: 3000
        //                    });
        //                    activate();

        //                }
        //                else {
        //                    Notify.alert(resp.data.message, {
        //                        status: 'warning',
        //                        pos: 'top-center',
        //                        timeout: 3000
        //                    });

        //                    activate();

        //                }
        //            });
        //        }
        //    }

        //}


        $scope.edit = function () {

            $state.go('app.editLegalSR');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('lglDashboardcontroller', lglDashboardcontroller);

    lglDashboardcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies'];

    function lglDashboardcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'lglDashboardcontroller';

        activate();

        function activate() {

            $scope.lawyerempanelment = true;
            $scope.legalservices = true;
            $scope.legalcompliance = true;
            $scope.report = true;

            var user_gid = localStorage.getItem('user_gid');
            var url = 'api/user/privilegelevel3';
            SocketService.get(url + '?user_gid=' + user_gid).then(function (resp) {
                var registerlawyer = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLERLRN");
                var managelawfirm = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLERLFM");
                var requestcompliance = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLDCMREC");
                var managecompliance = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLDCMCOM");
                var dntracker = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMDNP");
                var dntrackercbo = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMDNC");
                var dntrackerreport = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLRPTDTR");
                var legalsrauthentication = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMSRP");
                var legalsrapproval = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMARM");
                var legalSLN = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMSLN");           
                var lawyerpayment = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMLTP");
                var dntatreport = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLRPTTAT");
                var dntrackerae = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMDAE");
                var dntrackerfpoac = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMDNC");
                var dntrackerfpo = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMFPO");
                var dntrackerothers = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMOTV");
                var dntrackerretail = resp.data.privilegelevel3.map(function (e) { return e.project }).indexOf("LGLLCMRET");

                if (requestcompliance != -1) {
                    $scope.requestcompliance_show = 'Y';
                }
                if (managecompliance != -1) {
                    $scope.managecompliance_show = 'Y';
                }
                if (dntracker != -1) {
                    $scope.dntracker_show = 'Y';
                }
                if (dntrackercbo != -1) {
                    $scope.dntrackercbo_show = 'Y';
                }
                if (dntrackerreport != -1) {
                    $scope.dntrackerreport_show = 'Y';
                }
                if (legalsrauthentication != -1) {
                    $scope.legalsrauthentication_show = 'Y';
                }
                if (legalsrapproval != -1) {
                    $scope.legalsrapproval_show = 'Y';
                }
                if (dntrackerae != -1) {
                    $scope.dntracker_ae = 'Y';
                }
                if (dntrackerfpoac != -1) {
                    $scope.dntracker_fpoac = 'Y';
                }
                if (dntrackerfpo != -1) {
                    $scope.dntracker_fpo = 'Y';
                }
                if (dntrackerothers != -1) {
                    $scope.dntracker_others = 'Y';
                }
                if (dntrackerretail != -1) {
                    $scope.dntracker_retail = 'Y';
                }
            });
            $scope.requestcompliance = function () {
                $scope.welcome_msg = 'Request Compliance';
            };
            $scope.managecompliance = function () {
                $scope.welcome_msg = 'Manage Compliance';
            };
            $scope.dntracker = function () {
                $scope.welcome_msg = 'DN Tracker';
            };
            $scope.dntrackercbo = function () {
                $scope.welcome_msg = 'DN Tracker CBO';
            };
            $scope.dntrackerreport = function () {
                $scope.welcome_msg = 'DN Tracker Report';
            };
            $scope.legalsrauthentication = function () {
                $scope.welcome_msg = 'Legal SR Authentication';
            };
            $scope.legalsrapproval = function () {
                $scope.welcome_msg = 'Legal SR Approval';
            };
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('Compliance2taglawyercontroller', Compliance2taglawyercontroller);

    Compliance2taglawyercontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService','cmnfunctionService'];

    function Compliance2taglawyercontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'Compliance2taglawyercontroller';

        activate();


        function activate() {

            lockUI();
            
          
            $scope.lawyer_summary=true;
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;
            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress = resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.assignlawyerlist = resp.data.assignlawyer;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
            var url = "api/requestCompliance/Gettaggedlist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.taggedlist = resp.data.taggedinfo_list;
                $scope.taggeddoc_list = resp.data.taggeddoc_list;
                console.log(resp.data.taggedlawyerdoc_list);
                $scope.taggedlawyerdoc_list = resp.data.taggedlawyerdoc_list;
            });
           

            var url = "api/requestCompliance/LawyerSummary"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.conlawyer_list = resp.data.MdlLawyerSummary;

            });

            var url = "api/requestCompliance/LawyerGroupDtls"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.grouplastconversation = resp.data.lastconversation;
                $scope.groupnewmsg_count = resp.data.newmsg_count;
                $scope.lawyer_count = resp.data.lawyer_count;
                $scope.group_member = resp.data.group_member;
                $scope.totalmsg_count = resp.data.totalmsg_count;
              

            });


            var url = 'api/requestCompliance/tempdelete';
            SocketService.get(url).then(function (resp) {  
            });
        }
        $scope.viewdocument = function (requestcompliance2lawyerdtl_gid, id) {
            var params = {
                requestcompliance2lawyerdtl_gid: requestcompliance2lawyerdtl_gid
            };
            var url = 'api/requestCompliance/Viewuploaddoc_lawyer';
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data.taggeddoc_list);
                $scope.taggedlist[id][requestcompliance2lawyerdtl_gid] = resp.data.taggeddoc_list;

            });
        }
        $scope.viewlawyerdocument = function (requestcompliance2lawyerdtl_gid, id) {
            var params = {
                requestcompliance2lawyerdtl_gid: requestcompliance2lawyerdtl_gid
            };
            var url = 'api/requestCompliance/GetuploadbyLawyer';
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data.taggeddoc_list);
                $scope.taggedlist[id][requestcompliance2lawyerdtl_gid] = resp.data.taggeddoc_list;

            });
        }
       
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadscorrected = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.assignLawyerSubmit = function () {
            var lawyeruser_gid = $scope.cboassignlawyer;
            var lawyeruser_name = $('#assignlawyer :selected').text();


            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                lawyeruser_gid: $scope.cboassignlawyer
            }

            var url = "api/requestCompliance/tmpseekdocumentclear";
            SocketService.get(url).then(function (resp) {

            });

            var modalInstance = $modal.open({
                templateUrl: '/lawyeruploadContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.lawyeruser_name = lawyeruser_name;

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.uploadseek = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('document_name', $scope.documentname);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;

                    var url = 'api/requestCompliance/seekLawyerUpload';

                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                        $("#addupload").val('');

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                    });

                }

                $scope.uploadcancel = function (tmpseek_documentgid) {
                    var seekupload = {
                        tmpseek_documentgid: tmpseek_documentgid
                    }

                    var url = 'api/requestCompliance/seekLawyerUploadcancel';
                    SocketService.getparams(url, seekupload).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                    });
                }

                $scope.assignconfirm = function () {
                    lockUI();
                    var seekupload = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                        lawyeruser_gid: lawyeruser_gid,
                        seeklawyerremarks: $scope.seeklawyerremarks,
                    }

                    var url = "api/requestCompliance/assignLawyer";
                    SocketService.post(url, seekupload).then(function (resp) {
                        unlockUI();

                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $scope.ok();
                        activate();

                    });
                }

            }


        }

        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);

        }

        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }
            console.log(params);
            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details = function () {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion = function () {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {
                    if ($scope.cbostatus == 'Rejected') {
                        if (($scope.txtrejected_remarks == '') || ($scope.txtrejected_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                rejected_remarks: $scope.txtrejected_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }
                    } else if ($scope.cbostatus == 'Completed') {
                        if (($scope.txtcompleted_remarks == '') || ($scope.txtcompleted_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                completed_remarks: $scope.txtcompleted_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }

                    }
                    else {
                        $scope.mandatoryfields = false;
                        var url = 'api/requestCompliance/updatestatus';
                        lockUI();
                        var params = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            request_status: $scope.cbostatus,
                            rejected_remarks: $scope.txtrejected_remarks
                        }
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                                activate()
                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate()
                        });

                        $modalInstance.close('closed');
                    }
                    /*
                    var url = 'api/requestCompliance/updatestatus';
                    lockUI();
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                        request_status: $scope.cbostatus
                    }

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $location.url('app/complianceManagement?lstab=' + relpath1);
                            activate()
                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate()
                    });

                    $modalInstance.close('closed');
                    */
                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }

            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;

                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
       
        $scope.ShowConversation = function (val, name_initial, newmsg_count, lawyeruser_name) {
            $scope.lawyer_summary = false;
            $scope.requestcompliance2lawyerdtl_gid = val;
            $scope.name_initial = name_initial;
            $scope.newmsg_count = newmsg_count;
            $scope.lawyeruser_name = lawyeruser_name;

            var params = {
                requestcompliance2lawyerdtl_gid: val,
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),

            };
           
            var url = 'api/requestCompliance/GetLawyerConversation';
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.conversationList = resp.data.MdlConversationSummary;

                }
                else {
                    $scope.conversationList = null;
                }


            });
        }
        $scope.CloseConversation = function () {
            $scope.lawyer_summary = true;

            var params = {
                requestcompliance_gid: $scope.requestcompliance_gid,
                requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                user_flag: 'Lawyer',
            };
            console.log(params);
            var url = 'api/requestCompliance/MsgViewed';
            SocketService.post(url, params).then(function (resp) {

            });
        }
        $scope.LawyerConversation = function () {
            var params = {
                requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                msgconversation: $scope.message_content,
                user_flag: 'Admin'
            };
            console.log(params);
            lockUI();
            var url = 'api/requestCompliance/LawyerGroupConversation';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $scope.message_content = "";
                    $scope.lawyer_summary = true;
                    Notify.alert(resp.data.message, 'success');
                    var params = {
                        requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),

                    };

                    var url = 'api/requestCompliance/GetLawyerConversation';
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $scope.conversationList = resp.data.MdlConversationSummary;

                        }
                        else {

                        }


                    });

                    var params = {
                        requestcompliance_gid: $scope.requestcompliance_gid,
                        requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                        user_flag: 'Lawyer'
                    };
                    
                    var url = 'api/requestCompliance/MsgViewed';
                    SocketService.post(url, params).then(function (resp) {

                    });
                }
                else {
                    Notify.alert(resp.data.message, 'warning');
                }
                activate();
                unlockUI();
            });
        }

        $scope.LawyerindividualConversation = function () {
            var params = {
                requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                msgconversation: $scope.message_content,
                user_flag: 'Admin'
            };
            console.log(params);
            lockUI();
            var url = 'api/requestCompliance/LawyerConversation';
            SocketService.post(url, params).then(function (resp) {

                if (resp.data.status == true) {
                    $scope.message_content = "";
                    $scope.lawyer_summary = true;
                    Notify.alert(resp.data.message, 'success');
                    var params = {
                        requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),

                    };

                    var url = 'api/requestCompliance/GetLawyerConversation';
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $scope.conversationList = resp.data.MdlConversationSummary;

                        }
                        else {

                        }


                    });

                    var params = {
                        requestcompliance_gid: $scope.requestcompliance_gid,
                        requestcompliance2lawyerdtl_gid: $scope.requestcompliance2lawyerdtl_gid,
                        user_flag: 'Lawyer'
                    };

                    var url = 'api/requestCompliance/MsgViewed';
                    SocketService.post(url, params).then(function (resp) {

                    });
                }
                else {
                    Notify.alert(resp.data.message, 'warning');
                }
                activate();
                unlockUI();
            });
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnComplianceCompleted', LglTrnComplianceCompleted);

    LglTrnComplianceCompleted.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService','cmnfunctionService'];

    function LglTrnComplianceCompleted($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnComplianceCompleted';

        activate();


        function activate() {

            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;

            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress = resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                $scope.rejected_remarks = resp.data.rejected_remarks;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;

                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });
            //------------Seek Lawyer and Lawfirm List------------//

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.lawyer_list = resp.data.taggedlawyerList;
                $scope.lawfirm_list = resp.data.taggedlawfirmList;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadscorrected = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.assignLawyerSubmit = function () {



            if (($scope.cboassignlawyer == '') || ($scope.cboassignlawyer == undefined)) {
                if (($scope.cboassignlawfirm == '') || ($scope.cboassignlawfirm == undefined)) {
                    Notify.alert('Select Atleast One Lawyer / Lawfirm', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            }
            else {
                console.log('else');
                console.log($scope.$parent.cboassignlawyer);
                if (($scope.$parent.cboassignlawyer != '') || ($scope.$parent.cboassignlawyer != undefined)) {
                    var lawyerList = $scope.$parent.cboassignlawyer;
                }
                if (($scope.$parent.cboassignlawfirm != '') || ($scope.$parent.cboassignlawfirm != undefined)) {
                    var lawfirmList = $scope.$parent.cboassignlawfirm;
                }

                var url = "api/requestCompliance/tmpseekdocumentclear";
                SocketService.get(url).then(function (resp) {

                });

                var modalInstance = $modal.open({
                    templateUrl: '/lawyeruploadContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'lg'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {

                    var taglawyer_list = lawyerList;
                    var taglawfirm_list = lawfirmList;
                    console.log('popup', taglawyer_list);
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.close = function () {
                        $modalInstance.close('closed');
                    }

                    $scope.uploadseek = function (val, val1, name) {
                        var item = {
                            name: val[0].name,
                            file: val[0]
                        };
                        var frm = new FormData();
                        frm.append('fileupload', item.file);
                        frm.append('file_name', item.name);
                        frm.append('document_name', $scope.documentname);
                        frm.append('project_flag', "Default");
                        $scope.uploadfrm = frm;

                        var url = 'api/requestCompliance/seekLawyerUpload';

                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                            $("#addupload").val('');

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                        });
                    }


                    $scope.uploadcancel = function (tmpseek_documentgid) {
                        var seekupload = {
                            tmpseek_documentgid: tmpseek_documentgid
                        }

                        var url = 'api/requestCompliance/seekLawyerUploadcancel';
                        SocketService.getparams(url, seekupload).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                        });
                    }

                    $scope.assignconfirm = function () {
                        lockUI();


                        var seekupload = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            taggedlawyerList: taglawyer_list,
                            taggedlawfirmList: taglawfirm_list,

                            seeklawyerremarks: $scope.seeklawyerremarks,
                        }
                        console.log(seekupload);
                        var url = "api/requestCompliance/assignLawyer";
                        SocketService.post(url, seekupload).then(function (resp) {
                            unlockUI();

                            if (resp.data.status == true) {
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            $scope.ok();
                            activate();

                        });
                    }

                }
            }

        }
        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);

        }

        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }

            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details = function () {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion = function () {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.mandatoryfields = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {
                    console.log($scope.txtrejected_remarks);
                    if (($scope.cbostatus == 'Rejected')) {
                        if (($scope.txtrejected_remarks == '') || ($scope.txtrejected_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                rejected_remarks: $scope.txtrejected_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }
                    }
                    else {
                        $scope.mandatoryfields = false;
                        var url = 'api/requestCompliance/updatestatus';
                        lockUI();
                        var params = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            request_status: $scope.cbostatus,
                            rejected_remarks: $scope.txtrejected_remarks
                        }
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                                activate()
                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate()
                        });

                        $modalInstance.close('closed');
                    }
                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }

            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;

                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            //var phyPath = val1;
            //console.log(val1);
            //console.log(val2);
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnCompliancePendingcontroller', LglTrnCompliancePendingcontroller);

    LglTrnCompliancePendingcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService','cmnfunctionService','cmnfunctionService'];

    function LglTrnCompliancePendingcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnCompliancePendingcontroller';

        activate();


        function activate() {

            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;

            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress = resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                $scope.rejected_remarks = resp.data.rejected_remarks;
                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });
            //------------Seek Lawyer and Lawfirm List------------//

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.lawyer_list = resp.data.taggedlawyerList;
                $scope.lawfirm_list = resp.data.taggedlawfirmList;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadscorrected = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.assignLawyerSubmit = function () {



            if (($scope.cboassignlawyer == '') || ($scope.cboassignlawyer == undefined)) {
                if (($scope.cboassignlawfirm == '') || ($scope.cboassignlawfirm == undefined)) {
                    Notify.alert('Select Atleast One Lawyer / Lawfirm', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            }
            else {
                console.log('else');
                console.log($scope.$parent.cboassignlawyer);
                if (($scope.$parent.cboassignlawyer != '') || ($scope.$parent.cboassignlawyer != undefined)) {
                    var lawyerList = $scope.$parent.cboassignlawyer;
                }
                if (($scope.$parent.cboassignlawfirm != '') || ($scope.$parent.cboassignlawfirm != undefined)) {
                    var lawfirmList = $scope.$parent.cboassignlawfirm;
                }

                var url = "api/requestCompliance/tmpseekdocumentclear";
                SocketService.get(url).then(function (resp) {

                });

                var modalInstance = $modal.open({
                    templateUrl: '/lawyeruploadContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'lg'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {

                    var taglawyer_list = lawyerList;
                    var taglawfirm_list = lawfirmList;
                    console.log('popup', taglawyer_list);
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.close = function () {
                        $modalInstance.close('closed');
                    }

                    $scope.uploadseek = function (val, val1, name) {
                        var item = {
                            name: val[0].name,
                            file: val[0]
                        };
                        var frm = new FormData();
                        frm.append('fileupload', item.file);
                        frm.append('file_name', item.name);
                        frm.append('document_name', $scope.documentname);
                        frm.append('project_flag', "Default");
                        $scope.uploadfrm = frm;

                        var url = 'api/requestCompliance/seekLawyerUpload';

                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                            $("#addupload").val('');

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                        });
                    }


                    $scope.uploadcancel = function (tmpseek_documentgid) {
                        var seekupload = {
                            tmpseek_documentgid: tmpseek_documentgid
                        }

                        var url = 'api/requestCompliance/seekLawyerUploadcancel';
                        SocketService.getparams(url, seekupload).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                        });
                    }

                    $scope.assignconfirm = function () {
                        lockUI();


                        var seekupload = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            taggedlawyerList: taglawyer_list,
                            taggedlawfirmList: taglawfirm_list,

                            seeklawyerremarks: $scope.seeklawyerremarks,
                        }
                        console.log(seekupload);
                        var url = "api/requestCompliance/assignLawyer";
                        SocketService.post(url, seekupload).then(function (resp) {
                            unlockUI();

                            if (resp.data.status == true) {
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            $scope.ok();
                            activate();

                        });
                    }

                }
            }

        }
        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);

        }

        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }

            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details = function () {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion = function () {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.mandatoryfields = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {
                    console.log($scope.txtrejected_remarks);
                    if (($scope.cbostatus == 'Rejected')) {
                        if (($scope.txtrejected_remarks == '') || ($scope.txtrejected_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                rejected_remarks: $scope.txtrejected_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }
                    }
                    else {
                        $scope.mandatoryfields = false;
                        var url = 'api/requestCompliance/updatestatus';
                        lockUI();
                        var params = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            request_status: $scope.cbostatus,
                            rejected_remarks: $scope.txtrejected_remarks
                        }
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                                activate()
                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate()
                        });

                        $modalInstance.close('closed');
                    }
                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }

            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;

                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            var phyPath = val1;
            console.log(val1);
            console.log(val2);
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnComplianceRejected', LglTrnComplianceRejected);

    LglTrnComplianceRejected.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService','cmnfunctionService'];

    function LglTrnComplianceRejected($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnComplianceRejected';

        activate();


        function activate() {

            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;

            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress = resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                $scope.rejected_remarks = resp.data.rejected_remarks;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;

                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });
            //------------Seek Lawyer and Lawfirm List------------//

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.lawyer_list = resp.data.taggedlawyerList;
                $scope.lawfirm_list = resp.data.taggedlawfirmList;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.downloadscorrected = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.assignLawyerSubmit = function () {



            if (($scope.cboassignlawyer == '') || ($scope.cboassignlawyer == undefined)) {
                if (($scope.cboassignlawfirm == '') || ($scope.cboassignlawfirm == undefined)) {
                    Notify.alert('Select Atleast One Lawyer / Lawfirm', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
            }
            else {
                console.log('else');
                console.log($scope.$parent.cboassignlawyer);
                if (($scope.$parent.cboassignlawyer != '') || ($scope.$parent.cboassignlawyer != undefined)) {
                    var lawyerList = $scope.$parent.cboassignlawyer;
                }
                if (($scope.$parent.cboassignlawfirm != '') || ($scope.$parent.cboassignlawfirm != undefined)) {
                    var lawfirmList = $scope.$parent.cboassignlawfirm;
                }

                var url = "api/requestCompliance/tmpseekdocumentclear";
                SocketService.get(url).then(function (resp) {

                });

                var modalInstance = $modal.open({
                    templateUrl: '/lawyeruploadContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'lg'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {

                    var taglawyer_list = lawyerList;
                    var taglawfirm_list = lawfirmList;
                    console.log('popup', taglawyer_list);
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.close = function () {
                        $modalInstance.close('closed');
                    }

                    $scope.uploadseek = function (val, val1, name) {
                        var item = {
                            name: val[0].name,
                            file: val[0]
                        };
                        var frm = new FormData();
                        frm.append('fileupload', item.file);
                        frm.append('file_name', item.name);
                        frm.append('document_name', $scope.documentname);
                        $scope.uploadfrm = frm;

                        var url = 'api/requestCompliance/seekLawyerUpload';

                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                            $("#addupload").val('');

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                        });
                    }


                    $scope.uploadcancel = function (tmpseek_documentgid) {
                        var seekupload = {
                            tmpseek_documentgid: tmpseek_documentgid
                        }

                        var url = 'api/requestCompliance/seekLawyerUploadcancel';
                        SocketService.getparams(url, seekupload).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                        });
                    }

                    $scope.assignconfirm = function () {
                        lockUI();


                        var seekupload = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            taggedlawyerList: taglawyer_list,
                            taggedlawfirmList: taglawfirm_list,

                            seeklawyerremarks: $scope.seeklawyerremarks,
                        }
                        console.log(seekupload);
                        var url = "api/requestCompliance/assignLawyer";
                        SocketService.post(url, seekupload).then(function (resp) {
                            unlockUI();

                            if (resp.data.status == true) {
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            $scope.ok();
                            activate();

                        });
                    }

                }
            }

        }
        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);

        }

        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }

            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details = function () {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion = function () {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.mandatoryfields = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {
                    console.log($scope.txtrejected_remarks);
                    if (($scope.cbostatus == 'Rejected')) {
                        if (($scope.txtrejected_remarks == '') || ($scope.txtrejected_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                rejected_remarks: $scope.txtrejected_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }
                    }
                    else {
                        $scope.mandatoryfields = false;
                        var url = 'api/requestCompliance/updatestatus';
                        lockUI();
                        var params = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            request_status: $scope.cbostatus,
                            rejected_remarks: $scope.txtrejected_remarks
                        }
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                                activate()
                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate()
                        });

                        $modalInstance.close('closed');
                    }
                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }

            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;

                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            //var phyPath = val1;
            //console.log(val1);
            //console.log(val2);
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dngeneratedcontroller', dngeneratedcontroller);

    dngeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll', '$sce', 'DownloaddocumentService'];

    function dngeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, $sce, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dngeneratedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');

            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });

            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });

            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.document_path = resp.data.document_path;
                $scope.document_name = resp.data.document_name;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid; console.log(resp.data.tempdn1format_gid)
                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                //$scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                //console.log(resp.data.tempdn1format_gid)
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };

            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
                $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
                $scope.customer_gid = resp.data.customer_gid;
                unlockUI();

            });

            $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

            var param = {
                urn: $scope.urn
            };

            var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
            SocketService.getparams(url, param).then(function (resp) {
                console.log('allocation history', resp);
                $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                console.log(resp.data.overallhistoryallocationdtl);
                $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

            });
            var allocationdtl_gid = {
                allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
            }
            var url = "api/allocationManagement/getallocatedtls";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.zonal_name = resp.data.zonal_name;
                $scope.state_name = resp.data.state_name;
                $scope.district_name = resp.data.district_name;
                $scope.assigned_RM = resp.data.assigned_RM;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.ZonalRMname = resp.data.ZonalRMname;
                $scope.clientName = resp.data.customername;
            });

            var url = "api/visitReport/GetAllocationLogDetail";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.scheduleList = resp.data.schedulelogdtl;
                $scope.calllogdtlList = resp.data.calllogdtl;

            });

            var url = "api/allocationManagement/GetAllocationCustomerDtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.sanctiondetails = resp.data.loandtl;
                $scope.customerCollateral = resp.data.collateraldtl;
                $scope.holdallocationlist = resp.data.holdallocation;
                $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                console.log('Gurantor', resp);
                $scope.customerPromotorlist = resp.data.Promoterdtl;
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid,
                        allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                    };

                    var url = 'api/allocationManagement/GetAllocateloanList';
                    SocketService.post(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanList;
                        value.expand = false;
                    });
                });
            });

            var url = "api/customerManagement/HistoryEscrowSummary";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.escrowlist = resp.data.escrowSummary;
                }
            });

            var url = "api/allocationManagement/getAllocationdocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                    $scope.upload_list = resp.data.upload_list;
                    $scope.documentUpload = true;
                }
                else {

                    $scope.documentNotUpload = true;
                }
            });

            var url = "api/visitReport/getvisitreportdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                $scope.customer_gid = resp.data.customer_gid;
                $scope.txtbusiness_vintage = resp.data.business_vintage,
                    $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                    $scope.txtbusiness_sector = resp.data.business_sector,
                    $scope.txtregister_address = resp.data.registeredoffice_address,
                    $scope.cboriskcode = resp.data.risk_code,
                    $scope.txtactual_address = resp.data.present_address,
                    $scope.txtcontact_dtl1 = resp.data.contact_details1,
                    $scope.txtcontact_dtl2 = resp.data.contact_details2,
                    $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                $scope.txtlattitude = resp.data.visit_latitude;
                $scope.txtlongitude = resp.data.visit_longitude;
                //$scope.firstdisb_date = resp.data.relationship_startedfrom
                $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                    $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                    $scope.cbogenetic_code = resp.data.geneticcode_complied,
                    $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                    $scope.RMD_visitedname = resp.data.RMD_visitedname;
                $scope.txtPPA_name = resp.data.PPA_name;
                $scope.cbovisit_done = resp.data.visit_done,
                    $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                    $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                    $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                    $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                    $scope.cborepayment_track = resp.data.repayment_track,
                    $scope.cbobasic_records = resp.data.basicrecords_maintain,
                    $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                    $scope.txtpresent_fysales = resp.data.presentFY_sales,
                    $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                    $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                    $scope.txtcbototal_groups = resp.data.total_noofGroups,
                    $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                    $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                    $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                    $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                    $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                    $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                    $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                    $scope.txtpurpose_funding = resp.data.purposeof_funding,
                    $scope.txt_utilisationdtls = resp.data.utilisation_details,
                    $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                    $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                    $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                    $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                    $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                    $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                    $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                    $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                    $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                    $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                    $scope.txttenure_period = resp.data.tenure_period,
                    $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                    $scope.txttenure_period = resp.data.tenure_period,
                    $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                    //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                    $scope.txtoverdue = resp.data.overdue,
                    $scope.txtborrower_commitment = resp.data.borrower_commitment,
                    $scope.txtpending_documentation = resp.data.pending_documentation,
                    //$scope.txtasset_verification = resp.data.asset_verification,
                    $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                    $scope.txtenduse_loan = resp.data.enduse_loan,
                    //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                    $scope.txtoverall_remarks = resp.data.overall_remarks,
                    $scope.txtPDD_compliance = resp.data.PDD_compliance,
                    $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                    $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                    $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                    $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                    $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                    $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                    $scope.editvisittype = resp.data.editvisittype;
                if (resp.data.RM_name != null) {
                    $scope.relationship_managername = resp.data.RM_name
                }
                if (resp.data.constitution != null) {
                    $scope.constitution = resp.data.constitution
                }
                if (resp.data.credit_managername != null) {
                    $scope.credit_managername = resp.data.credit_managername;
                }
                if (resp.data.visit_date != null) {
                    var p = resp.data.visit_date.split(/\D/g)
                    $scope.visitdate = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.dealing_withsince != null) {
                    var p = resp.data.dealing_withsince.split(/\D/g)
                    $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.disbursement_date != null) {
                    var p = resp.data.disbursement_date.split(/\D/g)
                    $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                }

            });

            var url = "api/visitReport/getvisitReportDocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportdocument = resp.data.visitreportdocument;
            });

            var url = "api/visitReport/getvisitReportPhoto";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportphoto = resp.data.visitreportphoto;
            });

            var url = "api/TierMeeting/GetViewTierObservationdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                $scope.report_pertainingto = resp.data.report_pertainingto;
                $scope.vertical = resp.data.vertical;
                $scope.disbursement_amount = resp.data.disbursement_amount;
                $scope.approving_authority = resp.data.approving_authority;
                $scope.loansanction_date = resp.data.loansanction_date;
                $scope.relationship_manager_name = resp.data.relationship_manager_name;
                $scope.PPA_name = resp.data.PPA_name;
                $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                $scope.loandisbursement_date = resp.data.loandisbursement_date;
                $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.outstanding_amount = resp.data.outstanding_amount;
                $scope.current_DPD = resp.data.current_DPD;
                $scope.contact_details1 = resp.data.contact_details1;
                $scope.contact_details2 = resp.data.contact_details2;
                $scope.observation_flag = resp.data.observation_flag;
                $scope.cboriskcode = resp.data.risk_code;
                $scope.criticalobservation = resp.data.criticalTierobservation;
                $scope.tiercodedtl = resp.data.tierReportdtl;
                unlockUI();
            });
            var tier1format_gid = {
                tier1format_gid: localStorage.getItem('tier1format_gid')
            }
            var url = "api/TierMeeting/GetTier1Format360Dtl";
            SocketService.getparams(url, tier1format_gid).then(function (resp) {
                $scope.txtobservations = resp.data.tier1_observations;
                if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                }
                else {
                    $scope.cboriskcode = resp.data.tier1_code;
                }
                $scope.txtrationale_justification = resp.data.tier1_justification;
                $scope.txtprocess_gap = resp.data.tier1_processgap;
                $scope.txtcode_changereason = resp.data.tier1code_changereason;
                $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                $scope.txtATR_date = resp.data.tier1_atrdate;
                $scope.tier1format_gid = resp.data.tier1format_gid;
                $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                $scope.tier1approvallog = resp.data.tier1approvallog;
                if ($scope.tier1code_changeflag == 'Y') {
                    $scope.disablecodechangereasonshow = true;
                }
                else {
                    $scope.disablecodechangereasonshow = false;
                }

                if (resp.data.tier1approvallog == null) {
                    $scope.nohistoryapproval = true;



                }
                else {
                    $scope.historyapproval = true;
                }
            });

            var url = 'api/TierMeeting/GetTier2Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                console.log(resp);
                $scope.tier2zonal_name = resp.data.zonal_name;
                $scope.tier2_monthname = resp.data.tier2_monthname;
                $scope.vertical = resp.data.vertical;
                $scope.headRMD_name = resp.data.headRMD_name;
                $scope.txttier2_remarks = resp.data.tier2_remarks;
                $scope.tier2_approval_status = resp.data.tier2_approval_status;
                $scope.tier2_submitteddate = resp.data.created_date;
                $scope.tier2_submittedby = resp.data.created_by;
                $scope.uploaddocument2_list = resp.data.tier2document;
                $scope.tier2approvallog = resp.data.tier2approvallog;
                $scope.tier2_approveddate = resp.data.tier2_approveddate;

                if (resp.data.tier2approvallog == null) {
                    $scope.tier2nohistoryapproval = true;
                }
                else {
                    $scope.tier2historyapproval = true;
                }
                unlockUI();
            });

            var url = 'api/TierMeeting/GetTier3Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.mlrc_date = resp.data.MLRC_date;
                $scope.monthname = resp.data.tier3_month;
                $scope.txttier3_followup = resp.data.follow_up;
                $scope.tier3_status = resp.data.tier3_status;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.uploaddocument3_list = resp.data.tier3document;
                $scope.completed_date = resp.data.completed_date;
                $scope.completed_by = resp.data.completed_by;
                $scope.completed_flag = resp.data.completed_flag;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.vertical = resp.data.vertical;
                unlockUI();
            });
        }
        $scope.trustAsHtml = function (string) { return $sce.trustAsHtml(string); };
        //$scope.trustAsHtml1 = function (string) { return $sce.trustAsHtml1(string); };
        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    unlockUI();
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            console.log(param)
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    unlockUI();
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //console.log(resp.data);
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN1";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')

            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    unlockUI();
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN2";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')

            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN3";
                //var uri = str;
                //link.href = uri;
                //link.click();
                //  DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnCBOGeneratetabontroller', dnCBOGeneratetabontroller);

    dnCBOGeneratetabontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnCBOGeneratetabontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnCBOGeneratetabontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };

            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
                $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
                $scope.customer_gid = resp.data.customer_gid;
                unlockUI();

            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.document_path = resp.data.document_path;
                $scope.document_name = resp.data.document_name;

                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                //$scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

            var param = {
                urn: $scope.urn
            };

            var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
            SocketService.getparams(url, param).then(function (resp) {
                console.log('allocation history', resp);
                $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                console.log(resp.data.overallhistoryallocationdtl);
                $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

            });
            var allocationdtl_gid = {
                allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
            }
            var url = "api/allocationManagement/getallocatedtls";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.zonal_name = resp.data.zonal_name;
                $scope.state_name = resp.data.state_name;
                $scope.district_name = resp.data.district_name;
                $scope.assigned_RM = resp.data.assigned_RM;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.ZonalRMname = resp.data.ZonalRMname;
                $scope.clientName = resp.data.customername;
            });

            var url = "api/visitReport/GetAllocationLogDetail";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.scheduleList = resp.data.schedulelogdtl;
                $scope.calllogdtlList = resp.data.calllogdtl;

            });

            var url = "api/allocationManagement/GetAllocationCustomerDtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.sanctiondetails = resp.data.loandtl;
                $scope.customerCollateral = resp.data.collateraldtl;
                $scope.holdallocationlist = resp.data.holdallocation;
                $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                console.log('Gurantor', resp);
                $scope.customerPromotorlist = resp.data.Promoterdtl;
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid,
                        allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                    };

                    var url = 'api/allocationManagement/GetAllocateloanList';
                    SocketService.post(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanList;
                        value.expand = false;
                    });
                });
            });

            var url = "api/customerManagement/HistoryEscrowSummary";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.escrowlist = resp.data.escrowSummary;
                }
            });

            var url = "api/allocationManagement/getAllocationdocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                    $scope.upload_list = resp.data.upload_list;
                    $scope.documentUpload = true;
                }
                else {

                    $scope.documentNotUpload = true;
                }
            });

            var url = "api/visitReport/getvisitreportdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                $scope.customer_gid = resp.data.customer_gid;
                $scope.txtbusiness_vintage = resp.data.business_vintage,
                    $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                    $scope.txtbusiness_sector = resp.data.business_sector,
                    $scope.txtregister_address = resp.data.registeredoffice_address,
                    $scope.cboriskcode = resp.data.risk_code,
                    $scope.txtactual_address = resp.data.present_address,
                    $scope.txtcontact_dtl1 = resp.data.contact_details1,
                    $scope.txtcontact_dtl2 = resp.data.contact_details2,
                    $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                $scope.txtlattitude = resp.data.visit_latitude;
                $scope.txtlongitude = resp.data.visit_longitude;
                //$scope.firstdisb_date = resp.data.relationship_startedfrom
                $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                    $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                    $scope.cbogenetic_code = resp.data.geneticcode_complied,
                    $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                    $scope.RMD_visitedname = resp.data.RMD_visitedname;
                $scope.txtPPA_name = resp.data.PPA_name;
                $scope.cbovisit_done = resp.data.visit_done,
                    $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                    $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                    $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                    $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                    $scope.cborepayment_track = resp.data.repayment_track,
                    $scope.cbobasic_records = resp.data.basicrecords_maintain,
                    $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                    $scope.txtpresent_fysales = resp.data.presentFY_sales,
                    $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                    $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                    $scope.txtcbototal_groups = resp.data.total_noofGroups,
                    $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                    $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                    $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                    $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                    $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                    $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                    $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                    $scope.txtpurpose_funding = resp.data.purposeof_funding,
                    $scope.txt_utilisationdtls = resp.data.utilisation_details,
                    $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                    $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                    $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                    $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                    $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                    $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                    $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                    $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                    $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                    $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                    $scope.txttenure_period = resp.data.tenure_period,
                    $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                    $scope.txttenure_period = resp.data.tenure_period,
                    $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                    //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                    $scope.txtoverdue = resp.data.overdue,
                    $scope.txtborrower_commitment = resp.data.borrower_commitment,
                    $scope.txtpending_documentation = resp.data.pending_documentation,
                    //$scope.txtasset_verification = resp.data.asset_verification,
                    $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                    $scope.txtenduse_loan = resp.data.enduse_loan,
                    //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                    $scope.txtoverall_remarks = resp.data.overall_remarks,
                    $scope.txtPDD_compliance = resp.data.PDD_compliance,
                    $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                    $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                    $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                    $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                    $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                    $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                    $scope.editvisittype = resp.data.editvisittype;
                if (resp.data.RM_name != null) {
                    $scope.relationship_managername = resp.data.RM_name
                }
                if (resp.data.constitution != null) {
                    $scope.constitution = resp.data.constitution
                }
                if (resp.data.credit_managername != null) {
                    $scope.credit_managername = resp.data.credit_managername;
                }
                if (resp.data.visit_date != null) {
                    var p = resp.data.visit_date.split(/\D/g)
                    $scope.visitdate = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.dealing_withsince != null) {
                    var p = resp.data.dealing_withsince.split(/\D/g)
                    $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.disbursement_date != null) {
                    var p = resp.data.disbursement_date.split(/\D/g)
                    $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                }

            });

            var url = "api/visitReport/getvisitReportDocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportdocument = resp.data.visitreportdocument;
            });

            var url = "api/visitReport/getvisitReportPhoto";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportphoto = resp.data.visitreportphoto;
            });

            var url = "api/TierMeeting/GetViewTierObservationdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                $scope.report_pertainingto = resp.data.report_pertainingto;
                $scope.vertical = resp.data.vertical;
                $scope.disbursement_amount = resp.data.disbursement_amount;
                $scope.approving_authority = resp.data.approving_authority;
                $scope.loansanction_date = resp.data.loansanction_date;
                $scope.relationship_manager_name = resp.data.relationship_manager_name;
                $scope.PPA_name = resp.data.PPA_name;
                $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                $scope.loandisbursement_date = resp.data.loandisbursement_date;
                $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.outstanding_amount = resp.data.outstanding_amount;
                $scope.current_DPD = resp.data.current_DPD;
                $scope.contact_details1 = resp.data.contact_details1;
                $scope.contact_details2 = resp.data.contact_details2;
                $scope.observation_flag = resp.data.observation_flag;
                $scope.cboriskcode = resp.data.risk_code;
                $scope.criticalobservation = resp.data.criticalTierobservation;
                $scope.tiercodedtl = resp.data.tierReportdtl;
                unlockUI();
            });
            var tier1format_gid = {
                tier1format_gid: localStorage.getItem('tier1format_gid')
            }
            var url = "api/TierMeeting/GetTier1Format360Dtl";
            SocketService.getparams(url, tier1format_gid).then(function (resp) {
                $scope.txtobservations = resp.data.tier1_observations;
                if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                }
                else {
                    $scope.cboriskcode = resp.data.tier1_code;
                }
                $scope.txtrationale_justification = resp.data.tier1_justification;
                $scope.txtprocess_gap = resp.data.tier1_processgap;
                $scope.txtcode_changereason = resp.data.tier1code_changereason;
                $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                $scope.txtATR_date = resp.data.tier1_atrdate;
                $scope.tier1format_gid = resp.data.tier1format_gid;
                $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                $scope.tier1approvallog = resp.data.tier1approvallog;
                if ($scope.tier1code_changeflag == 'Y') {
                    $scope.disablecodechangereasonshow = true;
                }
                else {
                    $scope.disablecodechangereasonshow = false;
                }

                if (resp.data.tier1approvallog == null) {
                    $scope.nohistoryapproval = true;
                }
                else {
                    $scope.historyapproval = true;
                }
            });

            var url = 'api/TierMeeting/GetTier2Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                console.log(resp);
                $scope.tier2zonal_name = resp.data.zonal_name;
                $scope.tier2_monthname = resp.data.tier2_monthname;
                $scope.vertical = resp.data.vertical;
                $scope.headRMD_name = resp.data.headRMD_name;
                $scope.txttier2_remarks = resp.data.tier2_remarks;
                $scope.tier2_approval_status = resp.data.tier2_approval_status;
                $scope.tier2_submitteddate = resp.data.created_date;
                $scope.tier2_submittedby = resp.data.created_by;
                $scope.uploaddocument2_list = resp.data.tier2document;
                $scope.tier2approvallog = resp.data.tier2approvallog;
                $scope.tier2_approveddate = resp.data.tier2_approveddate;

                if (resp.data.tier2approvallog == null) {
                    $scope.tier2nohistoryapproval = true;
                }
                else {
                    $scope.tier2historyapproval = true;
                }
                unlockUI();
            });

            var url = 'api/TierMeeting/GetTier3Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.mlrc_date = resp.data.MLRC_date;
                $scope.monthname = resp.data.tier3_month;
                $scope.txttier3_followup = resp.data.follow_up;
                $scope.tier3_status = resp.data.tier3_status;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.uploaddocument3_list = resp.data.tier3document;
                $scope.completed_date = resp.data.completed_date;
                $scope.completed_by = resp.data.completed_by;
                $scope.completed_flag = resp.data.completed_flag;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.vertical = resp.data.vertical;
                unlockUI();
            });
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=generated');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=generated');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=generated');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerCBO?lstab=generated');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerCBO?lstab=generated');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerCBO?lstab=generated');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerCBO?lstab=generated');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //console.log(resp.data);
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN1";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN2";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN3";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnFPOGeneratetabontroller', dnFPOGeneratetabontroller);

    dnFPOGeneratetabontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnFPOGeneratetabontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnFPOGeneratetabontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };

            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
                $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
                $scope.customer_gid = resp.data.customer_gid;
                unlockUI();

            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });

            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid; console.log(resp.data.tempdn1format_gid)
                document.getElementById('test').innerHTML += $scope.content;
                $scope.document_path = resp.data.document_path;
                $scope.document_name = resp.data.document_name;
                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }

            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                //$scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
                $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

                var param = {
                    urn: $scope.urn
                };

                var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
                SocketService.getparams(url, param).then(function (resp) {
                    console.log('allocation history', resp);
                    $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                    console.log(resp.data.overallhistoryallocationdtl);
                    $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                    $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

                });
                var allocationdtl_gid = {
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                }
                var url = "api/allocationManagement/getallocatedtls";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.zonal_name = resp.data.zonal_name;
                    $scope.state_name = resp.data.state_name;
                    $scope.district_name = resp.data.district_name;
                    $scope.assigned_RM = resp.data.assigned_RM;
                    $scope.customername = resp.data.customername;
                    $scope.customer_urn = resp.data.customer_urn;
                    $scope.ZonalRMname = resp.data.ZonalRMname;
                    $scope.clientName = resp.data.customername;
                });

                var url = "api/visitReport/GetAllocationLogDetail";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.scheduleList = resp.data.schedulelogdtl;
                    $scope.calllogdtlList = resp.data.calllogdtl;

                });

                var url = "api/allocationManagement/GetAllocationCustomerDtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.customerdetails = resp.data;
                    $scope.sanctiondetails = resp.data.loandtl;
                    $scope.customerCollateral = resp.data.collateraldtl;
                    $scope.holdallocationlist = resp.data.holdallocation;
                    $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                    console.log('Gurantor', resp);
                    $scope.customerPromotorlist = resp.data.Promoterdtl;
                    angular.forEach($scope.sanctiondetails, function (value, key) {
                        var params = {
                            sanction_gid: value.sanction_gid,
                            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                        };

                        var url = 'api/allocationManagement/GetAllocateloanList';
                        SocketService.post(url, params).then(function (resp) {
                            value.loandetails = resp.data.loanList;
                            value.expand = false;
                        });
                    });
                });

                var url = "api/customerManagement/HistoryEscrowSummary";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.escrowlist = resp.data.escrowSummary;
                    }
                });

                var url = "api/allocationManagement/getAllocationdocument";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                        $scope.upload_list = resp.data.upload_list;
                        $scope.documentUpload = true;
                    }
                    else {

                        $scope.documentNotUpload = true;
                    }
                });

                var url = "api/visitReport/getvisitreportdtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                    $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                    $scope.customer_gid = resp.data.customer_gid;
                    $scope.txtbusiness_vintage = resp.data.business_vintage,
                        $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                        $scope.txtbusiness_sector = resp.data.business_sector,
                        $scope.txtregister_address = resp.data.registeredoffice_address,
                        $scope.cboriskcode = resp.data.risk_code,
                        $scope.txtactual_address = resp.data.present_address,
                        $scope.txtcontact_dtl1 = resp.data.contact_details1,
                        $scope.txtcontact_dtl2 = resp.data.contact_details2,
                        $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                    $scope.txtlattitude = resp.data.visit_latitude;
                    $scope.txtlongitude = resp.data.visit_longitude;
                    //$scope.firstdisb_date = resp.data.relationship_startedfrom
                    $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                        $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                        $scope.cbogenetic_code = resp.data.geneticcode_complied,
                        $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                        $scope.RMD_visitedname = resp.data.RMD_visitedname;
                    $scope.txtPPA_name = resp.data.PPA_name;
                    $scope.cbovisit_done = resp.data.visit_done,
                        $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                        $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                        $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                    $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                        $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                        $scope.cborepayment_track = resp.data.repayment_track,
                        $scope.cbobasic_records = resp.data.basicrecords_maintain,
                        $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                        $scope.txtpresent_fysales = resp.data.presentFY_sales,
                        $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                        $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                        $scope.txtcbototal_groups = resp.data.total_noofGroups,
                        $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                        $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                        $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                        $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                        $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                        $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                        $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                        $scope.txtpurpose_funding = resp.data.purposeof_funding,
                        $scope.txt_utilisationdtls = resp.data.utilisation_details,
                        $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                        $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                        $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                        $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                        $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                        $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                        $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                        $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                        $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                        $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                        $scope.txttenure_period = resp.data.tenure_period,
                        $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                        $scope.txttenure_period = resp.data.tenure_period,
                        $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                        //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                        $scope.txtoverdue = resp.data.overdue,
                        $scope.txtborrower_commitment = resp.data.borrower_commitment,
                        $scope.txtpending_documentation = resp.data.pending_documentation,
                        //$scope.txtasset_verification = resp.data.asset_verification,
                        $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                        $scope.txtenduse_loan = resp.data.enduse_loan,
                        //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                        $scope.txtoverall_remarks = resp.data.overall_remarks,
                        $scope.txtPDD_compliance = resp.data.PDD_compliance,
                        $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                        $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                        $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                        $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                        $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                    $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                        $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                        $scope.editvisittype = resp.data.editvisittype;
                    if (resp.data.RM_name != null) {
                        $scope.relationship_managername = resp.data.RM_name
                    }
                    if (resp.data.constitution != null) {
                        $scope.constitution = resp.data.constitution
                    }
                    if (resp.data.credit_managername != null) {
                        $scope.credit_managername = resp.data.credit_managername;
                    }
                    if (resp.data.visit_date != null) {
                        var p = resp.data.visit_date.split(/\D/g)
                        $scope.visitdate = [p[2], p[1], p[0]].join("-");
                    }

                    if (resp.data.dealing_withsince != null) {
                        var p = resp.data.dealing_withsince.split(/\D/g)
                        $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                    }

                    if (resp.data.disbursement_date != null) {
                        var p = resp.data.disbursement_date.split(/\D/g)
                        $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                    }

                });

                var url = "api/visitReport/getvisitReportDocument";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.visitreportdocument = resp.data.visitreportdocument;
                });

                var url = "api/visitReport/getvisitReportPhoto";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.visitreportphoto = resp.data.visitreportphoto;
                });

                var url = "api/TierMeeting/GetViewTierObservationdtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.customer_name = resp.data.customer_name;
                    $scope.customer_urn = resp.data.customer_urn;
                    $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                    $scope.report_pertainingto = resp.data.report_pertainingto;
                    $scope.vertical = resp.data.vertical;
                    $scope.disbursement_amount = resp.data.disbursement_amount;
                    $scope.approving_authority = resp.data.approving_authority;
                    $scope.loansanction_date = resp.data.loansanction_date;
                    $scope.relationship_manager_name = resp.data.relationship_manager_name;
                    $scope.PPA_name = resp.data.PPA_name;
                    $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                    $scope.loandisbursement_date = resp.data.loandisbursement_date;
                    $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                    $scope.sanction_amount = resp.data.sanction_amount;
                    $scope.outstanding_amount = resp.data.outstanding_amount;
                    $scope.current_DPD = resp.data.current_DPD;
                    $scope.contact_details1 = resp.data.contact_details1;
                    $scope.contact_details2 = resp.data.contact_details2;
                    $scope.observation_flag = resp.data.observation_flag;
                    $scope.cboriskcode = resp.data.risk_code;
                    $scope.criticalobservation = resp.data.criticalTierobservation;
                    $scope.tiercodedtl = resp.data.tierReportdtl;
                    unlockUI();
                });
                var tier1format_gid = {
                    tier1format_gid: localStorage.getItem('tier1format_gid')
                }
                var url = "api/TierMeeting/GetTier1Format360Dtl";
                SocketService.getparams(url, tier1format_gid).then(function (resp) {
                    $scope.txtobservations = resp.data.tier1_observations;
                    if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                    }
                    else {
                        $scope.cboriskcode = resp.data.tier1_code;
                    }
                    $scope.txtrationale_justification = resp.data.tier1_justification;
                    $scope.txtprocess_gap = resp.data.tier1_processgap;
                    $scope.txtcode_changereason = resp.data.tier1code_changereason;
                    $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                    $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                    $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                    $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                    $scope.txtATR_date = resp.data.tier1_atrdate;
                    $scope.tier1format_gid = resp.data.tier1format_gid;
                    $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                    $scope.tier1approvallog = resp.data.tier1approvallog;
                    if ($scope.tier1code_changeflag == 'Y') {
                        $scope.disablecodechangereasonshow = true;
                    }
                    else {
                        $scope.disablecodechangereasonshow = false;
                    }

                    if (resp.data.tier1approvallog == null) {
                        $scope.nohistoryapproval = true;
                    }
                    else {
                        $scope.historyapproval = true;
                    }
                });

                var url = 'api/TierMeeting/GetTier2Report360Dtl';
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    console.log(resp);
                    $scope.tier2zonal_name = resp.data.zonal_name;
                    $scope.tier2_monthname = resp.data.tier2_monthname;
                    $scope.vertical = resp.data.vertical;
                    $scope.headRMD_name = resp.data.headRMD_name;
                    $scope.txttier2_remarks = resp.data.tier2_remarks;
                    $scope.tier2_approval_status = resp.data.tier2_approval_status;
                    $scope.tier2_submitteddate = resp.data.created_date;
                    $scope.tier2_submittedby = resp.data.created_by;
                    $scope.uploaddocument2_list = resp.data.tier2document;
                    $scope.tier2approvallog = resp.data.tier2approvallog;
                    $scope.tier2_approveddate = resp.data.tier2_approveddate;

                    if (resp.data.tier2approvallog == null) {
                        $scope.tier2nohistoryapproval = true;
                    }
                    else {
                        $scope.tier2historyapproval = true;
                    }
                    unlockUI();
                });

                var url = 'api/TierMeeting/GetTier3Report360Dtl';
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                    $scope.mlrc_date = resp.data.MLRC_date;
                    $scope.monthname = resp.data.tier3_month;
                    $scope.txttier3_followup = resp.data.follow_up;
                    $scope.tier3_status = resp.data.tier3_status;
                    $scope.created_date = resp.data.created_date;
                    $scope.created_by = resp.data.created_by;
                    $scope.uploaddocument3_list = resp.data.tier3document;
                    $scope.completed_date = resp.data.completed_date;
                    $scope.completed_by = resp.data.completed_by;
                    $scope.completed_flag = resp.data.completed_flag;
                    $scope.completed_remarks = resp.data.completed_remarks;
                    $scope.vertical = resp.data.vertical;
                    unlockUI();
                });
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
        }
        $scope.onselectedchangeusertype = function () {
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }

        //$scope.downloads = function (val1, val2) {
        //    var phyPath = val1;           
        //    var relPath = phyPath.split("EMS");
        //    var relpath1 = relPath[1].replace("\\", "/");      
        //    var hosts = window.location.host;
        //    var prefix = location.protocol + "//";
        //    var str = prefix.concat(hosts, relpath1);
        //    var link = document.createElement("a");
        //    var name = val2.split('.');
        //    link.download = name[0];
        //    var uri = str;
        //    link.href = uri;
        //    link.click();
        //}
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //console.log(resp.data);
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN1";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN2";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN3";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnOthersGeneratetabontroller', dnOthersGeneratetabontroller);

    dnOthersGeneratetabontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function dnOthersGeneratetabontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnOthersGeneratetabontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');

            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };

            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
                $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
                $scope.customer_gid = resp.data.customer_gid;
                unlockUI();

            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid; console.log(resp.data.tempdn1format_gid)
                document.getElementById('test').innerHTML += $scope.content;
                $scope.document_path = resp.data.document_path;
                $scope.document_name = resp.data.document_name;

                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                // $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                console.log(resp.data.courier_refno)
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                console.log(resp.data.dn2courier_refno)
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
                $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

                var param = {
                    urn: $scope.urn
                };

                var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
                SocketService.getparams(url, param).then(function (resp) {
                    console.log('allocation history', resp);
                    $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                    console.log(resp.data.overallhistoryallocationdtl);
                    $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                    $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

                });
                var allocationdtl_gid = {
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                }
                var url = "api/allocationManagement/getallocatedtls";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.zonal_name = resp.data.zonal_name;
                    $scope.state_name = resp.data.state_name;
                    $scope.district_name = resp.data.district_name;
                    $scope.assigned_RM = resp.data.assigned_RM;
                    $scope.customername = resp.data.customername;
                    $scope.customer_urn = resp.data.customer_urn;
                    $scope.ZonalRMname = resp.data.ZonalRMname;
                    $scope.clientName = resp.data.customername;
                });

                var url = "api/visitReport/GetAllocationLogDetail";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.scheduleList = resp.data.schedulelogdtl;
                    $scope.calllogdtlList = resp.data.calllogdtl;

                });

                var url = "api/allocationManagement/GetAllocationCustomerDtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.customerdetails = resp.data;
                    $scope.sanctiondetails = resp.data.loandtl;
                    $scope.customerCollateral = resp.data.collateraldtl;
                    $scope.holdallocationlist = resp.data.holdallocation;
                    $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                    console.log('Gurantor', resp);
                    $scope.customerPromotorlist = resp.data.Promoterdtl;
                    angular.forEach($scope.sanctiondetails, function (value, key) {
                        var params = {
                            sanction_gid: value.sanction_gid,
                            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                        };

                        var url = 'api/allocationManagement/GetAllocateloanList';
                        SocketService.post(url, params).then(function (resp) {
                            value.loandetails = resp.data.loanList;
                            value.expand = false;
                        });
                    });
                });

                var url = "api/customerManagement/HistoryEscrowSummary";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.escrowlist = resp.data.escrowSummary;
                    }
                });

                var url = "api/allocationManagement/getAllocationdocument";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                        $scope.upload_list = resp.data.upload_list;
                        $scope.documentUpload = true;
                    }
                    else {

                        $scope.documentNotUpload = true;
                    }
                });

                var url = "api/visitReport/getvisitreportdtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                    $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                    $scope.customer_gid = resp.data.customer_gid;
                    $scope.txtbusiness_vintage = resp.data.business_vintage,
                        $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                        $scope.txtbusiness_sector = resp.data.business_sector,
                        $scope.txtregister_address = resp.data.registeredoffice_address,
                        $scope.cboriskcode = resp.data.risk_code,
                        $scope.txtactual_address = resp.data.present_address,
                        $scope.txtcontact_dtl1 = resp.data.contact_details1,
                        $scope.txtcontact_dtl2 = resp.data.contact_details2,
                        $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                    $scope.txtlattitude = resp.data.visit_latitude;
                    $scope.txtlongitude = resp.data.visit_longitude;
                    //$scope.firstdisb_date = resp.data.relationship_startedfrom
                    $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                        $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                        $scope.cbogenetic_code = resp.data.geneticcode_complied,
                        $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                        $scope.RMD_visitedname = resp.data.RMD_visitedname;
                    $scope.txtPPA_name = resp.data.PPA_name;
                    $scope.cbovisit_done = resp.data.visit_done,
                        $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                        $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                        $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                    $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                        $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                        $scope.cborepayment_track = resp.data.repayment_track,
                        $scope.cbobasic_records = resp.data.basicrecords_maintain,
                        $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                        $scope.txtpresent_fysales = resp.data.presentFY_sales,
                        $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                        $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                        $scope.txtcbototal_groups = resp.data.total_noofGroups,
                        $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                        $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                        $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                        $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                        $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                        $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                        $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                        $scope.txtpurpose_funding = resp.data.purposeof_funding,
                        $scope.txt_utilisationdtls = resp.data.utilisation_details,
                        $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                        $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                        $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                        $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                        $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                        $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                        $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                        $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                        $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                        $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                        $scope.txttenure_period = resp.data.tenure_period,
                        $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                        $scope.txttenure_period = resp.data.tenure_period,
                        $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                        //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                        $scope.txtoverdue = resp.data.overdue,
                        $scope.txtborrower_commitment = resp.data.borrower_commitment,
                        $scope.txtpending_documentation = resp.data.pending_documentation,
                        //$scope.txtasset_verification = resp.data.asset_verification,
                        $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                        $scope.txtenduse_loan = resp.data.enduse_loan,
                        //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                        $scope.txtoverall_remarks = resp.data.overall_remarks,
                        $scope.txtPDD_compliance = resp.data.PDD_compliance,
                        $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                        $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                        $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                        $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                        $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                    $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                        $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                        $scope.editvisittype = resp.data.editvisittype;
                    if (resp.data.RM_name != null) {
                        $scope.relationship_managername = resp.data.RM_name
                    }
                    if (resp.data.constitution != null) {
                        $scope.constitution = resp.data.constitution
                    }
                    if (resp.data.credit_managername != null) {
                        $scope.credit_managername = resp.data.credit_managername;
                    }
                    if (resp.data.visit_date != null) {
                        var p = resp.data.visit_date.split(/\D/g)
                        $scope.visitdate = [p[2], p[1], p[0]].join("-");
                    }

                    if (resp.data.dealing_withsince != null) {
                        var p = resp.data.dealing_withsince.split(/\D/g)
                        $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                    }

                    if (resp.data.disbursement_date != null) {
                        var p = resp.data.disbursement_date.split(/\D/g)
                        $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                    }

                });

                var url = "api/visitReport/getvisitReportDocument";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.visitreportdocument = resp.data.visitreportdocument;
                });

                var url = "api/visitReport/getvisitReportPhoto";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.visitreportphoto = resp.data.visitreportphoto;
                });

                var url = "api/TierMeeting/GetViewTierObservationdtl";
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    $scope.customer_name = resp.data.customer_name;
                    $scope.customer_urn = resp.data.customer_urn;
                    $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                    $scope.report_pertainingto = resp.data.report_pertainingto;
                    $scope.vertical = resp.data.vertical;
                    $scope.disbursement_amount = resp.data.disbursement_amount;
                    $scope.approving_authority = resp.data.approving_authority;
                    $scope.loansanction_date = resp.data.loansanction_date;
                    $scope.relationship_manager_name = resp.data.relationship_manager_name;
                    $scope.PPA_name = resp.data.PPA_name;
                    $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                    $scope.loandisbursement_date = resp.data.loandisbursement_date;
                    $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                    $scope.sanction_amount = resp.data.sanction_amount;
                    $scope.outstanding_amount = resp.data.outstanding_amount;
                    $scope.current_DPD = resp.data.current_DPD;
                    $scope.contact_details1 = resp.data.contact_details1;
                    $scope.contact_details2 = resp.data.contact_details2;
                    $scope.observation_flag = resp.data.observation_flag;
                    $scope.cboriskcode = resp.data.risk_code;
                    $scope.criticalobservation = resp.data.criticalTierobservation;
                    $scope.tiercodedtl = resp.data.tierReportdtl;
                    unlockUI();
                });
                var tier1format_gid = {
                    tier1format_gid: localStorage.getItem('tier1format_gid')
                }
                var url = "api/TierMeeting/GetTier1Format360Dtl";
                SocketService.getparams(url, tier1format_gid).then(function (resp) {
                    $scope.txtobservations = resp.data.tier1_observations;
                    if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                    }
                    else {
                        $scope.cboriskcode = resp.data.tier1_code;
                    }
                    $scope.txtrationale_justification = resp.data.tier1_justification;
                    $scope.txtprocess_gap = resp.data.tier1_processgap;
                    $scope.txtcode_changereason = resp.data.tier1code_changereason;
                    $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                    $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                    $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                    $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                    $scope.txtATR_date = resp.data.tier1_atrdate;
                    $scope.tier1format_gid = resp.data.tier1format_gid;
                    $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                    $scope.tier1approvallog = resp.data.tier1approvallog;
                    if ($scope.tier1code_changeflag == 'Y') {
                        $scope.disablecodechangereasonshow = true;
                    }
                    else {
                        $scope.disablecodechangereasonshow = false;
                    }

                    if (resp.data.tier1approvallog == null) {
                        $scope.nohistoryapproval = true;
                    }
                    else {
                        $scope.historyapproval = true;
                    }
                });

                var url = 'api/TierMeeting/GetTier2Report360Dtl';
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                    console.log(resp);
                    $scope.tier2zonal_name = resp.data.zonal_name;
                    $scope.tier2_monthname = resp.data.tier2_monthname;
                    $scope.vertical = resp.data.vertical;
                    $scope.headRMD_name = resp.data.headRMD_name;
                    $scope.txttier2_remarks = resp.data.tier2_remarks;
                    $scope.tier2_approval_status = resp.data.tier2_approval_status;
                    $scope.tier2_submitteddate = resp.data.created_date;
                    $scope.tier2_submittedby = resp.data.created_by;
                    $scope.uploaddocument2_list = resp.data.tier2document;
                    $scope.tier2approvallog = resp.data.tier2approvallog;
                    $scope.tier2_approveddate = resp.data.tier2_approveddate;

                    if (resp.data.tier2approvallog == null) {
                        $scope.tier2nohistoryapproval = true;
                    }
                    else {
                        $scope.tier2historyapproval = true;
                    }
                    unlockUI();
                });

                var url = 'api/TierMeeting/GetTier3Report360Dtl';
                SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                    $scope.mlrc_date = resp.data.MLRC_date;
                    $scope.monthname = resp.data.tier3_month;
                    $scope.txttier3_followup = resp.data.follow_up;
                    $scope.tier3_status = resp.data.tier3_status;
                    $scope.created_date = resp.data.created_date;
                    $scope.created_by = resp.data.created_by;
                    $scope.uploaddocument3_list = resp.data.tier3document;
                    $scope.completed_date = resp.data.completed_date;
                    $scope.completed_by = resp.data.completed_by;
                    $scope.completed_flag = resp.data.completed_flag;
                    $scope.completed_remarks = resp.data.completed_remarks;
                    $scope.vertical = resp.data.vertical;
                    unlockUI();
                });
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

                // var phyPath = resp.data;
                // console.log(resp.data);
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN1";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN2";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                // var phyPath = resp.data;
                // var relPath = phyPath.split("EMS");
                // var relpath1 = relPath[1].replace("\\", "/");
                // var hosts = window.location.host;
                // var prefix = location.protocol + "//";
                // var str = prefix.concat(hosts, relpath1);
                // var link = document.createElement("a");
                // link.download = "Report - DN3";
                // var uri = str;
                // link.href = uri;
                // link.click();
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnRetailGeneratetabontroller', dnRetailGeneratetabontroller);

    dnRetailGeneratetabontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnRetailGeneratetabontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnRetailGeneratetabontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
         
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };

            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
                $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
                $scope.customer_gid = resp.data.customer_gid;
                unlockUI();

            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });
           
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid; console.log(resp.data.tempdn1format_gid)
                document.getElementById('test').innerHTML += $scope.content;
                $scope.document_path = resp.data.document_path;
                $scope.document_name = resp.data.document_name;

                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
              //  $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');
            var param = {
                urn: $scope.urn
            };

            var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
            SocketService.getparams(url, param).then(function (resp) {
                console.log('allocation history', resp);
                $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                console.log(resp.data.overallhistoryallocationdtl);
                $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

            });
            var allocationdtl_gid = {
                allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
            }
            var url = "api/allocationManagement/getallocatedtls";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.zonal_name = resp.data.zonal_name;
                $scope.state_name = resp.data.state_name;
                $scope.district_name = resp.data.district_name;
                $scope.assigned_RM = resp.data.assigned_RM;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.ZonalRMname = resp.data.ZonalRMname;
                $scope.clientName = resp.data.customername;
            });

            var url = "api/visitReport/GetAllocationLogDetail";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.scheduleList = resp.data.schedulelogdtl;
                $scope.calllogdtlList = resp.data.calllogdtl;

            });

            var url = "api/allocationManagement/GetAllocationCustomerDtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.sanctiondetails = resp.data.loandtl;
                $scope.customerCollateral = resp.data.collateraldtl;
                $scope.holdallocationlist = resp.data.holdallocation;
                $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                console.log('Gurantor', resp);
                $scope.customerPromotorlist = resp.data.Promoterdtl;
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid,
                        allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                    };

                    var url = 'api/allocationManagement/GetAllocateloanList';
                    SocketService.post(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanList;
                        value.expand = false;
                    });
                });
            });

            var url = "api/customerManagement/HistoryEscrowSummary";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.escrowlist = resp.data.escrowSummary;
                }
            });

            var url = "api/allocationManagement/getAllocationdocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                    $scope.upload_list = resp.data.upload_list;
                    $scope.documentUpload = true;
                }
                else {

                    $scope.documentNotUpload = true;
                }
            });

            var url = "api/visitReport/getvisitreportdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                $scope.customer_gid = resp.data.customer_gid;
                $scope.txtbusiness_vintage = resp.data.business_vintage,
                $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                $scope.txtbusiness_sector = resp.data.business_sector,
                $scope.txtregister_address = resp.data.registeredoffice_address,
                $scope.cboriskcode = resp.data.risk_code,
                $scope.txtactual_address = resp.data.present_address,
                $scope.txtcontact_dtl1 = resp.data.contact_details1,
                $scope.txtcontact_dtl2 = resp.data.contact_details2,
                $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                $scope.txtlattitude = resp.data.visit_latitude;
                $scope.txtlongitude = resp.data.visit_longitude;
                //$scope.firstdisb_date = resp.data.relationship_startedfrom
                $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                $scope.cbogenetic_code = resp.data.geneticcode_complied,
                $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                $scope.RMD_visitedname = resp.data.RMD_visitedname;
                $scope.txtPPA_name = resp.data.PPA_name;
                $scope.cbovisit_done = resp.data.visit_done,
                $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                $scope.cborepayment_track = resp.data.repayment_track,
                $scope.cbobasic_records = resp.data.basicrecords_maintain,
                $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                $scope.txtpresent_fysales = resp.data.presentFY_sales,
                $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                $scope.txtcbototal_groups = resp.data.total_noofGroups,
                $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                $scope.txtpurpose_funding = resp.data.purposeof_funding,
                $scope.txt_utilisationdtls = resp.data.utilisation_details,
                $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                $scope.txtoverdue = resp.data.overdue,
                $scope.txtborrower_commitment = resp.data.borrower_commitment,
                $scope.txtpending_documentation = resp.data.pending_documentation,
                //$scope.txtasset_verification = resp.data.asset_verification,
                $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                $scope.txtenduse_loan = resp.data.enduse_loan,
                //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                $scope.txtoverall_remarks = resp.data.overall_remarks,
                $scope.txtPDD_compliance = resp.data.PDD_compliance,
                $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                 $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                $scope.editvisittype = resp.data.editvisittype;
                if (resp.data.RM_name != null) {
                    $scope.relationship_managername = resp.data.RM_name
                }
                if (resp.data.constitution != null) {
                    $scope.constitution = resp.data.constitution
                }
                if (resp.data.credit_managername != null) {
                    $scope.credit_managername = resp.data.credit_managername;
                }
                if (resp.data.visit_date != null) {
                    var p = resp.data.visit_date.split(/\D/g)
                    $scope.visitdate = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.dealing_withsince != null) {
                    var p = resp.data.dealing_withsince.split(/\D/g)
                    $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.disbursement_date != null) {
                    var p = resp.data.disbursement_date.split(/\D/g)
                    $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                }

            });
            var url = "api/visitReport/getvisitReportDocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportdocument = resp.data.visitreportdocument;
            });

            var url = "api/visitReport/getvisitReportPhoto";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportphoto = resp.data.visitreportphoto;
            });

            var url = "api/TierMeeting/GetViewTierObservationdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                $scope.report_pertainingto = resp.data.report_pertainingto;
                $scope.vertical = resp.data.vertical;
                $scope.disbursement_amount = resp.data.disbursement_amount;
                $scope.approving_authority = resp.data.approving_authority;
                $scope.loansanction_date = resp.data.loansanction_date;
                $scope.relationship_manager_name = resp.data.relationship_manager_name;
                $scope.PPA_name = resp.data.PPA_name;
                $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                $scope.loandisbursement_date = resp.data.loandisbursement_date;
                $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.outstanding_amount = resp.data.outstanding_amount;
                $scope.current_DPD = resp.data.current_DPD;
                $scope.contact_details1 = resp.data.contact_details1;
                $scope.contact_details2 = resp.data.contact_details2;
                $scope.observation_flag = resp.data.observation_flag;
                $scope.cboriskcode = resp.data.risk_code;
                $scope.criticalobservation = resp.data.criticalTierobservation;
                $scope.tiercodedtl = resp.data.tierReportdtl;
                unlockUI();
            });
            var tier1format_gid = {
                tier1format_gid: localStorage.getItem('tier1format_gid')
            }
            var url = "api/TierMeeting/GetTier1Format360Dtl";
            SocketService.getparams(url, tier1format_gid).then(function (resp) {
                $scope.txtobservations = resp.data.tier1_observations;
                if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                }
                else {
                    $scope.cboriskcode = resp.data.tier1_code;
                }
                $scope.txtrationale_justification = resp.data.tier1_justification;
                $scope.txtprocess_gap = resp.data.tier1_processgap;
                $scope.txtcode_changereason = resp.data.tier1code_changereason;
                $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                $scope.txtATR_date = resp.data.tier1_atrdate;
                $scope.tier1format_gid = resp.data.tier1format_gid;
                $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                $scope.tier1approvallog = resp.data.tier1approvallog;
                if ($scope.tier1code_changeflag == 'Y') {
                    $scope.disablecodechangereasonshow = true;
                }
                else {
                    $scope.disablecodechangereasonshow = false;
                }

                if (resp.data.tier1approvallog == null) {
                    $scope.nohistoryapproval = true;
                }
                else {
                    $scope.historyapproval = true;
                }
            });

            var url = 'api/TierMeeting/GetTier2Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                console.log(resp);
                $scope.tier2zonal_name = resp.data.zonal_name;
                $scope.tier2_monthname = resp.data.tier2_monthname;
                $scope.vertical = resp.data.vertical;
                $scope.headRMD_name = resp.data.headRMD_name;
                $scope.txttier2_remarks = resp.data.tier2_remarks;
                $scope.tier2_approval_status = resp.data.tier2_approval_status;
                $scope.tier2_submitteddate = resp.data.created_date;
                $scope.tier2_submittedby = resp.data.created_by;
                $scope.uploaddocument2_list = resp.data.tier2document;
                $scope.tier2approvallog = resp.data.tier2approvallog;
                $scope.tier2_approveddate = resp.data.tier2_approveddate;

                if (resp.data.tier2approvallog == null) {
                    $scope.tier2nohistoryapproval = true;
                }
                else {
                    $scope.tier2historyapproval = true;
                }
                unlockUI();
            });

            var url = 'api/TierMeeting/GetTier3Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.mlrc_date = resp.data.MLRC_date;
                $scope.monthname = resp.data.tier3_month;
                $scope.txttier3_followup = resp.data.follow_up;
                $scope.tier3_status = resp.data.tier3_status;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.uploaddocument3_list = resp.data.tier3document;
                $scope.completed_date = resp.data.completed_date;
                $scope.completed_by = resp.data.completed_by;
                $scope.completed_flag = resp.data.completed_flag;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.vertical = resp.data.vertical;
                unlockUI();
            });
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
               
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks,
                tempdn1format_gid: $scope.tempdn1format_gid
            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                

                //var phyPath = resp.data;

                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN1";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN2";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN3";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerAEcontroller', dnTrackerAEcontroller);

    dnTrackerAEcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnTrackerAEcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerAEcontroller';
        activate();
        function activate() {          
            $scope.totalDisplayedpending = 100;
            $scope.totalDisplayedgenerated = 100;
            $scope.totalDisplayedskipped = 100;
            $scope.totalDisplayedexclusion = 100;
            $scope.totalDisplayedlegalsr = 100;
            $scope.total = 0;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            //Get ADM updated Information
            var url = "api/misDataimport/GetDNcount"
            lockUI();
            SocketService.get(url).then(function (resp) {              
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
        
            var url = "api/LglTrnDNTrackerAE/getAEPendingList"
            SocketService.get(url).then(function (resp) {
              
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.pending_total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.pending_total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
            var url = "api/LglTrnDNTrackerAE/GetAE_Count"
            unlockUI();
            SocketService.get(url).then(function (resp) {
                $scope.lblpending_count = resp.data.lblpending_count;
                $scope.lblgenerated_count = resp.data.lblgenerated_count;
                console.log(resp.data.lblexclusion_count)
                $scope.lblskipped_count = resp.data.lblskipped_count;
                $scope.lblexclusion_count = resp.data.lblexclusion_count;
                $scope.lbllegalsr_count = resp.data.lbllegalsr_count;
            });

        }
        $scope.dnskip = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerSkipped?lstab=AE');
        }
        $scope.dngenerated_history = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerHistory?lstab=AE');
        }
        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerAE/getAEPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.pending_total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.pending_total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerAE/getAEGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.generated_total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.generated_total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        function generated_list() {
            var url = "api/LglTrnDNTrackerAE/getAEGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.generated_total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.generated_total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        function exclusion_list() {
            var url = "api/LglTrnDNTrackerAE/getAEExclusionList"

            SocketService.get(url).then(function (resp) {
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.exclusion_total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.exclusion_total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerAE/getAESkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.skipped_total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.skipped_total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerAE/getAEExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.exclusion_total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.exclusion_total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });

        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerAE/getAELegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.legalsr_total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.legalsr_total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }
        $scope.popupDNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var d = new Date();
            $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var d = new Date();
                $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        skip_reason: $scope.txtskip_reason,
                        valid_date: $scope.txtskipvalid_date
                    }
                    console.log(params)
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerAEGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerAE2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerAE3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            localStorage.setItem('MyZonalAllocationHistory', 'N');
            $location.url('app/LglTrnDN2GeneratedAE?lstab=dn2tracker');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');
                                    activate();
                                    generated_list();
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate();
                                generated_list();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');
                                activate();
                                generated_list();
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }

                        });
                    }
                    activate();
                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();
                            exclusion_list();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }

        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                //var phyPath = resp.data;
                //console.log(resp.data);
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN1";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                // Notify.alert('DN1 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN2";
                //var uri = str;
                //link.href = uri;
                //link.click();
                // DownloaddocumentService.Downloaddocument(resp.data, "Report - DN2.pdf");
                // Notify.alert('DN2 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
                //var phyPath = resp.data;
                //var relPath = phyPath.split("EMS");
                //var relpath1 = relPath[1].replace("\\", "/");
                //var hosts = window.location.host;
                //var prefix = location.protocol + "//";
                //var str = prefix.concat(hosts, relpath1);
                //var link = document.createElement("a");
                //link.download = "Report - DN3";
                //var uri = str;
                //link.href = uri;
                //link.click();
                //   DownloaddocumentService.Downloaddocument(resp.data, "Report - DN3.pdf");
                // Notify.alert('DN3 Report Downloaded Successfully', 'success')
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('DNTrackerAE2generatedcontroller', DNTrackerAE2generatedcontroller);

    DNTrackerAE2generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll', 'DownloaddocumentService', 'cmnfunctionService'];

    function DNTrackerAE2generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService, cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'DNTrackerAE2generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;

            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });

        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
                $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                $scope.txtbusiness_sector = resp.data.business_sector,
                $scope.txtregister_address = resp.data.registeredoffice_address,
                $scope.cboriskcode = resp.data.risk_code,
                $scope.txtactual_address = resp.data.present_address,
                $scope.txtcontact_dtl1 = resp.data.contact_details1,
                $scope.txtcontact_dtl2 = resp.data.contact_details2,
                $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                $scope.cbogenetic_code = resp.data.geneticcode_complied,
                $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
                $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                $scope.cborepayment_track = resp.data.repayment_track,
                $scope.cbobasic_records = resp.data.basicrecords_maintain,
                $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                $scope.txtpresent_fysales = resp.data.presentFY_sales,
                $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                $scope.txtcbototal_groups = resp.data.total_noofGroups,
                $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                $scope.txtpurpose_funding = resp.data.purposeof_funding,
                $scope.txt_utilisationdtls = resp.data.utilisation_details,
                $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                $scope.txtoverdue = resp.data.overdue,
                $scope.txtborrower_commitment = resp.data.borrower_commitment,
                $scope.txtpending_documentation = resp.data.pending_documentation,
                //$scope.txtasset_verification = resp.data.asset_verification,
                $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                $scope.txtenduse_loan = resp.data.enduse_loan,
                //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                $scope.txtoverall_remarks = resp.data.overall_remarks,
                $scope.txtPDD_compliance = resp.data.PDD_compliance,
                $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }

        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN2template_list';

            SocketService.get(url).then(function (resp) {
                console.log(resp);
                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn2_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn2_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - D3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
               
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerAE3generatedcontroller', LglTrnDNTrackerAE3generatedcontroller);

    LglTrnDNTrackerAE3generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerAE3generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerAE3generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
         
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                //if (resp.data.courier_status == 'DN1 Sent') {
                //    $scope.dn1couriered_by = resp.data.couriered_by;
                //    $scope.dn1courier_center = resp.data.courier_center;
                //    $scope.dn1courier_date = resp.data.courier_date;
                //    $scope.dn1courier_refno = resp.data.courier_refno;
                //    $scope.dn1remarks = resp.data.courier_remarks;
                //    $scope.dn1courier_status = resp.data.dn1courier_status;
                //}
                //else if (resp.data.courier_status == 'DN2 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                //    $scope.dn1courier_center = resp.data.dn2courier_center;
                //    $scope.dn1courier_date = resp.data.dn2courier_date;
                //    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                //    $scope.dn1remarks = resp.data.dn2remarks;
                //    $scope.dn1courier_status = resp.data.dn2courier_status;
                //}
                //else if (resp.data.courier_status == 'DN3 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                //    $scope.dn1courier_center = resp.data.dn3courier_center;
                //    $scope.dn1courier_date = resp.data.dn3courier_date;
                //    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                //    $scope.dn1remarks = resp.data.dn3remarks;
                // $scope.dn1courier_status = resp.data.dn3courier_status;
                //}
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
           
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
      
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
     
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.account_no, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN3template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn3_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn3_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                     if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
               if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerAEgeneratedcontroller', LglTrnDNTrackerAEgeneratedcontroller);

    LglTrnDNTrackerAEgeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerAEgeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerAEgeneratedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
         
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
           
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
             
                if ((resp.data.DN1status == 'DN1 Sent')) {

                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });
           
        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');
           
        var param = {
            urn: $scope.urn
        };
           
        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;
          
            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {          
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });
    

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
             
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
              
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;                  
                    unlockUI();
                   
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
      
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.onselectedchangeusertype = function () {
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;


            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
        

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                console.log(resp.data.dn_type)
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }

                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                  
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                 
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                               SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn1ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn1_date;
                                            $scope.dn_type = resp.data.dn_type;
                                          
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn1_flag = resp.data.dn1_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn1_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                       
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }


                    else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                lockUI();
                               SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                      
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                      
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn1ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn1_date;
                                        $scope.dn_type = resp.data.dn_type;                                       
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn1_flag = resp.data.dn1_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn1_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                   SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }


                else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };

                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                  
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
            $("#addupload").val('');
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
         
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
          
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
          
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerCBOcontroller', dnTrackerCBOcontroller);

    dnTrackerCBOcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function dnTrackerCBOcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerCBOcontroller';
        activate();
        function activate() {
            $scope.total = 0;
            $scope.totalDisplayed = 0;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            var url = "api/misDataimport/GetDNcount"

            SocketService.get(url).then(function (resp) {
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOPendingList"
            SocketService.get(url).then(function (resp) {

                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
            var url = "api/LglTrnDNTrackerCBO/GetCBO_Count"
            unlockUI();
            SocketService.get(url).then(function (resp) {
                $scope.lblpending_count = resp.data.lblpending_count;
                $scope.lblgenerated_count = resp.data.lblgenerated_count;
                $scope.lblskipped_count = resp.data.lblskipped_count;
                $scope.lblexclusion_count = resp.data.lblexclusion_count;
                $scope.lbllegalsr_count = resp.data.lbllegalsr_count;
            });
        }
        function generated_list() {
            var url = "api/LglTrnDNTrackerCBO/getCBOGeneratedList"

            SocketService.get(url).then(function (resp) {
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        $scope.dnskip = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerSkipped?lstab=CBO');
        }
        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOSkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });

        }
        function exclusion_list() {
            var url = "api/LglTrnDNTrackerCBO/getCBOExclusionList"

            SocketService.get(url).then(function (resp) {
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerCBO/getCBOPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerCBO/getCBOLegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }
        $scope.popupDNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var d = new Date();
                $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        skip_reason: $scope.txtskip_reason,
                        valid_date: $scope.txtskipvalid_date
                    }
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBOGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBO2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerCBO3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val, customer_gid) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            localStorage.setItem('MyZonalAllocationHistory', 'N');
            $location.url('app/lglTrnDNCBOGenerateTab?lstab=generated');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');

                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate();
                                generated_list();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');

                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate();
                            generated_list();
                        });
                    }

                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();
                            exclusion_list();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }


        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(resp.data, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }

            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('DNTrackerCBO2generatedcontroller', DNTrackerCBO2generatedcontroller);

    DNTrackerCBO2generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function DNTrackerCBO2generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'DNTrackerCBO2generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                console.log(resp.data.courier_status);
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
          
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
       
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/GetCBODN2template_list';

            SocketService.get(url).then(function (resp) {
                console.log(resp);
                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dncbo2_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dncbo2_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {
            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                 if ($scope.cbotemplate.template_name == 'Legal-CBO-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                               SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });
                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                 SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
          if ($scope.cbotemplate.template_name == 'Legal-CBO-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                           SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });
                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }

            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerCBO?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                
                SocketService.post(url,params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                });
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerCBO3generatedcontroller', LglTrnDNTrackerCBO3generatedcontroller);

    LglTrnDNTrackerCBO3generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerCBO3generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerCBO3generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                console.log(resp.data.dn2history_list)
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn1couriered_by = resp.data.couriered_by;
                $scope.dn1couriered_by = resp.data.couriered_by;
                $scope.dn1courier_center = resp.data.courier_center;
                $scope.dn1courier_date = resp.data.courier_date;
                $scope.dn1courier_refno = resp.data.courier_refno;
                $scope.dn1remarks = resp.data.courier_remarks;
                $scope.dn1courier_status = resp.data.dn1courier_status;
                //if (resp.data.courier_status == 'DN1 Sent') {
                //    $scope.dn1couriered_by = resp.data.couriered_by;
                //    $scope.dn1courier_center = resp.data.courier_center;
                //    $scope.dn1courier_date = resp.data.courier_date;
                //    $scope.dn1courier_refno = resp.data.courier_refno;
                //    $scope.dn1remarks = resp.data.courier_remarks;
                //    $scope.dn1courier_status = resp.data.dn1courier_status;
                //}
                //else if (resp.data.courier_status == 'DN2 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                //    $scope.dn1courier_center = resp.data.dn2courier_center;
                //    $scope.dn1courier_date = resp.data.dn2courier_date;
                //    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                //    $scope.dn1remarks = resp.data.dn2remarks;
                //    $scope.dn1courier_status = resp.data.dn2courier_status;
                //}
                //else if (resp.data.courier_status == 'DN3 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                //    $scope.dn1courier_center = resp.data.dn3courier_center;
                //    $scope.dn1courier_date = resp.data.dn3courier_date;
                //    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                //    $scope.dn1remarks = resp.data.dn3remarks;
                // $scope.dn1courier_status = resp.data.dn3courier_status;
                //}
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
          
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        
        $scope.onselectedchangeusertype = function () {
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/GetCBODN3template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                console.log(resp.data.dncbo3_flag)
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dncbo3_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dncbo3_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {
            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
              if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }

            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/LglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/LglTrnDNTrackerCBO?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/LglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerCBOgeneratedcontroller', LglTrnDNTrackerCBOgeneratedcontroller);

    LglTrnDNTrackerCBOgeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerCBOgeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerCBOgeneratedcontroller';
        
        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.DN1status == 'DN1 Sent')) {

                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
         
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
       
        $scope.onselectedchangeusertype = function () {
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;


            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            console.log('test')

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/GetCBOTemplate_List';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {
            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-CBO-DN1') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                                var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                                
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn1ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn1_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            console.log(resp.data.dn1sanction_amount);
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn1_flag = resp.data.dn1_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn1_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }

                    else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                           SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-CBO-DN1') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {

                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';

                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn1ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn1_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        console.log(resp.data.dn1sanction_amount);
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn1_flag = resp.data.dn1_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn1_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }

                else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-CBO-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerFPOcontroller', dnTrackerFPOcontroller);

    dnTrackerFPOcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService'];

    function dnTrackerFPOcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerFPOcontroller';
        activate();
        function activate() {
            $scope.totalDisplayedpending = 100;
            $scope.totalDisplayedgenerated = 100;
            $scope.totalDisplayedskipped = 100;
            $scope.totalDisplayedexclusion = 100;
            $scope.totalDisplayedlegalsr = 100;
            $scope.total = 0;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            var url = "api/misDataimport/GetDNcount"

            SocketService.get(url).then(function (resp) {
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
            lockUI();
            var url = "api/LglTrnDNTrackerFPO/getFPOPendingList"
            SocketService.get(url).then(function (resp) {
             
                $scope.DNpending_list = resp.data.DNpending_list;

                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
            var url = "api/LglTrnDNTrackerFPO/GetFPO_Count"
            unlockUI();
            SocketService.get(url).then(function (resp) {
                $scope.lblpending_count = resp.data.lblpending_count;
                $scope.lblgenerated_count = resp.data.lblgenerated_count;
                $scope.lblskipped_count = resp.data.lblskipped_count;
                $scope.lblexclusion_count = resp.data.lblexclusion_count;
                $scope.lbllegalsr_count = resp.data.lbllegalsr_count;
            });
        }
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerFPO/getFPOGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });

        }
        function generated_list()
        {
            var url = "api/LglTrnDNTrackerFPO/getFPOGeneratedList"

            SocketService.get(url).then(function (resp) {
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        $scope.dnskip = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerSkipped?lstab=FPO');
        }
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerFPO/getFPOPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerFPO/getFPOSkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerFPO/getFPOExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
          function  exclusion_list()
        {
            var url = "api/LglTrnDNTrackerFPO/getFPOExclusionList"

            SocketService.get(url).then(function (resp) {
               $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerFPO/getFPOLegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }
        $scope.popupDNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var d = new Date();
                $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        skip_reason: $scope.txtskip_reason,
                        valid_date: $scope.txtskipvalid_date
                    }
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        $scope.loadMore = function (pagecount) {
            console.log('courier_test');
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerFPOGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerFPO2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerFPO3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val,customer_gid) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            localStorage.setItem('MyZonalAllocationHistory', 'N');
            $location.url('app/lglTrnDNFPOGenerateTab?lstab=generated');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');

                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                generated_list();
                                activate();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');

                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate();
                            generated_list();
                        });
                    }

                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();
                            exclusion_list();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }


        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerFPO2generatedcontroller', LglTrnDNTrackerFPO2generatedcontroller);

    LglTrnDNTrackerFPO2generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerFPO2generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerFPO2generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
           
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
          
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
              });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
          
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
       
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN2template_list';

            SocketService.get(url).then(function (resp) {
                console.log(resp);
                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn2_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn2_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                   if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }

        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }

        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerFPO3generatedcontroller', LglTrnDNTrackerFPO3generatedcontroller);

    LglTrnDNTrackerFPO3generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerFPO3generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerFPO3generatedcontroller';

        activate();

        function activate() {
            $scope.ShowAllocation360
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
           
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
           
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                //if (resp.data.courier_status == 'DN1 Sent') {
                //    $scope.dn1couriered_by = resp.data.couriered_by;
                //    $scope.dn1courier_center = resp.data.courier_center;
                //    $scope.dn1courier_date = resp.data.courier_date;
                //    $scope.dn1courier_refno = resp.data.courier_refno;
                //    $scope.dn1remarks = resp.data.courier_remarks;
                //    $scope.dn1courier_status = resp.data.dn1courier_status;
                //}
                //else if (resp.data.courier_status == 'DN2 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                //    $scope.dn1courier_center = resp.data.dn2courier_center;
                //    $scope.dn1courier_date = resp.data.dn2courier_date;
                //    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                //    $scope.dn1remarks = resp.data.dn2remarks;
                //    $scope.dn1courier_status = resp.data.dn2courier_status;
                //}
                //else if (resp.data.courier_status == 'DN3 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                //    $scope.dn1courier_center = resp.data.dn3courier_center;
                //    $scope.dn1courier_date = resp.data.dn3courier_date;
                //    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                //    $scope.dn1remarks = resp.data.dn3remarks;
                // $scope.dn1courier_status = resp.data.dn3courier_status;
                //}
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
           
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
      
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN3template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn3_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn3_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                           SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerFPOgeneratedcontroller', LglTrnDNTrackerFPOgeneratedcontroller);

    LglTrnDNTrackerFPOgeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll', 'DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerFPOgeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerFPOgeneratedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360

            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
           
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
         
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.DN1status == 'DN1 Sent')) {

                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
          
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
           
        }

      
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                    console.log(resp.data.customer2userdtl_list);
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;


            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            console.log('dn2');
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.dn2cancel=function()
        {
            var url = 'api/lglTrnDn2CustomerDetails/DN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
        
            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {
          
            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                               SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {
                                            console.log(resp);
                                            $scope.dnref_no = resp.data.dn1ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn1_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            console.log(resp.data.dn1sanction_amount);
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn1_flag = resp.data.dn1_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn1_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }


                    else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn1ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn1_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        console.log(resp.data.dn1sanction_amount);
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn1_flag = resp.data.dn1_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn1_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        Notify.alert("Kindly Upload Annexure",'warning')
                    }
                }


                else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                    var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                     SocketService.post(url, param).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            var url = 'api/misDataimport/GetSanctiondtl';
                            var param = {
                                urn: $scope.urn
                            };
                            SocketService.getparams(url, param).then(function (resp) {

                                $scope.dnref_no = resp.data.dn3ref_no;
                                $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                $scope.dnsanction_date = resp.data.dn3_date;
                                $scope.dn_type = resp.data.dn_type;
                                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                $scope.dnsanction_amount = amount_dn1;
                                $scope.dn3_flag = resp.data.dn3_flag;
                                if (resp.data.dn_flag == "N") {
                                    $scope.initiatedn1 = false;
                                    $scope.sanctiondtl = true;
                                }
                                if (resp.data.dn3_flag == "Y") {
                                    $scope.initiatedn1 = false;
                                    $scope.sanctiondtl = true;
                                }
                            });

                            var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                            var param = {
                                urn: $scope.urn

                            };
                            console.log(param);
                            SocketService.getparams(url, param).then(function (resp) {
                                $scope.content = resp.data.template_content;

                            });

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }


                    });
                });
            }
        else {
                        Notify.alert("Kindly Upload Annexure",'warning')
        }
                }
            }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
            $("#addupload").val('');
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        //$scope.dn2pdf = function () {

        //    var params = {
        //        urn: $scope.urn

        //    };

        //    var url = 'api/misDataimport/DN2pdfcontent';
        //    lockUI();
        //    SocketService.getparams(url, params).then(function (resp) {
        //        var phyPath = resp.data;
        //        var relPath = phyPath.split("EMS");
        //        var relpath1 = relPath[1].replace("\\", "/");
        //        var hosts = window.location.host;
        //        var prefix = location.protocol + "//";
        //        var str = prefix.concat(hosts, relpath1);
        //        var link = document.createElement("a");
        //        link.download = "Report - DN2";
        //        var uri = str;
        //        link.href = uri;
        //        link.click();
        //        Notify.alert('DN2 Report Downloaded Successfully', 'success')
        //        unlockUI();
        //    });

        //}
        //$scope.dn3pdf = function () {

        //    var params = {
        //        urn: $scope.urn

        //    };

        //    var url = 'api/misDataimport/DN3pdfcontent';
        //    lockUI();
        //    SocketService.getparams(url, params).then(function (resp) {
        //        var phyPath = resp.data;
        //        var relPath = phyPath.split("EMS");
        //        var relpath1 = relPath[1].replace("\\", "/");
        //        var hosts = window.location.host;
        //        var prefix = location.protocol + "//";
        //        var str = prefix.concat(hosts, relpath1);
        //        var link = document.createElement("a");
        //        link.download = "Report - DN3";
        //        var uri = str;
        //        link.href = uri;
        //        link.click();
        //        Notify.alert('DN3 Report Downloaded Successfully', 'success')
        //        unlockUI();
        //    });

        //}
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dngeneratedhistorycontroller', dngeneratedhistorycontroller);

    dngeneratedhistorycontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', '$anchorScroll'];

    function dngeneratedhistorycontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dngeneratedhistorycontroller';

        activate();

        function activate() {
            $scope.ShowAllocation360
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/GetDNGenerated_History"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dn_list = resp.data.dn_list;
                console.log(resp.data.dn_list)
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');
            var customer_gid = {
                customer_gid: localStorage.getItem('allocation_customer_gid')
            }
            $scope.allocation_customer_gid = customer_gid;
            console.log(customer_gid);
            var url = "api/allocationManagement/getAllocationHistory";
            SocketService.getparams(url, customer_gid).then(function (resp) {
                console.log('allocation history', resp);
                $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                console.log(resp.data.overallhistoryallocationdtl);
                $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

            });
            var allocationdtl_gid = {
                allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
            }
            var url = "api/allocationManagement/getallocatedtls";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.zonal_name = resp.data.zonal_name;
                $scope.state_name = resp.data.state_name;
                $scope.district_name = resp.data.district_name;
                $scope.assigned_RM = resp.data.assigned_RM;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.ZonalRMname = resp.data.ZonalRMname;
                $scope.clientName = resp.data.customername;
            });

            var url = "api/visitReport/GetAllocationLogDetail";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.scheduleList = resp.data.schedulelogdtl;
                $scope.calllogdtlList = resp.data.calllogdtl;

            });

            var url = "api/allocationManagement/GetAllocationCustomerDtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.sanctiondetails = resp.data.loandtl;
                $scope.customerCollateral = resp.data.collateraldtl;
                $scope.holdallocationlist = resp.data.holdallocation;
                $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                console.log('Gurantor', resp);
                $scope.customerPromotorlist = resp.data.Promoterdtl;
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid,
                        allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                    };

                    var url = 'api/allocationManagement/GetAllocateloanList';
                    SocketService.post(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanList;
                        value.expand = false;
                    });
                });
            });

            var url = "api/customerManagement/HistoryEscrowSummary";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.escrowlist = resp.data.escrowSummary;
                }
            });

            var url = "api/allocationManagement/getAllocationdocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                    $scope.upload_list = resp.data.upload_list;
                    $scope.documentUpload = true;
                }
                else {

                    $scope.documentNotUpload = true;
                }
            });

            var url = "api/visitReport/getvisitreportdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                $scope.customer_gid = resp.data.customer_gid;
                $scope.txtbusiness_vintage = resp.data.business_vintage,
                $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                $scope.txtbusiness_sector = resp.data.business_sector,
                $scope.txtregister_address = resp.data.registeredoffice_address,
                $scope.cboriskcode = resp.data.risk_code,
                $scope.txtactual_address = resp.data.present_address,
                $scope.txtcontact_dtl1 = resp.data.contact_details1,
                $scope.txtcontact_dtl2 = resp.data.contact_details2,
                $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                $scope.txtlattitude = resp.data.visit_latitude;
                $scope.txtlongitude = resp.data.visit_longitude;
                //$scope.firstdisb_date = resp.data.relationship_startedfrom
                $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                $scope.cbogenetic_code = resp.data.geneticcode_complied,
                $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                $scope.RMD_visitedname = resp.data.RMD_visitedname;
                $scope.txtPPA_name = resp.data.PPA_name;
                $scope.cbovisit_done = resp.data.visit_done,
                $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                $scope.cborepayment_track = resp.data.repayment_track,
                $scope.cbobasic_records = resp.data.basicrecords_maintain,
                $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                $scope.txtpresent_fysales = resp.data.presentFY_sales,
                $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                $scope.txtcbototal_groups = resp.data.total_noofGroups,
                $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                $scope.txtpurpose_funding = resp.data.purposeof_funding,
                $scope.txt_utilisationdtls = resp.data.utilisation_details,
                $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                $scope.txtoverdue = resp.data.overdue,
                $scope.txtborrower_commitment = resp.data.borrower_commitment,
                $scope.txtpending_documentation = resp.data.pending_documentation,
                //$scope.txtasset_verification = resp.data.asset_verification,
                $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                $scope.txtenduse_loan = resp.data.enduse_loan,
                //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                $scope.txtoverall_remarks = resp.data.overall_remarks,
                $scope.txtPDD_compliance = resp.data.PDD_compliance,
                $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                 $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                $scope.editvisittype = resp.data.editvisittype;
                if (resp.data.RM_name != null) {
                    $scope.relationship_managername = resp.data.RM_name
                }
                if (resp.data.constitution != null) {
                    $scope.constitution = resp.data.constitution
                }
                if (resp.data.credit_managername != null) {
                    $scope.credit_managername = resp.data.credit_managername;
                }
                if (resp.data.visit_date != null) {
                    var p = resp.data.visit_date.split(/\D/g)
                    $scope.visitdate = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.dealing_withsince != null) {
                    var p = resp.data.dealing_withsince.split(/\D/g)
                    $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.disbursement_date != null) {
                    var p = resp.data.disbursement_date.split(/\D/g)
                    $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                }

            });

            var url = "api/visitReport/getvisitReportDocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportdocument = resp.data.visitreportdocument;
            });

            var url = "api/visitReport/getvisitReportPhoto";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportphoto = resp.data.visitreportphoto;
            });

            var url = "api/TierMeeting/GetViewTierObservationdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                $scope.report_pertainingto = resp.data.report_pertainingto;
                $scope.vertical = resp.data.vertical;
                $scope.disbursement_amount = resp.data.disbursement_amount;
                $scope.approving_authority = resp.data.approving_authority;
                $scope.loansanction_date = resp.data.loansanction_date;
                $scope.relationship_manager_name = resp.data.relationship_manager_name;
                $scope.PPA_name = resp.data.PPA_name;
                $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                $scope.loandisbursement_date = resp.data.loandisbursement_date;
                $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.outstanding_amount = resp.data.outstanding_amount;
                $scope.current_DPD = resp.data.current_DPD;
                $scope.contact_details1 = resp.data.contact_details1;
                $scope.contact_details2 = resp.data.contact_details2;
                $scope.observation_flag = resp.data.observation_flag;
                $scope.cboriskcode = resp.data.risk_code;
                $scope.criticalobservation = resp.data.criticalTierobservation;
                $scope.tiercodedtl = resp.data.tierReportdtl;
                unlockUI();
            });
            var tier1format_gid = {
                tier1format_gid: localStorage.getItem('tier1format_gid')
            }
            var url = "api/TierMeeting/GetTier1Format360Dtl";
            SocketService.getparams(url, tier1format_gid).then(function (resp) {
                $scope.txtobservations = resp.data.tier1_observations;
                if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                }
                else {
                    $scope.cboriskcode = resp.data.tier1_code;
                }
                $scope.txtrationale_justification = resp.data.tier1_justification;
                $scope.txtprocess_gap = resp.data.tier1_processgap;
                $scope.txtcode_changereason = resp.data.tier1code_changereason;
                $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                $scope.txtATR_date = resp.data.tier1_atrdate;
                $scope.tier1format_gid = resp.data.tier1format_gid;
                $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                $scope.tier1approvallog = resp.data.tier1approvallog;
                if ($scope.tier1code_changeflag == 'Y') {
                    $scope.disablecodechangereasonshow = true;
                }
                else {
                    $scope.disablecodechangereasonshow = false;
                }

                if (resp.data.tier1approvallog == null) {
                    $scope.nohistoryapproval = true;
                }
                else {
                    $scope.historyapproval = true;
                }
            });

            var url = 'api/TierMeeting/GetTier2Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                console.log(resp);
                $scope.tier2zonal_name = resp.data.zonal_name;
                $scope.tier2_monthname = resp.data.tier2_monthname;
                $scope.vertical = resp.data.vertical;
                $scope.headRMD_name = resp.data.headRMD_name;
                $scope.txttier2_remarks = resp.data.tier2_remarks;
                $scope.tier2_approval_status = resp.data.tier2_approval_status;
                $scope.tier2_submitteddate = resp.data.created_date;
                $scope.tier2_submittedby = resp.data.created_by;
                $scope.uploaddocument2_list = resp.data.tier2document;
                $scope.tier2approvallog = resp.data.tier2approvallog;
                $scope.tier2_approveddate = resp.data.tier2_approveddate;

                if (resp.data.tier2approvallog == null) {
                    $scope.tier2nohistoryapproval = true;
                }
                else {
                    $scope.tier2historyapproval = true;
                }
                unlockUI();
            });

            var url = 'api/TierMeeting/GetTier3Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.mlrc_date = resp.data.MLRC_date;
                $scope.monthname = resp.data.tier3_month;
                $scope.txttier3_followup = resp.data.follow_up;
                $scope.tier3_status = resp.data.tier3_status;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.uploaddocument3_list = resp.data.tier3document;
                $scope.completed_date = resp.data.completed_date;
                $scope.completed_by = resp.data.completed_by;
                $scope.completed_flag = resp.data.completed_flag;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.vertical = resp.data.vertical;
                unlockUI();
            });
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            if ($scope.relpath1 == 'others') {
                $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
            }
            else if ($scope.relpath1 == 'retail') {
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
            }
            else if ($scope.relpath1 == 'FPO') {
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
            }
            else if ($scope.relpath1 == 'CBO') {
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
            }
            else if ($scope.relpath1 == 'AE') {
                $location.url('app/LglTrnDNTrackerAE?lstab=pending');
            }

        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerOtherscontroller', dnTrackerOtherscontroller);

    dnTrackerOtherscontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function dnTrackerOtherscontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerOtherscontroller';
        activate();
        function activate() {
            $scope.total = 0;
            $scope.totalDisplayed = 0;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            var url = "api/misDataimport/GetDNcount"

            SocketService.get(url).then(function (resp) {
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
            lockUI();
            var url = "api/LglTrnDNTrackerOthers/getOthersPendingList"
            SocketService.get(url).then(function (resp) {
             
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
            var url = "api/LglTrnDNTrackerOthers/GetOthers_Count"
            unlockUI();
            SocketService.get(url).then(function (resp) {
                $scope.lblpending_count = resp.data.lblpending_count;
                $scope.lblgenerated_count = resp.data.lblgenerated_count;
                $scope.lblskipped_count = resp.data.lblskipped_count;
                $scope.lblexclusion_count = resp.data.lblexclusion_count;
                $scope.lbllegalsr_count = resp.data.lbllegalsr_count;
            });
        }
        $scope.dngenerated_history=function(val)
        {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerHistory?lstab=others');
        }
        $scope.dnskip = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerSkipped?lstab=others');
        }
        $scope.popupDNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var d = new Date();
                $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        skip_reason: $scope.txtskip_reason,
                        valid_date: $scope.txtskipvalid_date
                    }
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerOthers/getOthersGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }
             
            });
        }
        function generated_list()
        {
            var url = "api/LglTrnDNTrackerOthers/getOthersGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerOthers/getOthersSkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerOthers/getOthersExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });

        }
       function exclusion_list()
        {
            var url = "api/LglTrnDNTrackerOthers/getOthersExclusionList"

            SocketService.get(url).then(function (resp) {
              $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerOthers/getOthersPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerOthers/getOthersLegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }

        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerOthersGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerOthers2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerOthers3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            localStorage.setItem('MyZonalAllocationHistory', 'N');
            $location.url('app/lglTrnDNOthersGenerateTab?lstab=generated');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');

                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                generated_list();
                                activate();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');

                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            generated_list();
                            activate();
                        });
                    }

                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }
                        exclusion_list();
                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }


        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
               
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerOthers2generatedcontroller', LglTrnDNTrackerOthers2generatedcontroller);

    LglTrnDNTrackerOthers2generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerOthers2generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll,DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerOthers2generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
           $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;

            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
           
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
       
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN2template_list';

            SocketService.get(url).then(function (resp) {
                console.log(resp);
                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn2_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn2_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                             SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerOthers3generatedcontroller', LglTrnDNTrackerOthers3generatedcontroller);

    LglTrnDNTrackerOthers3generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerOthers3generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerOthers3generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                //if (resp.data.courier_status == 'DN1 Sent') {
                //    $scope.dn1couriered_by = resp.data.couriered_by;
                //    $scope.dn1courier_center = resp.data.courier_center;
                //    $scope.dn1courier_date = resp.data.courier_date;
                //    $scope.dn1courier_refno = resp.data.courier_refno;
                //    $scope.dn1remarks = resp.data.courier_remarks;
                //    $scope.dn1courier_status = resp.data.dn1courier_status;
                //}
                //else if (resp.data.courier_status == 'DN2 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                //    $scope.dn1courier_center = resp.data.dn2courier_center;
                //    $scope.dn1courier_date = resp.data.dn2courier_date;
                //    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                //    $scope.dn1remarks = resp.data.dn2remarks;
                //    $scope.dn1courier_status = resp.data.dn2courier_status;
                //}
                //else if (resp.data.courier_status == 'DN3 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                //    $scope.dn1courier_center = resp.data.dn3courier_center;
                //    $scope.dn1courier_date = resp.data.dn3courier_date;
                //    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                //    $scope.dn1remarks = resp.data.dn3remarks;
                // $scope.dn1courier_status = resp.data.dn3courier_status;
                //}
            });


            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }


            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN3template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn3_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn3_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                           SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerOthersgeneratedcontroller', LglTrnDNTrackerOthersgeneratedcontroller);

    LglTrnDNTrackerOthersgeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerOthersgeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerOthersgeneratedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.DN1status == 'DN1 Sent')) {

                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
         
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });


        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
      
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerAE?lstab=dn1tracker');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;


            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            console.log('dn2');
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            console.log('test')

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerOthers?lstab=dn1tracker');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerAE?lstab=dn1tracker');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn1ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn1_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            console.log(resp.data.dn1sanction_amount);
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn1_flag = resp.data.dn1_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn1_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }


                    else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn1ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn1_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn1_flag = resp.data.dn1_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn1_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }


                else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
            $("#addupload").val('');
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnTrackerRetailcontroller', dnTrackerRetailcontroller);

    dnTrackerRetailcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService'];

    function dnTrackerRetailcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnTrackerRetailcontroller';
        activate();
        function activate() {
            $scope.total = 0;
            $scope.totalDisplayedpending = 100;
            $scope.totalDisplayedgenerated = 100;
            $scope.totalDisplayedskipped = 100;
            $scope.totalDisplayedexclusion = 100;
            $scope.totalDisplayedlegalsr = 100;
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "pending") {
                    $scope.tabpending = true;
                }
                else if (relpath1 == "generated") {
                    $scope.tabgenerated = true;
                }
                else if (relpath1 == "skipped") {
                    $scope.tabskipped = true;
                }
                else if (relpath1 == "exclusion") {
                    $scope.tabexclusion = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabpending = true;
                }
                else if ($scope.tab.activeTabId == 'pending') {
                    $scope.tabpending = true;

                }
                else if ($scope.tab.activeTabId == 'generated') {
                    $scope.tabgenerated = true;
                }
                else if ($scope.tab.activeTabId == 'skipped') {
                    $scope.tabskipped = true;
                }
                else if ($scope.tab.activeTabId == 'exclusion') {
                    $scope.tabexclusion = true;
                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }
            }
            var url = "api/misDataimport/GetDNcount"

            SocketService.get(url).then(function (resp) {
                $scope.import_date = resp.data.import_date;
                $scope.process_date = resp.data.process_date;
                $scope.employee_name = resp.data.employee_name;
            });
            lockUI();
            var url = "api/LglTrnDNTrackerRetail/getRetailPendingList"
            SocketService.get(url).then(function (resp) {
             
                $scope.DNpending_list = resp.data.DNpending_list;

                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
            var url = "api/LglTrnDNTrackerRetail/GetRetail_Count"
            unlockUI();
            SocketService.get(url).then(function (resp) {
                $scope.lblpending_count = resp.data.lblpending_count;
                $scope.lblgenerated_count = resp.data.lblgenerated_count;
                $scope.lblskipped_count = resp.data.lblskipped_count;
                $scope.lblexclusion_count = resp.data.lblexclusion_count;
                $scope.lbllegalsr_count = resp.data.lbllegalsr_count;
            });
        }
        $scope.loadMore = function (pagecount) {
            if (pagecount == undefined) {
                Notify.alert("Enter the Total Summary Count", "warning");
                return;
            }
            lockUI();

            var Number = parseInt(pagecount);
            // new code start
            if ($scope.total != 0) {

                if (pagecount < $scope.total) {
                    $scope.totalDisplayed += Number;
                    if ($scope.total < $scope.totalDisplayed) {
                        $scope.totalDisplayed = $scope.total;
                        Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    }
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert(" Total Summary " + $scope.total + " Records Only", "warning");
                    return;
                }
            }
            // new code end
            unlockUI();
        };
        //-------Pending List----------//
        $scope.pending = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerRetail/getRetailPendingList"
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNpending_list = resp.data.DNpending_list;
                if ($scope.DNpending_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedpending = 0;
                }
                else {
                    $scope.total = $scope.DNpending_list.length;
                    if ($scope.DNpending_list.length < 100) {
                        $scope.totalDisplayedpending = $scope.DNpending_list.length;
                    }

                }
            });
        }
        //-------Generated List----------//
        $scope.generated = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerRetail/getRetailGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        //--------Skipped List----------//
        $scope.skipped = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerRetail/getRetailSkippedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNskipped_list = resp.data.DNskipped_list;
                if ($scope.DNskipped_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedskipped = 0;
                }
                else {
                    $scope.total = $scope.DNskipped_list.length;
                    if ($scope.DNskipped_list.length < 100) {
                        $scope.totalDisplayedskipped = $scope.DNskipped_list.length;
                    }

                }
            });
        }
        //--------Exclusion List----------//
        $scope.exclusion = function () {
            lockUI();
            var url = "api/LglTrnDNTrackerRetail/getRetailExclusionList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        function generated_list() {
            var url = "api/LglTrnDNTrackerRetail/getRetailGeneratedList"

            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNgenerated_list = resp.data.DNgenerated_list;
                if ($scope.DNgenerated_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedgenerated = 0;
                }
                else {
                    $scope.total = $scope.DNgenerated_list.length;
                    if ($scope.DNgenerated_list.length < 100) {
                        $scope.totalDisplayedgenerated = $scope.DNgenerated_list.length;
                    }
                }

            });
        }
        function exclusion_list() {
            var url = "api/LglTrnDNTrackerRetail/getRetailExclusionList"

            SocketService.get(url).then(function (resp) {
                $scope.DNexclusion_list = resp.data.DNexclusion_list;
                if ($scope.DNexclusion_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedexclusion = 0;
                }
                else {
                    $scope.total = $scope.DNexclusion_list.length;
                    if ($scope.DNexclusion_list.length < 100) {
                        $scope.totalDisplayedexclusion = $scope.DNexclusion_list.length;
                    }

                }
            });
        }
        //--------Legal SR List----------//
        $scope.legalsrlist = function () {
            lockUI();
            var url = 'api/LglTrnDNTrackerRetail/getRetailLegalSRList';
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.DNlegalsr_list = resp.data.DNlegalsr_list;
                if ($scope.DNlegalsr_list == null) {
                    $scope.total = 0;
                    $scope.totalDisplayedlegalsr = 0;
                }
                else {
                    $scope.total = $scope.DNlegalsr_list.length;
                    if ($scope.DNlegalsr_list.length < 100) {
                        $scope.totalDisplayedlegalsr = $scope.DNlegalsr_list.length;
                    }

                }
            });
        }

        //------------DN1 Generation----//
        $scope.dn1generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerRetailGenerate?lstab=pending');
        }
        //------------DN2 Generation----//
        $scope.dn2generatepage = function (val) {

            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerRetail2Generate?lstab=pending');

        }
        //------------DN3 Generation----//
        $scope.dn3generatepage = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/lglTrnDNTrackerRetail3Generate?lstab=pending');

        }
        $scope.dngeneratedinfo = function (val,customer_gid) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            localStorage.setItem('MyZonalAllocationHistory', 'N');
            $location.url('app/lglTrnDNRetailGenerateTab?lstab=generated');
        }
        $scope.dnackstatus = function (urn) {
            $scope.warningmsg = false;
            var modalInstance = $modal.open({
                templateUrl: '/dn1ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };

            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.warningmsg = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.changewarningmsg = function () {
                    $scope.warningmsg = false;
                }
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }
                $scope.dn1ackstatusupdation = function () {
                    if ($scope.dn1ackstatus == 'Delivered') {
                        if (($scope.txtdelivered_date == '') || ($scope.txtdelivered_date == undefined)) {
                            $scope.warningmsg = true;
                        }
                        else {
                            $scope.warningmsg = false;
                            var params = {
                                urn: urn,
                                courier_status: $scope.dn1ackstatus,
                                delivered_date: $scope.txtdelivered_date,
                                returened_date: $scope.txtreturned_date
                            }

                            var url = 'api/misDataimport/dn1ackstatusupdate';

                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $modalInstance.close('closed');

                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate();
                                generated_list();
                            });
                        }
                    }
                    else {
                        $scope.warningmsg = false;
                        var params = {
                            urn: urn,
                            courier_status: $scope.dn1ackstatus,
                            delivered_date: $scope.txtdelivered_date,
                            returened_date: $scope.txtreturned_date
                        }

                        var url = 'api/misDataimport/dn1ackstatusupdate';

                        SocketService.post(url, params).then(function (resp) {

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $modalInstance.close('closed');

                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate();
                            generated_list();
                        });
                    }

                }
            }
        }
        $scope.dn2ackstatus = function (urn) {
            console.log('dn2');
            var modalInstance = $modal.open({
                templateUrl: '/dn2ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn2ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn2delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn2ackstatusupdate';

                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }

        $scope.dn3ackstatus = function (urn) {
            console.log('dn3');
            var modalInstance = $modal.open({
                templateUrl: '/dn3ackstatus.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.isShowHide = function (param) {
                    if (param == "show") {

                        $scope.showval = true;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                    else if (param == "hide") {

                        $scope.showval = false;
                        $scope.hideval = true;
                        $scope.showdiv = true;
                    }
                    else {
                        $scope.showval = false;
                        $scope.hideval = false;
                        $scope.showdiv = true;
                    }
                }

                $scope.dn3ackstatusupdation = function () {

                    var params = {
                        urn: urn,
                        courier_status: $scope.dn1ackstatus,
                        dn3delivered_date: $scope.txtdelivered_date,
                        dn2returned_date: $scope.txtreturned_date
                    }
                    console.log(params);
                    var url = 'api/misDataimport/dn3ackstatusupdate';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate();
                    });
                }
            }
        }
        $scope.exclusioncustomer = function (urn, Customer_name) {
            console.log('test', urn);
            var modalInstance = $modal.open({
                templateUrl: '/exclusionpopup.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;
                    if (resp.data.exclusionhistory == null) {
                        $scope.Nohistoryexclusion = true;
                    }
                    else {
                        $scope.historyexclusion = true;
                    }
                });
                $scope.confirmExclusioncustomer = function () {
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtexclusion_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            activate();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            })
                            $modalInstance.close('closed');
                        }
                    });
                }
            }
        }

        $scope.activateexclusion = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/activateconfirmation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                $scope.confirmActivation = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        exclusion_reason: $scope.txtactivated_reason
                    }
                    var url = "api/LglTrnDNTrackerVertical/GetActivationCustomer";
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                            $modalInstance.close('closed');
                            activate();
                            exclusion_list();
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'danger',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            unlockUI();
                        }

                    });
                }

            }
        }
        $scope.exclusionHistory = function (urn, Customer_name) {

            var modalInstance = $modal.open({
                templateUrl: '/exclusionHistoryPopup.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customername = Customer_name;
                var params = {
                    customer_urn: urn
                }
                var url = "api/LglTrnDNTrackerVertical/GetExclusionCustomerHistory";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.exclusioncustomerHistory = resp.data.exclusionhistory;

                });
            }
        }
        $scope.dnskip = function (val) {
            console.log(val)
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerSkipped?lstab=retail');
        }
        $scope.popupDNskip = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/skipdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var d = new Date();
                $scope.txtskipvalid_date = (new Date(d.setDate(d.getDate() + 15)));
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirmSkip = function () {
                    lockUI();
                    var params = {
                        urn: urn,
                        skip_reason: $scope.txtskip_reason,
                        valid_date: $scope.txtskipvalid_date
                    }
                    var url = "api/misDataimport/DNskip"

                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('DN Skipped Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred While Updating DN Skip ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }
        $scope.legalsr = function (urn, Customer_name) {
            var modalInstance = $modal.open({
                templateUrl: '/legalsr.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.customer_urn = urn;
                $scope.customer_name = Customer_name;
                $scope.confirm = function () {
                    lockUI();
                    var params = {
                        customer_urn: urn,
                        customer_name: Customer_name,
                        remarks: $scope.txtremarks
                    }
                    console.log(params)
                    var url = "api/LglTrnDNTrackerVertical/raiselegalsr"

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Legal SR Raised Successfully', 'success')
                        }
                        else {
                            Notify.alert('Error Occurred ')
                        }
                        $modalInstance.close('closed');
                    });
                }

            }
        }

        $scope.raisesr = function (templegalsr_gid, customer_gid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $location.url('app/raiseSR2authentication?lstab=dntracker');
        }
        $scope.view = function (legalsr_gid, legalsr_customergid) {
            $scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            $scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            $state.go('app.viewlegalSR');
        }
        $scope.dngenerated_history = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $location.url('app/LglTrnDNTrackerHistory?lstab=Retail');
        }
        $scope.dn1pdf = function (urn) {


            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function (urn) {

            var params = {
                urn: urn

            };
            console.log(params);
            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerRET2generatedcontroller', LglTrnDNTrackerRET2generatedcontroller);

    LglTrnDNTrackerRET2generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','cmnfunctionService','cmnfunctionService', 'DownloaddocumentService'];

    function LglTrnDNTrackerRET2generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,$anchorScroll,cmnfunctionService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerRET2generatedcontroller';

        activate();

        function activate(){
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
            
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
           
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
          
        }

        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
       
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN2template_list';

            SocketService.get(url).then(function (resp) {
                console.log(resp);
                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn2_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn2_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                               SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                    unlockUI();
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
               
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerRET3generatedcontroller', LglTrnDNTrackerRET3generatedcontroller);

    LglTrnDNTrackerRET3generatedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll','DownloaddocumentService','cmnfunctionService'];

    function LglTrnDNTrackerRET3generatedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerRET3generatedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.click = true;
            $scope.initiatedn2 = true;
            $scope.dn2format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.dn1status = true;
            $scope.sanctiondtl = true;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });
           
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomerDNGID"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            console.log(param);
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncase_gid = resp.data.dncase_gid;
            });
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                if ((resp.data.DN1status == 'DN1 Sent')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN1status == 'DN1 Skip')) {
                    $scope.dn1status = false;
                }
                if ((resp.data.DN2status == 'DN2 Sent')) {
                    $scope.dn2format = false;
                    $scope.data = true;
                    $scope.courierdetails = true;
                    $scope.initiatedn2 = true;
                    $scope.dn1status = true;
                }

                if ((resp.data.DN2status == 'DN2 Skip')) {
                    $scope.skip = true;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;

                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });
           
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.templatecontent = resp.data.dn2_content;
                document.getElementById('test').innerHTML += $scope.templatecontent;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN2 Generated')) {
                    console.log(resp.data.DN1_status);
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
                if (resp.data.DN1_status == 'DN2 Reverted') {
                    $scope.initiatedn2 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn2format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                    $scope.dn1status = true;
                }
                if ((resp.data.DN1_status == 'DN2 Hold')) {
                    $scope.dn2format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                    $scope.dn1status = true;
                }
            });

            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
                if ((resp.data.DN1status == 'DN1 Skip') || (resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Generated')) {
                    $scope.dndetails = false;
                    $scope.dn1status = true;
                }

            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
          
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                //if (resp.data.courier_status == 'DN1 Sent') {
                //    $scope.dn1couriered_by = resp.data.couriered_by;
                //    $scope.dn1courier_center = resp.data.courier_center;
                //    $scope.dn1courier_date = resp.data.courier_date;
                //    $scope.dn1courier_refno = resp.data.courier_refno;
                //    $scope.dn1remarks = resp.data.courier_remarks;
                //    $scope.dn1courier_status = resp.data.dn1courier_status;
                //}
                //else if (resp.data.courier_status == 'DN2 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                //    $scope.dn1courier_center = resp.data.dn2courier_center;
                //    $scope.dn1courier_date = resp.data.dn2courier_date;
                //    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                //    $scope.dn1remarks = resp.data.dn2remarks;
                //    $scope.dn1courier_status = resp.data.dn2courier_status;
                //}
                //else if (resp.data.courier_status == 'DN3 Sent') {
                //    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                //    $scope.dn1courier_center = resp.data.dn3courier_center;
                //    $scope.dn1courier_date = resp.data.dn3courier_date;
                //    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                //    $scope.dn1remarks = resp.data.dn3remarks;
                // $scope.dn1courier_status = resp.data.dn3courier_status;
                //}
            });

            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
                console.log(resp.data.remarks);
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
        
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });
        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/SanctionDN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
      
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN3template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;

                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn3_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn3_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                           
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }

        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }

        $scope.downloads = function (val1, val2) {
            // var phyPath = val1;
            // var relPath = phyPath.split("EMS");
            // var relpath1 = relPath[1].replace("\\", "/");
            // var hosts = window.location.host;
            // var prefix = location.protocol + "//";
            // var str = prefix.concat(hosts, relpath1);
            // var link = document.createElement("a");
            // var name = val2.split('.');
            // link.download = name[0];
            // var uri = str;
            // link.href = uri;
            // link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnDNTrackerRetailgeneratedcontroller', LglTrnDNTrackerRetailgeneratedcontroller);

    LglTrnDNTrackerRetailgeneratedcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll' ,'DownloaddocumentService','cmnfunctionService'];


    function LglTrnDNTrackerRetailgeneratedcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll, DownloaddocumentService, cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnDNTrackerRetailgeneratedcontroller';

        activate();

        function activate() {
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            $scope.ShowAllocation360
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.courier_info = false;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;
                $scope.DN1status = resp.data.DN1status;
                $scope.dn_status = resp.data.dn_status;
                console.log(resp.data.dn_status);
                if ((resp.data.DN1status == 'DN1 Sent')) {

                    $scope.info = false;
                    $scope.initiatedn1 = true;
                }
                if ((resp.data.DN1status == 'DN1 Sent') || (resp.data.DN1status == 'DN1 Skip')) {
                    $scope.data = true;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.tempdn1format_gid = resp.data.tempdn1format_gid;
                $scope.DN1status = resp.data.DN1status;
                $scope.DN1template_content = resp.data.DN1template_content;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1status_created_date = resp.data.dn1status_created_date;
                $scope.dn1couriersent_date = resp.data.dn1couriersent_date;
                $scope.dn1status_created_by = resp.data.dn1status_created_by;
                $scope.dn1annexuredocument_name = resp.data.dn1annexuredocument_name;
                $scope.dn1annexuredocument_path = resp.data.dn1annexuredocument_path;
                $scope.DN2status = resp.data.DN2status;
                $scope.DN2template_content = resp.data.DN2template_content;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2status_created_date = resp.data.dn2status_created_date;
                $scope.dn2couriersent_date = resp.data.dn2couriersent_date;
                $scope.dn2status_created_by = resp.data.dn2status_created_by;
                $scope.dn2annexuredocument_name = resp.data.dn2annexuredocument_name;
                $scope.dn2annexuredocument_path = resp.data.dn2annexuredocument_path;
                $scope.DN3status = resp.data.DN3status;
                $scope.DN3template_content = resp.data.DN3template_content;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3status_created_date = resp.data.dn3status_created_date;
                $scope.dn3couriersent_date = resp.data.dn3couriersent_date;
                $scope.dn3status_created_by = resp.data.dn3status_created_by;
                $scope.dn3annexuredocument_name = resp.data.dn3annexuredocument_name;
                $scope.dn3annexuredocument_path = resp.data.dn3annexuredocument_path;
            });
            var url = "api/misDataimport/DN1ContentDTL"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;
                document.getElementById('test').innerHTML += $scope.content;
                $scope.DN1_status = resp.data.DN1_status;

                if ((resp.data.DN1_status == 'DN1 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.DN1_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.DN1_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });

            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.couriered_by = resp.data.couriered_by;
                $scope.courier_center = resp.data.courier_center;
                $scope.courier_date = resp.data.courier_date;
                $scope.courier_refno = resp.data.courier_refno;
                $scope.courier_remarks = resp.data.courier_remarks;
                $scope.courier_status = resp.data.dn1courier_status;
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
          
        }
        var url = 'api/LglTrnDNTrackerAE/Getcustomerupdatedetails';
        var param = {
            urn: $scope.urn
        };

        lockUI();
        SocketService.getparams(url, param).then(function (resp) {

            $scope.zonal_riskmanagerName = resp.data.zonal_riskmanagerName;
            $scope.riskMonitoring_Name = resp.data.riskMonitoring_Name;
            $scope.customer_gid = resp.data.customer_gid;
            unlockUI();

        });

        $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');

        var param = {
            urn: $scope.urn
        };

        var url = "api/LglTrnDNTrackerAE/GetAllocationHistory";
        SocketService.getparams(url, param).then(function (resp) {
            $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
            $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
            $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

        });
        var allocationdtl_gid = {
            allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
        }
        var url = "api/allocationManagement/getallocatedtls";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.zonal_name = resp.data.zonal_name;
            $scope.state_name = resp.data.state_name;
            $scope.district_name = resp.data.district_name;
            $scope.assigned_RM = resp.data.assigned_RM;
            $scope.customername = resp.data.customername;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.ZonalRMname = resp.data.ZonalRMname;
            $scope.clientName = resp.data.customername;
        });

        var url = "api/visitReport/GetAllocationLogDetail";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.scheduleList = resp.data.schedulelogdtl;
            $scope.calllogdtlList = resp.data.calllogdtl;

        });

        var url = "api/allocationManagement/GetAllocationCustomerDtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customerdetails = resp.data;
            $scope.sanctiondetails = resp.data.loandtl;
            $scope.customerCollateral = resp.data.collateraldtl;
            $scope.holdallocationlist = resp.data.holdallocation;
            $scope.customerguarantorlist = resp.data.Guarantorsdtl;

            $scope.customerPromotorlist = resp.data.Promoterdtl;
            angular.forEach($scope.sanctiondetails, function (value, key) {
                var params = {
                    sanction_gid: value.sanction_gid,
                    allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                };

                var url = 'api/allocationManagement/GetAllocateloanList';
                SocketService.post(url, params).then(function (resp) {
                    value.loandetails = resp.data.loanList;
                    value.expand = false;
                });
            });
        });

        var url = "api/customerManagement/HistoryEscrowSummary";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (resp.data.status == true) {
                $scope.escrowlist = resp.data.escrowSummary;
            }
        });

        var url = "api/allocationManagement/getAllocationdocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                $scope.upload_list = resp.data.upload_list;
                $scope.documentUpload = true;
            }
            else {

                $scope.documentNotUpload = true;
            }
        });

        var url = "api/visitReport/getvisitreportdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
            $scope.customer_gid = resp.data.customer_gid;
            $scope.txtbusiness_vintage = resp.data.business_vintage,
            $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
            $scope.txtbusiness_sector = resp.data.business_sector,
            $scope.txtregister_address = resp.data.registeredoffice_address,
            $scope.cboriskcode = resp.data.risk_code,
            $scope.txtactual_address = resp.data.present_address,
            $scope.txtcontact_dtl1 = resp.data.contact_details1,
            $scope.txtcontact_dtl2 = resp.data.contact_details2,
            $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
            $scope.txtlattitude = resp.data.visit_latitude;
            $scope.txtlongitude = resp.data.visit_longitude;
            //$scope.firstdisb_date = resp.data.relationship_startedfrom
            $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
            $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
            $scope.cbogenetic_code = resp.data.geneticcode_complied,
            $scope.cboRMD_gid = resp.data.RMD_visitedGid,
            $scope.RMD_visitedname = resp.data.RMD_visitedname;
            $scope.txtPPA_name = resp.data.PPA_name;
            $scope.cbovisit_done = resp.data.visit_done,
            $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
            $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
            $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
            $scope.txtdisbursement_amount = resp.data.disbursement_amount,
            $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
            $scope.cborepayment_track = resp.data.repayment_track,
            $scope.cbobasic_records = resp.data.basicrecords_maintain,
            $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
            $scope.txtpresent_fysales = resp.data.presentFY_sales,
            $scope.txtdeferral_pendency = resp.data.deferral_pendency,
            $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
            $scope.txtcbototal_groups = resp.data.total_noofGroups,
            $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
            $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
            $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
            $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
            $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
            $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
            $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
            $scope.txtpurpose_funding = resp.data.purposeof_funding,
            $scope.txt_utilisationdtls = resp.data.utilisation_details,
            $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
            $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
            $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
            $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
            $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
            $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
            $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
            $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
            $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
            $scope.txttenure_period = resp.data.tenure_period,
            $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
            //$scope.txtloan_clientdate = resp.data.loan_clientdate,
            $scope.txtoverdue = resp.data.overdue,
            $scope.txtborrower_commitment = resp.data.borrower_commitment,
            $scope.txtpending_documentation = resp.data.pending_documentation,
            //$scope.txtasset_verification = resp.data.asset_verification,
            $scope.txtbriefdtls_client = resp.data.briefdtls_client,
            $scope.txtenduse_loan = resp.data.enduse_loan,
            //$scope.txtadequacy_loan = resp.data.adequacy_loan,
            $scope.txtoverall_remarks = resp.data.overall_remarks,
            $scope.txtPDD_compliance = resp.data.PDD_compliance,
            $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
            $scope.txtbriefrpt_process = resp.data.briefrpt_process,
            $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
             $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
            $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
            $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
            $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
            $scope.editvisittype = resp.data.editvisittype;
            if (resp.data.RM_name != null) {
                $scope.relationship_managername = resp.data.RM_name
            }
            if (resp.data.constitution != null) {
                $scope.constitution = resp.data.constitution
            }
            if (resp.data.credit_managername != null) {
                $scope.credit_managername = resp.data.credit_managername;
            }
            if (resp.data.visit_date != null) {
                var p = resp.data.visit_date.split(/\D/g)
                $scope.visitdate = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.dealing_withsince != null) {
                var p = resp.data.dealing_withsince.split(/\D/g)
                $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
            }

            if (resp.data.disbursement_date != null) {
                var p = resp.data.disbursement_date.split(/\D/g)
                $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
            }

        });

        var url = "api/visitReport/getvisitReportDocument";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportdocument = resp.data.visitreportdocument;
        });

        var url = "api/visitReport/getvisitReportPhoto";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.visitreportphoto = resp.data.visitreportphoto;
        });

        var url = "api/TierMeeting/GetViewTierObservationdtl";
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.customer_name = resp.data.customer_name;
            $scope.customer_urn = resp.data.customer_urn;
            $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
            $scope.report_pertainingto = resp.data.report_pertainingto;
            $scope.vertical = resp.data.vertical;
            $scope.disbursement_amount = resp.data.disbursement_amount;
            $scope.approving_authority = resp.data.approving_authority;
            $scope.loansanction_date = resp.data.loansanction_date;
            $scope.relationship_manager_name = resp.data.relationship_manager_name;
            $scope.PPA_name = resp.data.PPA_name;
            $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
            $scope.loandisbursement_date = resp.data.loandisbursement_date;
            $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
            $scope.sanction_amount = resp.data.sanction_amount;
            $scope.outstanding_amount = resp.data.outstanding_amount;
            $scope.current_DPD = resp.data.current_DPD;
            $scope.contact_details1 = resp.data.contact_details1;
            $scope.contact_details2 = resp.data.contact_details2;
            $scope.observation_flag = resp.data.observation_flag;
            $scope.cboriskcode = resp.data.risk_code;
            $scope.criticalobservation = resp.data.criticalTierobservation;
            $scope.tiercodedtl = resp.data.tierReportdtl;
            unlockUI();
        });
        var tier1format_gid = {
            tier1format_gid: localStorage.getItem('tier1format_gid')
        }
        var url = "api/TierMeeting/GetTier1Format360Dtl";
        SocketService.getparams(url, tier1format_gid).then(function (resp) {
            $scope.txtobservations = resp.data.tier1_observations;
            if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
            }
            else {
                $scope.cboriskcode = resp.data.tier1_code;
            }
            $scope.txtrationale_justification = resp.data.tier1_justification;
            $scope.txtprocess_gap = resp.data.tier1_processgap;
            $scope.txtcode_changereason = resp.data.tier1code_changereason;
            $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
            $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
            $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
            $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
            $scope.txtATR_date = resp.data.tier1_atrdate;
            $scope.tier1format_gid = resp.data.tier1format_gid;
            $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
            $scope.tier1approvallog = resp.data.tier1approvallog;
            if ($scope.tier1code_changeflag == 'Y') {
                $scope.disablecodechangereasonshow = true;
            }
            else {
                $scope.disablecodechangereasonshow = false;
            }

            if (resp.data.tier1approvallog == null) {
                $scope.nohistoryapproval = true;
            }
            else {
                $scope.historyapproval = true;
            }
        });

        var url = 'api/TierMeeting/GetTier2Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
            $scope.tier2zonal_name = resp.data.zonal_name;
            $scope.tier2_monthname = resp.data.tier2_monthname;
            $scope.vertical = resp.data.vertical;
            $scope.headRMD_name = resp.data.headRMD_name;
            $scope.txttier2_remarks = resp.data.tier2_remarks;
            $scope.tier2_approval_status = resp.data.tier2_approval_status;
            $scope.tier2_submitteddate = resp.data.created_date;
            $scope.tier2_submittedby = resp.data.created_by;
            $scope.uploaddocument2_list = resp.data.tier2document;
            $scope.tier2approvallog = resp.data.tier2approvallog;
            $scope.tier2_approveddate = resp.data.tier2_approveddate;

            if (resp.data.tier2approvallog == null) {
                $scope.tier2nohistoryapproval = true;
            }
            else {
                $scope.tier2historyapproval = true;
            }
            unlockUI();
        });

        var url = 'api/TierMeeting/GetTier3Report360Dtl';
        SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

            $scope.mlrc_date = resp.data.MLRC_date;
            $scope.monthname = resp.data.tier3_month;
            $scope.txttier3_followup = resp.data.follow_up;
            $scope.tier3_status = resp.data.tier3_status;
            $scope.created_date = resp.data.created_date;
            $scope.created_by = resp.data.created_by;
            $scope.uploaddocument3_list = resp.data.tier3document;
            $scope.completed_date = resp.data.completed_date;
            $scope.completed_by = resp.data.completed_by;
            $scope.completed_flag = resp.data.completed_flag;
            $scope.completed_remarks = resp.data.completed_remarks;
            $scope.vertical = resp.data.vertical;
            unlockUI();
        });

        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

        }
        
        $scope.dn2cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN2Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.dn3cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN3Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });
            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.dn1generate = function () {
            $scope.courier_info = true;
            $scope.info = true;


            var url = "api/misDataimport/DN1generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN1 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.dn2generate = function () {
            $scope.courier_info = true;
            $scope.info = true;

            console.log('dn2');
            var url = "api/misDataimport/DN2generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN2 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.dn3generate = function () {
            $scope.courier_info = true;
            $scope.info = true;
            console.log('test')

            var url = "api/misDataimport/DN3generate";
            lockUI();
            var param = {
                urn: $scope.urn,
                template_content: $scope.content
            };

            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    activate();

                    Notify.alert('DN3 Generated  Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Generating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                activate();
            });

        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
        }
        $scope.clickinitiatedn1 = function () {

            $scope.sanctiondtl = false;
            $scope.initiatedn1 = true;
            $scope.courier_info = false;
            var url = 'api/misDataimport/Getsanctionloandetails';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {

                $scope.txtdnsanctionref_no = resp.data.sanction_refno;
                $scope.txtdnsanction_date = resp.data.sanction_date;
                $scope.txtdnsanction_amount = resp.data.sanction_amount;
                $scope.txtdnref_no = "SAMFIN/RMD/";

            });

            var url = 'api/lglTrnDn2CustomerDetails/template_list';

            SocketService.get(url).then(function (resp) {

                $scope.template_list = resp.data.template_list;

            });
            var url = 'api/misDataimport/GetSanctiondtl';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.dnref_no = resp.data.dn1ref_no;
                $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                $scope.dnsanction_date = resp.data.dn1_date;
                $scope.dn_type = resp.data.dn_type;
                var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                $scope.dnsanction_amount = amount_dn1;
                $scope.dn_flag = resp.data.dn_flag;
                if (resp.data.dn1_flag == "N") {
                    $scope.initiatedn1 = true;
                    $scope.sanctiondtl = false;
                }
                if (resp.data.dn1_flag == "Y") {
                    $scope.initiatedn1 = false;
                    $scope.sanctiondtl = true;
                }

            });

            var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
            var param = {
                urn: $scope.urn

            };

            SocketService.getparams(url, param).then(function (resp) {
                $scope.content = resp.data.template_content;

            });

            $scope.info = true;

        }
        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
            $("#addupload").val('');
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
                        activate();
                    });
                }
            }
        }

        $scope.dnsanctionsubmit = function () {

            if ($scope.cbousertype == 'guarantor') {
                if (($scope.cboguarantor == '') || ($scope.cboguarantor == undefined)) {
                    $scope.Sanctioninfo = true;
                }
                else {
                    $scope.Sanctioninfo = false;
                    if ($scope.cbousertype == 'guarantor') {
                        var guarantor_name = $scope.cboguarantor.name;
                        var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                    }
                    else {
                        var guarantor_name = '';
                        var guarantor_gid = '';
                    }
                    var param = {
                        urn: $scope.urn,
                        dnsanctionref_no: $scope.txtdnsanctionref_no,
                        dnsanction_date: $scope.txtdnsanction_date,
                        dnsanction_amount: $scope.txtdnsanction_amount,
                        dnref_no: $scope.txtdnref_no,
                        user_type: $scope.cbousertype,
                        template_type: $scope.cbotemplate.template_name,
                        template_gid: $scope.cbotemplate.template_gid,
                        guarantor_name: guarantor_name,
                        guarantor_gid: guarantor_gid
                    };
                    lockUI();
                    if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                              
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn1ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn1_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            console.log(resp.data.dn1sanction_amount);
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn1_flag = resp.data.dn1_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn1_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }

                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }


                    else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                                
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn2ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn2_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn2_flag = resp.data.dn2_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn2_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                    else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                        if ($scope.uploadfrm != undefined) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                             
                                SocketService.post(url, param).then(function (resp) {
                                    unlockUI();
                                    if (resp.data.status == true) {
                                        var url = 'api/misDataimport/GetSanctiondtl';
                                        var param = {
                                            urn: $scope.urn
                                        };
                                        SocketService.getparams(url, param).then(function (resp) {

                                            $scope.dnref_no = resp.data.dn3ref_no;
                                            $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                            $scope.dnsanction_date = resp.data.dn3_date;
                                            $scope.dn_type = resp.data.dn_type;
                                            var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                            $scope.dnsanction_amount = amount_dn1;
                                            $scope.dn3_flag = resp.data.dn3_flag;
                                            if (resp.data.dn_flag == "N") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                            if (resp.data.dn3_flag == "Y") {
                                                $scope.initiatedn1 = false;
                                                $scope.sanctiondtl = true;
                                            }
                                        });

                                        var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                        var param = {
                                            urn: $scope.urn

                                        };
                                        console.log(param);
                                        SocketService.getparams(url, param).then(function (resp) {
                                            $scope.content = resp.data.template_content;

                                        });

                                        Notify.alert(resp.data.message, {
                                            status: 'success',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }
                                    else {
                                        Notify.alert(resp.data.message, {
                                            status: 'warning',
                                            pos: 'top-center',
                                            timeout: 3000
                                        });
                                    }


                                });
                            });
                        }
                        else {
                            unlockUI();
                            Notify.alert("Kindly Upload Annexure", 'warning')
                        }
                    }
                }
            }
            else {
                $scope.Sanctioninfo = false;
                if ($scope.cbousertype == 'guarantor') {
                    var guarantor_name = $scope.cboguarantor.name;
                    var guarantor_gid = $scope.cboguarantor.customer2usertype_gid

                }
                else {
                    var guarantor_name = '';
                    var guarantor_gid = '';
                }
                var param = {
                    urn: $scope.urn,
                    dnsanctionref_no: $scope.txtdnsanctionref_no,
                    dnsanction_date: $scope.txtdnsanction_date,
                    dnsanction_amount: $scope.txtdnsanction_amount,
                    dnref_no: $scope.txtdnref_no,
                    user_type: $scope.cbousertype,
                    template_type: $scope.cbotemplate.template_name,
                    template_gid: $scope.cbotemplate.template_gid,
                    guarantor_name: guarantor_name,
                    guarantor_gid: guarantor_gid
                };
                lockUI();
                if ($scope.cbotemplate.template_name == 'Legal-DN1') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN1AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN1Sanctiondtl';
                            
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn1ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn1sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn1_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        console.log(resp.data.dn1sanction_amount);
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn1sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn1_flag = resp.data.dn1_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn1_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN1Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }

                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }


                else if ($scope.cbotemplate.template_name == 'Legal-DN2') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN2AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN2Sanctiondtl';
                           
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn2ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn2sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn2_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn2sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn2_flag = resp.data.dn2_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn2_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN2Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
                else if ($scope.cbotemplate.template_name == 'Legal-DN3') {
                    if ($scope.uploadfrm != undefined) {
                        var url = 'api/lglTrnDn2CustomerDetails/PostDN3AnnexureUpload';
                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            var url = 'api/lglTrnDn2CustomerDetails/PostDN3Sanctiondtl';
                          
                            SocketService.post(url, param).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {
                                    var url = 'api/misDataimport/GetSanctiondtl';
                                    var param = {
                                        urn: $scope.urn
                                    };
                                    SocketService.getparams(url, param).then(function (resp) {

                                        $scope.dnref_no = resp.data.dn3ref_no;
                                        $scope.dnsanctionref_no = resp.data.dn3sanctionref_no;
                                        $scope.dnsanction_date = resp.data.dn3_date;
                                        $scope.dn_type = resp.data.dn_type;
                                        var amount_dn1 = new Intl.NumberFormat('en-IN').format(resp.data.dn3sanction_amount);
                                        $scope.dnsanction_amount = amount_dn1;
                                        $scope.dn3_flag = resp.data.dn3_flag;
                                        if (resp.data.dn_flag == "N") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                        if (resp.data.dn3_flag == "Y") {
                                            $scope.initiatedn1 = false;
                                            $scope.sanctiondtl = true;
                                        }
                                    });

                                    var url = 'api/lglTrnDn2CustomerDetails/DN3Content';
                                    var param = {
                                        urn: $scope.urn

                                    };
                                    console.log(param);
                                    SocketService.getparams(url, param).then(function (resp) {
                                        $scope.content = resp.data.template_content;

                                    });

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                }


                            });
                        });
                    }
                    else {
                        unlockUI();
                        Notify.alert("Kindly Upload Annexure", 'warning')
                    }
                }
            }
        }
        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
            $("#addupload").val('');
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("EMS");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.dn1pdf = function () {


            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN1pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN1.pdf");
                    Notify.alert('DN1 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }

        $scope.dn2pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN2pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN2.pdf");
                    Notify.alert('DN2 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
        $scope.dn3pdf = function () {

            var params = {
                urn: $scope.urn

            };

            var url = 'api/misDataimport/DN3pdfcontent';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    var filepath = resp.data.file_path;
                    var filename = resp.data.file_name;
                    DownloaddocumentService.Downloaddocument(filepath, "Report - DN3.pdf");
                    Notify.alert('DN3 Report Downloaded Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error Occurred While Export PDF !', 'warning');
                }
                unlockUI();
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('dnskippedontroller', dnskippedontroller);

    dnskippedontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','$anchorScroll'];

    function dnskippedontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, $anchorScroll) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'dnskippedontroller';

        activate();

        function activate() {
            $scope.ShowAllocation360
            $scope.guarantorinfo = false;
            $scope.Sanctioninfo = false;
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            $scope.urn = localStorage.getItem('urn');
            $scope.clickrepayment = false;
            $scope.clicktelecall = false;
            var param = {
                urn: $scope.urn
            };


            var url = 'api/MstRepayment/GetRepayment';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.repaymentaccount_list = resp.data.repaymentaccount_list;
                angular.forEach($scope.repaymentaccount_list, function (value, key) {
                    lockUI();
                    var params = {
                        account_no: value.account_no
                    };
                    var url = 'api/MstRepayment/GetRepayment_list';
                    SocketService.getparams(url, params).then(function (resp) {
                        unlockUI();
                        value.repayment_list = resp.data.repayment_list;

                        value.expand = false;

                    });
                });
            });
            var url = 'api/MstTelecall/GetTelecall';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.telecall_list = resp.data.telecall_list;;
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerupdatedetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.customerCode = resp.data.customerCodeedit;
                $scope.customerName = resp.data.customerNameedit;
                $scope.contactPerson = resp.data.contactPersonedit;
                $scope.mobileNo = resp.data.mobileNo_edit;
                $scope.contactno = resp.data.contactno_edit;
                $scope.email = resp.data.emailedit;
                $scope.txtaddress1 = resp.data.addressline1edit;
                $scope.txtaddress2 = resp.data.addressline2edit;
                $scope.region = resp.data.regionedit;
                $scope.country = resp.data.countryedit;
                $scope.vertical = resp.data.vertical_gid;
                $scope.vertical_code = resp.data.vertical_code;
                $scope.statename = resp.data.state;
                $scope.state_gid = resp.data.state_gid;
                $scope.riskmanager = resp.data.risk_managernameedit;
                $scope.district_name = resp.data.district_nameedit;
                $scope.postalcode = resp.data.postalcode_edit;
                $scope.tomail = resp.data.tomailedit;
                $scope.ccmail = resp.data.ccmailedit;
                $scope.zonalHead = resp.data.zonal_name;
                $scope.businessHead = resp.data.businesshead_name;
                $scope.clustermanager = resp.data.cluster_manager_name;
                $scope.creditmanager = resp.data.creditmanager_name;
                $scope.relationshipMgmt = resp.data.relationshipmgmt_name;
                $scope.customerURN = resp.data.customer_urnedit;
                $scope.pan_number = resp.data.pan_number;
                $scope.gst_number = resp.data.gst_number;
                $scope.txtmajor_corporate = resp.data.major_corporateedit;
                $scope.cboconstitution = resp.data.constitution_gidedit;
                $scope.cboconstitutionname = resp.data.constitution_nameedit;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/Getcustomerdetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {

                $scope.lblpan_number = resp.data.pan_no;
                $scope.customer2userdtl_list = resp.data.customer2userdtl_list;
                $scope.address_list = resp.data.address_list;
                $scope.idproof_list = resp.data.idproof_list;
                $scope.mobileno_list = resp.data.mobileno_list;
                $scope.member_list = resp.data.member_list;
                $scope.lblcustomer_type = resp.data.customer_type;
                $scope.lblgst_no = resp.data.gst_no;
                $scope.lblyear_business = resp.data.year_business;
                $scope.lblcompany_type = resp.data.company_type;
                $scope.lblcontactperson_designation = resp.data.contactperson_designation;
                $scope.lblcin_no = resp.data.cin_no;
                $scope.lblcin_date = resp.data.cin_date;
                $scope.lbllandmark = resp.data.landmark;
                $scope.lblmonth_business = resp.data.month_business;
                $scope.lblcredit_rating = resp.data.credit_rating;
                $scope.lblescrow = resp.data.escrow;
                $scope.lblage = resp.data.age;
                $scope.lblphoto_path = resp.data.photo_path;
                $scope.lblphoto_name = resp.data.photo_name;
                $scope.lblaadhar_no = resp.data.aadhar_no;
                $scope.lblcontact_person = resp.data.contact_person;
                $scope.lbltelephone_no = resp.data.telephone_no;
                $scope.lblofficailemail_address = resp.data.officailemail_address;
                $scope.lblpersonalemail_address = resp.data.personalemail_address;
                $scope.lblgender = resp.data.gender;
                $scope.lbldob = resp.data.dob;
                $scope.lblname = resp.data.name;
                $scope.lbluser_type = resp.data.user_type;
                unlockUI();
            });
            var url = 'api/lglTrnDn2CustomerDetails/GetGuarantordetails';
            var param = {
                urn: $scope.urn
            };
            lockUI();
            SocketService.getparams(url, param).then(function (resp) {
                $scope.additional_list = resp.data.customer2userdtl_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/Getsanctionloandetails";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.sanctiondetails = resp.data.sanctionloanListurn;
                $scope.sanctionDocument = resp.data.upload_listurn;
                var previstdocumentflag;
                if (resp.data.upload_list == null) {
                    $scope.previstdocumentflag = 'N';
                }
                else {
                    $scope.previstdocumentflag = 'Y';
                }
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/lglTrnDn2CustomerDetails/GetloanListDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanListurn;
                        value.expand = false;

                    });
                });
            });

            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.urn = localStorage.getItem('urn');
            $scope.history = false;
            $scope.initiatedn1 = true;
            $scope.otherloan = true;
            $scope.click = true;
            $scope.dn1format = true;
            $scope.button = true;
            $scope.revert = true;
            $scope.sanctiondtl = true;
            $scope.courier_info = true;
            var url = "api/misDataimport/getcustomer2Loan"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.mdlMisdataimport;
                $scope.customer_name = resp.data.customer_name;

            });
            //var url = "api/misDataimport/getDN1Status"
            //lockUI();
            //var param = {
            //    urn: $scope.urn
            //};
            //SocketService.getparams(url, param).then(function (resp) {
            //    unlockUI();
            //    $scope.dnhistory_list = resp.data.dnhistory_list;
            //});
            var url = "api/LglTrnDNTrackerVertical/template_content"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.content = resp.data.template_content;

                document.getElementById('test').innerHTML += $scope.content;
                $scope.dn_status = resp.data.dn_status;
                if ((resp.data.dn_status == 'DN1 Generated') || (resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated')) {

                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if ((resp.data.dn_status == 'DN1 Sent') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.dn1format = false;
                    $scope.button = true;
                    $scope.info = false;
                }
                if ((resp.data.dn_status == 'DN2 Generated') || (resp.data.dn_status == 'DN3 Generated') || (resp.data.dn_status == 'DN2 Sent') || (resp.data.dn_status == 'DN3 Sent')) {

                    $scope.history = true;

                }
                if ((resp.data.dn_status == 'DN1 Hold')) {
                    $scope.dn1format = false;
                    $scope.button = false;
                    $scope.courier_info = false;
                    $scope.info = true;
                }
                if (resp.data.dn_status == 'DN1 Reverted') {
                    $scope.initiatedn1 = true;
                    $scope.otherloan = true;
                    $scope.click = true;
                    $scope.dn1format = true;
                    $scope.button = true;
                    $scope.courier_info = false;
                    $scope.revert = false;
                }
            });
            var url = "api/misDataimport/getDN1Status"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnhistory_list = resp.data.dnhistory_list;
                $scope.dn2history_list = resp.data.dn2history_list;
                $scope.dn3history_list = resp.data.dn3history_list;
            });
            var url = "api/lglTrnDn2CustomerDetails/GetSkippedHistory"
            lockUI();
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dnskiphistory_list = resp.data.dnskiphistory_list;
              
            });
            var url = "api/misDataimport/getcourierinfo"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.dncouriered_by = resp.data.couriered_by;
                $scope.dncourier_center = resp.data.courier_center;
                $scope.dncourier_date = resp.data.courier_date;
                $scope.dncourier_refno = resp.data.courier_refno;
                $scope.dnremarks = resp.data.courier_remarks;
                $scope.dncourier_status = resp.data.dn1courier_status;
                $scope.dn2couriered_by = resp.data.dn2couriered_by;
                $scope.dn2courier_center = resp.data.dn2courier_center;
                $scope.dn2courier_date = resp.data.dn2courier_date;
                $scope.dn2courier_refno = resp.data.dn2courier_refno;
                $scope.dn2remarks = resp.data.dn2remarks;
                $scope.dn2courier_status = resp.data.dn2courier_status;
                $scope.dn3couriered_by = resp.data.dn3couriered_by;
                $scope.dn3courier_center = resp.data.dn3courier_center;
                $scope.dn3courier_date = resp.data.dn3courier_date;
                $scope.dn3courier_refno = resp.data.dn3courier_refno;
                $scope.dn3remarks = resp.data.dn3remarks;
                $scope.dn3courier_status = resp.data.dn3courier_status;
                if (resp.data.courier_status == 'DN1 Sent') {
                    $scope.dn1couriered_by = resp.data.couriered_by;
                    $scope.dn1courier_center = resp.data.courier_center;
                    $scope.dn1courier_date = resp.data.courier_date;
                    $scope.dn1courier_refno = resp.data.courier_refno;
                    $scope.dn1remarks = resp.data.courier_remarks;
                    $scope.dn1courier_status = resp.data.dn1courier_status;
                }
                else if (resp.data.courier_status == 'DN2 Sent') {
                    $scope.dn1couriered_by = resp.data.dn2couriered_by;
                    $scope.dn1courier_center = resp.data.dn2courier_center;
                    $scope.dn1courier_date = resp.data.dn2courier_date;
                    $scope.dn1courier_refno = resp.data.dn2courier_refno;
                    $scope.dn1remarks = resp.data.dn2remarks;
                    $scope.dn1courier_status = resp.data.dn2courier_status;
                }
                else if (resp.data.courier_status == 'DN3 Sent') {
                    $scope.dn1couriered_by = resp.data.dn3couriered_by;
                    $scope.dn1courier_center = resp.data.dn3courier_center;
                    $scope.dn1courier_date = resp.data.dn3courier_date;
                    $scope.dn1courier_refno = resp.data.dn3courier_refno;
                    $scope.dn1remarks = resp.data.dn3remarks;
                    $scope.dn1courier_status = resp.data.dn3courier_status;
                }
            });
            var url = "api/misDataimport/Getrevertdetails"
            lockUI();
            var param = {
                urn: $scope.urn
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.dn_status = resp.data.dn_status;
                $scope.remarks = resp.data.remarks;
            });
            $scope.MyZonalAllocationHistory = localStorage.getItem('MyZonalAllocationHistory');
            var customer_gid = {
                customer_gid: localStorage.getItem('allocation_customer_gid')
            }
            $scope.allocation_customer_gid = customer_gid;
            console.log(customer_gid);
            var url = "api/allocationManagement/getAllocationHistory";
            SocketService.getparams(url, customer_gid).then(function (resp) {
                console.log('allocation history', resp);
                $scope.allocationHistoryList = resp.data.overallhistoryallocationdtl;
                console.log(resp.data.overallhistoryallocationdtl);
                $scope.customername = resp.data.overallhistoryallocationdtl[0].customername;
                $scope.customer_urn = resp.data.overallhistoryallocationdtl[0].customer_urn;

            });
            var allocationdtl_gid = {
                allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
            }
            var url = "api/allocationManagement/getallocatedtls";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.zonal_name = resp.data.zonal_name;
                $scope.state_name = resp.data.state_name;
                $scope.district_name = resp.data.district_name;
                $scope.assigned_RM = resp.data.assigned_RM;
                $scope.customername = resp.data.customername;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.ZonalRMname = resp.data.ZonalRMname;
                $scope.clientName = resp.data.customername;
            });

            var url = "api/visitReport/GetAllocationLogDetail";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.scheduleList = resp.data.schedulelogdtl;
                $scope.calllogdtlList = resp.data.calllogdtl;

            });

            var url = "api/allocationManagement/GetAllocationCustomerDtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customerdetails = resp.data;
                $scope.sanctiondetails = resp.data.loandtl;
                $scope.customerCollateral = resp.data.collateraldtl;
                $scope.holdallocationlist = resp.data.holdallocation;
                $scope.customerguarantorlist = resp.data.Guarantorsdtl;
                console.log('Gurantor', resp);
                $scope.customerPromotorlist = resp.data.Promoterdtl;
                angular.forEach($scope.sanctiondetails, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid,
                        allocationdtl_gid: localStorage.getItem('allocationdtl_gid')
                    };

                    var url = 'api/allocationManagement/GetAllocateloanList';
                    SocketService.post(url, params).then(function (resp) {
                        value.loandetails = resp.data.loanList;
                        value.expand = false;
                    });
                });
            });

            var url = "api/customerManagement/HistoryEscrowSummary";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (resp.data.status == true) {
                    $scope.escrowlist = resp.data.escrowSummary;
                }
            });

            var url = "api/allocationManagement/getAllocationdocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                if (Array.isArray(resp.data.upload_list) && resp.data.upload_list.length) {
                    $scope.upload_list = resp.data.upload_list;
                    $scope.documentUpload = true;
                }
                else {

                    $scope.documentNotUpload = true;
                }
            });

            var url = "api/visitReport/getvisitreportdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.visitreport_generateGid = resp.data.visitreport_generateGid;
                $scope.customer_gid = resp.data.customer_gid;
                $scope.txtbusiness_vintage = resp.data.business_vintage,
                $scope.cbotypeof_loan = resp.data.typeof_loanvertical,
                $scope.txtbusiness_sector = resp.data.business_sector,
                $scope.txtregister_address = resp.data.registeredoffice_address,
                $scope.cboriskcode = resp.data.risk_code,
                $scope.txtactual_address = resp.data.present_address,
                $scope.txtcontact_dtl1 = resp.data.contact_details1,
                $scope.txtcontact_dtl2 = resp.data.contact_details2,
                $scope.cborisk_reviewtype = resp.data.typeof_riskreview;
                $scope.txtlattitude = resp.data.visit_latitude;
                $scope.txtlongitude = resp.data.visit_longitude;
                //$scope.firstdisb_date = resp.data.relationship_startedfrom
                $scope.txtbusiness_client = resp.data.clientbusiness_vintage,
                $scope.txtprimary_chain = resp.data.primarysecondary_valuechain,
                $scope.cbogenetic_code = resp.data.geneticcode_complied,
                $scope.cboRMD_gid = resp.data.RMD_visitedGid,
                $scope.RMD_visitedname = resp.data.RMD_visitedname;
                $scope.txtPPA_name = resp.data.PPA_name;
                $scope.cbovisit_done = resp.data.visit_done,
                $scope.txtpurposeof_loan = resp.data.purpose_ofloan,
                $scope.txtrequestedloan_byclient = resp.data.requestedamount_byclient,
                $scope.txtsantionloan_bycredit = resp.data.sanctionedamount_byclient;
                $scope.txtdisbursement_amount = resp.data.disbursement_amount,
                $scope.txttotalloan_oustanding = resp.data.totalloan_outstanding,
                $scope.cborepayment_track = resp.data.repayment_track,
                $scope.cbobasic_records = resp.data.basicrecords_maintain,
                $scope.txtturnover_lastfy = resp.data.turnover_lastFY,
                $scope.txtpresent_fysales = resp.data.presentFY_sales,
                $scope.txtdeferral_pendency = resp.data.deferral_pendency,
                $scope.txtadditional_funding = resp.data.adequacy_additionalfunding,
                $scope.txtcbototal_groups = resp.data.total_noofGroups,
                $scope.txtCBOgroup_funded = resp.data.CBOfunded_noofGroups,
                $scope.txtRMDvisit_groupcount = resp.data.RMD_visitgroups,
                $scope.txtassetverification_comment = resp.data.assetverification_createdoutofloan,
                $scope.txtsecurity_details = resp.data.assetverification_securitydtls,
                $scope.txtassetverification_mortagged = resp.data.assetverification_mortgaged,
                $scope.txtROCcreation = resp.data.assetverification_ROCcreation,
                $scope.txtbasicrecord_remarks = resp.data.basicrecords_remarks,
                $scope.txtpurpose_funding = resp.data.purposeof_funding,
                $scope.txt_utilisationdtls = resp.data.utilisation_details,
                $scope.txtadequacyloan_samunnati = resp.data.adequacy_loanamount,
                $scope.txtadequacyloan_impactassessment = resp.data.adequacy_impactassessment,
                $scope.txtportfolio_noofmember = resp.data.portfolio_noofmembers,
                $scope.txtportfolio_activemembers = resp.data.portfolio_activemembers,
                $scope.txtportfoliototal_loandisbursement = resp.data.total_disbursementamount,
                $scope.txtportfolio_outstandingdate = resp.data.outstanding_ondate,
                $scope.txtportfolio_overduebeneficary = resp.data.overdue_beneficiary,
                $scope.txtportfolio_overdueAmount = resp.data.overdue_amount,
                $scope.txtportfolio_fundingoverdue = resp.data.overdueaccount_funding,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtsanctioned_limit = resp.data.sanctioned_limit,
                $scope.txttenure_period = resp.data.tenure_period,
                $scope.txtrepayment_trackremarks = resp.data.repayment_trackremarks,
                //$scope.txtloan_clientdate = resp.data.loan_clientdate,
                $scope.txtoverdue = resp.data.overdue,
                $scope.txtborrower_commitment = resp.data.borrower_commitment,
                $scope.txtpending_documentation = resp.data.pending_documentation,
                //$scope.txtasset_verification = resp.data.asset_verification,
                $scope.txtbriefdtls_client = resp.data.briefdtls_client,
                $scope.txtenduse_loan = resp.data.enduse_loan,
                //$scope.txtadequacy_loan = resp.data.adequacy_loan,
                $scope.txtoverall_remarks = resp.data.overall_remarks,
                $scope.txtPDD_compliance = resp.data.PDD_compliance,
                $scope.txtbriefrpt_financials = resp.data.briefrpt_financials,
                $scope.txtbriefrpt_process = resp.data.briefrpt_process,
                $scope.txtbriefrpt_customer = resp.data.briefrpt_customer,
                 $scope.txtvaluechain_mapanalysis = resp.data.valuechain_mapanalysis,
                $scope.txtcompetitorbusiness_segment = resp.data.competitorbusiness_segment;
                $scope.txtbriefrpt_learnings = resp.data.briefrpt_learnings,
                $scope.txtbriefrpt_valuechain = resp.data.briefrpt_valuechain,
                $scope.editvisittype = resp.data.editvisittype;
                if (resp.data.RM_name != null) {
                    $scope.relationship_managername = resp.data.RM_name
                }
                if (resp.data.constitution != null) {
                    $scope.constitution = resp.data.constitution
                }
                if (resp.data.credit_managername != null) {
                    $scope.credit_managername = resp.data.credit_managername;
                }
                if (resp.data.visit_date != null) {
                    var p = resp.data.visit_date.split(/\D/g)
                    $scope.visitdate = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.dealing_withsince != null) {
                    var p = resp.data.dealing_withsince.split(/\D/g)
                    $scope.txtincorporated_date = [p[2], p[1], p[0]].join("-");
                }

                if (resp.data.disbursement_date != null) {
                    var p = resp.data.disbursement_date.split(/\D/g)
                    $scope.txtdisbursement_date = [p[2], p[1], p[0]].join("-");
                }

            });

            var url = "api/visitReport/getvisitReportDocument";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportdocument = resp.data.visitreportdocument;
            });

            var url = "api/visitReport/getvisitReportPhoto";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.visitreportphoto = resp.data.visitreportphoto;
            });

            var url = "api/TierMeeting/GetViewTierObservationdtl";
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                $scope.customer_name = resp.data.customer_name;
                $scope.customer_urn = resp.data.customer_urn;
                $scope.dateof_RMDvisit = resp.data.dateof_RMDvisit;
                $scope.report_pertainingto = resp.data.report_pertainingto;
                $scope.vertical = resp.data.vertical;
                $scope.disbursement_amount = resp.data.disbursement_amount;
                $scope.approving_authority = resp.data.approving_authority;
                $scope.loansanction_date = resp.data.loansanction_date;
                $scope.relationship_manager_name = resp.data.relationship_manager_name;
                $scope.PPA_name = resp.data.PPA_name;
                $scope.RMDvisit_officialname = resp.data.RMDvisit_officialname;
                $scope.loandisbursement_date = resp.data.loandisbursement_date;
                $scope.people_accompaniedRMD = resp.data.people_accompaniedRMD;
                $scope.sanction_amount = resp.data.sanction_amount;
                $scope.outstanding_amount = resp.data.outstanding_amount;
                $scope.current_DPD = resp.data.current_DPD;
                $scope.contact_details1 = resp.data.contact_details1;
                $scope.contact_details2 = resp.data.contact_details2;
                $scope.observation_flag = resp.data.observation_flag;
                $scope.cboriskcode = resp.data.risk_code;
                $scope.criticalobservation = resp.data.criticalTierobservation;
                $scope.tiercodedtl = resp.data.tierReportdtl;
                unlockUI();
            });
            var tier1format_gid = {
                tier1format_gid: localStorage.getItem('tier1format_gid')
            }
            var url = "api/TierMeeting/GetTier1Format360Dtl";
            SocketService.getparams(url, tier1format_gid).then(function (resp) {
                $scope.txtobservations = resp.data.tier1_observations;
                if (resp.data.tier1_code == null || resp.data.tier1_code == "") {
                }
                else {
                    $scope.cboriskcode = resp.data.tier1_code;
                }
                $scope.txtrationale_justification = resp.data.tier1_justification;
                $scope.txtprocess_gap = resp.data.tier1_processgap;
                $scope.txtcode_changereason = resp.data.tier1code_changereason;
                $scope.tier1code_changeflag = resp.data.tier1code_changeflag;
                $scope.txtimprovement_recommendation = resp.data.tier1_processrecommendation;
                $scope.txtmanagement_comments = resp.data.tier1_managementcomments;
                $scope.txtcheifheadreverts_actionplan = resp.data.tier1_reverts_actionplan;
                $scope.txtATR_date = resp.data.tier1_atrdate;
                $scope.tier1format_gid = resp.data.tier1format_gid;
                $scope.tier1_approvalstatus = resp.data.tier1_approvalstatus;
                $scope.tier1approvallog = resp.data.tier1approvallog;
                if ($scope.tier1code_changeflag == 'Y') {
                    $scope.disablecodechangereasonshow = true;
                }
                else {
                    $scope.disablecodechangereasonshow = false;
                }

                if (resp.data.tier1approvallog == null) {
                    $scope.nohistoryapproval = true;
                }
                else {
                    $scope.historyapproval = true;
                }
            });

            var url = 'api/TierMeeting/GetTier2Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {
                console.log(resp);
                $scope.tier2zonal_name = resp.data.zonal_name;
                $scope.tier2_monthname = resp.data.tier2_monthname;
                $scope.vertical = resp.data.vertical;
                $scope.headRMD_name = resp.data.headRMD_name;
                $scope.txttier2_remarks = resp.data.tier2_remarks;
                $scope.tier2_approval_status = resp.data.tier2_approval_status;
                $scope.tier2_submitteddate = resp.data.created_date;
                $scope.tier2_submittedby = resp.data.created_by;
                $scope.uploaddocument2_list = resp.data.tier2document;
                $scope.tier2approvallog = resp.data.tier2approvallog;
                $scope.tier2_approveddate = resp.data.tier2_approveddate;

                if (resp.data.tier2approvallog == null) {
                    $scope.tier2nohistoryapproval = true;
                }
                else {
                    $scope.tier2historyapproval = true;
                }
                unlockUI();
            });

            var url = 'api/TierMeeting/GetTier3Report360Dtl';
            SocketService.getparams(url, allocationdtl_gid).then(function (resp) {

                $scope.mlrc_date = resp.data.MLRC_date;
                $scope.monthname = resp.data.tier3_month;
                $scope.txttier3_followup = resp.data.follow_up;
                $scope.tier3_status = resp.data.tier3_status;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.uploaddocument3_list = resp.data.tier3document;
                $scope.completed_date = resp.data.completed_date;
                $scope.completed_by = resp.data.completed_by;
                $scope.completed_flag = resp.data.completed_flag;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.vertical = resp.data.vertical;
                unlockUI();
            });
        }
        $scope.viewrepayment = function (repyment_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewrepayment.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    repyment_gid: repyment_gid
                }
                console.log(params)
                var url = "api/MstRepayment/GetRepayment_info";
                SocketService.getparams(url, params).then(function (resp) {
                    $scope.account_no = resp.data.account_no;
                    $scope.repayment_date = resp.data.repayment_date;
                    $scope.transaction_date = resp.data.transaction_date;
                    $scope.transaction_id = resp.data.transaction_id;
                    $scope.repayment_amount = resp.data.repayment_amount;
                    $scope.principal = resp.data.principal;
                    $scope.normal_interest = resp.data.normal_interest;
                    $scope.penal_interest = resp.data.penal_interest;
                    $scope.for_feiture_waiver = resp.data.for_feiture_waiver;
                    $scope.user_id = resp.data.user_id;
                    $scope.instrument = resp.data.instrument;
                    $scope.repayment_type = resp.data.repayment_type;
                    $scope.dpd = resp.data.dpd;
                    $scope.old_dpd = resp.data.old_dpd;
                    $scope.account_code = resp.data.account_code;
                    $scope.interest_tds = resp.data.interest_tds;
                    $scope.remarks = resp.data.remarks;
                    $scope.URN = resp.data.URN;
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }

        $scope.viewtelecall = function (telecall_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/viewtelecall.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    telecall_gid: telecall_gid
                }
                console.log(params)
                var url = "api/MstTelecall/GetTelecall_info";
                lockUI();
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.account_no = resp.data.account_no;
                    $scope.start_time = resp.data.start_time;
                    $scope.completetion_time = resp.data.completetion_time;
                    $scope.email_address = resp.data.email_address;
                    $scope.name = resp.data.name;
                    $scope.relationship = resp.data.relationship;
                    $scope.customer_name = resp.data.customer_name;
                    $scope.typeof_call = resp.data.typeof_call;
                    $scope.call_details = resp.data.call_details;
                    $scope.spoken_to = resp.data.spoken_to;
                    $scope.natureof_business = resp.data.natureof_business;
                    $scope.reason_OD = resp.data.reason_OD;
                    $scope.telecall_status = resp.data.telecall_status;
                    $scope.courseof_action = resp.data.courseof_action;
                    $scope.ptp_date = resp.data.ptp_date;
                    $scope.ptp_amount = resp.data.ptp_amount;
                    $scope.remarksby_telecaller = resp.data.remarksby_telecaller;
                    $scope.followup_date = resp.data.followup_date;
                    $scope.ledger_balance = resp.data.ledger_balance;
                    $scope.total_demand_due = resp.data.total_demand_due;
                    $scope.URN = resp.data.URN;
                    console.log(resp.data.URN)
                    unlockUI();
                    console.log(resp.data.completetion_time)
                });

                $scope.ok = function () {
                    $modalInstance.close('account_no');
                };

            }

        }
        $scope.Repayment = function () {
            $scope.clickrepayment = true;
            $scope.clicktelecall = false;
        }
        $scope.telecall = function () {
            $scope.clicktelecall = true;
            $scope.clickrepayment = false;
        }
        $scope.viewcustomerdtl = function (allocationdtl_gid, tier1format_gid) {
            $location.hash('down');
            $anchorScroll();
            localStorage.setItem('allocationdtl_gid', allocationdtl_gid);
            localStorage.setItem('tier1format_gid', tier1format_gid);
            $scope.ShowAllocation360 = true;

        }
        $scope.closeAllocation = function () {

            $scope.ShowAllocation360 = false;
        }
        $scope.onselectedchangeusertype = function () {
            console.log($scope.cbousertype);
            if ($scope.cbousertype == 'guarantor') {
                $scope.guarantorinfo = true;
                var param = {
                    urn: localStorage.getItem('urn')
                }
                var url = 'api/lglTrnDn2CustomerDetails/GetGuarantorlist';
                SocketService.getparams(url, param).then(function (resp) {
                    $scope.guarantor_list = resp.data.customer2userdtl_list;
                });
            }
            else {
                $scope.guarantorinfo = false;
            }
        }
        $scope.checkall = function (selected) {
            angular.forEach($scope.documentlist_gid, function (val) {
                val.checked = selected;
            });
        }
        // Numeric to Word - Indian Standard...//

        function inWords(num) {
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            var s = num.toString();
            s = s.replace(/[\, ]/g, '');
            if (s != parseFloat(s)) return '';
            if ((num = num.toString()).length > 9) return 'Overflow';
            var n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';

            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
            return str;
        }
        $scope.DN1send = function () {
            lockUI();
            var url = "api/misDataimport/DN1Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }

        $scope.DN2send = function () {
            lockUI();
            console.log('dn2')
            var url = "api/misDataimport/DN2Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN2 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN2 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN3send = function () {

            lockUI();
            var url = "api/misDataimport/DN3Status"
            var param = {
                urn: $scope.urn,
                courier_refno: $scope.txtcourierefno,
                courier_center: $scope.txtcouriercenter,
                courier_date: $scope.txtcourierdate,
                couriered_by: $scope.txtcourierby,
                courier_remarks: $scope.txtcourieredremarks

            };
            SocketService.post(url, param).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {

                    Notify.alert('DN3 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN3 Status ')
                }
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');

            });

            $scope.courier_info = false;

            $scope.info = true;
        }
        $scope.DN1skip = function () {
            var url = "api/misDataimport/DN1skip"
            var param = {
                urn: $scope.urn
            };
            SocketService.post(url, param).then(function (resp) {
                if (resp.data.status == true) {
                    activate();
                    Notify.alert('DN1 Status Updated Successfully', 'success')
                }
                else {
                    Notify.alert('Error Occurred While Updating DN1 Status ')
                }
                activate();
            });
        }
        $scope.Dn1back = function () {
            if ($scope.relpath1 == 'others')
            {
                $location.url('app/lglTrnDNTrackerOthers?lstab=pending');
            }
            else if($scope.relpath1 == 'retail')
            {
                $location.url('app/lglTrnDNTrackerRetail?lstab=pending');
            }
            else if ($scope.relpath1 == 'FPO')
            {
                $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
            }
            else if ($scope.relpath1 == 'CBO') {
                $location.url('app/lglTrnDNTrackerCBO?lstab=pending');
            }
            else if ($scope.relpath1 == 'AE') {
                $location.url('app/LglTrnDNTrackerAE?lstab=pending');
            }
           
        }

        $scope.close = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
        }
        $scope.cancel = function () {
            var url = 'api/lglTrnDn2CustomerDetails/DN1Cancel';
            var param = {
                urn: $scope.urn
            };
            SocketService.getparams(url, param).then(function (resp) {
                Notify.alert('Sanction Information canceled', {
                    status: 'info',
                    pos: 'top-center',
                    timeout: 3000
                });
            });
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.cbousertype = '';
        }
        $scope.revert = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/revertdn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.revert_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/RevertDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.hold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/holddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.hold_yes = function () {

                    var params = {

                        urn: urn,
                        remarks: $scope.txtremarks
                    }
                    console.log(params);
                    var url = 'api/misDataimport/HoldDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }
        $scope.unhold = function (urn) {

            var modalInstance = $modal.open({
                templateUrl: '/unholddn.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.unhold_yes = function () {

                    var params = {

                        urn: urn,
                    }
                    console.log(params);
                    var url = 'api/misDataimport/UnholdDN1';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $location.url('app/lglTrnDNTrackerFPO?lstab=pending');
                        activate();
                    });
                }
            }
        }



        $scope.dn1cancel = function () {
            $scope.courier_info = false;
            $scope.initiatedn1 = true;
            $scope.sanctiondtl = true;
            $scope.info = false;
            $scope.txtdnsanctionref_no = '';
            $scope.txtdnsanction_date = '';
            $scope.txtdnsanction_amount = '';
            $scope.txtdnref_no = '';
        }
        $scope.amountschange = function () {

            var input = document.getElementById('txtInput').value;
            var str = input.replace(/,/g, '');
            var output = Number(str).toLocaleString('en-IN');
            var lswords_sanctionamount = inWords(str);

            if (output == 'NaN') {
                Notify.alert('Accept Numeric Only..!', {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                $scope.txtdnsanction_amount = "";

            }
            else {
                document.getElementById('sanctionamount_words').innerHTML = lswords_sanctionamount;
                $scope.txtdnsanction_amount = output;
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('LglTrnInvoiceSummary', LglTrnInvoiceSummary);

    LglTrnInvoiceSummary.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', '$modal', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', 'ngTableParams'];

    function LglTrnInvoiceSummary($rootScope, $scope, $state, AuthenticationService, $modal, ScopeValueService, $http, SocketService, Notify, $location, $route, ngTableParams) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'LglTrnInvoiceSummary';

        activate();

        function activate() {
            var params = {
                caseref_gid: localStorage.getItem('caseref_gid')
        }

        var url = "api/LawyerInvoice/GetinvoiceListSummary";
        SocketService.getparams(url,params).then(function (resp) {
            $scope.invoicelist = resp.data.invoicedtl;
            $scope.caseref_no = resp.data.caseref_no;
            $scope.case_type = resp.data.case_type;
        });
        
    }

        $scope.viewinvoice = function (lawyerinvoicedtl_gid) {
            localStorage.setItem('lawyerinvoicedtl_gid', lawyerinvoicedtl_gid)
        $state.go('app.lawyerPaymentView');
        }
        $scope.back=function()
        {
            $state.go('app.lawyerPayment')
        }
}

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('compliance2tagginglawyercontroller', compliance2tagginglawyercontroller);

    compliance2tagginglawyercontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','cmnfunctionService'];

    function compliance2tagginglawyercontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'compliance2tagginglawyercontroller';

        activate();


        function activate() {

            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;
            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress = resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.assignlawyerlist = resp.data.assignlawyer;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
            var url = "api/requestCompliance/Gettaggedlist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.taggedlist = resp.data.taggedinfo_list;
               
            });
        }
        $scope.viewdocument = function (requestcompliance2lawyerdtl_gid, id) {
            var params = {
                requestcompliance2lawyerdtl_gid: requestcompliance2lawyerdtl_gid
            };
            var url = 'api/requestCompliance/Viewuploaddoc_lawyer';
            SocketService.getparams(url, params).then(function (resp) {
                console.log(resp.data.taggeddoc_list);
                $scope.taggedlist[id][requestcompliance2lawyerdtl_gid] = resp.data.taggeddoc_list;
               
            });
        }
        $scope.downloads = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.downloadscorrected = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }

        $scope.assignLawyerSubmit = function () {
            var lawyeruser_gid = $scope.cboassignlawyer;
            var lawyeruser_name = $('#assignlawyer :selected').text();


            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                lawyeruser_gid: $scope.cboassignlawyer
            }

            var url = "api/requestCompliance/tmpseekdocumentclear";
            SocketService.get(url).then(function (resp) {

            });

            var modalInstance = $modal.open({
                templateUrl: '/lawyeruploadContent.html',
                controller: ModalInstanceCtrl,
                size: 'lg'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.lawyeruser_name = lawyeruser_name;

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.close = function () {
                    $modalInstance.close('closed');
                }

                $scope.uploadseek = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0]
                    };
                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('document_name', $scope.documentname);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;

                    var url = 'api/requestCompliance/seekLawyerUpload';

                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                        $("#addupload").val('');

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                    });

                }

                $scope.uploadcancel = function (tmpseek_documentgid) {
                    var seekupload = {
                        tmpseek_documentgid: tmpseek_documentgid
                    }

                    var url = 'api/requestCompliance/seekLawyerUploadcancel';
                    SocketService.getparams(url, seekupload).then(function (resp) {
                        $scope.uploadseek_list = resp.data.uploadseek_list;
                    });
                }

                $scope.assignconfirm = function () {
                    lockUI();
                    var seekupload = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                        lawyeruser_gid: lawyeruser_gid,
                        seeklawyerremarks: $scope.seeklawyerremarks,
                    }

                    var url = "api/requestCompliance/assignLawyer";
                    SocketService.post(url, seekupload).then(function (resp) {
                        unlockUI();

                        if (resp.data.status == true) {
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        $scope.ok();
                        activate();

                    });
                }

            }


        }

        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);

        }

        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }

            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details = function () {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion = function () {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {

                    var url = 'api/requestCompliance/updatestatus';
                    lockUI();
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                        request_status: $scope.cbostatus
                    }
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $location.url('app/complianceManagement?lstab=' + relpath1);
                            activate()
                        }
                        else {
                            Notify.alert('File Format Not Supported!', {
                                status: 'info',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                        activate()
                    });

                    $modalInstance.close('closed');

                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;

            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }

            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;

                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert('File Format Not Supported!', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            var phyPath = val1;
            console.log(val1);
            console.log(val2);
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('requesttypecontroller', requesttypecontroller);

    requesttypecontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function requesttypecontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'requesttypecontroller';

        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            var url = 'api/requestCompliance/getrequesttype';
            SocketService.get(url).then(function (resp) {
                $scope.requesttype_list = resp.data.requesttype_list;
                $scope.total = $scope.requesttype_list.length;
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.popuprequesttype = function () {
            var modalInstance = $modal.open({
                templateUrl: '/addrequesttype.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.requestSubmit = function () {
                    var params = {
                        request_type: $scope.txtrequesttype,
                        request_code: $scope.txtrequestcode
                    }
                    console.log(params);
                    var url = 'api/requestCompliance/postrequesttype';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                    });

                }
            }
        }

        $scope.edit = function (requesttype_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/editrequesttype.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
             $scope.requesttype_gid = requesttype_gid;
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    requesttype_gid: requesttype_gid,
                    
                }
                var url = 'api/requestCompliance/editrequesttype';

                SocketService.getparams(url, params).then(function (resp) {
                    $scope.txtrequestcodeedit = resp.data.request_code;
                    $scope.txtrequesttypeedit = resp.data.request_type;
                    $scope.requesttype_gid = resp.data.requesttype_gid;
                });

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
                $scope.requestUpdate = function () {

                    var params = {
                        request_code: $scope.txtrequestcodeedit,
                        request_type: $scope.txtrequesttypeedit,
                        requesttype_gid: requesttype_gid,

                    }
                    var url = 'api/requestCompliance/updaterequesttype';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                }

            }

        }
        $scope.delete = function (requesttype_gid) {
            var params = {
                requesttype_gid: requesttype_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/requestCompliance/deleterequesttype';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                        }
                        else {
                            Notify.alert('Error Occurred !', {
                                status: 'warning',
                                pos: 'top-right',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                    SweetAlert.swal('Deleted Successfully!');
                }

            });
        };

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('servicetypecontroller', servicetypecontroller);

    servicetypecontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function servicetypecontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'servicetypecontroller';

        activate();

        function activate() {
            $scope.totalDisplayed = 100;
            var url = 'api/lglMstServiceType/getservicetype';
            SocketService.get(url).then(function (resp) {
                $scope.servicetype_list = resp.data.servicetype_list;
                $scope.total = $scope.servicetype_list.length;
            });
        }
        document.getElementById('pagecount').onkeyup = function () {
            // console.log(document.getElementById('pagecount').value);
            if ($scope.pagecount == null) {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#DCDCDC';
            }
            else {
                var el = document.getElementById('loadmore');
                el.style.backgroundColor = '#ffa';
            }
        };
        $scope.loadMore = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayed += Number;
            unlockUI();
        };
        $scope.popupservicetype = function () {
            var modalInstance = $modal.open({
                templateUrl: '/addservicetype.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.Submit = function () {
                    var params = {
                        service_type: $scope.txtservicetype,
                        service_code: $scope.txtservicecode
                    }
                    console.log(params);
                    var url = 'api/lglMstServiceType/postservicetype';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();

                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                    });

                }
            }
        }

        $scope.edit = function (servicetype_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/editservicetype.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            $scope.servicetype_gid = servicetype_gid;
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    servicetype_gid: servicetype_gid,

                }
                var url = 'api/lglMstServiceType/editservicetype';

                SocketService.getparams(url, params).then(function (resp) {
                    $scope.txtservicecodeedit = resp.data.service_code;
                    $scope.txtservicetypeedit = resp.data.service_type;
                    $scope.servicetype_gid = resp.data.servicetype_gid;
                });

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
                $scope.Update = function () {

                    var params = {
                        service_code: $scope.txtservicecodeedit,
                        service_type: $scope.txtservicetypeedit,
                        servicetype_gid: servicetype_gid,

                    }
                    var url = 'api/lglMstServiceType/updateservicetype';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {

                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                        else {
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                }

            }

        }
        $scope.delete = function (servicetype_gid) {
            var params = {
                servicetype_gid: servicetype_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/lglMstServiceType/deleteservicetype';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                            Notify.alert('Deleted Successfully', {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                        }
                        else {
                            Notify.alert('Error Occurred !', {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                    SweetAlert.swal('Deleted Successfully!');
                }

            });
        };

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('misDataimportcontroller', misDataimportcontroller);

    misDataimportcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function misDataimportcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'misDataimportcontroller';

        activate();

        function activate() {
            lockUI();
            var url = "api/misDataimport/Getmisdata";
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.imported_list = resp.data.imported_list;            
                $scope.show = true;
            });
        }
            $scope.openpanel=function() {
           
            $scope.show = false;
            $scope.options = true;
        }
        $scope.cancel = function () {
            
            $scope.show = true;
            $scope.options = false;
            $("#addupload").val('');

        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);  
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
          
        }
        $scope.handleFile = function () {
            var url = 'api/misDataimport/mistempdataupload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.options = false;
                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });              
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        $scope.viewloandetails = function (val) {
            $scope.urn = val;
            $scope.urn = localStorage.setItem('urn', val);
            $state.go('app.customer2misdata')
        }

        $scope.processdata = function (misdocumentimport_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/processdata.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                var params = {
                    misdocumentimport_gid: misdocumentimport_gid
                }
                console.log(params);
                var url = 'api/misDataimport/Getimporteddata';
                SocketService.getparams(url, params).then(function (resp) {

                    $scope.file_name = resp.data.file_name;
                    $scope.imported_date = resp.data.imported_date

                });
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                $scope.process = function () {
                    var params = {
                        misdocumentimport_gid: misdocumentimport_gid
                    }
                   
                    var url = 'api/misDataimport/processdata';
                    lockUI();
                    SocketService.post(url, params).then(function (resp) {
                        unlockUI();
                        if (resp.data.status == true) {
                       
                            $modalInstance.close('closed');
                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            activate();
                            
                        }
                        else {
                            $modalInstance.close('closed');

                            Notify.alert(resp.data.message, {
                                status: 'warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                            activate();

                        }
                    });
                }
            }

        }

      
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('optDashboardcontroller', optDashboardcontroller);

    optDashboardcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', '$route', '$cookies'];

    function optDashboardcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, $route, $cookies) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'optDashboardcontroller';

        activate();

        function activate() {
            $scope.master = true;
            $scope.legalsr = true;
            $scope.misdataimport = true;
            var url = 'api/optDashboard/getprivilegeGID';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                if (resp.data.master_list != null) {
                    if (resp.data.master_list.length == 1) {
                        if ((resp.data.master_list[0].Gid) == 'OPTMSTADM') {
                            $scope.master = false;
                            $scope.misdataimport = false;
                        }
                        else {
                            $scope.misdataimport = true;
                        }

                        if ((resp.data.master_list[0].Gid) == 'OPTMSTLSR') {
                            $scope.master = false;
                            $scope.legalsr = false;

                        }
                        else {
                            $scope.legalsr = true;
                        }
                    }

                    if (resp.data.master_list.length == 2) {
                        if (((resp.data.master_list[0].Gid) == 'OPTMSTADM') || ((resp.data.master_list[1].Gid) == 'OPTMSTADM')) {
                            $scope.master = false;
                            $scope.misdataimport = false;
                        }
                        else {
                            $scope.misdataimport = true;
                        }
                        if (((resp.data.master_list[1].Gid) == 'OPTMSTLSR') || ((resp.data.master_list[1].Gid) == 'OPTMSTLSR')) {
                            $scope.master = false;
                            $scope.legalsr = false;
                        }
                        else {
                            $scope.legalsr = true;
                        }
                    }
                }
                else {
                    $scope.master = true;
                    $scope.misdataimport = true;
                    $scope.legalsr = true;
                }
            });
        }

    

        
        $scope.misdataImport = function () {
            $state.go('app.misDataimport');
        }


        $scope.legalSR = function () {
            $state.go('app.legalSRsummary');
        }

      

      
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('raiselegalSRcontroller', raiselegalSRcontroller);



    raiselegalSRcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams'];

    function raiselegalSRcontroller($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams) {


        /* jshint validthis:true */
        var vm = this;
        vm.title = 'raiselegalSRcontroller';
        activate();
        function activate() {
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.opened = true;
            };
            $scope.borrwer_dtl = false;
            $scope.customer_dtl = false;
            $scope.customer_panel = false;
            $scope.loan_dtl = false;
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.closed = true;
            };


            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/raiseLegalSR/Customer';
            SocketService.get(url).then(function (resp) {
                $scope.customer_list = resp.data.customer_list;

            });

        }

        $scope.legalSRback = function (val) {
            $location.url('app/requestCompliancesummary?lstab=legalsr');
          
        }


        $scope.onselectedchangecustomer = function (customer) {
            $scope.customer_gid = localStorage.setItem('onchangecustomer_gid', customer);
             var params = {
                    customer_gid: $scope.cbocustomergid.customer_gid
              
            }
            //var url = 'api/raiseLegalSR/Getpromoter';

            //SocketService.getparams(url, params).then(function (resp) {
            //    $scope.promoters_list = resp.data.promoter_list;

            //});
            //var url = 'api/raiseLegalSR/Getguarantor';

            //SocketService.getparams(url, params).then(function (resp) {
            //    $scope.guarantors_list = resp.data.guarantor_list;

            //});

            ////console.log(params);
            //var url = 'api/raiseLegalSR/getfacilitydtl';

            //SocketService.getparams(url, params).then(function (resp) {
            //    $scope.facility_list = resp.data.facility_list;

            //});

            var url = 'api/raiseLegalSR/Getcustomerdtl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.address = resp.data.address;
                $scope.email = resp.data.email_id;
                $scope.mobileno = resp.data.mobile_no;
console.log(resp.data.mobile_no);
            });
            $scope.borrwer_dtl = true;
            $scope.customer_dtl = true;
            $scope.customer_panel = true;
            $scope.loan_dtl = true;
            $scope.rm_dtl = true;
        }

        $scope.addfacility = function (customer) {
            var modalInstance = $modal.open({
                templateUrl: '/facilities.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.customerfacilitySubmit = function () {

                    var params = {
                        facility_type: $scope.txtfacility,
                        limit: $scope.txtlimit,
                        outstanding: $scope.txtoutstanding,
                        customer_gid: customer

                    }

                    var url = 'api/raiseLegalSR/facility';
                    SocketService.post(url, params).then(function (resp) {

                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');
                            var params = {
                                customer_gid: localStorage.getItem('onchangecustomer_gid')
                            }
                            test();
                            var url = 'api/raiseLegalSR/getfacilitydtl';

                            SocketService.getparams(url, params).then(function (resp) {
                                $scope.facility_list = resp.data.facility_list;
                            });

                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                    });


                }
            }
        }

        var params = {
            customer_gid: localStorage.getItem('onchangecustomer_gid')
        }
        //test();
        var url = 'api/raiseLegalSR/getfacilitydtl';

        SocketService.getparams(url, params).then(function (resp) {
            $scope.facility_list = resp.data.facility_list;
        });

       
        $scope.legalsrsubmit = function (customer) {
            var account_name = $('#customername :selected').text();

                        var params = {
                            customer_gid: $scope.cbocustomergid.customer_gid,
                            account_name: account_name,
                            remarks: $scope.txtremarks
                        }
                     
                        var url = 'api/raiseLegalSR/raiselegalsr';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $location.url('app/requestCompliancesummary?lstab=legalsr');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });
        }


    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('raisesr2authenticationController', raisesr2authenticationController);

    raisesr2authenticationController.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function raisesr2authenticationController($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'raisesr2authenticationController';

        activate();


        function activate() {
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            $scope. templegalsr_gid = $location.search().lstemplegalsr_gid;
            $scope. customer_gid = $location.search().lscustomer_gid;
      
            //$scope.templegalsr_gid = localStorage.getItem('templegalsr_gid');
            //$scope.customer_gid = localStorage.getItem('customer_gid');
         

            var params = {
                templegalsr_gid: $scope.templegalsr_gid,
                customer_gid: $scope.customer_gid
               

            };
         
            var param1 = {
                customer_gid: $scope.customer_gid
            };

            var url = 'api/raiseLegalSR/getdeletetempcontRM';

            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/raiseLegalSR/gettemprmdtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });

            var url = 'api/raiseLegalSR/Getpromoter';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.promoters_list = resp.data.promoter_list;

            });

            var url = 'api/CustomerReport/Getsanctionloandetails';

            SocketService.getparams(url, param1).then(function (resp) {

                $scope.sanction_list = resp.data.sanctionloanListurn;

                angular.forEach($scope.sanction_list, function (value, key) {
                    var params = {
                        sanction_gid: value.sanction_gid
                    };
                    var url = 'api/CustomerReport/GetloanFacilityDetails';
                    SocketService.getparams(url, params).then(function (resp) {
                        value.loanfacilitytype = resp.data.loanfacilitytype_list;
                        value.expand = false;

                    });
                });
            });

            /*  var url = "api/customerManagement/Getsanctionloandetails";
              SocketService.getparams(url, params).then(function (resp) {
                  $scope.loandetails = resp.data.loandtl;
  
              }); */
            var url = 'api/raiseLegalSR/Getguarantor';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.guarantors_list = resp.data.guarantor_list;
                $scope.remarks = resp.data.remarks;
            });
            var url = "api/customerManagement/getCollateraldetail";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerCollateral = resp.data.customerCollateral;
            });

            var url = 'api/raiseLegalSR/Getcustomerdetails';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.customerdetails = resp.data;
            });

            var url = 'api/raiseLegalSR/getlegalSRcontactdtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });


            var url = 'api/raiseLegalSR/getfacilitydtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.facility_list = resp.data.facility_list;

            });

            var url = 'api/raiseLegalSR/Getcustomerdtl';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.address = resp.data.address;
                $scope.email = resp.data.email_id;
                $scope.deal_year = resp.data.deal_year;
                //Notify.alert(resp.data.message, {
                //    status: 'warning',
                //    pos: 'top-center',
                //    timeout: 3000
                //});

            });

            var url = 'api/raiseLegalSR/GetTempLegalSRdtls';
            SocketService.getparams(url, params).then(function (resp) {
                
                $scope.legalSR_gid = resp.data.legalSR_gid;
                $scope.raiselegalSR_gid = resp.data.raiselegalSR_gid;
                $scope.account_name = resp.data.account_name;
                $scope.rdbfinanced_by = resp.data.financed_by;
                $scope.cboconstitution = resp.data.constitution;
                $scope.deal_year = resp.data.deal_year;
                $scope.txtcycles_date = resp.data.cycles_sanctiondated;
                $scope.txtlimit_lastsanctioned = resp.data.limit_sanction;
                $scope.txtbusiness_activity = resp.data.business_activity;
                $scope.txtprimary_securities = resp.data.primary_securities;
                $scope.txtcollateral_securities = resp.data.collateral_securities;
                $scope.txtdetail_udc_pdc = resp.data.details_UDC_PDC;
                $scope.txtunitworking_status = resp.data.unit_working_status;
                $scope.txtother_banker = resp.data.txtother_banker;
                $scope.txtbanker_exposures = resp.data.other_banker_exposures;
                $scope.txtoverdue = resp.data.status_current_overdue;
                $scope.txtcibil_data = resp.data.cibil_data;
                $scope.txtchuring_data = resp.data.churing_account;
                $scope.txtcompanies_dtl = resp.data.other_group_companies;
                $scope.txtmeeting_dtl = resp.data.meeting_details;
                $scope.rdbsrestructring = resp.data.restructuring_data;
                $scope.txtother_banker = resp.data.other_banker_borrower;
                $scope.txtptp = resp.data.instances_PTP;
                $scope.txtlegalstatus = resp.data.statuslegal_action;
                $scope.txtdemanddetails = resp.data.demandnotice_details;
                $scope.created_date = resp.data.created_date;
                $scope.remarks = resp.data.remarks;
                $scope.auth_status = resp.data.auth_status;
                $scope.auth_remarks_list = resp.data.auth_remarks_list;
                $scope.created_date = resp.data.created_date;
                $scope.created_by = resp.data.created_by;
                $scope.auth_status = resp.data.auth_status;


            });

            var url = "api/CustomerDashboard/Getcustomerloandetails";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.loandetails = resp.data.loandtl;
            });
            var url = 'api/raiseLegalSR/GetDemandNoticedtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.demandnotice_list = resp.data.demandnotice_list;
                $scope.demand_status = resp.data.demand_status;

            });
            //var url = 'api/raiseLegalSR/GetHoldremarks';

            //SocketService.getparams(url, params).then(function (resp) {
            //    $scope.holdremarks_list = resp.data.holdremarks_list;
            //    $scope.auth_remarks = resp.data.auth_remarks;

            //});

            var url = "api/raiseLegalSR/Getsanctionloandtl";
            SocketService.getparams(url, params).then(function (resp) {
                $scope.sanctiondetails = resp.data.customer2loandtl;


            });

            var url = 'api/customer/Getconstitution';

            SocketService.get(url).then(function (resp) {
                $scope.cboconstitution_list = [];
                for (var i = 0; i < resp.data.constitution_list.length; i++) {
                    $scope.cboconstitution_list.push(resp.data.constitution_list[i].constitution_name);
                }
            });
        }

        $scope.legalsrsave = function (templegalsr_gid) {

            var params = {

                templegalsr_gid:templegalsr_gid,
                account_name: $scope.customer_name,
                constitution: $scope.cboconstitution,
                financed_by: $scope.rdbfinanced_by,
                deal_year: $scope.deal_year,
                address: $scope.address,
                business_activity: $scope.txtbusiness_activity,
                email_id: $scope.email,
                cycles_sanctiondated: $scope.txtcycles_date,
                limit_sanction: $scope.txtlimit_lastsanctioned,
                primary_securities: $scope.txtprimary_securities,
                collateral_securities: $scope.txtcollateral_securities,
                details_UDC_PDC: $scope.txtdetail_udc_pdc,
                unit_working_status: $scope.txtunitworking_status,
                other_banker_exposures: $scope.txtbanker_exposures,
                cibil_data: $scope.txtcibil_data,
                restructuring_data: $scope.rdbsrestructring,
                churing_account: $scope.txtchuring_data,
                status_current_overdue: $scope.txtoverdue,
                other_group_companies: $scope.txtcompanies_dtl,
                meeting_details: $scope.txtmeeting_dtl,
                instances_PTP: $scope.txtptp,
                demandnotice_details: $scope.txtdemanddetails,
                statuslegal_action: $scope.txtlegalstatus,
                other_banker_borrower: $scope.txtother_banker
            }
            
            var url = 'api/raiseLegalSR/savelegalsr';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $location.url('app/requestCompliancesummary?lstab=legalsr');
                    //$state.go('app.legalSRsummary');
                    Notify.alert('Legal SR saved  Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });

        }

        function contactdtl() {
            var params = {
             
                customer_gid: $scope.customer_gid
            };

            var url = 'api/raiseLegalSR/getlegalSRtmpcontactdtl';

            SocketService.getparams(url, params).then(function (resp) {
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });
        }

        $scope.addcontactdetails = function (customer_gid) {
            var modalInstance = $modal.open({
                templateUrl: '/addcontactdetails.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.contactdetailsformsubmit = function () {

                    var params = {
                        contact_name: $scope.txtname,
                        contact_location: $scope.txtlocation,
                        contact_mobileno: $scope.txtmobile,
                        customer_gid: $scope.customer_gid,
                        customer_gid:customer_gid
                    }
                    console.log(params);

                    var url = 'api/raiseLegalSR/postlegalSRcontactdtl';
                    SocketService.post(url, params).then(function (resp) {


                        if (resp.data.status == true) {

                            Notify.alert(resp.data.message, {
                                status: 'success',
                                pos: 'top-center',
                                timeout: 3000
                            });
                            $modalInstance.close('closed');

                            contactdtl();


                        }
                        else {
                            Notify.alert(resp.data.message, {
                                status: 'Warning',
                                pos: 'top-center',
                                timeout: 3000
                            });

                        }
                    });


                }
            }
        }

        $scope.legalSRSubmit = function (templegalsr_gid) {
          
            var params = {
               
                templegalsr_gid: templegalsr_gid,
                account_name: $scope.customer_name,
                constitution: $scope.cboconstitution,
                financed_by: $scope.rdbfinanced_by,
                deal_year: $scope.deal_year,
                address: $scope.address,
                business_activity: $scope.txtbusiness_activity,
                email_id: $scope.email,
                cycles_sanctiondated: $scope.txtcycles_date,
                limit_sanction: $scope.txtlimit_lastsanctioned,
                primary_securities: $scope.txtprimary_securities,
                collateral_securities: $scope.txtcollateral_securities,
                details_UDC_PDC: $scope.txtdetail_udc_pdc,
                unit_working_status: $scope.txtunitworking_status,
                other_banker_exposures: $scope.txtbanker_exposures,
                cibil_data: $scope.txtcibil_data,
                restructuring_data: $scope.rdbsrestructring,
                churing_account: $scope.txtchuring_data,
                status_current_overdue: $scope.txtoverdue,
                other_group_companies: $scope.txtcompanies_dtl,
                meeting_details: $scope.txtmeeting_dtl,
                instances_PTP: $scope.txtptp,
                demandnotice_details: $scope.txtdemanddetails,
                statuslegal_action: $scope.txtlegalstatus,
                other_banker_borrower: $scope.txtother_banker,
                customer_gid:$scope.customer_gid
            }
      
            var url = 'api/raiseLegalSR/submitraiselegalsr';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $location.url('app/requestCompliancesummary?lstab=legalsr');
                    //$state.go('app.legalSRsummary');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });
        }







        $scope.legalSRUpdate = function (templegalsr_gid) {

            var params = {
                legalSR_gid: $scope.legalSR_gid,
                raiselegalSR_gid: $scope.raiselegalSR_gid,
                templegalsr_gid: templegalsr_gid,
                account_name: $scope.customer_name,
                constitution: $scope.cboconstitution,
                financed_by: $scope.rdbfinanced_by,
                deal_year: $scope.deal_year,
                address: $scope.address,
                business_activity: $scope.txtbusiness_activity,
                email_id: $scope.email,
                cycles_sanctiondated: $scope.txtcycles_date,
                limit_sanction: $scope.txtlimit_lastsanctioned,
                primary_securities: $scope.txtprimary_securities,
                collateral_securities: $scope.txtcollateral_securities,
                details_UDC_PDC: $scope.txtdetail_udc_pdc,
                unit_working_status: $scope.txtunitworking_status,
                other_banker_exposures: $scope.txtbanker_exposures,
                cibil_data: $scope.txtcibil_data,
                restructuring_data: $scope.rdbsrestructring,
                churing_account: $scope.txtchuring_data,
                status_current_overdue: $scope.txtoverdue,
                other_group_companies: $scope.txtcompanies_dtl,
                meeting_details: $scope.txtmeeting_dtl,
                instances_PTP: $scope.txtptp,
                demandnotice_details: $scope.txtdemanddetails,
                statuslegal_action: $scope.txtlegalstatus,
                other_banker_borrower: $scope.txtother_banker,
                customer_gid: $scope.customer_gid
            }

            var url = 'api/raiseLegalSR/updateraiselegalsr';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $location.url('app/requestCompliancesummary?lstab=legalsr');
                    //$state.go('app.legalSRsummary');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });
        }



        $scope.legalSRback=function()
        {
            
            var url = 'api/raiseLegalSR/getdeletetempcontRM';

            SocketService.get(url).then(function (resp) {
              
            });
            if ($scope.relpath1 == 'dntracker') {
                $location.url('app/LglTrnDNTrackerAE');
            }
            else
            {
                $location.url('app/requestCompliancesummary?lstab=legalsr');
            }                    
        }

        //$scope.forward = function () {

        //    var legalsr = "Forward";
        //    var templegalsr_gid = "forward";
        //    var customer_gid = "forward";
        //    $location.url('app/requestCompliancesummary?lstab' = legalsr + '&templegalsr_gid=' + templegalsr_gid + '&customer_gid=' + customer_gid);
        //}

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('addLawyerController', addLawyerController);

    addLawyerController.$inject = ['$rootScope', '$scope', '$state', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route','DownloaddocumentService','cmnfunctionService'];

    function addLawyerController($rootScope, $scope, $state, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService,cmnfunctionService) {

        var vm = this;
        vm.title = 'addLawyerController';
        activate();
        function activate() {
         
            $scope.hidephotodiv = true;
            $scope.showphotodiv = false;
            $scope.validationMsg = false;
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.opened = true;
            };
            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                vm.closed = true;
            };
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];
            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            var url = 'api/registerlawyer/tempdelete';
          
            SocketService.get(url).then(function (resp) {

               
            });

        }
        //Back Button Event
        $scope.lawyerback = function () {
            var url = 'api/registerlawyer/tempdelete';
          
            SocketService.get(url).then(function (resp) {
              
            });

            $state.go('app.lawyerManagement');
        }
        // Register lawyer
        $scope.lawyerSubmit = function () {
            localStorage.getItem($scope.uploadfrm);
            var params = {
                lawyerref_no: $scope.txtlawyerref_no,
                lawyer_name: $scope.txtlawyername,
                dob: $scope.dob,
                gender: $scope.gender,
                mobile_no: $scope.txtmobileno,
                telephone_no: $scope.txttelephoneno,
                email_address: $scope.txtemailaddress,
                educational_qualification: $scope.txtqualification,
                date_enrolment: $scope.txtdateenrol_council,
                pan_no: $scope.txtpanno,
                experience: $scope.txtexperience,
                place_practice: $scope.txtplace_practice,
                address_line1: $scope.txtaddress1,
                address_line2: $scope.txtaddress2,
                state: $scope.txtstate,
                country: $scope.txtcountry,
                postal_code: $scope.txtpostalcode,
                enrolment_no: $scope.txtenrolment_no,
                aadhar_no: $scope.txtaadhar_no,
                bank_name: $scope.txtbank_name,
                account_no: $scope.txtaccount_no,
                ifsc_code: $scope.txtifsc_code,
            }
        
            var url = 'api/registerlawyer/registerlawyer';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    unlockUI()
                    activate();
                    $state.go('app.lawyerManagement');
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                activate();
            });
        }
        //Upload Empanelment Certificate
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
    
            var url = 'api/registerlawyer/UploadEnrollcertificate';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.UploadDocumentList;
          
                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message,'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //Document Delete
        $scope.document_cancelclick = function (val, data) {
            var params = { document_gid: val };
            var url = 'api/registerLawyer/documentdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        //upload Lawyer photo
        $scope.photo = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name,"photo");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
         
            
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            localStorage.setItem($scope.uploadfrm, '$scope.uploadfrm');

            var url = 'api/registerLawyer/Uploadphoto';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                unlockUI();
                $scope.filename_list = resp.data.filename_list;
                $("#adduploadphoto").val('');
                var url = 'api/registerLawyer/tempdocument';
                SocketService.get(url).then(function (resp) {
                    $scope.filename_list = resp.data.UploadDocumentList;
 
                });
                if (resp.data.status == true) {
                  
                    $scope.hidephotodiv = false;
                    $scope.showphotodiv = true;
                  
                }
                else {
                    
                  
                }

               
            });
           
        }

        //Checking Enrolment No duplication
        $scope.enrolmentno_validation=function()
        {
            var params = {
                enrolment_no:$scope.txtenrolment_no
            }
            var url = 'api/registerlawyer/Getenrolment_validation';

            SocketService.getparams(url,params).then(function (resp) {
                console.log(resp.data.enrolment_no);
                if (resp.data.enrolment_no == 'Y') {
                    $scope.validationMsg = true;
                }
                else {
                    $scope.validationMsg = false;
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('request360controller', request360controller);

    request360controller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService','DownloaddocumentService','cmnfunctionService'];

    function request360controller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'request360controller';

        activate();


        function activate() {
       
            lockUI();
            var url = window.location.href;
            var relPath = url.split("lstab=");
            $scope.relpath1 = relPath[1];
            console.log($scope.relpath1);
            $scope.lawyerdocumentdetails = false;
            $scope.click = true;
            $scope.seeklawyer = false;
           
            var url = "api/requestCompliance/compliancemanagement360"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };
            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();
   
                $scope.requestref_no = resp.data.requestref_no;
                $scope.assign_lawyergid = resp.data.assign_lawyergid;
                $scope.assign_lawyername = resp.data.assign_lawyername;
                $scope.assign_mobileno = resp.data.assign_mobileno;
                $scope.assign_emailaddress=resp.data.assign_emailaddress;
                $scope.assignedlawyer_by = resp.data.assigned_by;
                $scope.seeklawyer_remarks = resp.data.seeklawyer_remarks;
                $scope.assigned_date = resp.data.assigned_date;
                $scope.request_type = resp.data.request_type;
                $scope.request_date = resp.data.request_date;
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;               
                $scope.seeklawyerdocument = resp.data.uploadseek_list;
                $scope.rejected_remarks = resp.data.rejected_remarks;
                if (resp.data.correctedfile_name != '---') {
                    $scope.updated_download = true;
                }
                console.log(resp.data.requestref_no);

            
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });
            //------------Seek Lawyer and Lawfirm List------------//

            var url = "api/requestCompliance/lawyerList";
            SocketService.getparams(url, param).then(function (resp) {
                $scope.lawyer_list = resp.data.taggedlawyerList;
                $scope.lawfirm_list = resp.data.taggedlawfirmList;
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
            var url = 'api/requestCompliance/tempdelete';
            SocketService.get(url).then(function (resp) {  
            });
            
        }
        //$scope.downloads = function (val1, val2) {
        //    var phyPath = val1;            
        //    var relPath = phyPath.split("StoryboardAPI");
        //    var relpath1 = relPath[1].replace("\\", "/");
        //    var hosts = window.location.host;
        //    var prefix = location.protocol + "//";
        //    var str = prefix.concat(hosts, relpath1);          
        //    var link = document.createElement("a");
        //    var name = val2.split('.');
        //    link.download = name[0];
        //    var uri = str;
        //    link.href = uri;
        //    link.click();
        //}
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        //$scope.downloadscorrected = function (val1, val2) {
        //    var phyPath = val1;
        //    var relPath = phyPath.split("StoryboardAPI");
        //    var relpath1 = relPath[1].replace("\\", "/");
        //    var hosts = window.location.host;
        //    var prefix = location.protocol + "//";
        //    var str = prefix.concat(hosts, relpath1);   
        //    var link = document.createElement("a");
        //    var name = val2.split('.');
        //    link.download = name[0];
        //    var uri = str;
        //    link.href = uri;
        //    link.click();
        //}
        $scope.downloadscorrected = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.updateddoc_downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        //$scope.updateddoc_downloads = function (val1, val2) {
        //    var phyPath = val1;
        //    var relPath = phyPath.split("StoryboardAPI");
        //    var relpath1 = relPath[1].replace("\\", "/");
        //    var hosts = window.location.host;
        //    var prefix = location.protocol + "//";
        //    var str = prefix.concat(hosts, relpath1);            
        //    var link = document.createElement("a");
        //    var name = val2.split('.');
        //    link.download = name[0];
        //    var uri = str;
        //    link.href = uri;
        //    link.click();
        //}

        $scope.assignLawyerSubmit = function () {
              if (($scope.cboassignlawyer == '') || ($scope.cboassignlawyer == undefined)) {
                if (($scope.cboassignlawfirm == '') || ($scope.cboassignlawfirm == undefined)) {
                    Notify.alert('Select Atleast One Lawyer / Lawfirm', {
                        status: 'info',
                        pos: 'top-center',
                        timeout: 3000
                    });
                }
                else {

                    if (($scope.$parent.cboassignlawyer != '') || ($scope.$parent.cboassignlawyer != undefined)) {
                        var lawyerList = $scope.$parent.cboassignlawyer;
                    }
                    if (($scope.$parent.cboassignlawfirm != '') || ($scope.$parent.cboassignlawfirm != undefined)) {
                        var lawfirmList = $scope.$parent.cboassignlawfirm;
                    }

                    var url = "api/requestCompliance/tmpseekdocumentclear";
                    SocketService.get(url).then(function (resp) {

                    });

                    var modalInstance = $modal.open({
                        templateUrl: '/lawyeruploadContent.html',
                        controller: ModalInstanceCtrl,
                        size: 'lg'
                    });
                    ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                    function ModalInstanceCtrl($scope, $modalInstance) {

                        var taglawyer_list = lawyerList;
                        var taglawfirm_list = lawfirmList;
                        console.log('popup', taglawyer_list);
                        $scope.ok = function () {
                            $modalInstance.close('closed');
                        };
                        $scope.close = function () {
                            $modalInstance.close('closed');
                        }

                        $scope.uploadseek = function (val, val1, name) {
                            var item = {
                                name: val[0].name,
                                file: val[0]
                            };
                            var frm = new FormData();
                            frm.append('fileupload', item.file);
                            frm.append('file_name', item.name);
                            frm.append('document_name', $scope.documentname);
                            frm.append('project_flag', "Default");
                            $scope.uploadfrm = frm;

                            var url = 'api/requestCompliance/seekLawyerUpload';

                            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                                $scope.uploadseek_list = resp.data.uploadseek_list;
                                $("#addupload").val('');

                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                            });
                        }


                        $scope.uploadcancel = function (tmpseek_documentgid) {
                            var seekupload = {
                                tmpseek_documentgid: tmpseek_documentgid
                            }

                            var url = 'api/requestCompliance/seekLawyerUploadcancel';
                            SocketService.getparams(url, seekupload).then(function (resp) {
                                $scope.uploadseek_list = resp.data.uploadseek_list;
                            });
                        }

                        $scope.assignconfirm = function () {
                            lockUI();


                            var seekupload = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                taggedlawyerList: taglawyer_list,
                                taggedlawfirmList: taglawfirm_list,

                                seeklawyerremarks: $scope.seeklawyerremarks,
                            }
                           var url = "api/requestCompliance/assignLawyer";
                            SocketService.post(url, seekupload).then(function (resp) {
                                unlockUI();

                                if (resp.data.status == true) {
                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=Work-InProgress');
                                }
                                else {
                                    Notify.alert(resp.data.message, {
                                        status: 'Warning',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                $scope.ok();
                                activate();

                            });
                           
                        }

                    }
                }
            }
            else {
               
                if (($scope.$parent.cboassignlawyer != '') || ($scope.$parent.cboassignlawyer != undefined)) {
                    var lawyerList = $scope.$parent.cboassignlawyer;
                }
                if (($scope.$parent.cboassignlawfirm != '') || ($scope.$parent.cboassignlawfirm != undefined)) {
                    var lawfirmList = $scope.$parent.cboassignlawfirm;
                }
                
                var url = "api/requestCompliance/tmpseekdocumentclear";
                SocketService.get(url).then(function (resp) {

                });

                var modalInstance = $modal.open({
                    templateUrl: '/lawyeruploadContent.html',
                    controller: ModalInstanceCtrl,
                    size: 'lg'
                });
                ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
                function ModalInstanceCtrl($scope, $modalInstance) {
                  
                    var taglawyer_list = lawyerList;
                    var taglawfirm_list = lawfirmList;
                    console.log('popup',taglawyer_list);
                    $scope.ok = function () {
                        $modalInstance.close('closed');
                    };
                    $scope.close = function () {
                        $modalInstance.close('closed');
                    }

                    $scope.uploadseek = function (val, val1, name) {
                        var item = {
                            name: val[0].name,
                            file: val[0]
                        };
                        var frm = new FormData();
                        frm.append('fileupload', item.file);
                        frm.append('file_name', item.name);
                        frm.append('document_name', $scope.documentname);
                        frm.append('project_flag', "Default");
                        $scope.uploadfrm = frm;

                        var url = 'api/requestCompliance/seekLawyerUpload';

                        SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                            $("#addupload").val('');

                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                        });
                    }


                    $scope.uploadcancel = function (tmpseek_documentgid) {
                        var seekupload = {
                            tmpseek_documentgid: tmpseek_documentgid
                        }

                        var url = 'api/requestCompliance/seekLawyerUploadcancel';
                        SocketService.getparams(url, seekupload).then(function (resp) {
                            $scope.uploadseek_list = resp.data.uploadseek_list;
                        });
                    }

                    $scope.assignconfirm = function () {
                        lockUI();
                       

                        var seekupload = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            taggedlawyerList: taglawyer_list,
                            taggedlawfirmList: taglawfirm_list,

                            seeklawyerremarks: $scope.seeklawyerremarks,
                        }
                        console.log(seekupload);
                        var url = "api/requestCompliance/assignLawyer";
                        SocketService.post(url, seekupload).then(function (resp) {
                            unlockUI();

                            if (resp.data.status == true) {
                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=Work-InProgress');
                            }
                            else {
                                Notify.alert(resp.data.message, {
                                    status: 'Warning',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            $scope.ok();
                            activate();

                        });
                    }

                }
               
            }
        
        }
        $scope.requestback = function (relpath1) {
            $location.url('app/complianceManagement?lstab=' + relpath1);
            
        }
        
        $scope.delete_correcteddoc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/correcteddoc_delete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }

        $scope.upload_document = function (val, val1, uploaddocument_gid) {
            var params = {
                uploaddocument_gid: uploaddocument_gid,
            }
            var modalInstance = $modal.open({
                templateUrl: '/uploadcorrecteddocument.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                $scope.uploaddoc = function (val, val1, name) {
                    var item = {
                        name: val[0].name,
                        file: val[0],
                        uploaddocument_gid: uploaddocument_gid

                    };
                    var params = {
                        uploaddocument_gid: uploaddocument_gid,

                    }

                    var frm = new FormData();
                    frm.append('fileupload', item.file);
                    frm.append('file_name', item.name);
                    frm.append('uploaddocument_gid', uploaddocument_gid);
                    frm.append('remarks', $scope.remarks);
                    frm.append('project_flag', "Default");
                    $scope.uploadfrm = frm;
                 }
                $scope.documentupload = function () {

                    var params = {
                        uploadeddocument_type: $scope.document_type,
                        uploadremarks: $scope.txtcorrected_remarks,
                        uploaddocument_gid: uploaddocument_gid
                    }

                    console.log(params);
                    var url = 'api/requestCompliance/uploadCorrectedDoc';
                    lockUI();
                    SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                        $scope.upload_list = resp.data.upload_list;                       
                        $("#addupload").val('');
                        if (resp.data.status == true) {
                            unlockUI();

                            Notify.alert('Document Uploaded Successfully', 'success')

                        }
                        else {
                            unlockUI();
                            Notify.alert('File Format Not Supported!')

                        }
                        activate();
                    });
                    var url = 'api/requestCompliance/uploadremarrks';
                    lockUI()
                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            unlockUI()
                            activate();
                            $state.go('app.requestCompliance360');

                            $modalInstance.close('closed');
                            //  Notify.alert(' Uploaded Successfully', 'success')
                            activate();
                        }
                        else {
                            unlockUI();
                            //  Notify.alert('Error While updating')
                        }
                        activate();
                    });
                }
            }
        }

        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }
            
            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Query sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }

        $scope.cancelassignLawyer = function () {
            $scope.cboassignlawyer = '';
            $scope.seeklawyer = false;
        }

        $scope.lawyerdocument_details=function()
        {
            $scope.lawyer_document = true;
            $scope.lawyerdoc = true;
            $scope.click = false;
        }

        $scope.minimizedoc = function () {
            $scope.lawyer_document = false;
            $scope.lawyerdoc = false;
            $scope.click = true;
        }
        $scope.seeklawyeropinion=function()
        {
            $scope.seeklawyer = true;
        }
        $scope.updatestatus = function (relpath1) {
            var modalInstance = $modal.open({
                templateUrl: '/statusupdation.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {
                $scope.mandatoryfields = false;
                $scope.ok = function () {
                    $modalInstance.close('closed');
                };
                var params =
                    {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                    }
                lockUI();
                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    unlockUI();
                    $scope.requestref_no = resp.data.requestref_no;
                    $scope.request_type = resp.data.request_type;
                    $scope.request_date = resp.data.request_date;
                    $scope.requested_by = resp.data.requested_by;
                });
                $scope.submit = function () {
                    console.log($scope.txtrejected_remarks);
                    if ($scope.cbostatus == 'Rejected') {
                        if (($scope.txtrejected_remarks == '') || ($scope.txtrejected_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                rejected_remarks: $scope.txtrejected_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }
                    } else if ($scope.cbostatus == 'Completed') {
                        if (($scope.txtcompleted_remarks == '') || ($scope.txtcompleted_remarks == undefined)) {
                            $scope.mandatoryfields = true;
                        }
                        else {
                            $scope.mandatoryfields = false;
                            var url = 'api/requestCompliance/updatestatus';
                            lockUI();
                            var params = {
                                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                                request_status: $scope.cbostatus,
                                completed_remarks: $scope.txtcompleted_remarks
                            }
                            SocketService.post(url, params).then(function (resp) {
                                unlockUI();
                                if (resp.data.status == true) {

                                    Notify.alert(resp.data.message, {
                                        status: 'success',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });
                                    $location.url('app/complianceManagement?lstab=' + relpath1);
                                    activate()
                                }
                                else {
                                    Notify.alert('File Format Not Supported!', {
                                        status: 'info',
                                        pos: 'top-center',
                                        timeout: 3000
                                    });

                                }
                                activate()
                            });

                            $modalInstance.close('closed');
                        }

                    }
                    else {
                        $scope.mandatoryfields = false;
                        var url = 'api/requestCompliance/updatestatus';
                        lockUI();
                        var params = {
                            requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                            request_status: $scope.cbostatus,
                            rejected_remarks: $scope.txtrejected_remarks
                        }
                        SocketService.post(url, params).then(function (resp) {
                            unlockUI();
                            if (resp.data.status == true) {

                                Notify.alert(resp.data.message, {
                                    status: 'success',
                                    pos: 'top-center',
                                    timeout: 3000
                                });
                                $location.url('app/complianceManagement?lstab=' + relpath1);
                                activate()
                            }
                            else {
                                Notify.alert('File Format Not Supported!', {
                                    status: 'info',
                                    pos: 'top-center',
                                    timeout: 3000
                                });

                            }
                            activate()
                        });

                        $modalInstance.close('closed');
                    }
                }
            }
        }
        //------Correceted Document upload-----------------//
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            $scope.requestcompliance_gid = localStorage.getItem('requestcompliance_gid');

            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_name', $scope.documentname);
            frm.append('document_type', $scope.document_type)
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
         
            var url = 'api/requestCompliance/UploadComplianceCorrected_doc';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.UploadDocumentList = resp.data.Managecomplianuploaddoc_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    $scope.showdiv = true;
                    $scope.hidediv = false;
                    Notify.alert(resp.data.message, 'success')
                }
                else {
                    unlockUI();
                    Notify.alert(resp.data.message)
                }
            });
        }
        //------Delete Correceted Document -----------------//
        $scope.deletedocument = function (val) {
            var params = { document_gid: val };
            console.log(params)
            var url = 'api/requestCompliance/deletecorrecteddo_upload';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.UploadDocumentList, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.UploadDocumentList.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        //------Submit upladed Correceted Document-----------------//
        $scope.correcteddoc_submit=function()
        {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            }
          
            var url = 'api/requestCompliance/submitComplianceCorrected_doc';
            lockUI();

            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                console.log(resp.data.status);
                if (resp.data.status == true) {
                    var params = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    }
                    var url = "api/requestCompliance/getcorrecteddocument"

                    SocketService.getparams(url, params).then(function (resp) {
                        $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                        $scope.UploadDocumentList = resp.data.uploaddoc_list;                       
                        unlockUI();
                    });
                    Notify.alert(resp.data.message, {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate()
                }
                else {
                    Notify.alert(resp.data.message, {
                        status: 'warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }

            });
        }
        //---------Corrected Document Download------------//
        $scope.downloadsdocument = function (val1, val2) {
            //var phyPath = val1;
            //console.log(val1);
            //console.log(val2);
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
    }

})();

(function () {
    'use strict';
    angular
    .module('angle')
    .controller('requestCompliancecontroller', requestCompliancecontroller);

    requestCompliancecontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService','cmnfunctionService'];

    function requestCompliancecontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService,cmnfunctionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'requestCompliancecontroller';

        activate();


        function activate() {
            vm.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.opened = true;
            };

            vm.close = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                vm.closed = true;
            };

               var date = new Date(),
              mnth = ("0" + (date.getMonth() + 1)).slice(-2),
              day = ("0" + date.getDate()).slice(-2);
               $scope.txtrequest_date=[date.getFullYear(), mnth, day].join("-");
            vm.formats = ['dd-MM-yyyy'];
            vm.format = vm.formats[0];

            vm.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            $scope.others_title = false;
            var url = 'api/requestCompliance/tempdelete';
            SocketService.get(url).then(function (resp) {

            });
            var url = 'api/requestCompliance/getrequesttype2compliance';

            SocketService.get(url).then(function (resp) {
                $scope.requesttype_list = resp.data.requesttype_list;
                console.log(resp.data.requesttype_list);
            });

           var url = 'api/requestCompliance/reqtempdelete';
           SocketService.get(url).then(function (resp) {  
          });
        }
        $scope.onselectedrequsttype=function()
        {
             if($scope.cborequest_type.request_type=='Others')
            {
                 $scope.others_title = true;
            }
            
            else
            {
                $scope.others_title = false;
            }
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };
            var IsValidExtension = cmnfunctionService.fnCheckValidDocType(val[0].name, "");

            if (IsValidExtension == false) {
                Notify.alert("File format is not supported..!", {
                    status: 'danger',
                    pos: 'top-center',
                    timeout: 3000
                });
                return false;
            }
            
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_type',$scope.document_type);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;             
           
            var url = 'api/requestCompliance/Uploaddocument';

            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.upload_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';    
                    Notify.alert('Document Uploaded Successfully..!!', 'success')
                  
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported!')

                }

            });

        }
        $scope.document_cancelclick = function (val, data) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/documentdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.uploaddocument_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });
                    activate();
                }
                else {
                    Notify.alert('Internal Error Occurred!', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
            });
        }
        $scope.requestback = function () {
            var url = 'api/requestCompliance/tempdelete';
            SocketService.get(url).then(function (resp) {

               
            });

            $state.go("app.requestCompliancesummary");
        }
        $scope.requestSubmit = function () {
            if ($scope.cborequest_type.request_type == 'Others')
            {
                if(($scope.txttitle=='')||($scope.txttitle==undefined))
                {
                    Notify.alert('Kindly Enter Others Title', 'warning')
                }
                else {


                    var url = 'api/requestCompliance/mandatory_check';
                    SocketService.get(url).then(function (resp) {
                        console.log(resp.data.status)
                        if (resp.data.status == false) {
                            Notify.alert(resp.data.message, 'warning')
                        }
                        else {


                            var params = {

                                request_type: $scope.cborequest_type.request_type,
                                requesttype_gid: $scope.cborequest_type.requesttype_gid,
                                others_title: $scope.txttitle,
                                // deadline_date: $scope.txtdeadlinedate,
                                remarks: $scope.txtremarks,

                            }

                            var url = 'api/requestCompliance/requestcompliance';
                            lockUI()
                            SocketService.post(url, params).then(function (resp) {

                                if (resp.data.status == true) {
                                    unlockUI()

                                    $state.go('app.requestCompliancesummary');
                                    Notify.alert('Compliance Created Successfully', 'success')
                                }
                                else {
                                    unlockUI();
                                    Notify.alert('Error While Creating request compliance')
                                }
                                activate();
                            });
                        }

                    });
                }
            }
            else {

            
            var url = 'api/requestCompliance/mandatory_check';
            SocketService.get(url).then(function (resp) {
                console.log(resp.data.status)
                if(resp.data.status == false)
                {
                    Notify.alert(resp.data.message, 'warning')
                }
                else {


            var params = {
             
                request_type: $scope.cborequest_type.request_type,
                requesttype_gid: $scope.cborequest_type.requesttype_gid,
                others_title:$scope.txttitle,
               // deadline_date: $scope.txtdeadlinedate,
                remarks: $scope.txtremarks,
                
            }

            var url = 'api/requestCompliance/requestcompliance';
            lockUI()
            SocketService.post(url, params).then(function (resp) {
          
                if (resp.data.status == true) {
                    unlockUI()
                  
                    $state.go('app.requestCompliancesummary');
                    Notify.alert('Compliance Created Successfully', 'success')
                }
                else {
                    unlockUI();
                    Notify.alert('Error While Creating request compliance')
                }
                activate();
            });
                }

            });
            }
        }
          
    }
})();
(function () {
    'use strict';

    angular
        .module('angle')
        .controller('requestCompliancesummarycontroller', requestCompliancesummarycontroller);

    requestCompliancesummarycontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];

    function requestCompliancesummarycontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'requestCompliancesummarycontroller';

        activate();


        function activate() {
            $scope.totalDisplayedcompliance = 100;
            $scope.totalDisplayedlegalsr = 100;
            var url = 'api/requestCompliance/requestCompliancesummary';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();

                $scope.requestcompliance_data = resp.data.requestcompliance_list;
                $scope.complianceCount = $scope.requestcompliance_data.length;
            });
            var url = 'api/raiseLegalSR/GetSR';
            lockUI();
            SocketService.get(url).then(function (resp) {
                unlockUI();
                $scope.mdlMisdataimport = resp.data.RaiselegalSR_list;
                $scope.legalsrCount = $scope.mdlMisdataimport.length;
            });
            $scope.tab = {};
            var url = window.location.href;
            var relPath = url.split("lstab=");
            var relpath1 = relPath[1];
            if (relpath1 != undefined) {
                if (relpath1 == "compliance") {
                    $scope.tabcompliance = true;
                }
                else if (relpath1 == "legalsr") {
                    $scope.tablegalsr = true;
                }
            }
            else {
                if ($scope.tab.activeTabId == undefined) {
                    $scope.tabcompliance = true;
                }
                else if ($scope.tab.activeTabId == 'compliance') {
                    $scope.tabcompliance = true;

                }
                else if ($scope.tab.activeTabId == 'legalsr') {
                    $scope.tablegalsr = true;
                }            

            }
        }
       
        $scope.loadMorecompliance = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedcompliance += Number;
            unlockUI();
        };
        $scope.loadMorelegalsr = function (pagecount) {
            lockUI();
            var Number = parseInt(pagecount);

            $scope.totalDisplayedlegals += Number;
            unlockUI();
        };
        //---Add Request Compliance-----//
        $scope.popuprequest = function () {

            $state.go('app.requestcompliance');

        }
        //---Add Raise Legal SR-----//
        $scope.raiselegalsr = function () {
            $location.url('app/raiselegalSR?lstab=legalsr');      
        }
        $scope.edit = function (val) {
            $scope.requestcompliance_gid = val;
            //$location.url('app/raiseSR2authentication?requestcompliance_gid=' + val + '&lstab=legalsr');
       
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $state.go('app.editRequestcompliance');
            
        }
        $scope.view360 = function (val) {
            $scope.requestcompliance_gid = val;
            console.log($scope.requestcompliance_gid);
            //$location.url('app/raiseSR2authentication?requestcompliance_gid=' + val + '&lstab=legalsr');
            $scope.requestcompliance_gid = localStorage.setItem('requestcompliance_gid', val);
            $state.go('app.requestComplianceview');
        }

        $scope.delete = function (requestcompliance_gid) {
            var params = {
                requestcompliance_gid: requestcompliance_gid
            }
            SweetAlert.swal({
                title: 'Are you sure?',
                text: 'Do You Want To Delete the Record ?',

                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Yes, delete it!',
                closeOnConfirm: false
            }, function (isConfirm) {
                if (isConfirm) {
                    var url = 'api/requestCompliance/requestcompliancedelete';
                    SocketService.getparams(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            activate();
                        }
                        else {
                            Notify.alert('Error Occurred !', {
                                status: 'warning',
                                pos: 'top-right',
                                timeout: 3000
                            });
                            activate();
                        }
                    });
                    SweetAlert.swal('Deleted Successfully!');
                }
            });
        };

        //--------------Action -legal SR--------------//
        $scope.raisesr = function (templegalsr_gid, customer_gid)
        {
           
            $location.url('app/raiseSR2authentication?lstemplegalsr_gid=' + templegalsr_gid + '&lscustomer_gid=' + customer_gid );

            
            //$scope.templegalsr_gid = localStorage.setItem('templegalsr_gid', templegalsr_gid);
            //$scope.customer_gid = localStorage.setItem('customer_gid', customer_gid);
            //$location.url('app/raiseSR2authentication?lstab=legalsr');
           
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('requestComplianceviewcontroller', requestComplianceviewcontroller);

    requestComplianceviewcontroller.$inject = ['$rootScope', '$scope', '$modal', '$state', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', '$cookies', '$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService', 'DownloaddocumentService'];

    function requestComplianceviewcontroller($rootScope, $scope, $modal, $state, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, $cookies, $filter, ngTableParams, $resource, $timeout, ngTableDataService, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'requestComplianceview360controller';

        activate();


        function activate() {

            lockUI();
            var url = "api/requestCompliance/requestcomplianceview"
            var param = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
            };

            SocketService.getparams(url, param).then(function (resp) {
                unlockUI();

                $scope.requestref_no = resp.data.requestref_no;
                $scope.requestcompliance_gid = resp.data.requestcompliance_gid;
                $scope.request_type = resp.data.request_type;
             //   $scope.deadline_date = resp.data.deadline_date;
                $scope.request_date = resp.data.request_date;             
                $scope.requested_by = resp.data.requested_by;
                $scope.designation_name = resp.data.designation_name;
                $scope.department_name = resp.data.department_name;
                $scope.branch_name = resp.data.branch_name;
                $scope.employee_photo = resp.data.employee_photo;
                $scope.txtremarks = resp.data.remarks;
                $scope.list = resp.data.document_list;
                $scope.rejected_remarks = resp.data.rejected_remarks;
                $scope.completed_remarks = resp.data.completed_remarks;
                $scope.updated_date = resp.data.updated_date;
                $scope.updated_by = resp.data.updated_by;
                $scope.request_status = resp.data.request_status;
                if (resp.data.correctedfile_name!='---') 
                {
                    $scope.updated_download = true;
                }               
            });
            var url = "api/requestCompliance/querieslist"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.querieslog_list = resp.data.querydetails;
                unlockUI();
            });
            var url = "api/requestCompliance/getcorrecteddocument"

            SocketService.getparams(url, param).then(function (resp) {
                $scope.file_list = resp.data.Managecomplianuploaddoc_list;
                unlockUI();
            });
        }
        $scope.requestback = function () {
            $state.go("app.requestCompliancesummary");
        }
        $scope.downloads = function (val1, val2) {
            //var phyPath = val1;
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //console.log(str);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.downloadsdocument = function (val1, val2) {
            //var phyPath = val1;
            //console.log(val1);
            //console.log(val2);
            //var relPath = phyPath.split("StoryboardAPI");
            //var relpath1 = relPath[1].replace("\\", "/");
            //var hosts = window.location.host;
            //var prefix = location.protocol + "//";
            //var str = prefix.concat(hosts, relpath1);
            //var link = document.createElement("a");
            //var name = val2.split('.');
            //link.download = name[0];
            //var uri = str;
            //link.href = uri;
            //link.click();
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.upload = function (val, val1, name) {
            var item = {
                name: val[0].name,
                file: val[0]
            };

          
            var frm = new FormData();
            frm.append('fileupload', item.file);
            frm.append('file_name', item.name);
            frm.append('document_type', $scope.document_type);
            frm.append('requestcompliance_gid', $scope.requestcompliance_gid);
            frm.append('project_flag', "Default");
            $scope.uploadfrm = frm;
            console.log($scope.requestcompliance_gid);
            var url = 'api/requestCompliance/additionaldocupload';
            lockUI();
            SocketService.postFile(url, $scope.uploadfrm).then(function (resp) {
                $scope.filename_list = resp.data.upload_list;

                $("#addupload").val('');
                if (resp.data.status == true) {
                    unlockUI();
                    $scope.document_type = '';
                    Notify.alert('Document Uploaded Successfully', 'success')
                    activate();
                }
                else {
                    unlockUI();
                    Notify.alert('File Format Not Supported')

                }
                activate();
            });
          
        }
        $scope.delete_doc = function (val) {
            var params = { uploaddocument_gid: val };
            var url = 'api/requestCompliance/documentdelete';
            SocketService.getparams(url, params).then(function (resp) {
                if (resp.data.status == true) {
                    angular.forEach($scope.filename_list, function (value, key) {
                        if (value.document_gid == val) {
                            $scope.filename_list.splice(key, 1);
                        }
                    });
                    Notify.alert('Document Deleted Successfully', {
                        status: 'success',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                else {
                    Notify.alert('Internal Error Occurred', {
                        status: 'Warning',
                        pos: 'top-center',
                        timeout: 3000
                    });

                }
                activate();
            });
        }
        $scope.updateddoc_downloads = function (val1,val2) {
            var phyPath = val1;
            var relPath = phyPath.split("StoryboardAPI");
            var relpath1 = relPath[1].replace("\\", "/");
            var hosts = window.location.host;
            var prefix = location.protocol + "//";
            var str = prefix.concat(hosts, relpath1);
            console.log(str);
            var link = document.createElement("a");
            var name = val2.split('.');
            link.download = name[0];
            var uri = str;
            link.href = uri;
            link.click();
        }
        $scope.query = function (requestcompliance_gid) {

            var params = {
                requestcompliance_gid: requestcompliance_gid
            }
            console.log(requestcompliance_gid);
            var modalInstance = $modal.open({
                templateUrl: '/requestcompliancequery.html',
                controller: ModalInstanceCtrl,
                size: 'md'
            });
            //$scope.requestcompliance_gid = requestcompliance_gid;

            ModalInstanceCtrl.$inject = ['$scope', '$modalInstance'];
            function ModalInstanceCtrl($scope, $modalInstance) {

                $scope.ok = function () {
                    $modalInstance.close('closed');
                };

                var url = "api/requestCompliance/compliancemanagement360"
                SocketService.getparams(url, params).then(function (resp) {
                    if (resp.data.status == true) {
                        $scope.requestref_no = resp.data.requestref_no;
                        $scope.request_type = resp.data.request_type;
                 
                    }
                });
                $scope.querysubmit = function () {
                    var lawyer = $('#lawyer :selected').text();
                    var params = {
                        firm_refno: $scope.firm_refno,
                        firm_name: $scope.firm_name,
                        lawyer: lawyer,
                        remarks: $scope.remarks,
                        lawfirm_gid: $scope.lawfirm_gid,
                        lawyerregister_gid: $scope.lawyer
                    }

                    var url = 'api/requestCompliance/querydetails';

                    SocketService.post(url, params).then(function (resp) {
                        if (resp.data.status == true) {
                            $modalInstance.close('closed');
                            Notify.alert('Query Details Added Successfully', 'success')
                            activate();

                        }
                        else {
                            Notify.alert('Error Occurred While Query Details', 'warning')
                            activate();
                        }
                    });
                }
            }
        }
        $scope.sendclick = function () {
            var params = {
                requestcompliance_gid: localStorage.getItem('requestcompliance_gid'),
                queries: $scope.txtqueries
            }
         
            lockUI();
            var url = "api/requestCompliance/sendqueries";
            SocketService.post(url, params).then(function (resp) {
                unlockUI();
                if (resp.data.status == true) {
                    var url = "api/requestCompliance/querieslist"
                    var param = {
                        requestcompliance_gid: localStorage.getItem('requestcompliance_gid')
                    };
                    SocketService.getparams(url, param).then(function (resp) {
                        $scope.querieslog_list = resp.data.querydetails;
                        unlockUI();
                    });
                    Notify.alert('Queries sent Successfully', 'success');
                    $scope.txtqueries = "";
                }
                else {
                    Notify.alert('Error Occurred!', 'warning');
                }
            });
        }

        $scope.cancelclick = function () {
            $scope.txtqueries = "";
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('viewLawfirmcontroller', viewLawfirmcontroller);

    viewLawfirmcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'DownloaddocumentService'];

    function viewLawfirmcontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'viewLawfirmcontroller';

        activate();
        function activate() {
            $scope.lawfirm_gid = localStorage.getItem('lawfirm_gid');
            var params = {
                lawfirm_gid: $scope.lawfirm_gid,
                lawyerref_no: $scope.lawyerref_no,
                lawyer_name: $scope.lawyer_name,
                mobile_no: $scope.mobile_no,
                date_enrolment: $scope.date_enrolment
            }
        
            var url = 'api/lawFirm/lawfirmView'
            SocketService.getparams(url, params).then(function (resp) {
                $scope.Lawfirmupload = resp.data;
                $scope.firm_refno = resp.data.firm_refno;
                $scope.firm_name = resp.data.firm_name;
                $scope.contact_no = resp.data.contact_no;
                $scope.mail_address = resp.data.mail_address;
                $scope.firm_years = resp.data.firm_years;
                $scope.firm_address = resp.data.firm_address;               
                $scope.remarks = resp.data.remarks;
                $scope.filename_list = resp.data.UploadDocument;
                 $scope.lawyer_list = resp.data.lawfirm_list;
               

            });

            //var url = 'api/Lawfirm/lawfirmDetails';
            //lockUI();
            //SocketService.getparams(url, params).then(function (resp) {
            //    unlockUI();
            //    $scope.lawyer_list = resp.data.lawfirm_list;
               
            //});
            var url = 'api/Lawfirm/viewmember';
            lockUI();
            SocketService.getparams(url, params).then(function (resp) {
                unlockUI();
                $scope.member_list = resp.data.member_list;

            });
            $scope.close = function (val) {
                document.getElementById("userform").reset();
                var doc = document.getElementById(val);
                doc.style.display = 'none';
            }
        }
        //$scope.downloads = function (val1, val2) {
        //    //var phyPath = val1;
        //    //console.log(val1);
        //    //var relPath = phyPath.split("StoryboardAPI");
        //    //var relpath1 = relPath[1].replace("\\", "/");
        //    //var hosts = window.location.host;
        //    //var prefix = location.protocol + "//";
        //    //var str = prefix.concat(hosts, relpath1);
        //    //console.log(str);
        //    //var link = document.createElement("a");
        //    //var name = val2.split('.');
        //    //link.download = name[0];
        //    //var uri = str;
        //    //link.href = uri;
        //    //link.click();
        //    DownloaddocumentService.Downloaddocument(val1, val2);
        //}
        $scope.downloads = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);
        }
        $scope.Back = function () {
            $state.go('app.lawfirmSummary');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('viewLawyercontroller', viewLawyercontroller);

    viewLawyercontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route','DownloaddocumentService'];

    function viewLawyercontroller($rootScope, $scope, $state, $modal, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, DownloaddocumentService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'viewLawyercontroller';

        activate();
        function activate() {
            $scope.lawyerregister_gid = localStorage.getItem('lawyerregister_gid');
            var params = {
                lawyerregister_gid: $scope.lawyerregister_gid
            }
            var url = 'api/registerLawyer/lawyerView';
            SocketService.getparams(url, params).then(function (resp) {
                $scope.UploadDocumentname = resp.data;
                $scope.lawyerref_no = resp.data.lawyerref_no;
                $scope.lawyer_name = resp.data.lawyer_name;
                $scope.dob = resp.data.dob;
                $scope.gender = resp.data.gender;
                $scope.mobile_no = resp.data.mobile_no;
                $scope.telephone_no = resp.data.telephone_no;
                $scope.email_address = resp.data.email_address;
                $scope.educational_qualification = resp.data.educational_qualification;
                $scope.date_enrolment = resp.data.date_enrolment;
                $scope.pan_no = resp.data.pan_no;
                $scope.experience = resp.data.experience;
                $scope.place_practice = resp.data.place_practice;
                $scope.address_line1 = resp.data.address_line1;
                $scope.address_line2 = resp.data.address_line2;
                $scope.state = resp.data.state;
                $scope.country = resp.data.country;
                $scope.postal_code = resp.data.postal_code;
                $scope.document_name = resp.data.document_name;
                $scope.lawyerphoto_name = resp.data.lawyerphoto_name;
                $scope.document_path = resp.data.document_path;
                $scope.filename_list = resp.data.UploadDocumentList;
                $scope.aadhar_no = resp.data.aadhar_no;
                $scope.bank_name = resp.data.bank_name;
                $scope.account_no = resp.data.account_no;
                $scope.ifsc_code = resp.data.ifsc_code;
                var pathArray = location.href.split('/');
                var protocol = pathArray[0];
                var host = pathArray[2];
                var url = location.protocol + '//' + host;
                var str = resp.data.lawyerphoto_path;
                str = str.substring(str.indexOf("StoryboardAPI") + 13);
                $scope.lawyerphoto_path = url.concat(str);
               
            });
          
            $scope.close = function (val) {
                document.getElementById("userform").reset();
                var doc = document.getElementById(val);
                doc.style.display = 'none';
            }
      }
        //$scope.downloads = function (val1, val2) {
        //    //var phyPath = val1;           
        //    //var relPath = phyPath.split("StoryboardAPI");
        //    //var relpath1 = relPath[1].replace("\\", "/");      
        //    //var hosts = window.location.host;
        //    //var prefix = location.protocol + "//";
        //    //var str = prefix.concat(hosts, relpath1);
        //    //var link = document.createElement("a");
        //    var name = val2.split('.');
        //    //link.download = name[0];
        //    //var uri = str;
        //    //link.href = uri;
        //    //link.click();
        //    DownloaddocumentService.Downloaddocument(val1, name[0]);
        //}

        $scope.downloads = function (val1, val2) {
            DownloaddocumentService.Downloaddocument(val1, val2);
        }

        $scope.viewBack = function () {
            $state.go('app.lawyerManagement');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('angle')
        .controller('viewlegalSRcontroller', viewlegalSRcontroller);



    viewlegalSRcontroller.$inject = ['$rootScope', '$scope', '$state', '$modal', 'SweetAlert', 'AuthenticationService', 'ScopeValueService', '$http', 'SocketService', 'Notify', '$location', 'apiManage', '$route', 'ngTableParams'];

    function viewlegalSRcontroller($rootScope, $scope, $state, $modal, SweetAlert, AuthenticationService, ScopeValueService, $http, SocketService, Notify, $location, apiManage, $route, ngTableParams) {


        /* jshint validthis:true */
        var vm = this;
        vm.title = 'viewlegalSRcontroller';
        activate();
        function activate() {
            $scope.templegalsr_gid = localStorage.getItem('templegalsr_gid');
            $scope.customer_gid = localStorage.getItem('customer_gid');

            var customer = {
                //customer_gid: localStorage.getItem('legalsr_customergid')
                templegalsr_gid: $scope.templegalsr_gid,
                customer_gid: $scope.customer_gid
            }

            var url = 'api/raiseLegalSR/Getpromoter';

            SocketService.getparams(url, customer).then(function (resp) {
                $scope.promoters_list = resp.data.promoter_list;
            });
            var url = 'api/raiseLegalSR/Getguarantor';

            SocketService.getparams(url, customer).then(function (resp) {
                $scope.guarantors_list = resp.data.guarantor_list;
            });

            var url = 'api/raiseLegalSR/Getcustomerdtl';
            SocketService.getparams(url, customer).then(function (resp) {
                $scope.address = resp.data.address;
                $scope.email = resp.data.email_id;
                $scope.customer_name = resp.data.customer_name;
            });

            var url = 'api/raiseLegalSR/getfacilitydtl';

            SocketService.getparams(url, customer).then(function (resp) {
                $scope.facility_list = resp.data.facility_list;
            });

            var param = {
                raiselegalSR_gid: localStorage.getItem('templegalsr_gid')
            };

            var url = 'api/raiseLegalSR/viewLegalSR';
            SocketService.getparams(url, param).then(function (resp) {
                $scope.account_name=resp.data.account_name;
                $scope.financed_by = resp.data.financed_by;
                $scope.constitution = resp.data.constitution;
                $scope.deal_year = resp.data.deal_year;
                $scope.cycles_sanctiondated = resp.data.cycles_sanctiondated;
                $scope.limit_sanction = resp.data.limit_sanction;
                $scope.business_activity = resp.data.business_activity;
                $scope.primary_securities = resp.data.primary_securities;
                $scope.collateral_securities = resp.data.collateral_securities;
                $scope.details_UDC_PDC = resp.data.details_UDC_PDC;
                $scope.unit_working_status = resp.data.unit_working_status;
                $scope.txtother_banker = resp.data.txtother_banker;
                $scope.other_banker_exposures = resp.data.other_banker_exposures;
                $scope.status_current_overdue = resp.data.status_current_overdue;
                $scope.cibil_data = resp.data.cibil_data;
                $scope.churing_account = resp.data.churing_account;
                $scope.other_group_companies = resp.data.other_group_companies;
                $scope.meeting_details = resp.data.meeting_details;
                $scope.restructuring_data = resp.data.restructuring_data;
                $scope.txtother_banker = resp.data.otherbankers_borrower;
                $scope.instances_PTP = resp.data.instances_PTP;
                $scope.statuslegal_action = resp.data.statuslegal_action;
                $scope.demandnotice_details = resp.data.demandnotice_details;
                $scope.created_date = resp.data.created_date;
                console.log(resp.data.created_date);
            });

            var url = "api/raiseLegalSR/getlegalSRcontactdtl";
            SocketService.getparams(url, param).then(function (resp) {
                console.log(resp);
                $scope.contactdetailsRM = resp.data.contactdetailsRM;
            });
        }

        $scope.legalSRback = function (val) {
            $state.go('app.legalSRsummary');
        }


    }

})();
