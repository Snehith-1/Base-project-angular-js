using ems.master.Models;
using ems.utilities.Functions;
using System;
using System.Web;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Data.Odbc;
using System.Configuration;
using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime;
using System.Globalization;
using OfficeOpenXml;
using System.Text.RegularExpressions;
using System.Net.Mail;
using System.Net;
using System.Linq;
using ems.storage.Functions;
using System.Drawing;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Logical;
using System.Web.UI.WebControls;
using OfficeOpenXml.Style;

namespace ems.master.DataAccess
{

    // <summary>
    // cad team to assign the maker and checker.
    // maker to enter the soft copy details and approve the process.
    // maker and checker to raise the query from rm and rm will close the query.
    // final approver will raise the query and checker will close the query.
    // once checker approve the process and final approver to approve the samunnati associate.
    // </summary>
    // <remarks>Written by Divyalakshmi and S.Santhanam </remarks>

    public class DaMstSAOnboardingIndividual
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        OdbcDataReader objODBCDatareader, objODBCDatareader1;
        Fnazurestorage objcmnstorage = new Fnazurestorage();
        HttpPostedFile httpPostedFile;
        string sToken = string.Empty;
        string lsto_mail, saAssociateName, saUser, raisequery_flag,approvalstatus;
        DataTable dt_datatable, dt_tloan, dt_tcontact, dt_tinstitution, dt_thypothecation;
        string msSQL, msGetGid, msGetGidLog, msGetAPICode, msGetGidAssociate, lssa_associatename, sa_dateofincorporation, lssaautogeneratedid,codecreated_flag, Edit_agreementexecutiondate, Edit_agroagreementexecutiondate, Edit_agreementexpirydate, Edit_agroagreementexpirydate, Editsa_appcrediteddate, Editsa_ratingas_date, lssaappcredited_date, lsagreementrenewal_date, lsratingasdate, lsratingasdates, lscodecreationdate, lspath, msGetGidREF, msGetGidpan, tagName, msGetGid1, reporting_to, RMName;
        int mnResult,k, ls_port;
        string lsindividualchecker_name, Editsa_dateofincorporation,lscreated_date,lsuser_firstname, lssa_reportingmanager,lsinstitutionmaker_name, lsinstitutionchecker_name, lsurn_status, lsurn, lsgroup_name, lsinsitution_name, lssaemail_address, lssamobile_no, lspan_status, lspan_no, lspanstatusvalue;
        public string ls_server, ls_username, ls_password, tomail_id,lscreated_by, lssa_autogeneratedid, individualchecker_name, lsindividualmaker_name, lsto2members, lscc2members, tomail_id1, tomail_id2, sub, body, employeename, cc_mailid, employee_reporting_to, lsBccmail_id;
        public string loginstatus;
        Random rand = new Random();
        public string[] lsCCReceipients;
        public string[] lsBCCReceipients;
        public string[] lsToReceipients;

        int matchCount1, matchCount2;
        string satype_gid, satype_name, lssaappcrediteddate, saentitytype_gid, saentitytype_name, defPass,sa_autogeneratedid,sacontact_gid;
        //Drop Down
        public void DaGetDropDown(string employee_gid, MdlDropDownList values)
        {

            //SAType

            msSQL = "select satype_gid,satype_name from ocs_mst_tsatype";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<satype_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new satype_List
                    {
                        satype_gid = (dr_datarow["satype_gid"].ToString()),
                        satype_name = (dr_datarow["satype_name"].ToString()),
                        // vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.satype_list = getSegment1;
            }
            dt_datatable.Dispose();

            //saentitytype
            // msSQL = " SELECT a.vertical_gid,a.vertical_name,vertical_code " +
            //       " FROM ocs_mst_tvertical a  where status_log='Y' order by a.vertical_gid desc ";
            //for (var i = 0; i < values.satype_list.Count; i++)
            //{
            msSQL = "select saentitytype_gid,saentitytype_name from ocs_mst_tsaentitytype ";
            // " satype_gid='" + values.satype_list[0].satype_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);




            var getSegment = new List<saentitytype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new saentitytype_list
                    {
                        saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                        saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                        // vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.saentitytype_list = getSegment;
            }
            dt_datatable.Dispose();

            //DocumentList

            msSQL = "select sadocumentlist_gid,sadocumentlist_name from ocs_mst_tsadocumentlist";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegmentdoc = new List<sadocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegmentdoc.Add(new sadocument_list
                    {
                        sadocumentlist_gid = (dr_datarow["sadocumentlist_gid"].ToString()),
                        sadocumentlist_name = (dr_datarow["sadocumentlist_name"].ToString()),

                    });
                }
                values.sadocument_list = getSegmentdoc;
            }
            dt_datatable.Dispose();

        }
//Auto Generate
        public void DaAutoGenerateID(saAutoGenerate_ID values)
        {
            string auto_generate_id;
            try
            {
                auto_generate_id = "SA001";
                values.auto_generated_id = auto_generate_id;
            }
            catch
            {
            }
        }

//Mobile Number
        public bool DaMobileNumberAdd(string employee_gid, MdlContactMobileNoSA values)
        {
            bool sta = false;
            try
            {
                msSQL = "select saprimary_status from ocs_mst_tsacontact2mobileno where saprimary_status='Yes' and sacontact_gid='" + employee_gid + "'";
                string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
                if (lsprimary_status == (values.saprimary_status))
                {
                    values.status = false;
                    values.message = "Already primary mobile number added";
                    objdbconn.CloseConn();
                    return false;
                }

                msSQL = "select samobile_no from ocs_mst_tsacontact2mobileno where samobile_no='" + values.samobile_no + "' and sacontact_gid='" + employee_gid + "'";
                string lsmobile_no = objdbconn.GetExecuteScalar(msSQL);
                if (lsmobile_no == (values.samobile_no))
                {

                    values.status = false;
                    values.message = "Already this mobile number added";
                    objdbconn.CloseConn();
                    return false;
                }

                msGetGid = objcmnfunctions.GetMasterGID("SAIM");

                msSQL = " insert into ocs_mst_tsacontact2mobileno(" +
                        " sacontact2mobileno_gid," +
                        " sacontact_gid," +
                        " samobile_no," +
                        " saprimary_status," +
                        " sawhatsapp_no," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + employee_gid + "'," +
                        "'" + values.samobile_no + "'," +
                        "'" + values.saprimary_status + "'," +
                        "'" + values.sawhatsapp_no + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                objdbconn.CloseConn();

                if (mnResult != 0)
                {
                    sta = true;
                    values.status = true;
                    values.message = "Mobile number added successfully";
                    return true;
                    
                }
                else
                {
                    values.status = false;
                    values.message = "Error occured";
                   
                   
                    sta = false;
                    values.message = "Error occured while submitting details";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/MobileNoAdd/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();




                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch(Exception ex)
            {
                values.status = false;
                sta = false;
                values.message = "Error occured while submitting details";
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/MobileNoAdd/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message + "*********Query-" + msSQL);
                sw.Close();




                values.status = false;
                values.message = "Error Occured..";
                return false;
            }
        }
        public bool DaMobileNumberAddInEdit(string employee_gid, MdlContactMobileNoSA values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsacontact2mobileno where saprimary_status='Yes' and sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msSQL = "select samobile_no from ocs_mst_tsacontact2mobileno where samobile_no='" + values.samobile_no + "' and sacontact_gid='" + employee_gid + "'";
            string lsmobile_no = objdbconn.GetExecuteScalar(msSQL);
            if (lsmobile_no == (values.samobile_no))
            {

                values.status = false;
                values.message = "Already this mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msGetGid = objcmnfunctions.GetMasterGID("SAIM");

            msSQL = " insert into ocs_mst_tsacontact2mobileno(" +
                    " sacontact2mobileno_gid," +
                    " sacontact_gid," +
                    " samobile_no," +
                    " saprimary_status," +
                    " sawhatsapp_no," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.samobile_no + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.sawhatsapp_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            objdbconn.CloseConn();

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile number added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured";
                return false;
            }
        }
        public void DaGetMobileNoList(string employee_gid, MdlContactMobileNoSA valuessa)
        {
            msSQL = "select samobile_no,sacontact2mobileno_gid,saprimary_status,sawhatsapp_no " +
                    " from ocs_mst_tsacontact2mobileno where " +
                    " sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<Sacontactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new Sacontactmobileno_list
                    {
                        sacontact2mobileno_gid = (dr_datarow["sacontact2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
            }
            valuessa.Sacontactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }
        public void DaGetMobileNoEditList(string sacontact_gid, MdlContactMobileNoSA values)
        {
            msSQL = "select samobile_no,sacontact2mobileno_gid,saprimary_status,sawhatsapp_no " +
                    " from ocs_mst_tsacontact2mobileno where " +
                    " sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<Sacontactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new Sacontactmobileno_list
                    {
                        sacontact2mobileno_gid = (dr_datarow["sacontact2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
            }
            values.Sacontactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }
        public void DaGetMobileNoTempList(string sacontact_gid, string employee_gid, MdlContactMobileNoSA values)
        {
            msSQL = "select samobile_no,sacontact2mobileno_gid,saprimary_status,sawhatsapp_no " +
                    " from ocs_mst_tsacontact2mobileno where " +
                    " sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<Sacontactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new Sacontactmobileno_list
                    {
                        sacontact2mobileno_gid = (dr_datarow["sacontact2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
            }
            values.Sacontactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }
        public void DaDeleteMobileNo(string sacontact2mobileno_gid, MdlContactMobileNoSA values)
        {
            msSQL = "delete from ocs_mst_tsacontact2mobileno where sacontact2mobileno_gid='" + sacontact2mobileno_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Mobile number deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the mobile number";
                values.status = false;

            }
        }
        public void DaTempDeleteMobileNo(string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "delete from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Mobile number deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the mobile number";
                values.status = false;

            }
        }
        public void DaApprovalInitatedDetail(string sacontact_gid, Individualedit values)
        {
            try
            {
                msSQL = " SELECT a.sacontact_gid,a.sa_reportingmanager,a.sa_autogeneratedid,a.approval_flag,a.confirmbankaccountnumber,a.satype_gid,a.satype_name,a.saentitytype_gid,a.utr_no, " +
                    " a.saentitytype_name,concat(m.user_firstname,' ',m.user_lastname,' / ',m.user_code) as DirectReprtingTo," +
                       " a.sa_firstname,a.sa_middlename,a.sa_lastname," +
                       " a.sa_pannumber,a.pan_status,a.sa_aadharnumber,a.sa_apputr,a.sa_appcrediteddate,a.origination," +
                       " a.sa_appcreditedamount,a.saifsc_code,a.saaccountholder_name,a.saaccount_number,a.sacanccheque_number,city,branch_address,district,micr,state,a.assessmentagency_gid,a.assessmentagency_name,a.assessmentagencyrating_gid,a.assessmentagencyrating_name,a.ratingas_date, " +
                       " a.sabank_name,a.sabranch_name,a.saaccountholder_name,a.referred_by," +
                        " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement,a.renewal_flag," +
                        "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
                          " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,Date(a.agreementexecutiondate) as agreementexecutiondate," +
                          "Date(a.agreementexpirydate) as agreementexpirydate,Date(a.agroagreementexecutiondate) as agroagreementexecutiondate,Date(a.agroagreementexpirydate) as agroagreementexpirydate," +
                          "  a.agreementstatus,a.agroagreementstatus,a.bookletnumber,a.verificationremarks,a.approvalinitated_flag,a.individualsaveasdraft_flag," +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                        " concat(o.user_firstname,' ',o.user_lastname,' / ',o.user_code) as rejected_by, " +
                        " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus, " +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_onboard_flag,samfin_code,samagro_code,a.ratingas_date,a.rejected_date,a.rejected_remarks,a.gender, " +
                       " (a.origination) as RecordSource,Date(a.codecreation_date) as codecreation_date, a.present_occupation, a.work_experience, a.Expagri_business FROM " +
                       " ocs_mst_tsacontact a" +
                      " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                     " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
                       " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
                        " left join hrm_mst_temployee p on a.rejected_by = p.employee_gid " +
                       " left join adm_mst_tuser o on o.user_gid = p.user_gid" +
                        " left join hrm_mst_temployee r on a.reportingmanager_gid = r.employee_gid  left join adm_mst_tuser m on m.user_gid = r.user_gid" +
                       " where a.sacontact_gid = '" + sacontact_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.sa_reportingmanager = objODBCDatareader["DirectReprtingTo"].ToString();
                    values.recordsource = objODBCDatareader["RecordSource"].ToString();
                    values.origination = objODBCDatareader["origination"].ToString();
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.samfin_code = objODBCDatareader["samfin_code"].ToString();
                    values.samagro_code = objODBCDatareader["samagro_code"].ToString();
                    if (objODBCDatareader["codecreation_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.codecreation_date = "";
                    }
                    else
                    {
                        values.codecreation_date = Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("dd-MM-yyyy");
                    }

                    values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
                    values.applicationform = objODBCDatareader["applicationform"].ToString();
                    values.yearsitreturns = objODBCDatareader["yearsitreturns"].ToString();
                    values.bankstatement = objODBCDatareader["bankstatement"].ToString();
                    values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
                    values.prospect = objODBCDatareader["prospect"].ToString();
                    values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
                    values.scannedcopyreception = objODBCDatareader["scannedcopyreception"].ToString();
                    values.addressproof = objODBCDatareader["addressproof"].ToString();
                    values.photographs = objODBCDatareader["photographs"].ToString();
                    values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
                    values.houseofficeverification = objODBCDatareader["houseofficeverification"].ToString();
                    if (objODBCDatareader["agreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexpirydate = Convert.ToDateTime(objODBCDatareader["agreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }

                    values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
                    values.bookletnumber = objODBCDatareader["bookletnumber"].ToString();
                    values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
                    values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
                    values.approval_flag = objODBCDatareader["approval_flag"].ToString();
                    if (objODBCDatareader["agroagreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agroagreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agroagreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexpirydate = Convert.ToDateTime(objODBCDatareader["agroagreementexpirydate"]).ToString("dd-MM-yyyy");
                    }


                    values.agroagreementstatus = objODBCDatareader["agroagreementstatus"].ToString();
                    values.sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["DirectReprtingTo"].ToString();

                    values.gender = objODBCDatareader["gender"].ToString();
                    values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                    values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                    values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                    values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                    values.pan_status = objODBCDatareader["pan_status"].ToString();

                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }

                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["rejected_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.rejected_date = Convert.ToDateTime(objODBCDatareader["rejected_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["approved_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
                    }
                    values.approved_by = objODBCDatareader["approved_by"].ToString();
                    values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
                    values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();
                    values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_onboard_flag = objODBCDatareader["sa_onboard_flag"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    values.individualsaveasdraft_flag = objODBCDatareader["individualsaveasdraft_flag"].ToString();
                    values.renewal_flag = objODBCDatareader["renewal_flag"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.rejected_by = objODBCDatareader["rejected_by"].ToString();
                    values.rejected_remarks = objODBCDatareader["rejected_remarks"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();
                    values.present_occupation = objODBCDatareader["present_occupation"].ToString();
                    values.work_experience = objODBCDatareader["work_experience"].ToString();
                    values.Expagri_business = objODBCDatareader["Expagri_business"].ToString();

                    //values.sa_updated_date = objODBCDatareader["updated_date"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaMakerIndividualsaveasdraftInitated(string employee_gid, MdlMstIndividualApprovalList values)
        {


            //msSQL = "select * " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //if (objODBCDatareader.HasRows == false)
            //{
            //    values.status = false;
            //    values.message = "Add Atleast One Bureau";
            //}

            //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
            //{
            //    msSQL = "select * " + " from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "'";
            //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //    if (objODBCDatareader.HasRows == false)
            //    {
            //        values.status = false;
            //        values.message = "Upload atleast one mail document ";
            //    }
            //}

            //msSQL = "select * " + " from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //if (objODBCDatareader.HasRows == false)
            //{
            //    values.status = false;
            //    values.message = "Kindly Upload Atleast One Document ";
            //    return false;
            //}
            if (!string.IsNullOrEmpty(values.sa_firstname))
            {
                if (values.sa_firstname.Contains("'"))
                {
                    values.sa_firstname = values.sa_firstname.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_middlename))
            {
                if (values.sa_middlename.Contains("'"))
                {
                    values.sa_middlename = values.sa_middlename.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_lastname))
            {
                if (values.sa_lastname.Contains("'"))
                {
                    values.sa_lastname = values.sa_lastname.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.branch_address))
            {
                if (values.branch_address.Contains("'"))
                {
                    values.branch_address = values.branch_address.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sabranch_name))
            {
                if (values.sabranch_name.Contains("'"))
                {
                    values.sabranch_name = values.sabranch_name.Replace("'", "");
                }
            }
            msSQL = " SELECT date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date FROM " +
                      " ocs_mst_tsacontact where sacontact_gid ='" + values.sacontact_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();

            }
            objODBCDatareader.Close();

            msSQL = " update  ocs_mst_tsacontact set " +

                    " interviewevalution = '" + values.interviewevalution + "'," +
                      " applicationform = '" + values.applicationform + "'," +
                     " kycdocuments = '" + values.kycdocuments + "'," +
                     " vettingstatus = '" + values.vettingstatus + "'," +
                      " addressproof = '" + values.addressproof + "'," +
                       " photographs = '" + values.photographs + "'," +
                   " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                 " satype_gid='" + values.satype_gid + "'," +
                 " satype_name='" + values.satype_name + "'," +
            " saentitytype_gid='" + values.saentitytype_gid + "'," +
             " saentitytype_name='" + values.saentitytype_name + "'," +
            " sa_firstname='" + values.sa_firstname + "'," +
            " sa_middlename='" + values.sa_middlename + "'," +
            " sa_lastname='" + values.sa_lastname + "'," +
             " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                " sa_apputr='" + values.sa_apputr + "'," +
            " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";


            if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
            {

            }
            else
            {
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                  " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                  " verificationremarks = '" + values.verificationremarks + "'," +
                 //"  approvalstatus =  'Individual Maker Approved' ," +
                 //"  approvalinitated_flag = 'Y'," +
                 " individualsaveasdraft_flag = 'Y'," +
                  " approvalinitiated_by='" + employee_gid + "'," +
                  " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                  " where sacontact_gid='" + values.sacontact_gid + "' ";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                //msSQL = "update ocs_mst_tsaindividualmaildocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                msSQL = "update ocs_mst_tsaindividualverifydocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                values.status = true;
                values.message = "SBA Onboarding save as draft added successfully";
            }
        }


        //Email id
        public bool DaPostEmailAddress(string employee_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "select saprimary_status " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' and saprimary_status='Yes'";
            string lsprimary_emailaddress = objdbconn.GetExecuteScalar(msSQL);

            if (lsprimary_emailaddress == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary email address added";
                objdbconn.CloseConn();
                return false;
            }
            msSQL = "select saemail_address from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saemail_address='" + values.saemail_address + "'";
            string lsemail_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsemail_address == (values.saemail_address))
            {
                values.status = false;
                values.message = "Already this email address added";
                objdbconn.CloseConn();
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAIE");
            msSQL = " insert into ocs_mst_tsacontact2email(" +
                    " sacontact2email_gid," +
                    " sacontact_gid," +
                    " saemail_address," +
                    " saprimary_status," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saemail_address + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Email address added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding email address";
                return false;
            }
        }
        public bool DaPostEmailAddressInEdit(string employee_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "select saprimary_status " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saprimary_status='Yes'";
            string lsprimary_emailaddress = objdbconn.GetExecuteScalar(msSQL);

            if (lsprimary_emailaddress == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary email address added";
                objdbconn.CloseConn();
                return false;
            }
            msSQL = "select saemail_address from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saemail_address='" + values.saemail_address + "'";
            string lsemail_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsemail_address == (values.saemail_address))
            {
                values.status = false;
                values.message = "Already this email address added";
                objdbconn.CloseConn();
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAIE");
            msSQL = " insert into ocs_mst_tsacontact2email(" +
                    " sacontact2email_gid," +
                    " sacontact_gid," +
                    " saemail_address," +
                    " saprimary_status," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saemail_address + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Email address added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding email address";
                return false;
            }
        }
        public void DaGetEmailAddressList(string employee_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "select saemail_address,sacontact2email_gid,saprimary_status from ocs_mst_tsacontact2email where " +
              " sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardemailaddress_list
                    {
                        sacontact2email_gid = (dr_datarow["sacontact2email_gid"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetEmailAddressEditList(string sacontact_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "select saemail_address,sacontact2email_gid,saprimary_status from ocs_mst_tsacontact2email where " +
               " sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardemailaddress_list
                    {
                        sacontact2email_gid = (dr_datarow["sacontact2email_gid"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetEmailAddressTempList(string sacontact_gid, string employee_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "select saemail_address,sacontact2email_gid,saprimary_status from ocs_mst_tsacontact2email where " +
               " sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardemailaddress_list
                    {
                        sacontact2email_gid = (dr_datarow["sacontact2email_gid"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteEmailAddress(string sacontact2email_gid, MdlsaOnboardEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsacontact2email where sacontact2email_gid='" + sacontact2email_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (sacontact2email_gid=="")
            {
                mnResult = 0;
            } 
            if (mnResult != 0)
            {

                values.message = "Email address deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the email address";
                values.status = false;

            }
        }
        public void DaTempEmailAddress(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
//Document       
        public bool DaAddDocuments(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation; 

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("SADO");
                        msSQL = " insert into ocs_mst_tsadocumentsupload(" +
                               " sadocument_gid," +
                                " sacontact_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                " safile_path," +
                                " created_by,created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document uploaded successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;

            //msSQL = "select sadocument_name from ocs_mst_tsadocumentsupload where  sacontact_gid='" + employee_gid + "'";
            //string sadocument_name = objdbconn.GetExecuteScalar(msSQL);
            //if (sadocument_name == (values.sadocument_name))
            //{
            //    values.status = false;
            //    values.message = "Already Document Name Added";
            //    return false;
            //}
            //msGetGid = objcmnfunctions.GetMasterGID("SADO");
            //msSQL = " insert into ocs_mst_tsadocumentsupload(" +
            //        " sadocument_gid," +
            //        " sacontact_gid," +
            //        " sadocument_name," +
            //        " sadocument_id," +
            //        " safile_path," +
            //        " created_by, " +
            //        " created_date)" +
            //        " values(" +
            //        "'" + msGetGid + "'," +
            //        "'" + employee_gid + "'," +
            //        "'" + values.sadocument_name.Replace("'", "") + "'," +
            //         "'" + values.sadocument_id + "'," +
            //          "'" + values.safile_path + "'," +
            //        "'" + employee_gid + "'," +
            //        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            //if (mnResult != 0)
            //{

            //    values.status = true;
            //    values.message = "Document Details Added Sucessfully";
            //    return true;
            //}
            //else
            //{
            //    values.status = true;
            //    values.message = "Error Occured While Adding Documents";
            //    return false;
            //}
        }
        public void DaGetDocumentList(string employee_gid, MdlsaOnboardDocument values)
        {
            msSQL = " select sadocument_gid,sadocument_name,document_title,safile_path,sadocument_id " +
                    " from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardDocument_list = new List<saOnboardDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {


                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();


                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardDocument_list.Add(new saOnboardDocument_list
                    {
                        sadocument_gid = (dr_datarow["sadocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData((dr_datarow["safile_path"].ToString())),

                    });
                }
                values.saOnboardDocument_list = getsaOnboardDocument_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetDocumentEditList(string sacontact_gid, MdlsaOnboardDocument values)
        {
            msSQL = " select sadocument_gid,sadocument_name,document_title,safile_path,sadocument_id " +
                    " from ocs_mst_tsadocumentsupload where sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardDocument_list = new List<saOnboardDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardDocument_list.Add(new saOnboardDocument_list
                    {
                        sadocument_gid = (dr_datarow["sadocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData((dr_datarow["safile_path"].ToString())),

                    });
                }
                values.saOnboardDocument_list = getsaOnboardDocument_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetDocumentTempList(string sacontact_gid, string employee_gid, MdlsaOnboardDocument values)
        {
            msSQL = " select sadocument_gid,sadocument_name,document_title,safile_path,sadocument_id " +
                    " from ocs_mst_tsadocumentsupload where sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardDocument_list = new List<saOnboardDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();


                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardDocument_list.Add(new saOnboardDocument_list
                    {
                        sadocument_gid = (dr_datarow["sadocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData((dr_datarow["safile_path"].ToString())),

                    });
                }
                values.saOnboardDocument_list = getsaOnboardDocument_list;
            }
            dt_datatable.Dispose();
        }
        public void DaTempDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteDocuments(string sadocument_gid, MdlsaOnboardDocument values)
        {
            msSQL = "delete from ocs_mst_tsadocumentsupload where sadocument_gid='" + sadocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Documents deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the documents";
                values.status = false;

            }
        }
//Prospects
        public bool DaAddProspects(string employee_gid, MdlsaOnboardProspects values)
        {
            msSQL = "select salead_name from ocs_mst_tsaprospects where  sacontact_gid='" + employee_gid + "'";
            string salead_name = objdbconn.GetExecuteScalar(msSQL);
            if (salead_name == (values.salead_name))
            {
                values.status = false;
                values.message = "Already lead name added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAPR");
            msSQL = " insert into ocs_mst_tsaprospects(" +
                    " saprospects_gid," +
                    " sacontact_gid," +
                    " salead_name," +
                    " sasector_industry,created_by,created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.salead_name + "'," +
                    "'" + values.sasector_industry + "'," +                    
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Prospects details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding prospects";
                return false;
            }
        }
        public bool DaAddProspectsInEdit(string employee_gid, MdlsaOnboardProspects values)
        {
            msSQL = "select salead_name from ocs_mst_tsaprospects where  sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            string salead_name = objdbconn.GetExecuteScalar(msSQL);
            if (salead_name == (values.salead_name))
            {
                values.status = false;
                values.message = "Already lead name added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAPR");
            msSQL = " insert into ocs_mst_tsaprospects(" +
                    " saprospects_gid," +
                    " sacontact_gid," +
                    " salead_name," +
                    " sasector_industry,created_by,created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.salead_name + "'," +
                    "'" + values.sasector_industry + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Prospects details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding prospects";
                return false;
            }
        }
        public void DaGetprospectsList(string employee_gid, MdlsaOnboardProspects values)
        {
            msSQL = " select saprospects_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardProspects_list = new List<saOnboardProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardProspects_list.Add(new saOnboardProspects_list
                    {
                        saprospects_gid = (dr_datarow["saprospects_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())                      

                    });
                }
                values.saOnboardProspects_list = getsaOnboardProspects_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetProspectsEditList(string sacontact_gid, MdlsaOnboardProspects values)
        {
            msSQL = " select saprospects_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsaprospects where sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardProspects_list = new List<saOnboardProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardProspects_list.Add(new saOnboardProspects_list
                    {
                        saprospects_gid = (dr_datarow["saprospects_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())

                    });
                }
                values.saOnboardProspects_list = getsaOnboardProspects_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetProspectsTempList(string sacontact_gid, string employee_gid, MdlsaOnboardProspects values)
        {
            msSQL = " select saprospects_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsaprospects where sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardProspects_list = new List<saOnboardProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardProspects_list.Add(new saOnboardProspects_list
                    {
                        saprospects_gid = (dr_datarow["saprospects_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())

                    });
                }
                values.saOnboardProspects_list = getsaOnboardProspects_list;
            }
            dt_datatable.Dispose();
        }
        public void DaTempProspects(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteProspects(string saprospects_gid, MdlsaOnboardProspects values)
        {
            msSQL = "delete from ocs_mst_tsaprospects where saprospects_gid='" + saprospects_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "prospects Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Prospects";
                values.status = false;

            }
        }
//Address
        public bool DaPostAddress(string employee_gid, MdlSaOnboardAddress values)
        {
            msSQL = "select primary_status from ocs_mst_tsacontact2address where primary_status='Yes' and sacontact_gid='" + employee_gid + "'";
            string lsprimary_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_address == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Address Added";
                return false;
            }
            msSQL = "select sacontact2address_gid from ocs_mst_tsacontact2address where addresstype_name='" + values.addresstype_name + "' and (sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Address Type Added";
                return false;
            }
            objODBCDatareader.Close();

            msGetGid = objcmnfunctions.GetMasterGID("SAIA");
            msSQL = " insert into ocs_mst_tsacontact2address(" +
                    " sacontact2address_gid," +
                    " sacontact_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " primary_status," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.addresstype_gid + "'," +
                    "'" + values.addresstype_name + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.landmark + "'," +
                    "'" + values.postal_code + "'," +
                    "'" + values.city + "'," +
                    "'" + values.taluka + "'," +
                    "'" + values.district + "'," +
                    "'" + values.state + "'," +
                    "'" + values.country + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Address Details Added Sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Address";
                return false;
            }

        }
        public bool DaPostAddressInEdit(string employee_gid, MdlSaOnboardAddress values)
        {
            msSQL = "select primary_status from ocs_mst_tsacontact2address where primary_status='Yes' and sacontact_gid='" + employee_gid + "'or sacontact_gid='" + values.sacontact_gid + "'";
            string lsprimary_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_address == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Address Added";
                return false;
            }
            msSQL = "select sacontact2address_gid from ocs_mst_tsacontact2address where addresstype_name='" + values.addresstype_name + "' and (sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Address Type Added";
                return false;
            }
            objODBCDatareader.Close();

            msGetGid = objcmnfunctions.GetMasterGID("SAIA");
            msSQL = " insert into ocs_mst_tsacontact2address(" +
                    " sacontact2address_gid," +
                    " sacontact_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " primary_status," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.addresstype_gid + "'," +
                    "'" + values.addresstype_name + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.landmark + "'," +
                    "'" + values.postal_code + "'," +
                    "'" + values.city + "'," +
                    "'" + values.taluka + "'," +
                    "'" + values.district + "'," +
                    "'" + values.state + "'," +
                    "'" + values.country + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Address Details Added Sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Address";
                return false;
            }

        }
        public void DaGetAddressList(string employee_gid, MdlSaOnboardAddress values)
        {
            msSQL = " select sacontact2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude," +
                    " postal_code from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardaddress_list = new List<saOnboardaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardaddress_list.Add(new saOnboardaddress_list
                    {
                        sacontact2address_gid = (dr_datarow["sacontact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString())

                    });
                }
                values.saOnboardaddress_list = getsaOnboardaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetAddressEditList(string sacontact_gid, MdlSaOnboardAddress values)
        {
            msSQL = " select sacontact2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude," +
                    " postal_code from ocs_mst_tsacontact2address where sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardaddress_list = new List<saOnboardaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardaddress_list.Add(new saOnboardaddress_list
                    {
                        sacontact2address_gid = (dr_datarow["sacontact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString())

                    });
                }
                values.saOnboardaddress_list = getsaOnboardaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetAddressTempList(string sacontact_gid, string employee_gid, MdlSaOnboardAddress values)
        {
            msSQL = " select sacontact2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude," +
                    " postal_code from ocs_mst_tsacontact2address where sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardaddress_list = new List<saOnboardaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardaddress_list.Add(new saOnboardaddress_list
                    {
                        sacontact2address_gid = (dr_datarow["sacontact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString())

                    });
                }
                values.saOnboardaddress_list = getsaOnboardaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaTempAddress(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteAddress(string sacontact2address_gid, MdlSaOnboardAddress values)
        {
            msSQL = "delete from ocs_mst_tsacontact2address where sacontact2address_gid='" + sacontact2address_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Address details deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the address";
                values.status = false;

            }
        }
        public void DaGetPostalCodeDetails(string postal_code, MdlSaOnboardAddress objMdlOnboardAddress)
        {
            try
            {
                msSQL = "select city,taluka,district, state from ocs_mst_tpostalcode where " +
                        " postalcode_value='" + postal_code + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        string country = "India";
                        objMdlOnboardAddress.city = (dr_datarow["city"].ToString());
                        objMdlOnboardAddress.taluka = (dr_datarow["taluka"].ToString());
                        objMdlOnboardAddress.district = (dr_datarow["district"].ToString());
                        objMdlOnboardAddress.state = (dr_datarow["state"].ToString());
                        objMdlOnboardAddress.country = country;
                    }

                }
                dt_datatable.Dispose();

                objMdlOnboardAddress.status = true;
            }
            catch
            {
                objMdlOnboardAddress.status = false;
            }

        }
      //Pan
        public bool DaPANForm60DocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;

            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation; 


                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("SAPF");
                        msSQL = " insert into ocs_mst_tsacontact2panform60(" +
                                " sacontact2panform60_gid," +
                                " sacontact_gid," +
                                " document_name," +
                                " document_path," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                "'" + lspath + msdocument_gid + FileExtension + "'," +
                                "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }
        public void DaPANForm60Delete(string sacontact2panform60_gid, MdlContactPANForm60sa values)
        {
            msSQL = "delete from ocs_mst_tsacontact2panform60 where sacontact2panform60_gid='" + sacontact2panform60_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Form-60 Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }
        public void DaGetPANForm60List(string employee_gid, MdlContactPANForm60sa values)
        {
            msSQL = "select sacontact2panform60_gid,document_name, document_path from ocs_mst_tsacontact2panform60 where " +
              " sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60sa_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60sa_list
                    {
                        sacontact2panform60_gid = (dr_datarow["sacontact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                    });

                    values.contactpanform60sa_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }

        }
        public void DaGetPANForm60EditList(string sacontact_gid, MdlContactPANForm60sa values)
        {
            msSQL = "select sacontact2panform60_gid,document_name, document_path from ocs_mst_tsacontact2panform60 where " +
              " sacontact_gid='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60sa_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60sa_list
                    {
                        sacontact2panform60_gid = (dr_datarow["sacontact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),

                    });

                    values.contactpanform60sa_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }

        }
        public void DaGetPANForm60TempList(string sacontact_gid, string employee_gid, MdlContactPANForm60sa values)
        {
            msSQL = "select sacontact2panform60_gid,document_name, document_path from ocs_mst_tsacontact2panform60 where " +
              " sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60sa_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60sa_list
                    {
                        sacontact2panform60_gid = (dr_datarow["sacontact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                    });

                    values.contactpanform60sa_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }

        }
        public void DaTempPanDoc(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsacontact2panform60  where sacontact_gid='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaPANAbsenceReasonList(MdlPANAbsenceReasonsa objMdlPANAbsenceReason)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tpanabsencereason";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getpanabsencereason_list = new List<panabsencereasonsa_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    objMdlPANAbsenceReason.panabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                      new panabsencereasonsa_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();
                objMdlPANAbsenceReason.status = true;
            }
            catch (Exception ex)
            {
                objMdlPANAbsenceReason.status = false;
            }

        }
        public void DaEditPANAbsenceReasonList(string sacontact_gid, MdlPANAbsenceReasonsa values)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tpanabsencereason";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var panabsencereason_existinglist = new List<panabsencereasonsa_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    values.panabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                     new panabsencereasonsa_list
                     {
                         panabsencereason = row["panabsencereason"].ToString(),
                     }
                   ).ToList();
                }
                dt_datatable.Dispose();

                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tsacontact2panabsencereason where sacontact_gid = '" + sacontact_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var panabsencereason_contactlist = new List<panabsencereasonsa_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    panabsencereason_contactlist = dt_datatable.AsEnumerable().Select(row =>
                      new panabsencereasonsa_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();

                for (var i = 0; i < values.panabsencereasonsa_list.Count; i++)
                {
                    for (var j = 0; j < panabsencereason_contactlist.Count; j++)
                    {
                        if (values.panabsencereasonsa_list[i].panabsencereason == panabsencereason_contactlist[j].panabsencereason)
                        {
                            values.panabsencereasonsa_list[i].check_status = true;
                            break;
                        }
                    }
                }

                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
            }

        }
        public void DaContactPANAbsenceReasonList(string sacontact_gid, string employee_gid, MdlPANAbsenceReasonsa objMdlPANAbsenceReason)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tsacontact2panabsencereason where sacontact_gid = '" + sacontact_gid + "' or sacontact_gid = '" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactpanabsencereason_list = new List<contactpanabsencereasonsa_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    objMdlPANAbsenceReason.contactpanabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                      new contactpanabsencereasonsa_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();
                objMdlPANAbsenceReason.status = true;
            }
            catch (Exception ex)
            {
                objMdlPANAbsenceReason.status = false;
            }

        }
        public void DaPostPANAbsenceReasons(MdlPANAbsenceReasonsa values, string employee_gid)
        {
            foreach (string reason in values.panabsencereason_selectedlist)
            {

                msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                        " sacontact2panabsencereason_gid," +
                        " sacontact_gid," +
                        " panabsencereason," +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetGid + "'," +
                        "'" + employee_gid + "'," +
                        "'" + reason + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                        "'" + employee_gid + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }

            if (mnResult == 1)
            {
                values.status = true;
                values.message = "PAN Absence Reasons submitted successfully...";
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
            }
        }
        public void DaPANReasonsCheck(MdlPANAbsenceReasonsa objMdlPANAbsenceReason, string employee_gid)
        {
            try
            {
                msSQL = " SELECT count(panabsencereason)" +
                   " from ocs_mst_tsacontact2panabsencereason" +
                   " where sacontact_gid='" + employee_gid + "'";

                string lspanabsencereason_count = objdbconn.GetExecuteScalar(msSQL);

                if (int.Parse(lspanabsencereason_count) > 0)
                {
                    objMdlPANAbsenceReason.status = true;
                }
                else
                {
                    objMdlPANAbsenceReason.status = false;
                }
            }
            catch (Exception ex)
            {
                objMdlPANAbsenceReason.status = false;
            }
        }
        //Edit
        public void DaIndividualDetailsEdit(string sacontact_gid, Individualedit values)
        {
            try
            {
                msSQL = " SELECT a.sacontact_gid,a.sa_reportingmanager,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as RM,a.confirmbankaccountnumber,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
                       " a.sa_firstname,a.sa_middlename,a.sa_lastname," +
                       " a.sa_pannumber,a.pan_status,a.sa_aadharnumber,a.sa_apputr,a.sa_appcrediteddate," +
                       " a.sa_appcreditedamount,a.saifsc_code,a.saaccountholder_name,a.saaccount_number,a.saveasdraftadd_flag,a.sacanccheque_number,a.individualsaveasdraft_flag," +
                       " a.sabank_name,a.sabranch_name,a.saaccountholder_name,(a.origination) as RecordSource," +
                       " a.micr,a.branch_address,a.city,a.district,a.state,a.referred_by,a.utr_no," +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_onboard_flag,a.created_by,a.created_date,a.rm_tagging,a.training_status,a.remarks, " + 
                       " a.assessmentagency_gid,a.assessmentagency_name,a.rejected_remarks," +
                       " a.assessmentagencyrating_gid, a.present_occupation, a.work_experience, a.Expagri_business ,a.assessmentagencyrating_name, a.ratingas_date,a.raisequery_flag,a.closeflag,gender FROM " +
                       " ocs_mst_tsacontact a" +
                      " left join hrm_mst_temployee b on a.created_by = b.employee_gid left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       //" left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                " where a.sacontact_gid = '" + sacontact_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.recordsource = (objODBCDatareader["RecordSource"].ToString());
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.closeflag = objODBCDatareader["closeflag"].ToString();
                    values.gender = objODBCDatareader["gender"].ToString();

                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }
                    values.raisequery_flag = objODBCDatareader["raisequery_flag"].ToString();
                    values.rm_tagging_view = objODBCDatareader["RM"].ToString();
                    values.training_status = objODBCDatareader["training_status"].ToString();
                    values.remarks = objODBCDatareader["remarks"].ToString();

                    values.sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                    values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                    values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                    values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                    values.pan_status = objODBCDatareader["pan_status"].ToString();

                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }
                    values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                    values.rejected_remarks = objODBCDatareader["rejected_remarks"].ToString();
                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_onboard_flag = objODBCDatareader["sa_onboard_flag"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();
                    values.present_occupation = objODBCDatareader["present_occupation"].ToString();
                    values.work_experience = objODBCDatareader["work_experience"].ToString();
                    values.Expagri_business = objODBCDatareader["Expagri_business"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public bool DaIndividualUpdate(string employee_gid, Individualedit values)
        {

            msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saprimary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Mobile Number";
                return false;
            }

            msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Mobile Number";
                return false;
            }
            msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Email";
                return false;
            }
            msSQL = "select sacontact2address_gid  from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Address";
                return false;
            }
            msSQL = "select saprospects_gid " + " from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Prospects";
                return false;
            }
            msSQL = "select sadocument_gid " + " from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Document";
                return false;
            }

            msSQL = " update ocs_mst_tsacontact set " +
                    " sa_firstname = ' " + values.sa_firstname + " '," +
                    " sa_middlename='" + values.sa_middlename + "'," +
                    " sa_lastname='" + values.sa_lastname + "'," +
                    " satype_gid='" + values.satype_gid + "'," +
                    " satype_name='" + values.satype_name + "',";
            if (Convert.ToDateTime(values.saappcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {              
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.saappcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }                     
            msSQL += " sa_pannumber='" + values.sa_pannumber + "'," +
                     " sa_aadharnumber='" + values.sa_aadharnumber + "'," +
                      " pan_status='" + values.pan_status + "'," +
                     " saentitytype_gid='" + values.saentitytype_gid + "'," +
                      " saentitytype_name='" + values.saentitytype_name + "'," +
                     " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +                                     
                     " saifsc_code='" + values.saifsc_code + "'," +
                     " saaccount_number='" + values.saaccount_number + "'," +
                        " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                      " saaccountholder_name='" + values.saaccountholder_name + "'," +
                     " sacanccheque_number='" + values.sacanccheque_number + "'," +
                     " sabranch_name='" + values.sabranch_name + "'," +
                     " sabank_name='" + values.sabank_name + "'," +
                     " sa_onboard_flag='Y'," +
                         " micr='" + values.micr + "'," +
                     " branch_address='" + values.branch_address + "'," +
                     " city='" + values.city + "'," +
                     " district='" + values.district + "'," +
                     " state='" + values.state + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                if (values.pan_status == "Customer Submitting Form 60")
                {
                    matchCount1 = 0;
                    matchCount2 = 0;

                    msSQL = " select panabsencereason from ocs_mst_tsacontact2panabsencereason" +
                            " where sacontact_gid='" + values.sacontact_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        values.contactpanabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                         new contactpanabsencereasonsa_list
                         {
                             panabsencereason = row["panabsencereason"].ToString(),
                         }
                       ).ToList();
                    }
                    dt_datatable.Dispose();
                    if (values.contactpanabsencereasonsa_list == null)
                    {
                        foreach (string reason in values.panabsencereason_selectedlist)
                        {
                            msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                            msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                    " sacontact2panabsencereason_gid," +
                                    " sacontact_gid," +
                                    " panabsencereason," +
                                    " created_date," +
                                    " created_by)" +
                                    " VALUES(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + reason + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                    "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    else
                    {
                        for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                        {
                            for (var j = 0; j < values.contactpanabsencereasonsa_list.Count; j++)
                            {
                                if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereasonsa_list[j].panabsencereason)
                                {
                                    matchCount1++;
                                }
                            }
                            if (matchCount1 == 0)
                            {
                                msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                        " sacontact2panabsencereason_gid," +
                                        " sacontact_gid," +
                                        " panabsencereason," +
                                        " created_date," +
                                        " created_by)" +
                                        " VALUES(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + values.panabsencereason_selectedlist[i] + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                        "'" + employee_gid + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            matchCount1 = 0;
                        }

                        for (var i = 0; i < values.contactpanabsencereasonsa_list.Count; i++)
                        {
                            for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                            {
                                if (values.contactpanabsencereasonsa_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                                {
                                    matchCount2++;
                                }
                            }
                            if (matchCount2 == 0)
                            {
                                msSQL = "delete from ocs_mst_tsacontact2panabsencereason where panabsencereason='" + values.contactpanabsencereasonsa_list[i].panabsencereason + "' and sacontact_gid = '" + values.sacontact_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            matchCount2 = 0;
                        }
                    }
                }

                    msGetGid = objcmnfunctions.GetMasterGID("SALO");

                msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
               " sacontactupdatelog_gid, " +
               " sacontact_gid, " +
               //" satype_gid," +
               // " satype_name," +
               // " saentitytype_gid," +
               // " saentitytype_name," +
               " sa_firstname," +
               " sa_middlename," +
               " sa_lastname," +            
               " sa_pannumber," +
               " sa_aadharnumber," +
               " updated_by," +
               " updated_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.sacontact_gid + "'," +
               //"'" + values.satype_gid + "'," +
               //"'" + values.satype_name + "'," +
               //"'" + values.saentitytype_gid + "'," +
               //"'" + values.saentitytype_name + "'," +
               "'" + values.sa_firstname + "'," +
                         "'" + values.sa_middlename + "'," +
                         "'" + values.sa_lastname + "'," +               
                         "'" + values.sa_pannumber + "'," +
                         "'" + values.sa_aadharnumber + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //Updates


                msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Company Details Updated Successfully";
                return true;
                //try
                //{
                //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                //    if (objODBCDatareader.HasRows == true)
                //    {
                //        ls_server = objODBCDatareader["pop_server"].ToString();
                //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                //        ls_username = objODBCDatareader["pop_username"].ToString();
                //        ls_password = objODBCDatareader["pop_password"].ToString();
                //    }
                //    objODBCDatareader.Close();
                //    msSQL = "select email_id from hrm_mst_tdepartment where department_name='Credit Administration'";
                //    tomail_id = objdbconn.GetExecuteScalar(msSQL);
                //    msSQL = " select  date_format(a.created_date, '%d-%m-%Y %h:%i:%s %p') as 'created_date'," +
                //    " concat(c.user_firstname, ' ', c.user_lastname, '/', c.user_code) as created_by" +
                //    " from ocs_mst_tbuyer a  left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                //    " left join adm_mst_tuser c on b.user_gid = c.user_gid  " +
                //    " where buyer_gid='" + values.buyer_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                //    if (objODBCDatareader.HasRows == true)
                //    {
                //        lscreatedby = objODBCDatareader["created_by"].ToString();
                //        lscreateddate = objODBCDatareader["created_date"].ToString();
                //    }
                //    objODBCDatareader.Close();
                //    sub = "Buyer ";
                //    body = "Dear Sir/Madam,  <br />";
                //    body = body + "<br />";
                //    body = body + "Greetings,  <br />";
                //    body = body + "<br />";
                //    body = body + "A New Buyer is Created By " + lscreatedby + "  On:" + lscreateddate + "<br />";
                //    body = body + "<br />";
                //    body = body + "<b>Thanks & Regards, </b> ";
                //    body = body + "<br />";
                //    body = body + "<b> Team Buyer ";
                //    body = body + "<br />";
                //    MailMessage message = new MailMessage();
                //    SmtpClient smtp = new SmtpClient();
                //    message.From = new MailAddress(ls_username);
                //    message.To.Add(new MailAddress(tomail_id));
                //    message.Subject = sub;
                //    message.IsBodyHtml = true; //to make message body as html  
                //    message.Body = body;
                //    smtp.Port = ls_port;
                //    smtp.Host = ls_server; //for gmail host  
                //    smtp.EnableSsl = true;
                //    smtp.UseDefaultCredentials = false;
                //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                //    //smtp.Send(message);
                //    values.status = true;
                //    return true;
                //}
                //catch (Exception ex)
                //{
                //    values.message = ex.ToString();
                //    values.status = false;
                //    return false;
                //}
            }

            else
            {
                values.status = false;
                values.message = "Error Occured While Updating Company";
                return false;
            }

        }
        //Submit
        public bool DaOnboardSubmit(string employee_gid, MdlMstSAOnboard values)
        {
            bool sta = false;
            try
            {
                //msSQL = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                //string reporting_name = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                   " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                   " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                   " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();


                //msSQL = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_name + "'";
                //string user_gid = objdbconn.GetExecuteScalar(msSQL);

                //msSQL = " select user_gid from adm_mst_tuser u " +
                // " where user_gid = '" + user_gid + "'";
                //string RMName = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select samobile_no " + " from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' and saprimary_status='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Primary Mobile Number";
                    return false;
                }

                msSQL = "select samobile_no " + " from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Mobile Number";
                    return false;
                }
                msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Email";
                    return false;
                }

                msSQL = "select sacontact2address_gid " + " from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Address";
                    return false;
                }
                msSQL = "select saprospects_gid " + " from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Prospects";
                    return false;
                }
                msSQL = "select sadocument_gid " + " from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Document";
                    return false;
                }
                //msSQL = "select * " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Add Atleast One Bureau";
                //}

                //msSQL = "select * " + " from ocs_mst_tsacontact2panform60 where sacontact_gid='" + employee_gid + "' and pan_status = 'Customer Submitting Form 60'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Add Atleast One Form 60 Document";
                //    return false;
                //}

                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_middlename))
                {
                    if (values.sa_middlename.Contains("'"))
                    {
                        values.sa_middlename = values.sa_middlename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }


                string lsind_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "NIN";
                string msGETRef = objcmnfunctions.GetMasterGID("INDI");
                msGETRef = msGETRef.Replace("INDI", "");

                lsind_refno = lsind_refno + lsref_name + msGETRef;

                msGetGid = objcmnfunctions.GetMasterGID("SAIN");
                //msGetGidREF = objcmnfunctions.GetMasterGID("SAC");
                MdlsaOnboardRM valuessa = new MdlsaOnboardRM();
                DaRMReportingManager(employee_gid, valuessa);

                msSQL = " insert into ocs_mst_tsacontact(" +
                        " sacontact_gid," +
                        " sa_autogeneratedid," +
                        " sa_reportingmanager," +
                        " reportingmanager_gid," +
                        " satype_gid," +
                        " saentitytype_gid," +
                        " satype_name," +
                        " saentitytype_name," +
                        " sa_firstname," +
                        " sa_middlename," +
                        " sa_lastname," +
                        " gender," +
                        " sa_pannumber," +
                        " pan_status, " +
                        " sa_aadharnumber," +
                        " sa_apputr," +
                        " sa_appcrediteddate," +
                        " sa_appcreditedamount," +
                        " saifsc_code," +
                         " micr," +
                        " branch_address," +
                        " city," +
                        " district," +
                        " state," +
                        " sa_onboard_flag," +
                        " saaccount_number," +
                        " confirmbankaccountnumber," +
                        " saaccountholder_name, " +
                        " sacanccheque_number, " +
                        " sabank_name, " +
                        " sabranch_name, " +
                        " approvalstatus, " +
                         " renewal_status, " +
                          " origination, " +
                        " onboardingindividual_flag,tagging_flag ,rm_tagging,update_flag," +
                        " assessmentagency_gid, " +
                        " assessmentagency_name, " +
                        " assessmentagencyrating_gid, " +
                        " assessmentagencyrating_name, " +
                        " ratingas_date, " +
                        " created_by, " +
                        " created_date,updated_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                       "'" + lsind_refno + "'," +
                        "'" + values.sa_reportingmanager + "', " +
                         "'" + reporting_to + "'," +
                        "'" + values.satype_gid + "'," +
                        "'" + values.saentitytype_gid + "'," +
                         "'" + values.satype_name + "'," +
                        "'" + values.saentitytype_name + "'," +
                        "'" + values.sa_firstname + "'," +
                        "'" + values.sa_middlename + "'," +
                        "'" + values.sa_lastname + "'," +
                        "'" + values.gender + "'," +
                        "'" + values.sa_pannumber + "'," +
                        "'" + values.pan_status + "'," +
                        "'" + values.sa_aadharnumber + "'," +
                            "'" + values.sa_apputr + "',";

                if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                msSQL += "'" + values.sa_appcreditedamount + "'," +
                         "'" + values.saifsc_code + "'," +
                            "'" + values.micr + "'," +
                       "'" + values.branch_address + "'," +

                       "'" + values.city + "'," +
                       "'" + values.district + "'," +
                       "'" + values.state + "'," +
                         "'" + "Y" + "'," +
                        "'" + values.saaccount_number + "'," +
                        "'" + values.confirmbankaccountnumber + "'," +
                        "'" + values.saaccountholder_name + "'," +
                        "'" + values.sacanccheque_number + "'," +
                        "'" + values.sabank_name + "'," +
                        "'" + values.sabranch_name + "'," +
                        "'" + values.approvalstatus + "'," +
                          "'" + "Contract Renewed" + "'," +
                            "'" + "Internal" + "'," +
                         "'" + "Y" + "'," +
                          "'" + "Y" + "'," +
                         "'" + employee_gid + "'," +
                         "'" + "Y" + "'," +
                          "'" + values.assessmentagency_gid + "'," +
                        "'" + values.assessmentagency_name + "'," +
                        "'" + values.assessmentagencyrating_gid + "'," +
                        "'" + values.assessmentagencyrating_name + "',";
                if ((values.ratingas_date == null) || (values.ratingas_date == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") + "', ";
                }
                msSQL += "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {

                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        // PAN Update
                        foreach (string reason in values.panabsencereason_selectedlist)
                        {
                            msGetGidpan = objcmnfunctions.GetMasterGID("SAPP");
                            msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                   " sacontact2panabsencereason_gid," +
                                   " sacontact_gid," +
                                   " panabsencereason," +
                                   " created_date," +
                                   " created_by)" +
                                   " VALUES(" +
                                   "'" + msGetGidpan + "'," +
                                   "'" + msGetGid + "'," +
                                   "'" + reason + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                   "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }

                    msGetGid1 = objcmnfunctions.GetMasterGID("SALO");

                    msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
                   " sacontactupdatelog_gid, " +
                   " sacontact_gid, " +
                   //" satype_gid," +
                   // " satype_name," +
                   // " saentitytype_gid," +
                   // " saentitytype_name," +
                   " sa_firstname," +
                   " sa_middlename," +
                   " sa_lastname," +                  
                   " sa_pannumber," +
                   " sa_aadharnumber," +
                   " sa_updated_by," +
                   " sa_updated_date)" +
                   " values (" +
                   "'" + msGetGid1 + "'," +
                   "'" + msGetGid + "'," +
                   //"'" + values.satype_gid + "'," +
                   //"'" + values.satype_name + "'," +
                   //"'" + values.saentitytype_gid + "'," +
                   //"'" + values.saentitytype_name + "'," +
                   "'" + values.sa_firstname + "'," +
                             "'" + values.sa_middlename + "'," +
                             "'" + values.sa_lastname + "'," +
                             "'" + values.sa_pannumber + "'," +
                             "'" + values.sa_aadharnumber + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    //Updates

                    msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    //msGetGid1 = objcmnfunctions.GetMasterGID("TEIN");

                    //string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    //string usergid = objdbconn.GetExecuteScalar(msql);


                    //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                    //          " where user_gid = '" + usergid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //if (objODBCDatareader.HasRows == true)
                    //{
                    //    tagName = objODBCDatareader["user_firstname"].ToString();
                    //}

                    //msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                    //      " taggedemployeeindividuallog_gid , " +
                    //      " sacontact_gid," +
                    //      " individualtaggedemployee_gid," +
                    //      " individualtaggedemployee_name," +
                    //      " approval_status," +
                    //      " created_by," +
                    //      " created_date) " +
                    //      " values (" +
                    //      " '" + msGetGid1 + "'," +
                    //       " '" + msGetGid + "'," +
                    //      " '" + employee_gid + "'," +
                    //      " '" + tagName + "'," +
                    //      " '" + "Pending BD Verification" + "'," +
                    //      " '" + employee_gid + "'," +
                    //      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                        //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                                " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                            " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                                   " sacontact_gid = '" + msGetGid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                               " where sacontact_gid = '" + msGetGid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                          "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                          "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);



                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }

                    //Mail Trigger

                    values.status = true;
                    sta = true;
                    values.message = "SBA onboarding details submitted successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error Occured While Submitting Onboard Entry";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;
        }
        public bool DaOnboardSubmitSaveasdraft(string employee_gid, MdlMstSAOnboard values)
        {
            bool sta = false;
            try
            {

                string lsind_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "NIN";
                string msGETRef = objcmnfunctions.GetMasterGID("INDI");
                msGETRef = msGETRef.Replace("INDI", "");

                lsind_refno = lsind_refno + lsref_name + msGETRef;

                msGetGid = objcmnfunctions.GetMasterGID("SAIN");
                //msGetGidREF = objcmnfunctions.GetMasterGID("SAC");
                MdlsaOnboardRM valuessa = new MdlsaOnboardRM();
                DaRMReportingManager(employee_gid, valuessa);

                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_middlename))
                {
                    if (values.sa_middlename.Contains("'"))
                    {
                        values.sa_middlename = values.sa_middlename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }


                msSQL = " insert into ocs_mst_tsacontact(" +
                        " sacontact_gid," +
                        " sa_autogeneratedid," +
                        " sa_reportingmanager," +
                        " satype_gid," +
                        " saentitytype_gid," +
                        " satype_name," +
                        " saentitytype_name," +
                        " sa_firstname," +
                        " sa_middlename," +
                        " sa_lastname," +
                        " sa_pannumber," +
                        " pan_status, " +
                        " sa_aadharnumber," +
                        " sa_apputr," +
                        " sa_appcrediteddate," +
                         " ratingas_date, " +
                        " sa_appcreditedamount," +
                        " saifsc_code," +
                         " micr," +
                        " branch_address," +
                          " gender," +
                        " city," +
                        " district," +
                        " state," +
                        " sa_onboard_flag," +
                        " saaccount_number," +
                        " confirmbankaccountnumber," +
                        " saaccountholder_name, " +
                        " sacanccheque_number, " +
                        " sabank_name, " +
                        " sabranch_name, " +
                        " approvalstatus, " +
                        " origination, " +
                        " renewal_status, " +
                        " onboardingindividual_flag,tagging_flag ,rm_tagging,update_flag," +
                        " assessmentagency_gid, " +
                        " assessmentagency_name, " +
                        " assessmentagencyrating_gid, " +
                        " assessmentagencyrating_name," +
                        " saveasdraftadd_flag, " +
                        " created_by, " +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                       "'" + lsind_refno + "'," +
                        "'" + values.sa_reportingmanager + "', " +
                        "'" + values.satype_gid + "'," +
                        "'" + values.saentitytype_gid + "'," +
                         "'" + values.satype_name + "'," +
                        "'" + values.saentitytype_name + "'," +
                        "'" + values.sa_firstname + "'," +
                        "'" + values.sa_middlename + "'," +
                        "'" + values.sa_lastname + "'," +
                        "'" + values.sa_pannumber + "'," +
                        "'" + values.pan_status + "'," +
                        "'" + values.sa_aadharnumber + "'," +
                            "'" + values.sa_apputr + "',";

                if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if ((values.ratingas_date == null) || (values.ratingas_date == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                msSQL += "'" + values.sa_appcreditedamount + "'," +
                         "'" + values.saifsc_code + "'," +
                            "'" + values.micr + "'," +
                       "'" + values.branch_address + "'," +
                        "'" + values.gender + "'," +
                       "'" + values.city + "'," +
                       "'" + values.district + "'," +
                       "'" + values.state + "'," +
                         "'" + "Y" + "'," +
                        "'" + values.saaccount_number + "'," +
                        "'" + values.confirmbankaccountnumber + "'," +
                        "'" + values.saaccountholder_name + "'," +
                        "'" + values.sacanccheque_number + "'," +
                        "'" + values.sabank_name + "'," +
                        "'" + values.sabranch_name + "'," +
                        "'" + values.approvalstatus + "'," +
                         "'" + "Internal" + "'," +
                         "'" + "Contract Renewed" + "'," +
                         "'" + "Y" + "'," +
                          "'" + "Y" + "'," +
                         "'" + employee_gid + "'," +
                         "'" + "N" + "'," +
                          "'" + values.assessmentagency_gid + "'," +
                        "'" + values.assessmentagency_name + "'," +
                        "'" + values.assessmentagencyrating_gid + "'," +
                        "'" + values.assessmentagencyrating_name + "'," +
                        "'" + "Y" + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {

                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        // PAN Update
                        foreach (string reason in values.panabsencereason_selectedlist)
                        {
                            msGetGidpan = objcmnfunctions.GetMasterGID("SAPP");
                            msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                   " sacontact2panabsencereason_gid," +
                                   " sacontact_gid," +
                                   " panabsencereason," +
                                   " created_date," +
                                   " created_by)" +
                                   " VALUES(" +
                                   "'" + msGetGidpan + "'," +
                                   "'" + msGetGid + "'," +
                                   "'" + reason + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                   "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    //Updates

                    msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    ////Mail Trigger
                    //try
                    //{
                    //    k = 1;

                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check

                    //    string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //    string reporting_to = objdbconn.GetExecuteScalar(msql);


                    //    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                    //            " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.created_by," +
                    //            " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                    //            " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                    //               " sacontact_gid = '" + msGetGid + "'";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        saUser = objODBCDatareader["user_firstname"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                    //      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                    //      "where b.employee_gid ='" + employee_gid + "'";
                    //    employeename = objdbconn.GetExecuteScalar(msSQL);



                    //    sub = "SBA Application submitted by RM";
                    //    body = "Dear Wellington,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lsind_refno + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + employeename;
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAtomail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                    //           " sacontactinstitution_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Intiated for Verification'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}
                    //catch (Exception ex)
                    //{

                    //}
                    ////Mail Trigger

                    values.status = true;
                    sta = true;
                    values.message = "SBA onboarding details save as draft added successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error Occured While Submitting Onboard Entry";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;
        }
       
        //Save
        public bool DaOnboardSave(string employee_gid, MdlMstSAOnboard values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SA");
            // msGetGidREF = objcmnfunctions.GetMasterGID("BBCH_");
            MdlsaOnboardRM valuessa = new MdlsaOnboardRM();
            DaRMReportingManager(employee_gid, valuessa);

            msSQL = " insert into ocs_mst_tsacontact(" +
                    " sacontact_gid," +
                    " sa_autogeneratedid," +
                    " sa_reportingmanager," +
                    " satype_gid," +
                    " saentitytype_gid," +
                    " sa_firstname," +
                    " sa_middlename," +
                    " sa_lastname," +
                    " sa_pannumber," +
                    " sa_aadharnumber," +
                    " sa_apputr," +
                    " sa_appcrediteddate," +
                    " sa_appcreditedamount," +
                    " saifsc_code," +
                    " sa_onboard_flag," +
                    " saaccount_number," +
                    " saaccountholder_name, " +
                    " sacanccheque_number, " +
                    " sabank_name, " +
                    " sabranch_name, " +
                    " created_by, " +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.sa_autogeneratedid + "'," +
                    "'" + values.sa_reportingmanager + "', " +
                    "'" + values.satype_gid + "'," +
                    "'" + values.saentitytype_gid + "'," +
                    "'" + values.sa_firstname + "'," +
                    "'" + values.sa_middlename + "'," +
                    "'" + values.sa_lastname + "'," +
                    "'" + values.sa_pannumber + "'," +
                    "'" + values.sa_aadharnumber + "'," +
                    "'" + values.sa_apputr + "',";

            if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL += "'" + values.sa_appcreditedamount + "'," +
                     "'" + values.saifsc_code + "'," +
                     "'" + "N" + "'," +
                    "'" + values.saaccount_number + "'," +
                    "'" + values.saaccountholder_name + "'," +
                    "'" + values.sacanccheque_number + "'," +
                    "'" + values.sabank_name + "'," +
                    "'" + values.sabranch_name + "'," +
                                        "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                //Updates

                msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Onboard Details Saved Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Saving Onboard Entry";
                return false;
            }

        }
        public void DaRMReportingManager(string employee_gid, MdlsaOnboardRM values)
        {
            
            try
            {
                //msql = "SELECT a.user_gid from adm_mst_tuser a ,hrm_mst_temployee e where e.user_gid=a.user_gid and  e.employee_gid='" + employee_gid + "'";
                //string user_gid = objdbconn.GetExecuteScalar(msql);

                //if (user_gid != null || user_gid != "")
                //{
                //    msSQL = " select concat(u.user_firstname,' | ',u.user_lastname) as user_firstname from adm_mst_tuser u ," +
                //            " hrm_mst_temployee e, adm_mst_tmodule2employee me where u.user_gid = e.user_gid and" +
                //            " e.employee_gid = me.employee_gid and me.module_gid = 'ITS' and" +
                //            " e.user_gid = '" + user_gid + "'";
                //    string RMName = objdbconn.GetExecuteScalar(msql);
                //    if (RMName != "null" || RMName != "")
                //    {
                //        var getSegmentRMName = new List<saRMReportingManagerList>();
                //        getSegmentRMName.Add(new saRMReportingManagerList
                //        {
                //            reporting_manager = RMName


                //        });
                //        values.saRMReportingManagerList = getSegmentRMName;
                //    }
                //}

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                     " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                     " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                     " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                     " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();

                if (RMName != "null" || RMName != "")
                {
                    var getSegmentRMName = new List<saRMReportingManagerList>();
                    getSegmentRMName.Add(new saRMReportingManagerList
                    {
                        reporting_manager = RMName
                    });
                    values.reporting_manager = RMName;
                }

            

            }
            catch
            {

            }
        }
        //Summary      
        public void DaGetOnboardSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.verify_flag ,a.raisequery_flag,a.update_flag, " + 
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate, " +
                        " saveasdraftadd_flag,(a.origination) as RecordSource," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                          " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                         " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus not in ('Approved','Rejected','BD Verification Rejected','Application Rejected') " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {                        
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            verify_flag = dr_datarow["verify_flag"].ToString(),
                            renewal_status = dr_datarow["Renewal_status"].ToString(),
                            update_flag = dr_datarow["update_flag"].ToString(),
                            saveasdraftadd_flag = (dr_datarow["saveasdraftadd_flag"].ToString()),
                            raisequery_flag = (dr_datarow["raisequery_flag"].ToString()),
                           // update_flag = (dr_datarow["update_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["submittedDate"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetOnboardCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = "";
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.verify_flag, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                         " where rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        if ((dr_datarow["verify_flag"].ToString()) == "")
                        {
                            flag = "N";
                        }
                        else
                        {
                            flag = dr_datarow["verify_flag"].ToString();
                        }
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            verify_flag = flag,


                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSAVerfiyPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                          " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where (a.checkermapping_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "' and a.makerindividual_flag = 'Y' and a.checkerindividual_flag = 'N' and a.approvalstatus not in ('Deferred'))" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }



        public void DaGetSAVerifyInitiatedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.approvalraise_flag,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid, " +
                        " a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.checkerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.checkerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.checkerapproved_date, now()), '60'), 'Mins') as tat  , " +
                        " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                         " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                         " (a.origination) as RecordSource," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                         " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                            " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                        " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                    " where a.checkerindividual_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "'" +
                        " order by (concat(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approvalinitiated_by = (dr_datarow["approvalinitiated_by"].ToString()),
                            approvalinitiated_date = (dr_datarow["approvalinitiated_date"].ToString()),
                            approvalraise_flag = (dr_datarow["approvalraise_flag"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),

                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        //Delete
        public void DaDeleteIndividual(string sacontact_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = "delete from ocs_mst_tsacontact where sacontact_gid='" + sacontact_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Individual Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Individual";
                values.status = false;

            }
        }
        //Cancelled cheque
        public bool DaSaInstCancelChequeUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsdocument_title = httpRequest.Form["document_title"].ToString();
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation; 

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("IDCC");

                        msSQL = " delete from ocs_mst_tindividualcancelchequeupload where sacontact_gid = '" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = " insert into ocs_mst_tindividualcancelchequeupload( " +
                                    " individualcancelchequeupload_gid, " +
                                    " sacontact_gid," +
                                    " document_name ," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Cheque Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured in uploading cheque document..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }
        public void DaGetSaChequeDocumentList(string employee_gid, MdlSaChequeDocument values)
        {
            msSQL = " select individualcancelchequeupload_gid ,document_name,document_path from ocs_mst_tindividualcancelchequeupload " +
                                 " where sacontact_gid ='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sachequedocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sachequedocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        individualcancelchequeupload_gid = dt["individualcancelchequeupload_gid"].ToString(),
                    });
                    values.sachequedocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaGetSaChequeDocumentEditList(string sacontact_gid, MdlSaChequeDocument values)
        {
            msSQL = " select individualcancelchequeupload_gid ,document_name,document_path from ocs_mst_tindividualcancelchequeupload " +
                                 " where sacontact_gid ='" + sacontact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sachequedocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sachequedocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        individualcancelchequeupload_gid = dt["individualcancelchequeupload_gid"].ToString(),
                    });
                    values.sachequedocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaChequeDocumentDelete(string individualcancelchequeupload_gid, MdlChequeDocument values)
        {
            msSQL = "delete from ocs_mst_tindividualcancelchequeupload where individualcancelchequeupload_gid='" + individualcancelchequeupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }
        //Verification
        public void DaApprovalInitated(string employee_gid, MdlMstIndividualApprovalList values)
        {

            msSQL = " select count(*) as openquery from ocs_mst_tcheckerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and checkerindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            if (values.openquerycount == "0")
            {

                msSQL = "select bureauname_gid " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Bureau";
                }

                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload Atleast One Mail Document ";
                //    }
                //}
                msSQL = "select samobile_no " + " from ocs_mst_tsacontact2mobileno where (sacontact_gid ='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "' ) and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Mobile Number/Add Atleast One Primary Status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where (sacontact_gid ='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Email ID /Add Atleast One Primary Status";
                    return;
                }
                msSQL = "select sacontact2address_gid " + " from ocs_mst_tsacontact2address where (sacontact_gid ='" + values.sacontact_gid + "'or sacontact_gid='" + employee_gid + "') and primary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Address Details";
                    return;
                }
                //msSQL = "select * " + " from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Kindly Upload Atleast One Document ";
                //    return false;
                //}


                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_middlename))
                {
                    if (values.sa_middlename.Contains("'"))
                    {
                        values.sa_middlename = values.sa_middlename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }
                msSQL = " SELECT date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date, " +
                        " date_format(agreementexecutiondate,'%d-%m-%Y') as agreementexecutiondate,date_format(agreementexpirydate,'%d-%m-%Y') as agreementexpirydate,date_format(agroagreementexecutiondate,'%d-%m-%Y') as agroagreementexecutiondate,date_format(agroagreementexpirydate,'%d-%m-%Y') as agroagreementexpirydate from ocs_mst_tsacontact " +
                       " where sacontact_gid ='" + values.sacontact_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();
                    Edit_agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
                    Edit_agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
                    Edit_agroagreementexecutiondate = objODBCDatareader["agroagreementexecutiondate"].ToString();
                    Edit_agroagreementexpirydate = objODBCDatareader["agroagreementexpirydate"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " update  ocs_mst_tsacontact set " +
                     " interviewevalution = '" + values.interviewevalution + "'," +
                        " applicationform = '" + values.applicationform + "'," +
                        " kycdocuments = '" + values.kycdocuments + "'," +
                        " vettingstatus = '" + values.vettingstatus + "'," +
                        " addressproof = '" + values.addressproof + "'," +
                        " photographs = '" + values.photographs + "'," +
                        " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                       " satype_gid='" + values.satype_gid + "'," +
                       " satype_name='" + values.satype_name + "'," +
                " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_firstname='" + values.sa_firstname + "'," +
                " sa_middlename='" + values.sa_middlename + "'," +
                " sa_lastname='" + values.sa_lastname + "'," +
                 " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

                //if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agreementexpirydate == Convert.ToString(values.agreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agroagreementexecutiondate == Convert.ToString(values.agroagreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agroagreementexpirydate == Convert.ToString(values.agroagreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")

                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                         " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                         " verificationremarks = '" + values.verificationremarks + "'," +
                          " checkerapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                      "  approvalstatus =  'Approver Pending' ," +
                      "  approvalinitated_flag = 'Y'," +
                      "  checkerindividual_flag = 'Y'," +
                      " approvalinitiated_by='" + employee_gid + "'," +
                      " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                      " where sacontact_gid='" + values.sacontact_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsaindividualmaildocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    msSQL = "update ocs_mst_tsaindividualverifydocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    msSQL = "select agreementsubrenewal_date from ocs_mst_tsacontact " +
                              " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsagreementrenewal_date = objODBCDatareader["agreementsubrenewal_date"].ToString();

                    }

                    objODBCDatareader.Close();

                    if (!(String.IsNullOrEmpty(lsagreementrenewal_date)))

                    {
                        msSQL = "update ocs_mst_tsacontact set agreementrenewal_date = '" + Convert.ToDateTime(lsagreementrenewal_date).AddYears(1).ToString("yyyy-MM-dd HH:mm") + "' where sacontact_gid='" + values.sacontact_gid + "' ";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                       

                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                         " where sacontact_gid = '" + values.sacontact_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();


                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename, " +
                            " i.sa_reportingmanager,i.individualchecker_name,i.sa_autogeneratedid,i.individualmaker_name, " +
                            " group_concat(distinct i.reportingmanager_gid)  as tomembers,group_concat(distinct i.individualchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = " SBA Onboarding approval required";
                        body = "Dear " + HttpUtility.HtmlEncode(lssa_reportingmanager) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "SBA Onboarding approval is required. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Checker verified date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Checker name :</b> " + HttpUtility.HtmlEncode(lsinstitutionchecker_name) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to approve the onboarding details";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(lsuser_firstname);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "SBA onboarding checker approved successfully";
                }
            }
            else
            {


                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }

        }

        public void DaCheckerApprovalEdit(string employee_gid, MdlMstIndividualApprovalList values)
        {

            msSQL = " select count(*) as openquery from ocs_mst_tcheckerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and checkerindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            if (values.openquerycount == "0")
            {

                msSQL = "select bureauname_gid " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Bureau";
                }

                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload Atleast One Mail Document ";
                //    }
                //}
                msSQL = "select samobile_no " + " from ocs_mst_tsacontact2mobileno where (sacontact_gid ='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "' ) and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Mobile Number/Add Atleast One Primary Status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where (sacontact_gid ='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Email ID /Add Atleast One Primary Status";
                    return;
                }
                msSQL = "select sacontact2address_gid " + " from ocs_mst_tsacontact2address where (sacontact_gid ='" + values.sacontact_gid + "'or sacontact_gid='" + employee_gid + "') and primary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Address Details";
                    return;
                }
                //msSQL = "select * " + " from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Kindly Upload Atleast One Document ";
                //    return false;
                //}

                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_middlename))
                {
                    if (values.sa_middlename.Contains("'"))
                    {
                        values.sa_middlename = values.sa_middlename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }
                msSQL = " SELECT date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date, " +
                       " date_format(agreementexecutiondate,'%d-%m-%Y') as agreementexecutiondate,date_format(agreementexpirydate,'%d-%m-%Y') as agreementexpirydate,date_format(agroagreementexecutiondate,'%d-%m-%Y') as agroagreementexecutiondate,date_format(agroagreementexpirydate,'%d-%m-%Y') as agroagreementexpirydate from ocs_mst_tsacontact " +
                      " where sacontact_gid ='" + values.sacontact_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();
                    Edit_agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
                    Edit_agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
                    Edit_agroagreementexecutiondate = objODBCDatareader["agroagreementexecutiondate"].ToString();
                    Edit_agroagreementexpirydate = objODBCDatareader["agroagreementexpirydate"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " update  ocs_mst_tsacontact set " +
                     " interviewevalution = '" + values.interviewevalution + "'," +
                        " applicationform = '" + values.applicationform + "'," +
                        " kycdocuments = '" + values.kycdocuments + "'," +
                        " vettingstatus = '" + values.vettingstatus + "'," +
                        " addressproof = '" + values.addressproof + "'," +
                        " photographs = '" + values.photographs + "'," +
                        " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                       " satype_gid='" + values.satype_gid + "'," +
                       " satype_name='" + values.satype_name + "'," +
                " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_firstname='" + values.sa_firstname + "'," +
                " sa_middlename='" + values.sa_middlename + "'," +
                " sa_lastname='" + values.sa_lastname + "'," +
                 " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

                //if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.saappcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.saappcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
               
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agreementexpirydate == Convert.ToString(values.agreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agroagreementexecutiondate == Convert.ToString(values.agroagreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agroagreementexpirydate == Convert.ToString(values.agroagreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                         " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                         " verificationremarks = '" + values.verificationremarks + "'," +
                      //"  approvalstatus =  'Checker Verified' ," +
                      "  approvalinitated_flag = 'Y'," +
                      "  checkerindividual_flag = 'Y'," +
                      " approvalinitiated_by='" + employee_gid + "'," +
                      " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                      " where sacontact_gid='" + values.sacontact_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsaindividualmaildocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    msSQL = "update ocs_mst_tsaindividualverifydocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "SBA onboarding checker approved successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }

        }
        //public void DaApprovalInitatedDetail(string sacontact_gid, Individualedit values)
        //{
        //    try
        //    {
        //        msSQL = " SELECT a.sacontact_gid,a.sa_reportingmanager,a.sa_autogeneratedid,a.approval_flag,a.confirmbankaccountnumber,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
        //               " a.sa_firstname,a.sa_middlename,a.sa_lastname," +
        //               " a.sa_pannumber,a.pan_status,a.sa_aadharnumber,a.sa_apputr,a.sa_appcrediteddate," +
        //               " a.sa_appcreditedamount,a.saifsc_code,a.saaccountholder_name,a.saaccount_number,a.sacanccheque_number, " +
        //               " a.sabank_name,a.sabranch_name,a.saaccountholder_name," +
        //                " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement," +
        //                "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
        //                  " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,a.agreementexecutiondate,a.agreementexpirydate," +
        //                  "  a.agreementstatus,a.bookletnumber,a.verificationremarks,a.approvalinitated_flag,a.individualsaveasdraft_flag," +
        //                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
        //                 " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus, " +
        //               " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_onboard_flag FROM " +
        //               " ocs_mst_tsacontact a" +
        //              " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
        //           " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
        //             " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
        //               " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
        //               " where a.sacontact_gid = '" + sacontact_gid + "' ";
        //        objODBCDatareader = objdbconn.GetDataReader(msSQL);
        //        if (objODBCDatareader.HasRows == true)
        //        {

        //            values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
        //            values.applicationform = objODBCDatareader["applicationform"].ToString();
        //            values.yearsitreturns = objODBCDatareader["yearsitreturns"].ToString();
        //            values.bankstatement = objODBCDatareader["bankstatement"].ToString();
        //            values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
        //            values.prospect = objODBCDatareader["prospect"].ToString();
        //            values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
        //            values.scannedcopyreception = objODBCDatareader["scannedcopyreception"].ToString();
        //            values.addressproof = objODBCDatareader["addressproof"].ToString();
        //            values.photographs = objODBCDatareader["photographs"].ToString();
        //            values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
        //            values.houseofficeverification = objODBCDatareader["houseofficeverification"].ToString();

        //            values.agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
        //            values.agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
        //            values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
        //            values.bookletnumber = objODBCDatareader["bookletnumber"].ToString();
        //            values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
        //            values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
        //            values.approval_flag = objODBCDatareader["approval_flag"].ToString();

        //            values.sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
        //            values.satype_name = objODBCDatareader["satype_name"].ToString();
        //            values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
        //            values.satype_gid = objODBCDatareader["satype_gid"].ToString();
        //            values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
        //            values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

        //            values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
        //            values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
        //            values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
        //            values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
        //            values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
        //            values.pan_status = objODBCDatareader["pan_status"].ToString();

        //            if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
        //            }

        //            if (objODBCDatareader["created_date"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["approved_date"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
        //            }
        //            values.approved_by = objODBCDatareader["approved_by"].ToString();
        //            values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
        //            values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();
        //            values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
        //            values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
        //            values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();

        //            values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
        //            values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
        //            values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
        //            values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
        //            values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
        //            values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
        //            values.sabank_name = objODBCDatareader["sabank_name"].ToString();
        //            values.sa_onboard_flag = objODBCDatareader["sa_onboard_flag"].ToString();
        //            values.sa_updated_by = objODBCDatareader["created_by"].ToString();
        //            values.individualsaveasdraft_flag = objODBCDatareader["individualsaveasdraft_flag"].ToString();
        //            //values.sa_updated_date = objODBCDatareader["updated_date"].ToString();

        //        }
        //        values.status = true;
        //        values.message = "success";
        //        objODBCDatareader.Close();
        //    }
        //    catch
        //    {
        //        values.status = false;
        //        values.message = "failure";
        //    }
        //}
        public bool DaPostSABureauInstitution(string employee_gid, MdlSACICIndividual values)
        {

            msSQL = "select individualsabureaudocumentupload_gid " + " from ocs_mst_tindividualsabureaudocumentupload where saindividual2bureau_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Document";
                return false;
            }
            // Document Attachments
            //msSQL = "select document_name from ocs_tmp_tcicdocument where created_by='" + employee_gid + "'";
            //lsdocument_name = objdbconn.GetExecuteScalar(msSQL);
            //msSQL = "select document_path from ocs_tmp_tcicdocument where created_by='" + employee_gid + "'";
            //lsdocument_path = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("SABI");
            msSQL = " insert into ocs_mst_tsaindividual2bureau(" +
                   " saindividual2bureau_gid ," +
                   " sacontact_gid," +
                   " bureauname_gid," +
                   " bureauname_name," +               
                   " bureau_score," +
                   " bureauscore_date," +
                   " bureau_response," +
                   " observations," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.bureauname_gid + "'," +
                   "'" + values.bureauname_name + "'," +                 
                   "'" + values.bureau_score + "',";

            if (values.bureauscore_date == null || values.bureauscore_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.bureauscore_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }          
            msSQL += "'" + values.bureau_response.Replace("'", "") + "'," +
                      "'" + values.observations.Replace("'", "") + "'," +
                      "'" + employee_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tindividualsabureaudocumentupload set saindividual2bureau_gid='" + msGetGid + "' where saindividual2bureau_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tindividual2cicdocumentupload set contact2bureau_gid='" + msGetGid + "' where contact2bureau_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tcontact2tuhighriskalert set contact_gid='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tcontact2tuhighriskalert set contact2bureau_gid='" + msGetGid + "' where contact2bureau_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit score added for Individual successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";
                return false;
            }

        }
        public void DaGetSABureauInstitutionList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            //if (sacontact_gid == null || sacontact_gid == "")
            //{
            //    msSQL = "select saindividual2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsaindividual2bureau where " +
            //            " sacontact_gid='" + employee_gid + "'";

            //}
            //else
            //{
            //    msSQL = "select saindividual2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsaindividual2bureau where " +
            //      " sacontact_gid='" + sacontact_gid + "' or  sacontact_gid='" + employee_gid + "'";
            //}
            msSQL = "select saindividual2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsaindividual2bureau where " +
                      " sacontact_gid='" + sacontact_gid + "'";

           dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsainstitutebureau_list = new List<sainstitutebureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsainstitutebureau_list.Add(new sainstitutebureau_list
                    {
                        saindividual2bureau_gid = (dr_datarow["saindividual2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.sainstitutebureau_list = getsainstitutebureau_list;
            dt_datatable.Dispose();
        }
        public void DaGetSABureauIndividualTempList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = "select saindividual2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsaindividual2bureau where " +
              " sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsainstitutebureau_list = new List<sainstitutebureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsainstitutebureau_list.Add(new sainstitutebureau_list
                    {
                        saindividual2bureau_gid = (dr_datarow["saindividual2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.sainstitutebureau_list = getsainstitutebureau_list;
            dt_datatable.Dispose();
        }
        public void DaSABureauView(string saindividual2bureau_gid, MdlSACICIndividual values)
        {
            try
            {
                msSQL = " select saindividual2bureau_gid, bureauname_gid,bureauname_name, bureau_score, date_format(bureauscore_date,'%d-%m-%Y') as bureauscore_date," +
                    " observations, bureau_response" +
                    " from ocs_mst_tsaindividual2bureau where saindividual2bureau_gid='" + saindividual2bureau_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.bureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.observations = objODBCDatareader["observations"].ToString();
                    values.bureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.bureauscore_date = objODBCDatareader["bureauscore_date"].ToString();
                    values.saindividual2bureau_gid = objODBCDatareader["saindividual2bureau_gid"].ToString();                   
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();

            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaDeleteContactBureau(string saindividual2bureau_gid, string employee_gid, MdlContactBureau values)
        {
            msSQL = "delete from ocs_mst_tsaindividual2bureau where saindividual2bureau_gid='" + saindividual2bureau_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Bureau Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }
        //document
        public bool DaSaInstitutionDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT count(*) FROM ocs_tmp_tcicdocument where created_by = '" + employee_gid + "' ";
            string count = objdbconn.GetExecuteScalar(msSQL);

            int counts = Convert.ToInt32(count);

            if (counts < 1)
            {

                msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                //  path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
                path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                {
                    if ((!System.IO.Directory.Exists(path)))
                        System.IO.Directory.CreateDirectory(path);
                }

                try
                {
                    if (httpRequest.Files.Count > 0)
                    {
                        string lsfirstdocument_filepath = string.Empty;
                        httpFileCollection = httpRequest.Files;
                        for (int i = 0; i < httpFileCollection.Count; i++)
                        {
                            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                            httpPostedFile = httpFileCollection[i];
                            string FileExtension = httpPostedFile.FileName;
                            string lsfile_gid = msdocument_gid;
                            FileExtension = Path.GetExtension(FileExtension).ToLower();
                            lsfile_gid = lsfile_gid + FileExtension;
                            Stream ls_readStream;
                            ls_readStream = httpPostedFile.InputStream;
                            MemoryStream ms = new MemoryStream();
                            ls_readStream.CopyTo(ms);

                            // Check Document validation; 

                            byte[] bytes = ms.ToArray();

                            if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                            {

                                objfilename.message = "File format is not supported";

                                return false;

                            }
                            // Check Document validation; 

                            //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                            //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                            //ms.WriteTo(file);
                            //file.Close();
                            //ms.Close();
                            //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                            bool status;
                            status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                            ms.Close();
                            lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                            msGetGid = objcmnfunctions.GetMasterGID("SABD");
                            msSQL = " insert into ocs_mst_tindividualsabureaudocumentupload( " +
                                        " individualsabureaudocumentupload_gid, " +
                                        " saindividual2bureau_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + httpPostedFile.FileName + "'," +
                                        "'" + lspath + msdocument_gid + FileExtension + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            if (mnResult == 1)
                            {
                                objfilename.status = true;
                                objfilename.message = "Document Uploaded Successfully..!";
                            }
                            else
                            {
                                objfilename.status = false;
                                objfilename.message = "Error Occured..!";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    objfilename.message = ex.ToString();
                }

            }
            else
            {
                objfilename.message = "Only One file should Upload..!";
            }
            return true;
        }
        public void DaSAUploadIndividualDocList(string saindividual2bureau_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select individualsabureaudocumentupload_gid,saindividual2bureau_gid,document_name,document_path from ocs_mst_tindividualsabureaudocumentupload " +
                                 " where saindividual2bureau_gid='" + saindividual2bureau_gid + "' or saindividual2bureau_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        saindividual2bureau_gid = dt["saindividual2bureau_gid"].ToString(),
                        individualsabureaudocumentupload_gid = dt["individualsabureaudocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSAUploadIndDocList(string saindividual2bureau_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select individualsabureaudocumentupload_gid,saindividual2bureau_gid,document_name,document_path from ocs_mst_tindividualsabureaudocumentupload " +
                                 " where saindividual2bureau_gid='" + saindividual2bureau_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {


                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();


                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        saindividual2bureau_gid = dt["saindividual2bureau_gid"].ToString(),
                        individualsabureaudocumentupload_gid = dt["individualsabureaudocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempBureauDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tindividualsabureaudocumentupload where saindividual2bureau_gid ='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            msSQL = "delete from ocs_mst_tsaindividual2bureau where sacontact_gid ='" + employee_gid + "' or length(sacontact_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaTempChequeDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tindividualcancelchequeupload where sacontact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        public void DaTempBureau(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaindividual2bureau where sacontact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteBureauDocuments(string individualsabureaudocumentupload_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tindividualsabureaudocumentupload where individualsabureaudocumentupload_gid='" + individualsabureaudocumentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "Bureau Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }

        //Approval
        public void DaGetApprovalPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                        " CONCAT(FLOOR(timestampdiff(day, a.checkerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.checkerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.checkerapproved_date, now()), '60'), 'Mins') as tat  ,  " +
                        " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                        " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                        " (a.origination) as RecordSource," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                        " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y' and checkerindividual_flag = 'Y' and a.finalindividualapproval_flag = 'N'" +
                        " and a.reportingmanager_gid='" + employee_gid + "'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approvalinitiated_by = (dr_datarow["approvalinitiated_by"].ToString()),
                            approvalinitiated_date = (dr_datarow["approvalinitiated_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSaApprovalInitiateSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved','Rejected') and a.reportingmanager_gid='" + employee_gid +" '" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }

        public void DaGetApprovalInitiateSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalstatus ='Approved' " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetRejectedInitiateSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat , " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalstatus='Rejected'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaPostApprove(string employee_gid, MdlApproveind values)
        {


            msSQL = " select count(*) as openquery from ocs_mst_tapproverindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and approverindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            logforAudit("------ query count" + values.openquerycount + " -------");

            if (values.openquerycount == "0")
            {
                logforAudit("------ Enter the approved case" + values.openquerycount + " -------");


                msSQL = " update ocs_mst_tsacontact set approvalstatus='" + values.approval_status + "',";
                if (values.remarks == "" || values.remarks == null)
                {
                    msSQL += " approval_remarks='',";
                }
                else
                {
                    msSQL += " approval_remarks='" + values.remarks.Replace("'", "") + "',";
                }
                msSQL += " approved_by='" + employee_gid + "'," +
                    " approval_flag ='Y'," +
                     " renewal_flag ='Y'," +
                     " finalindividualapproval_flag ='Y'," +
                      " finalapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " approved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                        " where  sacontact_gid='" + values.sacontact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                logforAudit("------ update query" + msSQL + " -------");
                logforAudit("------ mnresult" + mnResult + " -------");


                if (mnResult != 0)
                {

                    msSQL = "select code_created_flag,sa_autogeneratedid,concat(sa_firstname,' ',sa_middlename,' ',sa_lastname) as sa_associatename from ocs_mst_tsacontact  where sacontact_gid ='" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    logforAudit("------ objdatareader status " + objODBCDatareader.HasRows + " -------");

                    if (objODBCDatareader.HasRows == true)
                    {
                        codecreated_flag = objODBCDatareader["code_created_flag"].ToString();
                        lssaautogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lssa_associatename = objODBCDatareader["sa_associatename"].ToString();

                    }
                    objODBCDatareader.Close();

                    
                    msGetGidLog = objcmnfunctions.GetMasterGID("ICCL");
                    msSQL = " insert into  ocs_mst_tinstitutioncodecreatedlog(" +
                             "institutioncodecreatedlog_gid, " +
                             "individual_gid, " +
                             "codecreated_flag, " +
                             "created_by, " +
                             "created_date) " +
                             " values(" +
                             "'" + msGetGidLog + "'," +
                             "'" + values.sacontact_gid + "', " +
                             "'" + codecreated_flag + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ mnresult codecreatedlog " + mnResult + " -------");

                    logforAudit("------ codecreatedflag " + codecreated_flag + " -------");

                    if (codecreated_flag == "Y")
                    {

                        values.status = true;
                        values.message = "Final approval approved Successfully";
                        return;

                    }

                    string lsind_refno = "SAI";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");
                    lsind_refno = lsind_refno + msGETRef;
                    string fincode = lsind_refno;

                    string lsind_ref = "SAI";
                    lsind_ref = lsind_ref + msGETRef;
                    string agrocode = lsind_ref;

                    defPass = "Welcome@123";

                    msGetGid = objcmnfunctions.GetMasterGID("SBAL");
                    msSQL = "insert into ocs_mst_tsaloginsbauser(sbauser_gid,sa_autogeneratedid,samfin_code,samagro_code,sbauser_password, " +
                           " created_by,created_date,active,web_active) values ('" + msGetGid + "','" + lssaautogeneratedid + "','" + fincode + "', " +
                           " '" + agrocode + "','" + objcmnfunctions.ConvertToAscii(defPass) + "','" + employee_gid + "', " +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','Y')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ ocs_mst_tsaloginsbauser mnresult " + msSQL + " -------");


                    msGetAPICode = objcmnfunctions.GetApiMasterGID("ASSO");


                    msSQL = " update ocs_mst_tsacontact set samfin_code='" + fincode + "', samagro_code='" + agrocode + "', api_code='" + msGetAPICode + "'," +
                       " code_created_by='" + employee_gid + "',code_created_flag='Y',renewal_flag='Y',codecreation_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' " +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ samfin code mnresult " + mnResult + " -------");
                    logforAudit("------ samfin code " + fincode + " -------");

                    msGetGidAssociate = objcmnfunctions.GetMasterGID("MSAM");
                    msSQL = " insert into ocs_mst_tassociatemaster(" +
                            " associatemaster_gid," +
                            " api_code," +
                            " name," +
                            " associate_code," +
                            " status," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGidAssociate + "'," +
                            "'" + msGetAPICode + "'," +
                            "'" + lssa_associatename + "'," +
                            "'" + fincode + "'," +
                            "'Yes'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ ocs_mst_tassociatemaster mnresult " + mnResult + " -------");
                    
                    values.message = "Final approval approved Successfully";
                    values.status = true;

                    //Mail Trigger
                    //try
                    //{
                    //    k = 1;

                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check




                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                    //    " where sacontact_gid = '" + values.sacontact_gid + "'";
                    //    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                    //            " where sacontact_gid = '" + values.sacontact_gid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    //    }

                    //    objODBCDatareader.Close();


                    //    msSQL = "select sacontact_gid,i.sa_reportingmanager,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.individualchecker_name,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.reportingmanager_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                    //  " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                    //         " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                    //         " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                    //          " sacontact_gid = '" + values.sacontact_gid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        lsinstitutionchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                    //        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                    //        //lsto2members = objODBCDatareader["tomembers"].ToString();
                    //        lscc2members = objODBCDatareader["cc2members"].ToString();
                    //        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                    //        lscreated_date = objODBCDatareader["created_date"].ToString();
                    //        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    //    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                    //            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    sub = " SBA Code to be created";
                    //    body = "Dear sir/madam,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "New SBA has been approved. Please create SBA codes and confirm.  The details are as follows,<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b>  Approved date:</b> " + lscreated_date + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Approver name :</b> " + HttpUtility.HtmlEncode(lssa_reportingmanager) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + HttpUtility.HtmlEncode(lsuser_firstname);
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAfinalapprovalmail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingindiApprovalmailcount( " +
                    //           " sacontact_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Approved'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}
                    //catch (Exception ex)
                    //{

                    //}
                    //Mail Trigger

                }
            }
            else
            {
                values.status = false;
                values.message = "Approval Can't be done,the query is still open";
            }
        }
        public void DaPostRejected(string employee_gid, MdlApproveind values)
        {


            msSQL = " select count(*) as openquery from ocs_mst_tapproverindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and approverindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsacontact set approvalstatus='" + values.approval_status + "',";
                if (values.remarks == "" || values.remarks == null)
                {
                    msSQL += " approval_remarks='',";
                }
                else
                {
                    msSQL += " approval_remarks='" + values.remarks.Replace("'", "") + "',";
                }
                msSQL += " approved_by='" + employee_gid + "'," +
                    " approval_flag ='Y'," +
                     " finalindividualapproval_flag ='Y'," +
                       " approved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " finalapproved_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                        " where  sacontact_gid='" + values.sacontact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                       


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,group_concat(b.saemail_address) as tomembers ,group_concat(i.created_by) as cc2members ,i.created_by," +
                                 " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                 " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                 " join ocs_mst_tsacontact2mobileno c on c.sacontact_gid = i.sacontact_gid " +
                                  " join ocs_mst_tsacontact2email b on b.sacontact_gid = i.sacontact_gid where " +
                                    " i.sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiApprovalmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger
                    values.status = true;
                    values.message = "Rejected successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }
        //MAIL APPROVAL
        public bool DaSaMailDocument(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT count(*) FROM ocs_tmp_tcicdocument where created_by = '" + employee_gid + "' ";
            string count = objdbconn.GetExecuteScalar(msSQL);

            int counts = Convert.ToInt32(count);

            if (counts < 1)
            {

                msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                //  path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
                path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                {
                    if ((!System.IO.Directory.Exists(path)))
                        System.IO.Directory.CreateDirectory(path);
                }

                try
                {
                    if (httpRequest.Files.Count > 0)
                    {
                        string lsfirstdocument_filepath = string.Empty;
                        httpFileCollection = httpRequest.Files;
                        for (int i = 0; i < httpFileCollection.Count; i++)
                        {
                            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                            httpPostedFile = httpFileCollection[i];
                            string FileExtension = httpPostedFile.FileName;
                            string lsfile_gid = msdocument_gid;
                            FileExtension = Path.GetExtension(FileExtension).ToLower();
                            lsfile_gid = lsfile_gid + FileExtension;
                            Stream ls_readStream;
                            ls_readStream = httpPostedFile.InputStream;
                            MemoryStream ms = new MemoryStream();
                            ls_readStream.CopyTo(ms);
                            // Check Document validation; 

                            byte[] bytes = ms.ToArray();

                            if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                            {

                                objfilename.message = "File format is not supported";

                                return false;

                            }
                            //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                            //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                            //ms.WriteTo(file);
                            //file.Close();
                            //ms.Close();
                            //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                            bool status;
                            status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                            ms.Close();
                            lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/MailIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                            msGetGid = objcmnfunctions.GetMasterGID("MAID");
                            msSQL = " insert into ocs_mst_tsaindividualmaildocument( " +
                                        " saindividualmaildocument_gid, " +
                                        " sacontact_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + httpPostedFile.FileName + "'," +
                                        "'" + lspath + msdocument_gid + FileExtension + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            if (mnResult == 1)
                            {
                                objfilename.status = true;
                                objfilename.message = "Document Uploaded Successfully..!";
                            }
                            else
                            {
                                objfilename.status = false;
                                objfilename.message = "Error Occured..!";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    objfilename.message = ex.ToString();
                }

            }
            else
            {
                objfilename.message = "Only One file should Upload..!";
            }
            return true;
        }
        public void DaSAMailDocumentTempList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select saindividualmaildocument_gid,sacontact_gid,document_name,document_path from ocs_mst_tsaindividualmaildocument " +
                                 " where sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontact_gid = dt["sacontact_gid"].ToString(),
                        saindividualmaildocument_gid = dt["saindividualmaildocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSAMailDocumentList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select saindividualmaildocument_gid,sacontact_gid,document_name,document_path from ocs_mst_tsaindividualmaildocument " +
                                 " where sacontact_gid='" + sacontact_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontact_gid = dt["sacontact_gid"].ToString(),
                        saindividualmaildocument_gid = dt["saindividualmaildocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempSAMailDocument(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteSAMailDocument(string saindividualmaildocument_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaindividualmaildocument where saindividualmaildocument_gid='" + saindividualmaildocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "Mail Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }

        //Verification Doc
        public bool DaSaVerifyDocument(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            //  path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation; 

                        //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                        //ms.WriteTo(file);
                        //file.Close();
                        //ms.Close();
                        //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        msGetGid = objcmnfunctions.GetMasterGID("VDDO");
                        msSQL = " insert into ocs_mst_tsaindividualverifydocument(" +
                                " saindividualverifydocument_gid," +
                                " sacontact_gid," +
                                " document_title ," +
                                " document_name," +
                                //" sadocument_id," +
                                " document_path," +
                                " created_by,created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                  //"'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }
        public void DaSaVerifyDocumentTempList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select saindividualverifydocument_gid,sacontact_gid,document_title,document_name,document_path from ocs_mst_tsaindividualverifydocument " +
                                 " where sacontact_gid='" + sacontact_gid + "' or sacontact_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontact_gid = dt["sacontact_gid"].ToString(),
                        saindividualverifydocument_gid = dt["saindividualverifydocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSaVerifyDocumentList(string sacontact_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select saindividualverifydocument_gid,sacontact_gid,document_title,document_name,document_path from ocs_mst_tsaindividualverifydocument " +
                                 " where sacontact_gid='" + sacontact_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontact_gid = dt["sacontact_gid"].ToString(),
                        saindividualverifydocument_gid = dt["saindividualverifydocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempSaVerifyDocument(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteSaVerifyDocument(string saindividualverifydocument_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsaindividualverifydocument where saindividualverifydocument_gid='" + saindividualverifydocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "Mail Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }
        public void DaGetSAVerfiyMakerIndividualPending(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " CONCAT(FLOOR(timestampdiff(day, a.pendingassignment_date, now())), ' days ',MOD(timestampdiff(hour, a.pendingassignment_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.pendingassignment_date, now()), '60'), 'Mins') as tat, " +
                           " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   " where (a.makermapping_flag = 'Y' and a.individualmaker_gid='" + employee_gid + "' and a.makerindividual_flag = 'N' and approvalstatus not in ('Deferred'))" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSAVerfiyindividualPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.makermapping_flag,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.pendingassignment_date, now())), ' days ',MOD(timestampdiff(hour, a.pendingassignment_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.pendingassignment_date, now()), '60'), 'Mins') as tat,  " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y' and a.finalindividualapproval_flag = 'N'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            mapping_flag = (dr_datarow["makermapping_flag"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSAVerfiyindividualMappingPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.makermapping_flag,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.verify_date, now())), ' days ',MOD(timestampdiff(hour, a.verify_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.verify_date, now()), '60'), 'Mins') as tat,   " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.verify_flag = 'Y' and a.approvalmapping_flag = 'N' and approvalstatus not in ('BD Verification Rejected')" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            mapping_flag = (dr_datarow["makermapping_flag"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSAVerifyMakerIndividualInitiatedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid, " +
                        " a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat , " +
                        " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                         " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                         " (a.origination) as RecordSource," +
                          " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                            " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                        " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                         " where a.makerindividual_flag = 'Y'and a.individualmaker_gid='" + employee_gid + "' and approvalstatus not in ('Deferred')" +
                        " order by (concat(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approvalinitiated_by = (dr_datarow["approvalinitiated_by"].ToString()),
                            approvalinitiated_date = (dr_datarow["approvalinitiated_date"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),

                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaCreateSAmappingLog(string sacontact_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " SELECT a.sacontact_gid,samappingassignindividuallog_gid,a.individualmaker_name,a.individualchecker_name,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " FROM ocs_mst_tsamappingassignindividuallog a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.sacontact_gid ='" + sacontact_gid + "' order by a.samappingassignindividuallog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsamappingassign_list = new List<samappingassign_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsamappingassign_list.Add(new samappingassign_list
                        {
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            samappingassignindividuallog_gid = (dr_datarow["samappingassignindividuallog_gid"].ToString()),
                            individualmaker_name = (dr_datarow["individualmaker_name"].ToString()),
                            individualchecker_name = (dr_datarow["individualchecker_name"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    values.samappingassign_list = getsamappingassign_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaCreateSAMapping(MdlsaOnboardSummary values, string employee_gid)
        {           
                msSQL = " update ocs_mst_tsacontact set " +
                        " individualmaker_gid='" + values.employee_gid + "'," +
                        " individualmaker_name='" + values.employee_name + "'," +
                        " individualchecker_gid='" + values.checkeremployee_gid + "'," +
                       " individualchecker_name='" + values.checkeremployee_name + "'," +
                      " checkermapping_flag = 'Y'," +
                      " approvalmapping_flag = 'Y'," +
                       " pendingassignment_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    " approvalstatus = 'Maker Pending'," +
                       " makermapping_flag = 'Y'" +
                        " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            
               
            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ADIL");

                msSQL = " insert into ocs_mst_tsamappingassignindividuallog (" +
                      " samappingassignindividuallog_gid , " +
                      " sacontact_gid," +
                      " individualmaker_gid," +
                      " individualmaker_name," +
                      " individualchecker_gid," +
                      " individualchecker_name," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                       " '" + values.sacontact_gid + "'," +
                      " '" + values.employee_gid + "'," +
                      " '" + values.employee_name + "'," +
                      " '" + values.checkeremployee_gid + "'," +
                      " '" + values.checkeremployee_name + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Maker and Checker assigned  successfully";
                try
                {
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details
                    //msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct a.institutionmaker_gid, ',', a.institutionchecker_gid)  as tomembers ,i.created_by," +
                    //        " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                    //        " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                    //           " sacontact_gid = '" + values.sacontactinstitution_gid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.individualmaker_gid)  as tomembers,group_concat(distinct i.individualchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                       "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                       "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = " An SBA Application (maker) is assigned to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }



        }
        public void DaCreateSAMappingAssignment(MdlsaOnboardSummary values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsacontact set " +
                    " individualmaker_gid='" + values.employee_gid + "'," +
                    " individualmaker_name='" + values.employee_name + "'," +
                    " individualchecker_gid='" + values.checkeremployee_gid + "'," +
                   " individualchecker_name='" + values.checkeremployee_name + "'," +
                  " checkermapping_flag = 'Y'," +
                  " approvalmapping_flag = 'Y'," +
                   " makermapping_flag = 'Y'" +
                    " where sacontact_gid='" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ADIL");

                msSQL = " insert into ocs_mst_tsamappingassignindividuallog (" +
                      " samappingassignindividuallog_gid , " +
                      " sacontact_gid," +
                      " individualmaker_gid," +
                      " individualmaker_name," +
                      " individualchecker_gid," +
                      " individualchecker_name," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                       " '" + values.sacontact_gid + "'," +
                      " '" + values.employee_gid + "'," +
                      " '" + values.employee_name + "'," +
                      " '" + values.checkeremployee_gid + "'," +
                      " '" + values.checkeremployee_name + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Maker and Checker assigned  successfully";
                try
                {
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details
                    //msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct a.institutionmaker_gid, ',', a.institutionchecker_gid)  as tomembers ,i.created_by," +
                    //        " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                    //        " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                    //           " sacontact_gid = '" + values.sacontactinstitution_gid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.individualmaker_gid)  as tomembers,group_concat(distinct i.individualchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                       "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                       "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = " An SBA Application (maker) is assigned to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }



        }

        public void DaMakerIndividualInitated(string employee_gid, MdlMstIndividualApprovalList values)
        {

            msSQL = " select count(*) as openquery from ocs_mst_tmakerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and makerindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = "select bureauname_gid " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast Credit Score";
                    return;

                }

                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload Atleast One Mail Document ";
                //        return;

                //    }
                //}
                msSQL = "select samobile_no " + " from ocs_mst_tsacontact2mobileno where (sacontact_gid ='" + employee_gid + "' or  sacontact_gid ='" + values.sacontact_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Mobile Number/Add Atleast One Primary Status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where (sacontact_gid ='" + employee_gid + "' or  sacontact_gid ='" + values.sacontact_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Email ID /Add Atleast One Primary Status";
                    return;
                }
                msSQL = "select sacontact2address_gid " + " from ocs_mst_tsacontact2address where (sacontact_gid ='" + employee_gid + "' or  sacontact_gid ='" + values.sacontact_gid + "') and primary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Address Details";
                    return;
                }

                //msSQL = "select * " + " from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Kindly Upload Atleast One Document ";
                //    return false;
                //}
                msSQL = " SELECT date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date FROM " +                      
                        " ocs_mst_tsacontact where sacontact_gid ='" + values.sacontact_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();
                  
                }
                objODBCDatareader.Close();

                msSQL = " update  ocs_mst_tsacontact set " +

                        " interviewevalution = '" + values.interviewevalution + "'," +
                          " applicationform = '" + values.applicationform + "'," +
                         " kycdocuments = '" + values.kycdocuments + "'," +
                         " vettingstatus = '" + values.vettingstatus + "'," +
                          " addressproof = '" + values.addressproof + "'," +
                           " photographs = '" + values.photographs + "'," +
                       " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                     " satype_gid='" + values.satype_gid + "'," +
                     " satype_name='" + values.satype_name + "'," +
                " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_firstname='" + values.sa_firstname + "'," +
                " sa_middlename='" + values.sa_middlename + "'," +
                " sa_lastname='" + values.sa_lastname + "'," +
                  " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
            " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";


                if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                      " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                      " verificationremarks = '" + values.verificationremarks + "' ," +
                        " makerapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                      "  approvalstatus =  'Checker Pending' ," +
                      "  approvalinitated_flag = 'Y'," +
                     "  makerindividual_flag = 'Y'," +
                      " approvalinitiated_by='" + employee_gid + "'," +
                      " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                      " where sacontact_gid='" + values.sacontact_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsaindividualmaildocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividualverifydocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,i.sa_reportingmanager,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.sa_autogeneratedid,i.individualmaker_name,i.individualchecker_name,group_concat(distinct i.individualchecker_gid)  as tomembers,group_concat(distinct i.individualmaker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                     " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                             " sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                            lsinstitutionchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                    "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                    "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = " An SBA Application (checker) is assigned to you";
                        body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionchecker_name) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Maker verified date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Maker name :</b> " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to Approve the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "SBA Onboarding maker approved Successfully";
                }
            }
            else
            {

                values.status = false;
                values.message = "Approval Can't be done,the query is still open";
            }

        }
        //public void DaMakerIndividualsaveasdraftInitated(string employee_gid, MdlMstIndividualApprovalList values)
        //{


        //        msSQL = "select * " + " from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "'";
        //        objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //        if (objODBCDatareader.HasRows == false)
        //        {
        //            values.status = false;
        //            values.message = "Add Atleast One Bureau";
        //        }

        //        if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
        //        {
        //            msSQL = "select * " + " from ocs_mst_tsaindividualmaildocument where sacontact_gid='" + employee_gid + "'";
        //            objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //            if (objODBCDatareader.HasRows == false)
        //            {
        //                values.status = false;
        //                values.message = "Upload Atleast One Mail Document ";
        //            }
        //        }

        //        //msSQL = "select * " + " from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + employee_gid + "'";
        //        //objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //        //if (objODBCDatareader.HasRows == false)
        //        //{
        //        //    values.status = false;
        //        //    values.message = "Kindly Upload Atleast One Document ";
        //        //    return false;
        //        //}

        //        msSQL = " update  ocs_mst_tsacontact set " +

        //                " interviewevalution = '" + values.interviewevalution + "'," +
        //                  " applicationform = '" + values.applicationform + "'," +
        //               " yearsitreturns = '" + values.yearsitreturns + "'," +
        //               " bankstatement = '" + values.bankstatement + "'," +
        //                 " kycdocuments = '" + values.kycdocuments + "'," +
        //                  " prospect = '" + values.prospect + "'," +
        //                 " vettingstatus = '" + values.vettingstatus + "'," +
        //                " scannedcopyreception = '" + values.scannedcopyreception + "'," +
        //                  " addressproof = '" + values.addressproof + "'," +
        //                   " photographs = '" + values.photographs + "'," +
        //               " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
        //                " houseofficeverification = '" + values.houseofficeverification + "'," +
        //             " satype_gid='" + values.satype_gid + "'," +
        //             " satype_name='" + values.satype_name + "'," +
        //        " saentitytype_gid='" + values.saentitytype_gid + "'," +
        //         " saentitytype_name='" + values.saentitytype_name + "'," +
        //        " sa_firstname='" + values.sa_firstname + "'," +
        //        " sa_middlename='" + values.sa_middlename + "'," +
        //        " sa_lastname='" + values.sa_lastname + "'," +
        //        " saifsc_code='" + values.saifsc_code + "'," +
        //        " saaccount_number='" + values.saaccount_number + "'," +
        //         " saaccountholder_name='" + values.saaccountholder_name + "'," +
        //        " sacanccheque_number='" + values.sacanccheque_number + "'," +
        //        " sabranch_name='" + values.sabranch_name + "'," +
        //        " sabank_name='" + values.sabank_name + "',";


        //        if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //        {

        //        }
        //        else
        //        {
        //            msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        }
        //        if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //        {

        //        }
        //        else
        //        {
        //            msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        }
        //        msSQL += " agreementstatus = ' " + values.agreementstatus + " '," +
        //              " bookletnumber = ' " + values.bookletnumber + " '," ApprovalInitated
        //              " verificationremarks = ' " + values.verificationremarks + " '," +
        //              //"  approvalstatus =  'Individual Maker Approved' ," +
        //              //"  approvalinitated_flag = 'Y'," +
        //             " individualsaveasdraft_flag = 'Y'," +
        //              " approvalinitiated_by='" + employee_gid + "'," +
        //              " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
        //              " where sacontact_gid='" + values.sacontact_gid + "' ";

        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        if (mnResult != 0)
        //        {
        //            msSQL = "update ocs_mst_tsaindividualmaildocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
        //            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


        //            msSQL = "update ocs_mst_tsaindividualverifydocument set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
        //            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


        //            values.status = true;
        //            values.message = "SA Onboarding Saveas Draft Added Successfully";
        //        }
        //    }

        public void DaGetAssignedInformation(string sacontact_gid, MdlMstIndividualApprovalList values)
        {
            try
            {
                msSQL = " SELECT a.individualmaker_gid, a.individualmaker_name,a.individualchecker_gid,individualchecker_name " +
                        " FROM ocs_mst_tsacontact a where sacontact_gid='" + sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.employee_name = objODBCDatareader["individualmaker_name"].ToString();
                    values.checkeremployee_name = objODBCDatareader["individualchecker_name"].ToString();

                }
                objODBCDatareader.Close();


            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }
        public void DaPostMakerIndividualRaiseQuery(Mdlmakerindividualraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MAID");
            msSQL = "Insert into ocs_mst_tmakerindividualraisequery( " +
                   " makerindividualraisequery_gid, " +
                   " sacontact_gid," +
                   " query_title, " +
                   " query_description," +
                   " makerindividualraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontact_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {
                    msSQL = " update ocs_mst_tsacontact set raisequery_flag = 'Y' ,closeflag='Y',approvalstatus='Query Raised by Maker' " +
                          " where sacontact_gid = '" + values.sacontact_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Query Raised  Successfully";
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised ";
                    body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Maker  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";                  
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                values.status = true;
                values.message = "Error Occur While Adding";
            }
        }

        public void DaGetMakerIndividualRaiseQuery(string sacontact_gid, Mdlmakerindividualraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontact_gid,a.makerindividualraisequery_gid,a.query_title,a.query_description,a.makerindividualraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tmakerindividualraisequery a " +
                     " left join ocs_mst_tsacontact b on a.sacontact_gid = b.sacontact_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontact_gid = '" + sacontact_gid + "' group by makerindividualraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmakerindividualraisequery_list = new List<makerindividualraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmakerindividualraisequery_list.Add(new makerindividualraisequery_list
                    {
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        makerindividualraisequery_gid = (dr_datarow["makerindividualraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        makerindividualraisequery_status = (dr_datarow["makerindividualraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.makerindividualraisequery_list = getmakerindividualraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostMakerIndividualresponsequery(Mdlmakerindividualraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tmakerindividualraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " makerindividualraisequery_status='Closed' " +
                   " where makerindividualraisequery_gid='" + values.makerindividualraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try
                {
                    msSQL = "select makerindividualraisequery_status from ocs_mst_tmakerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "' " +
                               " and makerindividualraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        raisequery_flag = "Y";
                        approvalstatus = "Query Raised by Maker";
                    }
                    else
                    {
                        raisequery_flag = "N";
                        approvalstatus = "Maker Pending";
                    }
                                       
                    msSQL = " update ocs_mst_tsacontact set raisequery_flag = '" + raisequery_flag + "' ,approvalstatus ='" + approvalstatus + "' " +
                    " where sacontact_gid = '" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Query closed successfully..!";

                k = 1;

                msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    ls_server = objODBCDatareader["pop_server"].ToString();
                    ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    ls_username = objODBCDatareader["pop_username"].ToString();
                    ls_password = objODBCDatareader["pop_password"].ToString();
                }
                objODBCDatareader.Close();
                string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                sToken = "";
                int Length = 100;
                for (int j = 0; j < Length; j++)
                {
                    string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    sToken += sTempChars;
                }

                k = k + 1;
                //RM Name-need to check



                //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                //Mail Template Details


                msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name, " +
                        " group_concat(distinct i.individualmaker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                  " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                         " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                         " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                          " sacontact_gid = '" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                    lsto2members = objODBCDatareader["tomembers"].ToString();
                    lscc2members = objODBCDatareader["cc2members"].ToString();
                    lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                    lscreated_date = objODBCDatareader["created_date"].ToString();
                    lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                }

                objODBCDatareader.Close();

                msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                   " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                //string reporting_to = objdbconn.GetExecuteScalar(msql);


                msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                        " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                  "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                  "where b.employee_gid ='" + employee_gid + "'";
                employeename = objdbconn.GetExecuteScalar(msSQL);

                sub = "SBA Onboarding Query Closed";
                body = "Dear  " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                body = body + "<br />";
                body = body + "SBA Onboarding a query has been closed. The details are as follows, <br />";
                body = body + "<br />";
                body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                body = body + "<br />";
                body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                body = body + "<br />";             
                body = body + "<b> Level:</b> Maker  <br />";
                body = body + "<br />";               
                body = body + "<b> Query Closed by:</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                body = body + "<br />";
                body = body + "<br />";
                body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                body = body + "<br />";              
                body = body + "<br />";
                body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                MailMessage message = new MailMessage();
                SmtpClient smtp = new SmtpClient();
                message.From = new MailAddress(ls_username);
                //message.To.Add(new MailAddress(lsto_mail));


                lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                {
                    lsBCCReceipients = lsBccmail_id.Split(',');
                    if (lsBccmail_id.Length == 0)
                    {
                        message.Bcc.Add(new MailAddress(lsBccmail_id));
                    }
                    else
                    {
                        foreach (string BCCEmail in lsBCCReceipients)
                        {
                            message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                        }
                    }
                }

                if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                {
                    lsToReceipients = lsto_mail.Split(',');
                    if (lsto_mail.Length == 0)
                    {
                        message.To.Add(new MailAddress(lsto_mail));
                    }
                    else
                    {
                        foreach (string ToEmail in lsToReceipients)
                        {
                            message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                        }
                    }
                }

                if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                {
                    lsCCReceipients = cc_mailid.Split(',');
                    if (cc_mailid.Length == 0)
                    {
                        message.CC.Add(new MailAddress(cc_mailid));
                    }
                    else
                    {
                        foreach (string CCEmail in lsCCReceipients)
                        {
                            message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                        }
                    }
                }

                message.Subject = sub;
                message.IsBodyHtml = true; //to make message body as html  
                message.Body = body;
                smtp.Port = ls_port;
                smtp.Host = ls_server; //for gmail host  
                smtp.EnableSsl = true;
                smtp.UseDefaultCredentials = false;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.Send(message);

                values.status = true;

                if (values.status == true)
                {
                    msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                       " sacontact_gid," +
                       " from_mail," +
                       " to_mail," +
                       " cc_mail," +
                       " mail_status," +
                       " mail_senddate, " +
                       " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + employee_gid + "'," +
                       "'" + lsto_mail + "'," +
                       "'" + cc_mailid + "'," +
                       "'SA Onboarding Intiated for Approval'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

            }
                catch (Exception ex)
            {
            }
        }
            else
            {
               
                values.status = false;
                values.message = "Error Occured..!";
            }

        }
        public void DaPostCheckerIndividualRaiseQuery(mdlcheckerindividualraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("CHID");
            msSQL = "Insert into ocs_mst_tcheckerindividualraisequery( " +
                   " checkerindividualraisequery_gid, " +
                   " sacontact_gid," +
                   " query_title, " +
                   " query_description," +
                   " checkerindividualraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontact_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try { 
                msSQL = " update ocs_mst_tsacontact set raisequery_flag = 'Y',closeflag='Y',approvalstatus='Query Raised by Checker' " +
                     " where sacontact_gid = '" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Query Raised  Successfully";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised";
                    body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Checker  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";                   
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            
        }
            else
            {
                values.status = true;
                values.message = "Error Occur While Adding";
            }
        }

        public void DaGetCheckerIndividualRaiseQuery(string sacontact_gid, mdlcheckerindividualraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontact_gid,a.checkerindividualraisequery_gid,a.query_title,a.query_description,a.checkerindividualraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tcheckerindividualraisequery a " +
                     " left join ocs_mst_tsacontact b on a.sacontact_gid = b.sacontact_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontact_gid = '" + sacontact_gid + "'  group by checkerindividualraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcheckerindividualraisequery_list = new List<checkerindividualraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcheckerindividualraisequery_list.Add(new checkerindividualraisequery_list
                    {
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        checkerindividualraisequery_gid = (dr_datarow["checkerindividualraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        checkerindividualraisequery_status = (dr_datarow["checkerindividualraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.checkerindividualraisequery_list = getcheckerindividualraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostCheckerIndividualresponsequery(mdlcheckerindividualraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tcheckerindividualraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " checkerindividualraisequery_status='Closed' " +
                   " where checkerindividualraisequery_gid='" + values.checkerindividualraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try {
                    msSQL = "select checkerindividualraisequery_status from ocs_mst_tcheckerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "' " +
                               " and checkerindividualraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        raisequery_flag = "Y";
                        approvalstatus = "Query Raised by Checker";
                    }
                    else
                    {
                        raisequery_flag = "N";
                        approvalstatus = "Checker Pending";
                    }

                    msSQL = " update ocs_mst_tsacontact set raisequery_flag = '" + raisequery_flag + "' ,approvalstatus ='" + approvalstatus + "' " +
                    " where sacontact_gid = '" + values.sacontact_gid + "' ";

                   mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Query Closed Successfully..!";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,i.individualchecker_name,group_concat(distinct i.individualchecker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsindividualchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Closed";
                    body = "Dear " + HttpUtility.HtmlEncode(lsindividualchecker_name) + ", />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been closed. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";                 
                    body = body + "<b> Level:</b> Checker  <br />";
                    body = body + "<br />";                 
                    body = body + "<b> Query Closed by :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";                
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                
                values.status = false;
                values.message = "Error Occured..!";
            }

        }
        public void DaPostApproverIndividualRaiseQuery(Mdlapproverindividualraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("APID");
            msSQL = "Insert into ocs_mst_tapproverindividualraisequery( " +
                   " approverindividualraisequery_gid, " +
                   " sacontact_gid," +
                   " query_title, " +
                   " query_description," +
                   " approverindividualraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontact_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try { 
                msSQL = " update ocs_mst_tsacontact set approvalraise_flag = 'Y',approvalstatus='Query Raised by Approver'" +
                       " where sacontact_gid = '" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Query Raised  Successfully";
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,i.individualchecker_name,group_concat(distinct i.individualchecker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsindividualchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised";
                    body = "Dear " + HttpUtility.HtmlEncode(lsindividualchecker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Approver  <br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";               
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }

            }
            else
            {
                values.status = true;
                values.message = "Error Occur While Adding";
            }
        }


        public void DaGetApproverIndividualRaiseQuery(string sacontact_gid, Mdlapproverindividualraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontact_gid,a.approverindividualraisequery_gid,a.query_title,a.query_description,a.approverindividualraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tapproverindividualraisequery a " +
                     " left join ocs_mst_tsacontact b on a.sacontact_gid = b.sacontact_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontact_gid = '" + sacontact_gid + "'group by approverindividualraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapproverindividualraisequery_list = new List<approverindividualraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getapproverindividualraisequery_list.Add(new approverindividualraisequery_list
                    {
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        approverindividualraisequery_gid = (dr_datarow["approverindividualraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        approverindividualraisequery_status = (dr_datarow["approverindividualraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.approverindividualraisequery_list = getapproverindividualraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostApproverIndividualresponsequery(Mdlapproverindividualraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tapproverindividualraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " approverindividualraisequery_status='Closed' " +
                   " where approverindividualraisequery_gid='" + values.approverindividualraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try
                {
                    msSQL = "select approverindividualraisequery_status from ocs_mst_tapproverindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "' " +
                              " and approverindividualraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        raisequery_flag = "Y";
                        approvalstatus = "Query Raised by Approver";
                    }
                    else
                    {
                        raisequery_flag = "N";
                        approvalstatus = "Approver Pending";
                    }
                    msSQL = " update ocs_mst_tsacontact set approvalraise_flag = '" + raisequery_flag + "',approvalstatus ='" + approvalstatus + "' " +
                                 " where sacontact_gid = '" + values.sacontact_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Query Closed Successfully..!";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Closed";
                    body = "Dear Sir/Madam<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been closed. The details are as follows, <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Closed by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";                  
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }

        }
        public void DaGetSaPendingAssignmentCounts(string employee_gid, geSaOnboardingCount values)
        { 
        msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.verify_flag = 'Y' and a.approvalmapping_flag = 'N' " +
                " and approvalstatus not in ('BD Verification Rejected') order by a.created_date desc)  AS Institution_Count, " +
                " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.verify_flag = 'Y' and a.approvalmapping_flag = 'N'  " + "" +
                " and approvalstatus not in ('BD Verification Rejected') order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
        values.individual_count = objODBCDatareader["Individual_Count"].ToString();
    }
    objODBCDatareader.Close();
        }
        public void DaGetSaAssignmentCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' order by a.created_date desc) AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y' and a.finalindividualapproval_flag = 'N' order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaApprovedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalstatus='Approved' )  AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus='Approved') As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaMakerCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.makermapping_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "'and a.makerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.makerinstitution_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makermapping_flag = 'Y' and a.individualmaker_gid='" + employee_gid + "' and a.makerindividual_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As Individual_Count, " +
           " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.makerrejected_flag ='Y' and a.approvalstatus = 'Deferred' order by a.created_date desc) As Institutiontrash_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makerrejected_flag ='Y' and a.approvalstatus = 'Deferred' order by a.created_date desc) As Individualtrash_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makerindividual_flag = 'Y'and a.individualmaker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
                values.individualtrash_count = objODBCDatareader["Individualtrash_Count"].ToString();
                values.institutiontrash_count = objODBCDatareader["Institutiontrash_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaCheckerCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.checkermapping_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.makerinstitution_flag = 'Y' and a.checkerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.checkerinstitution_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkermapping_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "' and a.makerindividual_flag = 'Y' and a.checkerindividual_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.checkerrejected_flag ='Y' and a.approvalstatus ='Deferred' order by a.created_date desc) As Institutiontrash_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkerrejected_flag ='Y' and a.approvalstatus ='Deferred' order by a.created_date desc) As Individualtrash_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkerindividual_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
                values.individualtrash_count = objODBCDatareader["Individualtrash_Count"].ToString();
                values.institutiontrash_count = objODBCDatareader["Institutiontrash_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaApproverCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalinitated_flag = 'Y' and a.checkerinstitution_flag = 'Y' " +
                   " and a.finalinstitutionapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' order by " +
            " a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y' and checkerindividual_flag = 'Y' and " +
            " a.finalindividualapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y'  and a.approval_flag = 'Y' and a.approvalstatus ='Approved' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaFutureDateCheck(string date, MdlsaOnboardSummary values)
        {
            try
            {
                DateTime documentdate = DateTime.Parse(Convert.ToDateTime(date).ToShortDateString());
                DateTime nowdate = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd"));

                if (documentdate > nowdate)
                {
                    values.status = false;
                    values.message = "Future Date is Not Allowed...";
                }
                else
                {
                    values.status = true;
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Kindly select valid Date...";
            }

        }


        public string DaGetEntityDefaultID(string employee_gid)
        {
            string msql, entityID=string.Empty;
            try
            {
                msql = "Select saentitytype_gid from ocs_mst_tsaentitytype where saentitytype_name='Proprietorship' and satype_name='Individual'";
                entityID = objdbconn.GetExecuteScalar(msql);


            }
            catch
            {

            }
            return entityID;
        }
        public void DaGetCodecreationIndividualSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                //msSQL = "select created_date,next_renewal_date from ocs_mst_tsacontact where approvalstatus='Approved' and next_renewal_date != ''";
                //dt_datatable = objdbconn.GetDataTable(msSQL);

                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {
                //        String sDate = DateTime.Now.ToString();
                //        DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));
                //        String lscurrentdate = datevalue.ToString("yyyy-MM-dd");

                //        DateTime next_renewal_date = (Convert.ToDateTime(dr_datarow["next_renewal_date"].ToString()));
                //        String lsnextrenewaldatealert = next_renewal_date.ToString("yyyy-MM-dd");

                //        if (lscurrentdate == lsnextrenewaldatealert)
                //        {
                //            DateTime nextrenewaldate = (Convert.ToDateTime(dr_datarow["next_renewal_date"].ToString()));
                //            String renewaldatealert = nextrenewaldate.ToString("yyyy-MM-dd");

                //            msSQL = "update ocs_mst_tsacontact set code_created_flag='N',renewal_flag='N' where next_renewal_date = '" + renewaldatealert + "' and approvalstatus='Approved'";
                //            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //        }
                //        else
                //        {

                //        }

                //    }
                //}

                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource,a.created_by," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus = 'Approved' and code_created_flag='N' " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            agreementrenewal_date = (dr_datarow["agreementrenewal_date"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }

        public void DaGetCodecreationIndividualCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as codecreated_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,date_format(a.codecreation_date,'%d-%m-%Y %h:%i %p') as codecreated_date,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      "(a.origination) as RecordSource,a.created_by," +
                       " concat(a.samfin_code, ' / ' ,a.samagro_code) as codesamagro_code,a.samfin_code,a.samagro_code,l.active,l.web_active,a.renewal_flag," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " left join hrm_mst_temployee g on g.employee_gid=a.code_created_by" +
                      " left join adm_mst_tuser h on h.user_gid=g.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus = 'Approved' and code_created_flag='Y' " +
                        " order by (concat(a.codecreation_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {                       

                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_flag = dr_datarow["renewal_flag"].ToString(),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            active = (dr_datarow["active"].ToString()),
                            web_active = (dr_datarow["web_active"].ToString()),
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            samagro_code = (dr_datarow["codesamagro_code"].ToString()),
                             codesamagro_code = (dr_datarow["samagro_code"].ToString()),
                            codecreated_by = (dr_datarow["codecreated_by"].ToString()),
                            codecreated_date = (dr_datarow["codecreated_date"].ToString()),
                            agreementrenewal_date = (dr_datarow["agreementrenewal_date"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            samfin_code = (dr_datarow["samfin_code"].ToString()),
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaSamcodesAutoGenerate(string sacontact_gid, Codes values)
        {
            string samfincode = string.Empty;
            string samagrocode = string.Empty;
            int finval, agroval = 0;
            try
            {
                msSQL = "select code_created_flag from ocs_mst_tsacontact  where sacontact_gid ='" + sacontact_gid + "'";
                string codecreated_flag = objdbconn.GetExecuteScalar(msSQL);

                if(codecreated_flag =="Y")
                {
                    return;

                }

                msSQL = "select created_date,samfin_code,samagro_code from ocs_mst_tsaloginsbauser  order by created_date desc limit 1";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {

                    samfincode = objODBCDatareader["samfin_code"].ToString();
                    samagrocode = objODBCDatareader["samagro_code"].ToString();
                    //string[] finsplit = samfincode.Split('_');
                    //string[] agrosplit = samagrocode.Split('_');


                    //finval = Convert.ToInt16(finsplit[1]) + 1;
                    //agroval = Convert.ToInt16(agrosplit[1]) + 1;

                    //samfincode = "SAMFIN0000_" + finval;
                    //samagrocode = "SAMAGRO0000_" + agroval;

                    string lsind_refno = "SAI";
                    //String lsref_name = "SF";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");

                    lsind_refno = lsind_refno + msGETRef;


                    values.fincode = lsind_refno;

                    string lsind_ref = "SAI";
                    //String lsrefname = "SA";
                   
                    lsind_ref = lsind_ref + msGETRef;

                    values.agrocode = lsind_ref;
                }
                else
                {

                    string lsind_refno = "SAI";
                    //String lsref_name = "SF";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");

                    lsind_refno = lsind_refno + msGETRef;


                    values.fincode = lsind_refno;

                    string lsind_ref = "SAI";
                    //String lsrefname = "SA";
                   
                    lsind_ref = lsind_ref + msGETRef;

                    values.agrocode = lsind_ref;

                   


                }

            }
            catch (Exception ex)
            {

            }
        }
        public void DaGetIndividualActivityWebSummary(string employee_gid,string samfin_code,string samagro_code, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource,a.created_by," +
                       " concat(a.samfin_code, ' / ' ,a.samagro_code) as samagro_code,l.active,l.web_active,a.renewal_flag," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag='Y' and (a.samfin_code = '" + samfin_code + "' or a.samagro_code = '" + samagro_code + "') " +
                        " order by (concat(a.codecreation_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {

                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_flag = dr_datarow["renewal_flag"].ToString(),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            active = (dr_datarow["active"].ToString()),
                            web_active = (dr_datarow["web_active"].ToString()),
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            samagro_code = (dr_datarow["samagro_code"].ToString())

                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetIndividualActivityManagementSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource,a.created_by,a.samfin_code,a.samagro_code," +
                       " concat(a.samfin_code, ' / ' ,a.samagro_code) as sam_code,l.active,l.web_active,a.renewal_flag," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag='Y' " +
                        " group by a.samfin_code ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {

                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_flag = dr_datarow["renewal_flag"].ToString(),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            active = (dr_datarow["active"].ToString()),
                            web_active = (dr_datarow["web_active"].ToString()),
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            samagro_code = (dr_datarow["sam_code"].ToString()),
                            samfin_code = (dr_datarow["samfin_code"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sam_code = (dr_datarow["samagro_code"].ToString())



                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetOnboardIndividualRejectedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.verify_flag ,a.raisequery_flag,a.update_flag, " +
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate, " +
                        " saveasdraftadd_flag,(a.origination) as RecordSource," +
                           " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                         " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected') " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            verify_flag = dr_datarow["verify_flag"].ToString(),
                            renewal_status = dr_datarow["Renewal_status"].ToString(),
                            update_flag = dr_datarow["update_flag"].ToString(),
                            saveasdraftadd_flag = (dr_datarow["saveasdraftadd_flag"].ToString()),
                            raisequery_flag = (dr_datarow["raisequery_flag"].ToString()),
                            // update_flag = (dr_datarow["update_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["submittedDate"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetOnboardIndividualGroupingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.samfin_code,a.samagro_code,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.verify_flag ,a.raisequery_flag,a.update_flag, " +
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate, " +
                        " saveasdraftadd_flag, (a.origination) as RecordSource," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                         " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus = 'Approved' and a.samfin_code !='' " +
                        " group by a.samfin_code desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            verify_flag = dr_datarow["verify_flag"].ToString(),
                            renewal_status = dr_datarow["Renewal_status"].ToString(),
                            update_flag = dr_datarow["update_flag"].ToString(),
                            saveasdraftadd_flag = (dr_datarow["saveasdraftadd_flag"].ToString()),
                            raisequery_flag = (dr_datarow["raisequery_flag"].ToString()),
                            // update_flag = (dr_datarow["update_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                            sa_updated_date = (dr_datarow["submittedDate"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            samfin_code = (dr_datarow["samfin_code"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            samagro_code = (dr_datarow["samagro_code"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetIndividualRenewalGroupingSummary(string employee_gid,string samfin_code,string samagro_code,string sacontact_gid, MdlsaOnboardSummary values)
        {
          
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.renewal_flag,a.samfin_code,a.samagro_code,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date ,a.verify_flag ,a.raisequery_flag,a.update_flag, " +
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate, " +
                        " saveasdraftadd_flag,(a.origination) as RecordSource," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                         " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and  (samfin_code = '" + samfin_code + "' or a.samagro_code = '" + samagro_code + "')" +
                        " order by a.sacontact_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            verify_flag = dr_datarow["verify_flag"].ToString(),
                            renewal_status = dr_datarow["Renewal_status"].ToString(),
                            update_flag = dr_datarow["update_flag"].ToString(),
                            saveasdraftadd_flag = (dr_datarow["saveasdraftadd_flag"].ToString()),
                            raisequery_flag = (dr_datarow["raisequery_flag"].ToString()),
                            // update_flag = (dr_datarow["update_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                            sa_updated_date = (dr_datarow["submittedDate"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            samfin_code = (dr_datarow["samfin_code"].ToString()),
                            samagro_code = (dr_datarow["samagro_code"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            renewal_flag = (dr_datarow["renewal_flag"].ToString()),
                            agreementrenewal_date = (dr_datarow["agreementrenewal_date"].ToString())

                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetEntitytype(string saentitytype_gid, string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = "select sadocumentlist_gid,sadocumentlist_name " +
                    " from ocs_mst_tsadocumentlist where " +
                    " saentitytype_gid='" + saentitytype_gid + "' and status ='Y'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sadocumentlist_gid = (dr_datarow["sadocumentlist_gid"].ToString()),
                        sadocumentlist_name = (dr_datarow["sadocumentlist_name"].ToString())
                    });
                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public bool DaIndividualRenewal(string employee_gid, Individualedit values)
        {
            bool sta = false;
            try
            {
               

                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_middlename))
                {
                    if (values.sa_middlename.Contains("'"))
                    {
                        values.sa_middlename = values.sa_middlename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }

                msSQL = "select count(sacontact_gid) from ocs_mst_tsadocumentsupload where sacontact_gid ='" + employee_gid + "'";
                string documentupload = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select count(saentitytype_gid) from ocs_mst_tsadocumentlist where saentitytype_gid ='" + values.saentitytype_gid + "' and status ='Y'";
                string entitytype = objdbconn.GetExecuteScalar(msSQL);

                if (entitytype != documentupload)
                {
                    values.message = "Kindly select the document";
                    return false;
                }

                msSQL = " SELECT a.sacontact_gid,a.sa_reportingmanager,a.sa_autogeneratedid,a.approval_flag,a.confirmbankaccountnumber,a.satype_gid,a.satype_name,a.saentitytype_gid, " +
                     " a.saentitytype_name,concat(m.user_firstname,' ',m.user_lastname,' / ',m.user_code) as DirectReprtingTo," +
                        " a.sa_firstname,a.sa_middlename,a.sa_lastname," +
                        " a.sa_pannumber,a.pan_status,a.sa_aadharnumber,a.sa_apputr,a.sa_appcrediteddate," +
                        " a.sa_appcreditedamount,a.saifsc_code,a.saaccountholder_name,a.saaccount_number,a.sacanccheque_number,city,branch_address,district,micr,state,a.assessmentagency_gid,a.assessmentagency_name,a.assessmentagencyrating_gid,a.assessmentagencyrating_name,a.ratingas_date, " +
                        " a.sabank_name,a.sabranch_name,a.saaccountholder_name," +
                         " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement,a.reportingmanager_gid," +
                         "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
                           " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,Date(a.agreementexecutiondate) as agreementexecutiondate," +
                           "Date(a.agreementexpirydate) as agreementexpirydate,Date(a.agroagreementexecutiondate) as agroagreementexecutiondate,Date(a.agroagreementexpirydate) as agroagreementexpirydate," +
                           "  a.agreementstatus,a.agroagreementstatus,a.bookletnumber,a.verificationremarks,a.approvalinitated_flag,a.individualsaveasdraft_flag," +
                         " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.present_occupation,a.work_experience,a.Expagri_business, " +
                          " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus,a.origination, " +
                        " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_onboard_flag,a.referred_by,a.utr_no,a.samfin_code,a.samagro_code,a.ratingas_date,a.gender, " +
                        " (a.origination) as RecordSource,Date(a.codecreation_date) as codecreation_date FROM " +
                        " ocs_mst_tsacontact a" +
                       " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                      " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
                        " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
                         " left join hrm_mst_temployee r on a.reportingmanager_gid = r.employee_gid  left join adm_mst_tuser m on m.user_gid = r.user_gid" +
                        " where a.sacontact_gid = '" + values.sacontact_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                    values.reportingmanager_gid = objODBCDatareader["reportingmanager_gid"].ToString();
                    values.recordsource = objODBCDatareader["RecordSource"].ToString();
                    //values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    //values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    //values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    //values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.samfin_code = objODBCDatareader["samfin_code"].ToString();
                    values.samagro_code = objODBCDatareader["samagro_code"].ToString();
                    if (objODBCDatareader["codecreation_date"].ToString() == "")
                    {
                        lscodecreationdate = "";
                    }
                    else
                    {
                        DateTime lscodecreation_date = (Convert.ToDateTime(objODBCDatareader["codecreation_date"].ToString()));
                        lscodecreationdate = lscodecreation_date.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    
                    values.origination = objODBCDatareader["origination"].ToString();
                    values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
                    values.applicationform = objODBCDatareader["applicationform"].ToString();
                    values.yearsitreturns = objODBCDatareader["yearsitreturns"].ToString();
                    values.bankstatement = objODBCDatareader["bankstatement"].ToString();
                    values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
                    values.prospect = objODBCDatareader["prospect"].ToString();
                    values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
                    values.scannedcopyreception = objODBCDatareader["scannedcopyreception"].ToString();
                    values.addressproof = objODBCDatareader["addressproof"].ToString();
                    values.photographs = objODBCDatareader["photographs"].ToString();
                    values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
                    values.houseofficeverification = objODBCDatareader["houseofficeverification"].ToString();
                    if (objODBCDatareader["agreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexpirydate = Convert.ToDateTime(objODBCDatareader["agreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["ratingas_date"].ToString() == "")
                    {
                        lsratingasdate = "";
                    }
                    else
                    {
                        DateTime lsratingas_date = (Convert.ToDateTime(objODBCDatareader["ratingas_date"].ToString()));
                        lsratingasdate = lsratingas_date.ToString("dd-MM-yyyy");
                        lsratingasdates = lsratingas_date.ToString("yyyy-MM-dd HH:mm:ss");
                    }

                    values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
                    values.bookletnumber = objODBCDatareader["bookletnumber"].ToString();
                    values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
                    values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
                    values.approval_flag = objODBCDatareader["approval_flag"].ToString();
                    if (objODBCDatareader["agroagreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agroagreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agroagreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexpirydate = Convert.ToDateTime(objODBCDatareader["agroagreementexpirydate"]).ToString("dd-MM-yyyy");
                    }


                    values.agroagreementstatus = objODBCDatareader["agroagreementstatus"].ToString();
                    values.sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    //values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    //values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    //values.gender = objODBCDatareader["gender"].ToString();
                    //values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                    //values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                    //values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                    values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                    values.pan_status = objODBCDatareader["pan_status"].ToString();
                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                        lssaappcredited_date = "";
                    }
                    else
                    {
                        DateTime lssa_appcrediteddate = (Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"].ToString()));
                        lssaappcredited_date = lssa_appcrediteddate.ToString("dd-MM-yyyy");
                        lssaappcrediteddate = lssa_appcrediteddate.ToString("yyyy-MM-dd HH:mm:ss");

                    }

                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["approved_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
                    }
                    values.approved_by = objODBCDatareader["approved_by"].ToString();
                    values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
                    values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();
                    //values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                    //values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    //values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                    //values.micr = objODBCDatareader["micr"].ToString();
                    //values.branch_address = objODBCDatareader["branch_address"].ToString();
                    //values.state = objODBCDatareader["state"].ToString();
                    //values.city = objODBCDatareader["city"].ToString();
                    //values.district = objODBCDatareader["district"].ToString();
                    //values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    //values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    //values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    //values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    //values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    //values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    //values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_onboard_flag = objODBCDatareader["sa_onboard_flag"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();
                    values.individualsaveasdraft_flag = objODBCDatareader["individualsaveasdraft_flag"].ToString();
                    values.present_occupation = objODBCDatareader["present_occupation"].ToString();
                    values.work_experience = objODBCDatareader["work_experience"].ToString();
                    values.Expagri_business = objODBCDatareader["Expagri_business"].ToString();
                    //values.sa_updated_date = objODBCDatareader["updated_date"].ToString();

                }
                objODBCDatareader.Close();

                string lsind_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "RIN";
                string msGETRef = objcmnfunctions.GetMasterGID("REID");
                msGETRef = msGETRef.Replace("REID", "");

                lsind_refno = lsind_refno + lsref_name + msGETRef;

                msGetGid = objcmnfunctions.GetMasterGID("SAIN");
                              
                msSQL = " insert into ocs_mst_tsacontact(" +
                    " sacontact_gid," +
                    " sa_autogeneratedid," +
                    " sa_reportingmanager," +
                    " next_renewal_date," +
                     " reportingmanager_gid," +
                    " satype_gid," +
                    " saentitytype_gid," +
                    " satype_name," +
                    " saentitytype_name," +
                    " sa_firstname," +
                    " sa_middlename," +
                    " sa_lastname," +
                    " gender," +
                    " sa_pannumber," +
                    " pan_status, " +
                    " sa_aadharnumber," +
                    " sa_apputr," +
                    " sa_appcreditedamount," +
                    " saifsc_code," +
                     " micr," +
                    " branch_address," +
                    " city," +
                    " district," +
                    " state," +
                    " sa_onboard_flag," +
                    " saaccount_number," +
                    " confirmbankaccountnumber," +
                    " saaccountholder_name, " +
                    " sacanccheque_number, " +
                    " sabank_name, " +
                    " sabranch_name, " +
                     " referred_by, " +
                     " utr_no, " +
                    " present_occupation, " +
                    " work_experience, " +
                    " Expagri_business, " +
                    " approvalstatus, " +
                     " renewal_status, " +
                    " origination, " +
                     " renewal_gid, " +
                    " onboardingindividual_flag,tagging_flag ,code_created_flag,rm_tagging,update_flag," +
                    " assessmentagency_gid, " +
                    " assessmentagency_name, " +
                    " assessmentagencyrating_gid, " +
                    " assessmentagencyrating_name, " +
                    " ratingas_date, " +
                    "codecreation_date, " +
                    " sa_appcrediteddate," +
                    " created_by, " +
                    " created_date,updated_date,renewal_date,renewal_flag,samfin_code,samagro_code)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                   "'" + lsind_refno + "'," +
                    "'" + values.sa_reportingmanager + "', " +
                    "'" + DateTime.Now.AddYears(1).ToString("yyyy-MM-dd HH:mm") + "'," +
                    "'" + values.reportingmanager_gid + "'," +
                    "'" + values.satype_gid + "'," +
                    "'" + values.saentitytype_gid + "'," +
                     "'" + values.satype_name + "'," +
                    "'" + values.saentitytype_name + "'," +
                    "'" + values.sa_firstname + "'," +
                    "'" + values.sa_middlename + "'," +
                    "'" + values.sa_lastname + "'," +
                    "'" + values.gender + "'," +
                    "'" + values.sa_pannumber + "'," +
                    "'" + values.pan_status + "'," +
                    "'" + values.sa_aadharnumber + "'," +
                 "'" + values.sa_apputr + "'," +
                 "'" + values.sa_appcreditedamount + "'," +
                  
                   "'" + values.saifsc_code + "'," +
                      "'" + values.micr + "'," +
                 "'" + values.branch_address + "'," +

                 "'" + values.city + "'," +
                 "'" + values.district + "'," +
                 "'" + values.state + "'," +
                   "'" + "Y" + "'," +
                  "'" + values.saaccount_number + "'," +
                  "'" + values.confirmbankaccountnumber + "'," +
                  "'" + values.saaccountholder_name + "'," +
                  "'" + values.sacanccheque_number + "'," +
                  "'" + values.sabank_name + "'," +
                  "'" + values.sabranch_name + "'," +
                   "'" + values.referred_by + "'," +
                    "'" + values.utr_no + "'," +
                    "'" + values.present_occupation + "'," +
                     "'" + values.work_experience + "'," +
                     "'" + values.Expagri_business + "'," +
                        "'" + "Pending BD Verification" + "'," +
                         "'" + "Renewed" + "'," +
                    "'" + values.origination + "'," +
                    "'" + values.sacontact_gid + "'," +
                   "'" + "Y" + "'," +
                    "'" + "Y" + "'," +
                     "'" + "Y" + "'," +
                   "'" + employee_gid + "'," +
                   "'" + "Y" + "'," +
                "'" + values.assessmentagency_gid + "'," +
                       "'" + values.assessmentagency_name + "'," +
                       "'" + values.assessmentagencyrating_gid + "'," +
                       "'" + values.assessmentagencyrating_name + "',";

                //if ((lsratingasdate == null) || (lsratingasdate == ""))
                //{
                //    msSQL += "'0001-01-01 00:00:00',";

                //}
                //else
                //{
                //    msSQL += "'" + lsratingasdate + "',";
                //}
                //if (lsratingasdate == values.ratingas_date)
                //{

                //    msSQL += "'" + lsratingasdates + "',";

                //}
                //else
                //{
                //    msSQL += "'" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd ") + "',";

                //    //msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if ((lsratingasdate == null) || (lsratingasdate == ""))
                {
                    msSQL += "'0001-01-01 00:00:00',";

                }
                else
                {
                    msSQL += "'" + lsratingasdates + "',";
                }
                if ((lscodecreationdate == null) || (lscodecreationdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + lscodecreationdate + "',";
                }

                if (lssaappcredited_date == values.sa_appcrediteddate)
                {

                    msSQL += "'" + lssaappcrediteddate + "',";

                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd ") + "',";

                    //msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                }

                msSQL += "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','" + values.samfin_code + "','" + values.samagro_code + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {

                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        // PAN Update
                        foreach (string reason in values.panabsencereason_selectedlist)
                        {
                            msGetGidpan = objcmnfunctions.GetMasterGID("SAPP");
                            msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                   " sacontact2panabsencereason_gid," +
                                   " sacontact_gid," +
                                   " panabsencereason," +
                                   " created_date," +
                                   " created_by)" +
                                   " VALUES(" +
                                   "'" + msGetGidpan + "'," +
                                   "'" + msGetGid + "'," +
                                   "'" + reason + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                   "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }

                   

                    msSQL = "update ocs_mst_tsacontact set renewal_flag ='Y',renewal_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where sacontact_gid='" + values.sacontact_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "select samobile_no,saprimary_status,sawhatsapp_no from ocs_mst_tsacontact2mobileno where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAIM");

                            msSQL = " insert into ocs_mst_tsacontact2mobileno(" +
                                    " sacontact2mobileno_gid," +
                                    " sacontact_gid," +
                                    " samobile_no," +
                                    " saprimary_status," +
                                    " sawhatsapp_no," +
                                    " created_by," +
                                    " created_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                    "'" + msGetGid + "'," +
                                    "'" + dr_datarow["samobile_no"].ToString() + "'," +
                                    "'" + dr_datarow["saprimary_status"].ToString() + "'," +
                                    "'" + dr_datarow["sawhatsapp_no"].ToString() + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            objdbconn.CloseConn();

                        }
                    }
                    msSQL = "select saemail_address,saprimary_status from ocs_mst_tsacontact2email where sacontact_gid='" + values.sacontact_gid + "' or  sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAIE");

                            msSQL = " insert into ocs_mst_tsacontact2email(" +
                            " sacontact2email_gid," +
                            " sacontact_gid," +
                            " saemail_address," +
                            " saprimary_status," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["saemail_address"].ToString() + "'," +
                            "'" + dr_datarow["saprimary_status"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select addresstype_gid,addresstype_name,addressline1,addressline2,primary_status,landmark,postal_code,city,taluka,district,state,country,latitude,longitude from ocs_mst_tsacontact2address where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);

                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAIA");

                            msSQL = " insert into ocs_mst_tsacontact2address(" +
                            " sacontact2address_gid," +
                            " sacontact_gid," +
                            " addresstype_gid," +
                            " addresstype_name," +
                            " addressline1," +
                            " addressline2," +
                            " primary_status," +
                            " landmark," +
                            " postal_code," +
                            " city," +
                            " taluka," +
                            " district," +
                            " state," +
                            " country," +
                            " latitude," +
                            " longitude," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["addresstype_gid"].ToString() + "'," +
                            "'" + dr_datarow["addresstype_name"].ToString() + "'," +
                            "'" + dr_datarow["addressline1"].ToString() + "'," +
                            "'" + dr_datarow["addressline2"].ToString() + "'," +
                            "'" + dr_datarow["primary_status"].ToString() + "'," +
                            "'" + dr_datarow["landmark"].ToString() + "'," +
                            "'" + dr_datarow["postal_code"].ToString() + "'," +
                            "'" + dr_datarow["city"].ToString() + "'," +
                            "'" + dr_datarow["taluka"].ToString() + "'," +
                            "'" + dr_datarow["district"].ToString() + "'," +
                            "'" + dr_datarow["state"].ToString() + "'," +
                            "'" + dr_datarow["country"].ToString() + "'," +
                            "'" + dr_datarow["latitude"].ToString() + "'," +
                            "'" + dr_datarow["longitude"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select salead_name,sasector_industry from ocs_mst_tsaprospects where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAPR");

                      msSQL = " insert into ocs_mst_tsaprospects(" +
                    " saprospects_gid," +
                    " sacontact_gid," +
                    " salead_name," +
                    " sasector_industry,created_by,created_date)" +
                    " values(" +
                    "'" + msGetGid1 + "'," +
                    "'" + msGetGid + "'," +
                    "'" + dr_datarow["salead_name"].ToString() + "'," +
                    "'" + dr_datarow["sasector_industry"].ToString() + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                  
                    
                    msSQL = "select document_name,document_path from ocs_mst_tindividualcancelchequeupload where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("IDCC");

                            msSQL = " insert into ocs_mst_tindividualcancelchequeupload( " +
                                     " individualcancelchequeupload_gid, " +
                                     " sacontact_gid," +
                                     " document_name ," +
                                     " document_path," +
                                     " created_by," +
                                     " created_date" +
                                     " )values(" +
                                     "'" + msGetGid1 + "'," +
                                     "'" + msGetGid + "'," +
                                     "'" + dr_datarow["document_name"].ToString() + "'," +
                                     "'" + dr_datarow["document_path"].ToString() + "'," +
                                     "'" + employee_gid + "'," +
                                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select bureauname_gid,bureauname_name,bureau_score,date_format(bureauscore_date,'%Y-%m-%d') as bureauscore_date ,bureau_response,observations from ocs_mst_tsaindividual2bureau where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SABI");
                            msSQL = " insert into ocs_mst_tsaindividual2bureau(" +
                                   " saindividual2bureau_gid ," +
                                   " sacontact_gid," +
                                   " bureauname_gid," +
                                   " bureauname_name," +
                                   " bureau_score," +
                                   " bureauscore_date," +
                                   " bureau_response," +
                                   " observations," +
                                   " created_by," +
                                   " created_date)" +
                                   " values(" +
                                   "'" + msGetGid1 + "'," +
                                   "'" + msGetGid + "'," +
                                  "'" + dr_datarow["bureauname_gid"].ToString() + "'," +
                                     "'" + dr_datarow["bureauname_name"].ToString() + "'," +
                                    "'" + dr_datarow["bureau_score"].ToString() + "'," +
                                     "'" + dr_datarow["bureauscore_date"].ToString() + "'," +
                                       "'" + dr_datarow["bureau_response"].ToString() + "'," +
                                     "'" + dr_datarow["observations"].ToString() + "'," +
                                      "'" + employee_gid + "'," +
                                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_title,sadocument_name,sadocument_id,safile_path,individualdocument_gid,renewal_docflag,regflag from ocs_mst_tsadocumentsupload where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SADO");

                            msSQL = " insert into ocs_mst_tsadocumentsupload(" +
                                   " sadocument_gid," +
                                    " sacontact_gid," +
                                    " document_title ," +
                                    " sadocument_name," +
                                    " sadocument_id," +
                                    " safile_path," +
                                     " individualdocument_gid," +
                                    " renewal_docflag," +
                                    " regflag," +
                                    " created_by,created_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                   "'" + msGetGid + "'," +
                                    "'" + dr_datarow["document_title"].ToString() + "'," +
                                     "'" + dr_datarow["sadocument_name"].ToString() + "'," +
                                    "'" + dr_datarow["sadocument_id"].ToString() + "'," +
                                     "'" + dr_datarow["safile_path"].ToString() + "'," +
                                       "'" + dr_datarow["individualdocument_gid"].ToString() + "'," +
                                     "'" + dr_datarow["renewal_docflag"].ToString() + "'," +
                                      "'" + dr_datarow["regflag"].ToString() + "'," +
                                   "'" + employee_gid + "'," +
                                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_name,document_path from ocs_mst_tindividualsabureaudocumentupload where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SABD");
                            msSQL = " insert into ocs_mst_tindividualsabureaudocumentupload( " +
                                        " individualsabureaudocumentupload_gid, " +
                                        " saindividual2bureau_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid1 + "'," +
                                        "'" + msGetGid + "'," +
                                       "'" + dr_datarow["document_name"].ToString() + "'," +
                                      "'" + dr_datarow["document_path"].ToString() + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_title,document_name,document_path from ocs_mst_tsaindividualverifydocument where sacontact_gid='" + values.sacontact_gid + "' or sacontact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("VDDO");
                            msSQL = " insert into ocs_mst_tsaindividualverifydocument(" +
                                    " saindividualverifydocument_gid," +
                                    " sacontact_gid," +
                                    " document_title ," +
                                    " document_name," +
                                    //" sadocument_id," +
                                    " document_path," +
                                    " created_by,created_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                    "'" + msGetGid + "'," +
                                   "'" + dr_datarow["document_title"].ToString() + "'," +
                                    "'" + dr_datarow["document_name"].ToString() + "'," +
                                      "'" + dr_datarow["document_path"].ToString() + "'," +
                                     "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    //msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + msGetGid + "' where sacontact_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    // msGetGid1 = objcmnfunctions.GetMasterGID("TEIN");

                    //string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    //string usergid = objdbconn.GetExecuteScalar(msql);


                    //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                    //          " where user_gid = '" + usergid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //if (objODBCDatareader.HasRows == true)
                    //{
                    //    tagName = objODBCDatareader["user_firstname"].ToString();
                    //}

                    //msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                    //      " taggedemployeeindividuallog_gid , " +
                    //      " sacontact_gid," +
                    //      " individualtaggedemployee_gid," +
                    //      " individualtaggedemployee_name," +
                    //      " approval_status," +
                    //      " created_by," +
                    //      " created_date) " +
                    //      " values (" +
                    //      " '" + msGetGid1 + "'," +
                    //       " '" + msGetGid + "'," +
                    //      " '" + reportingmanager_gid + "'," +
                    //      " '" + values.sa_reportingmanager + "'," +
                    //      " '" + "Pending BD Verification" + "'," +
                    //      " '" + user_gid + "'," +
                    //      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                        //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                                " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                            " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                                   " sacontact_gid = '" + msGetGid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                               " where sacontact_gid = '" + msGetGid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                          "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                          "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);



                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + employeename;
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }

                    //Mail Trigger

                    values.status = true;
                    sta = true;
                    values.message = "SA renewal submitted successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error Occured While Submitting Onboard Entry";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddSubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;
        }
        public bool DaIndividualDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_name = httpRequest.Form["document_name"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsid_document = "";
            string lsindividual_gid = httpRequest.Form["individual_gid"].ToString();
            string lscompanydocument_gid = httpRequest.Form["companydocument_gid"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();


            msSQL = "select individualdocument_gid from ocs_mst_tsadocumentsupload where individualdocument_gid = '" + lscompanydocument_gid + "' and sacontact_gid ='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objfilename.message = "Document name already exist";
                return false;
            }
            objODBCDatareader.Close();


            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);


                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();

                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("SADO");

                        msSQL = " insert into ocs_mst_tsadocumentsupload(" +
                               " sadocument_gid," +
                                " sacontact_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                " safile_path," +
                                 " individualdocument_gid," +
                                " renewal_docflag," +
                                " created_by,created_date,regflag)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lscompanydocument_gid + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                  "'" + lscompanydocument_gid + "'," +
                                 "'Y'," +
                               "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','N')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;

        }
        public void DaDocumentUploadList(string sacontact_gid, string employee_gid, RenewaldocumentList values)
        {
            msSQL = "Select sadocument_name,document_title,sadocument_gid,safile_path from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrenewaldocument_list = new List<renewaldocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getrenewaldocument_list.Add(new renewaldocument_list
                    {
                        document_title = (dr_datarow["document_title"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        sadocument_gid = (dr_datarow["sadocument_gid"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dr_datarow["safile_path"].ToString()),

                    });
                }
                values.renewaldocument_list = getrenewaldocument_list;
            }
            dt_datatable.Dispose();
        }
        public void DaUploadDocumentDelete(string sadocument_gid, RenewaldocumentList values)
        {
            msSQL = "delete from ocs_mst_tsadocumentsupload where sadocument_gid='" + sadocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;

            }
        }
        public void DaUploadDocumentTmpList(string sacontact_gid, string employee_gid, RenewaldocumentList values)
        {
            msSQL = " select sadocument_name,sadocument_gid,safile_path,document_title from ocs_mst_tsadocumentsupload " +
                             " where sacontact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrenewaldocument_list = new List<renewaldocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getrenewaldocument_list.Add(new renewaldocument_list
                    {
                        document_title = (dt["document_title"].ToString()),
                        sadocument_name = (dt["sadocument_name"].ToString()),
                        sadocument_gid = (dt["sadocument_gid"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dt["safile_path"].ToString()),
                    });
                    values.renewaldocument_list = getrenewaldocument_list;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaIndividualTempClear(string employee_gid, RenewaldocumentList values)
        {
            msSQL = "delete from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
        }
        public void DaDocumentUploadViewList(string sacontact_gid, string user_gid, RenewaldocumentList values)
        {
            msSQL = "Select sadocument_name,document_title,sadocument_gid,safile_path from ocs_mst_tsadocumentsupload where sacontact_gid='" + sacontact_gid + "' and renewal_docflag = 'Y'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrenewaldocument_list = new List<renewaldocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getrenewaldocument_list.Add(new renewaldocument_list
                    {
                        document_title = (dt["document_title"].ToString()),
                        sadocument_gid = (dt["sadocument_gid"].ToString()),
                        sadocument_name = (dt["sadocument_name"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dt["safile_path"].ToString()),
                    });
                    values.renewaldocument_list = getrenewaldocument_list;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaIndividualCodePendingReport(MdlMstSAOnboard values)
        {
            msSQL = "call ocs_rpt_sbaindividualcodependingreport";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;

            //ExcelPackage excel = new ExcelPackage();
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);
            var workSheet = excel.Workbook.Worksheets.Add("IndividualCodeCreationPendingReport");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "IndividualCodeCreationPendingReport.xlsx";
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                /* if (!exists)
                 {
                   //  System.IO.Directory.CreateDirectory(path);
                 }*/
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 52])  //Address "A1:A29"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);
                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.lscloudpath = objcmnstorage.EncryptData(values.lscloudpath);
            values.lspath = objcmnstorage.EncryptData(values.lspath);
            values.status = true;
            values.message = "Success";
        }
        public void DaIndividualCodeCompletedReport(MdlMstSAOnboard values)
        {
            msSQL = "call ocs_rpt_sbaindividualcodecompletedreport";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;

            //ExcelPackage excel = new ExcelPackage();
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);
            var workSheet = excel.Workbook.Worksheets.Add("IndividualCodeCreationCompletedReport");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "IndividualCodeCreationCompletedReport.xlsx";
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                /* if (!exists)
                 {
                   //  System.IO.Directory.CreateDirectory(path);
                 }*/
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 55])  //Address "A1:A29"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);
                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "CodeCreationReport/IndividualCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.lscloudpath = objcmnstorage.EncryptData(values.lscloudpath);
            values.lspath = objcmnstorage.EncryptData(values.lspath);
            values.status = true;
            values.message = "Success";
        }
        public void DaIndividualMakerRejected(string employee_gid, MdlApproveind values)
        {


            msSQL = " select count(*) as openquery from ocs_mst_tmakerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and makerindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsacontact set approvalstatus='Deferred',";
                if (values.rejected_remarks == "" || values.rejected_remarks == null)
                {
                    msSQL += " rejected_remarks='',";
                }
                else
                {
                    msSQL += " rejected_remarks='" + values.rejected_remarks.Replace("'", "") + "',";
                }
                msSQL += " rejected_by='" + employee_gid + "'," +
                     " makerrejected_flag ='Y'," +
                       " rejected_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                        " where  sacontact_gid='" + values.sacontact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check




                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,group_concat(b.saemail_address) as tomembers ,group_concat(i.created_by) as cc2members ,i.created_by," +
                                 " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                 " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                 " join ocs_mst_tsacontact2mobileno c on c.sacontact_gid = i.sacontact_gid " +
                                  " join ocs_mst_tsacontact2email b on b.sacontact_gid = i.sacontact_gid where " +
                                    " i.sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiApprovalmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger
                    values.status = true;
                    values.message = "Deferred successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }
        public void DaIndividualCheckerRejected(string employee_gid, MdlApproveind values)
        {


            msSQL = " select count(*) as openquery from ocs_mst_tcheckerindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                             " and checkerindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsacontact set approvalstatus='Deferred',";
                if (values.rejected_remarks == "" || values.rejected_remarks == null)
                {
                    msSQL += " rejected_remarks='',";
                }
                else
                {
                    msSQL += " rejected_remarks='" + values.rejected_remarks.Replace("'", "") + "',";
                }
                msSQL += " rejected_by='" + employee_gid + "'," +
                        " checkerrejected_flag ='Y'," +
                       " rejected_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                        " where  sacontact_gid='" + values.sacontact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check




                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,group_concat(b.saemail_address) as tomembers ,group_concat(i.created_by) as cc2members ,i.created_by," +
                                 " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                 " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                 " join ocs_mst_tsacontact2mobileno c on c.sacontact_gid = i.sacontact_gid " +
                                  " join ocs_mst_tsacontact2email b on b.sacontact_gid = i.sacontact_gid where " +
                                    " i.sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiApprovalmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger
                    values.status = true;
                    values.message = "Deferred successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }
        public void DaGetSAVerfiyIndividualMakerDistractSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.makerrejected_flag = 'Y' and a.approvalstatus = 'Deferred'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSAVerfiyIndividualCheckerDistractSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.checkerrejected_flag = 'Y' and a.approvalstatus = 'Deferred'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetIndividualDeferredSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.approvalstatus = 'Deferred'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void logforAudit(string strVal)
        {

            string loglspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + "SBAErrorLog/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
            if ((!System.IO.Directory.Exists(loglspath)))
                System.IO.Directory.CreateDirectory(loglspath);

            loglspath = loglspath + "log.txt";
            System.IO.StreamWriter sw = new System.IO.StreamWriter(loglspath, true);
            sw.WriteLine(strVal);
            sw.Close();

        }
    }
}