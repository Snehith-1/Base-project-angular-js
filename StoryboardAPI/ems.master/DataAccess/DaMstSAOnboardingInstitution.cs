using ems.master.Models;
using ems.utilities.Functions;
using System;
using System.Web;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Data.Odbc;
using System.Configuration;
//using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime;
using System.Globalization;
using OfficeOpenXml;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Net.Mail;
using System.Net;
using ems.storage.Functions;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Logical;
using OfficeOpenXml.Style;

namespace ems.master.DataAccess
{
    // <summary>
    // cad team to assign the maker and checker.
    // maker to enter the soft copy details and approve the process.
    // maker and checker to raise the query from rm and rm will close the query.
    // final approver will raise the query and checker will close the query.
    // once checker approve the process and final approver to approve the samunnati associate.
    // </summary>
    // <remarks>Written by Divyalakshmi and S.Santhanam </remarks>
    public class DaMstSAOnboardingInstitution
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        OdbcDataReader objODBCDatareader, objODBCDatareader1;
        Fnazurestorage objcmnstorage = new Fnazurestorage();
        HttpPostedFile httpPostedFile;
        int k, ls_port;
        string sToken = string.Empty;
        DataTable dt_datatable, dt_tloan, dt_tcontact, dt_tinstitution, dt_thypothecation;
        string msSQL, msGetGid, msGetGidLog, msGetAPICode, msGetGid1, lspath, Editsa_dateofincorporation, Edit_agreementexecutiondate, Edit_agroagreementexecutiondate, Edit_agreementexpirydate, Edit_agroagreementexpirydate, Editsa_companystdate, Editsa_appcrediteddate, lsto_mail, saAssociateName, Editsa_ratingas_date;
        string sa_dateofincorporation, lssaappcredited_date, lsagreementrenewal_date, lsratingasdate, lscodecreationdate, lssadateofincorporation, lssastartdate, lssaenddate, lssacompanyst_date, sacontactinstitution_gid, sa_associatename, sa_contactfirstname, sa_monthsinbusiness, saUser, tagName;
        string reporting_to, lssaautogeneratedid,codecreated_flag, RMName, lscodecreation_date, raisequery_flag, approvalstatus, approvalraise_flag;
        public string ls_server, ls_username, ls_password, lssa_autogeneratedid, lsuser_firstname, lssa_reportingmanager, lsinstitutionmaker_name, lscreated_date, tomail_id, lssamobile_no, lssaemail_address, lscc2members, sa_reportingmanager, institutionchecker_name, tomail_id1, lsto2members, tomail_id2, sub, body, employeename, cc_mailid, employee_reporting_to, lsBccmail_id, defPass;
        Random rand = new Random();
        public string[] lsCCReceipients;
        public string[] lsBCCReceipients;
        public string[] lsToReceipients;
        string sa_contactmiddlename, msGetGidAssociate, lssa_associatename, sa_contactlastname, sa_companystdate, sa_companypan, sa_yearsinbusiness, satype_gid, satype_name, saentitytype_gid, saentitytype_name;
        string sa_appcrediteddate, sa_apputr, sa_appcreditedamount;
        string mobile_no, primary_mobileno, whatsapp_mobileno, institution2mobileno_gid, contactinstitution_gid;
        string primary_emailaddress, mail_type, institution2emailaddress_gid, email_address;
        string lsaddress_typegid, lsaddress_type, lsaddressline1, lsaddressline2, lslandmark, lstaluka, lsprimary_address, lspostal_code, lscity, lsdistrict;
        string lsstate, lscountry, lslatitude, lslongitude, lsinstitution2address_gid, lscreated_by, lsgstregister_status, lsapproval_remarks;
        string lsgststate_name, lsgst_no, lsinstitution2gst_gid, institution_gid;
        string salead_name, sasector_industry, saprospects_institution_gid, sa_autogeneratedid;
        string sainst_individual_gid, lssaappcrediteddate, lssacompanystdates, lssaappcrediteddates, lsratingasdates, lssadateofincorporations, lswef_datetime, sa_firstname, sa_middlename, sa_lastname, lsinstitutionchecker_name, sa_designation, sa_pannumber, sa_aadharnumber, msGetDocumentGid;
        int mnResult;



        // Mobile number

        public bool DaMobileNumberAdd(string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2mobileno where saprimary_status='Yes' and sacontactinstitution_gid='" + employee_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msSQL = "select samobile_no from ocs_mst_tsainstitution2mobileno where samobile_no='" + values.samobile_no + "' and sacontactinstitution_gid='" + employee_gid + "'";
            string lsmobile_no = objdbconn.GetExecuteScalar(msSQL);
            if (lsmobile_no == (values.samobile_no))
            {

                values.status = false;
                values.message = "Already this mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msGetGid = objcmnfunctions.GetMasterGID("SAOC");

            msSQL = " insert into ocs_mst_tsainstitution2mobileno(" +
                    " sainstitution2mobileno_gid," +
                    " sacontactinstitution_gid," +
                    " samobile_no," +
                    " saprimary_status," +
                    " sawhatsapp_no," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.samobile_no + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.sawhatsapp_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            objdbconn.CloseConn();

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile number added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured";
                return false;
            }
        }
        public bool DaMobileNumberAddInEdit(string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2mobileno where saprimary_status='Yes' and sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msSQL = "select samobile_no from ocs_mst_tsainstitution2mobileno where samobile_no='" + values.samobile_no + "' and sacontactinstitution_gid='" + employee_gid + "'";
            string lsmobile_no = objdbconn.GetExecuteScalar(msSQL);
            if (lsmobile_no == (values.samobile_no))
            {

                values.status = false;
                values.message = "Already this mobile number added";
                objdbconn.CloseConn();
                return false;
            }

            msGetGid = objcmnfunctions.GetMasterGID("SAOC");

            msSQL = " insert into ocs_mst_tsainstitution2mobileno(" +
                    " sainstitution2mobileno_gid," +
                    " sacontactinstitution_gid," +
                    " samobile_no," +
                    " saprimary_status," +
                    " sawhatsapp_no," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.samobile_no + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.sawhatsapp_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            objdbconn.CloseConn();

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile number added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured";
                return false;
            }
        }
        public void DaGetMobileNoList(string employee_gid, MdlContactMobileNoSAInstituion valuessa)
        {
            msSQL = "select samobile_no,sainstitution2mobileno_gid,saprimary_status,sawhatsapp_no " +
                    " from ocs_mst_tsainstitution2mobileno where " +
                    " sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<SacontactInstimobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new SacontactInstimobileno_list
                    {
                        sainstitution2mobileno_gid = (dr_datarow["sainstitution2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
            }
            valuessa.SacontactInstimobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }
        public void DaDeleteMobileNo(string sainstitution2mobileno_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2mobileno where sainstitution2mobileno_gid='" + sainstitution2mobileno_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Mobile number deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the mobile number";
                values.status = false;

            }
        }
        public void DaTempDeleteMobileNo(string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or  length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Mobile number deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the mobile number";
                values.status = false;

            }
        }
        public void DaMobileNoEdit(string sainstitution2mobileno_gid, MdlContactMobileNoSAInstituion values)
        {
            try
            {
                msSQL = "select samobile_no,sainstitution2mobileno_gid,saprimary_status,sawhatsapp_no  from ocs_mst_tsainstitution2mobileno " +
                " where sainstitution2mobileno_gid='" + sainstitution2mobileno_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.sainstitution2mobileno_gid = objODBCDatareader["sainstitution2mobileno_gid"].ToString();
                    values.samobile_no = objODBCDatareader["samobile_no"].ToString();
                    values.saprimary_status = objODBCDatareader["saprimary_status"].ToString();
                    values.sawhatsapp_no = objODBCDatareader["sawhatsapp_no"].ToString();


                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaMobileNoUpdate(string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "select sacontactinstitution_gid,samobile_no,sainstitution2mobileno_gid,saprimary_status,sawhatsapp_no  from ocs_mst_tsainstitution2mobileno " +
                " where sainstitution2mobileno_gid='" + values.sainstitution2mobileno_gid + "'";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {

                mobile_no = objODBCDatareader["samobile_no"].ToString();
                primary_mobileno = objODBCDatareader["saprimary_status"].ToString();
                whatsapp_mobileno = objODBCDatareader["sawhatsapp_no"].ToString();
                institution2mobileno_gid = objODBCDatareader["sainstitution2mobileno_gid"].ToString();
                contactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitution2mobileno set " +
                         " samobile_no='" + values.samobile_no + "'," +
                         " saprimary_status='" + values.saprimary_status + "'," +
                         " sawhatsapp_no='" + values.sawhatsapp_no + "'," +
                         " created_by='" + employee_gid + "'," +
                         " created_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sainstitution2mobileno_gid='" + values.sainstitution2mobileno_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (contactinstitution_gid == values.sacontactinstitution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAML");

                        msSQL = "Insert into ocs_mst_tsainstitution2mobileupdatelog(" +
                       " sainstitutionmobile_logid, " +
                       " sainstitution2mobileno_gid, " +
                       " sacontactinstitution_gid, " +
                       " samobile_no," +
                       " saprimary_status," +
                       " sawhatsapp_no," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.sainstitution2mobileno_gid + "'," +
                       "'" + values.sacontactinstitution_gid + "'," +
                       "'" + mobile_no + "'," +
                       "'" + primary_mobileno + "'," +
                       "'" + whatsapp_mobileno + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Mobile number updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }
        }
        public void DaGetTempMobileNoList(string sacontactinstitution_gid, string employee_gid, MdlContactMobileNoSAInstituion values)
        {
            msSQL = "select samobile_no,sainstitution2mobileno_gid,saprimary_status,sawhatsapp_no from ocs_mst_tsainstitution2mobileno" +
                    " where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<SacontactInstimobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new SacontactInstimobileno_list
                    {
                        sainstitution2mobileno_gid = (dr_datarow["sainstitution2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
                values.SacontactInstimobileno_list = getcontactmobileno_list;

            }
            dt_datatable.Dispose();
        }
        public void DaInstitutionMobileNoList(string sacontactinstitution_gid, string employee_gid, MdlContactMobileNoSAInstituion valuessa)
        {
            msSQL = "select samobile_no,sainstitution2mobileno_gid,saprimary_status,sawhatsapp_no " +
                    " from ocs_mst_tsainstitution2mobileno where  sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<SacontactInstimobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new SacontactInstimobileno_list
                    {
                        sainstitution2mobileno_gid = (dr_datarow["sainstitution2mobileno_gid"].ToString()),
                        samobile_no = (dr_datarow["samobile_no"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        sawhatsapp_no = (dr_datarow["sawhatsapp_no"].ToString()),
                    });
                }
                valuessa.SacontactInstimobileno_list = getcontactmobileno_list;
            }

            dt_datatable.Dispose();
        }


        //Email Address

        public bool DaPostEmailAddress(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "'  and saprimary_status='Yes'";
            string lsprimary_emailaddress = objdbconn.GetExecuteScalar(msSQL);

            if (lsprimary_emailaddress == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary email address added";
                objdbconn.CloseConn();
                return false;
            }
            msSQL = "select saemail_address from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saemail_address='" + values.saemail_address + "'";
            string lsemail_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsemail_address == (values.saemail_address))
            {
                values.status = false;
                values.message = "Already this email address added";
                objdbconn.CloseConn();
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAEM");
            msSQL = " insert into ocs_mst_tsainstitution2email(" +
                    " sainstitution2email_gid," +
                    " sacontactinstitution_gid," +
                    " saemail_address," +
                    " saprimary_status," +
                    " samail_type, " +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saemail_address + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.samail_type + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Email address added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding email address";
                return false;
            }
        }
        public bool DaPostEmailAddressInEdit(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saprimary_status='Yes'";
            string lsprimary_emailaddress = objdbconn.GetExecuteScalar(msSQL);

            if (lsprimary_emailaddress == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary email address added";
                objdbconn.CloseConn();
                return false;
            }
            msSQL = "select saemail_address from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saemail_address='" + values.saemail_address + "'";
            string lsemail_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsemail_address == (values.saemail_address))
            {
                values.status = false;
                values.message = "Already this email address added";
                objdbconn.CloseConn();
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SAEM");
            msSQL = " insert into ocs_mst_tsainstitution2email(" +
                    " sainstitution2email_gid," +
                    " sacontactinstitution_gid," +
                    " saemail_address," +
                    " saprimary_status," +
                    " samail_type, " +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saemail_address + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.samail_type + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Email address added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding email address";
                return false;
            }
        }
        public void DaGetEmailAddressList(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select saemail_address,sainstitution2email_gid,samail_type,saprimary_status from ocs_mst_tsainstitution2email where " +
                    " sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardInstiemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardInstiemailaddress_list
                    {
                        sainstitution2email_gid = (dr_datarow["sainstitution2email_gid"].ToString()),
                        samail_type = (dr_datarow["samail_type"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardInstiemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteEmailAddress(string sainstitution2email_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2email where sainstitution2email_gid='" + sainstitution2email_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (sainstitution2email_gid == "")
            {
                mnResult = 0;
            }
            if (mnResult != 0)
            {

                values.message = "Email address deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the email address";
                values.status = false;

            }
        }
        public void DaTempEmailAddress(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaInstitutionEmailAddressList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select saemail_address,sainstitution2email_gid,samail_type,saprimary_status from ocs_mst_tsainstitution2email where " +
                    " sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardInstiemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardInstiemailaddress_list
                    {
                        sainstitution2email_gid = (dr_datarow["sainstitution2email_gid"].ToString()),
                        samail_type = (dr_datarow["samail_type"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardInstiemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaEmailAddressEdit(string sainstitution2email_gid, MdlsaOnboardInstiEmailAddress values)
        {
            try
            {
                msSQL = "select saemail_address,sainstitution2email_gid,samail_type,saprimary_status from ocs_mst_tsainstitution2email where " +
                " sainstitution2email_gid='" + sainstitution2email_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.saemail_address = objODBCDatareader["saemail_address"].ToString();
                    values.saprimary_status = objODBCDatareader["saprimary_status"].ToString();
                    values.samail_type = objODBCDatareader["samail_type"].ToString();
                    values.sainstitution2email_gid = objODBCDatareader["sainstitution2email_gid"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaEmailAddressUpdate(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select sacontactinstitution_gid,saemail_address,sainstitution2email_gid,samail_type,saprimary_status from ocs_mst_tsainstitution2email where " +
                  " sainstitution2email_gid='" + values.sainstitution2email_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                email_address = objODBCDatareader["saemail_address"].ToString();
                primary_emailaddress = objODBCDatareader["saprimary_status"].ToString();
                mail_type = objODBCDatareader["samail_type"].ToString();
                institution2emailaddress_gid = objODBCDatareader["sainstitution2email_gid"].ToString();
                contactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitution2email set " +
                         " saemail_address='" + values.saemail_address + "'," +
                         " saprimary_status='" + values.saprimary_status + "'," +
                         " samail_type='" + values.samail_type + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sainstitution2email_gid='" + values.sainstitution2email_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (contactinstitution_gid == values.sacontactinstitution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAEL");

                        msSQL = "Insert into ocs_mst_tsainstitution2emailupdatelog(" +
                       " sainstitution2email_logid, " +
                       " sainstitution2email_gid, " +
                       " sacontactinstitution_gid, " +
                       " saemail_address," +
                       " saprimary_status," +
                       " samail_type," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.sainstitution2email_gid + "'," +
                       "'" + values.sacontactinstitution_gid + "'," +
                       "'" + email_address + "'," +
                       "'" + primary_emailaddress + "'," +
                       "'" + mail_type + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Email address updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }
        }
        public void DaGetEmailAddressTempList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "select saemail_address,sainstitution2email_gid,samail_type,saprimary_status from ocs_mst_tsainstitution2email where " +
                    " sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardemailaddress_list = new List<saOnboardInstiemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardemailaddress_list.Add(new saOnboardInstiemailaddress_list
                    {
                        sainstitution2email_gid = (dr_datarow["sainstitution2email_gid"].ToString()),
                        samail_type = (dr_datarow["samail_type"].ToString()),
                        saemail_address = (dr_datarow["saemail_address"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString())
                    });
                }
                values.saOnboardInstiemailaddress_list = getsaOnboardemailaddress_list;
            }
            dt_datatable.Dispose();
        }


        // Address
        public bool DaPostAddress(string employee_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2address where saprimary_status='Yes' and sacontactinstitution_gid='" + employee_gid + "'";
            string lsprimary_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_address == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary address added";
                return false;
            }
            msSQL = "select sainstitution2address_gid from ocs_mst_tsainstitution2address where saaddresstype_name='" + values.saaddresstype_name + "' and (sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already address type added";
                return false;
            }
            objODBCDatareader.Close();

            msGetGid = objcmnfunctions.GetMasterGID("SACA");
            msSQL = " insert into ocs_mst_tsainstitution2address(" +
                    " sainstitution2address_gid," +
                    " sacontactinstitution_gid," +
                    " saaddresstype_gid," +
                    " saaddresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " saprimary_status," +
                    " salandmark," +
                    " sapostal_code," +
                    " sacity," +
                    " sataluka," +
                    " sadistrict," +
                    " sastate," +
                    " sacountry," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saaddresstype_gid + "'," +
                    "'" + values.saaddresstype_name + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.salandmark + "'," +
                    "'" + values.sapostal_code + "'," +
                    "'" + values.sacity + "'," +
                    "'" + values.sataluka + "'," +
                    "'" + values.sadistrict + "'," +
                    "'" + values.sastate + "'," +
                    "'" + values.sacountry + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Address details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding address";
                return false;
            }

        }
        public bool DaPostAddressInEdit(string employee_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = "select saprimary_status from ocs_mst_tsainstitution2address where saprimary_status='Yes' and sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            string lsprimary_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_address == (values.saprimary_status))
            {
                values.status = false;
                values.message = "Already primary address added";
                return false;
            }
            msSQL = "select sainstitution2address_gid from ocs_mst_tsainstitution2address where saaddresstype_name='" + values.saaddresstype_name + "' and (sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already address type added";
                return false;
            }
            objODBCDatareader.Close();

            msGetGid = objcmnfunctions.GetMasterGID("SACA");
            msSQL = " insert into ocs_mst_tsainstitution2address(" +
                    " sainstitution2address_gid," +
                    " sacontactinstitution_gid," +
                    " saaddresstype_gid," +
                    " saaddresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " saprimary_status," +
                    " salandmark," +
                    " sapostal_code," +
                    " sacity," +
                    " sataluka," +
                    " sadistrict," +
                    " sastate," +
                    " sacountry," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.saaddresstype_gid + "'," +
                    "'" + values.saaddresstype_name + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.saprimary_status + "'," +
                    "'" + values.salandmark + "'," +
                    "'" + values.sapostal_code + "'," +
                    "'" + values.sacity + "'," +
                    "'" + values.sataluka + "'," +
                    "'" + values.sadistrict + "'," +
                    "'" + values.sastate + "'," +
                    "'" + values.sacountry + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Address details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding address";
                return false;
            }

        }
        public void DaGetAddressList(string employee_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = " select sacontactinstitution_gid,sainstitution2address_gid,saaddresstype_name,saprimary_status, addressline1, addressline2, sataluka, sadistrict, sastate, sacountry, latitude, longitude," +
                    " sapostal_code from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardinstiaddress_list = new List<saOnboardInstiaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardinstiaddress_list.Add(new saOnboardInstiaddress_list
                    {
                        sainstitution2address_gid = (dr_datarow["sainstitution2address_gid"].ToString()),
                        saaddresstype_name = (dr_datarow["saaddresstype_name"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        sataluka = (dr_datarow["sataluka"].ToString()),
                        sadistrict = (dr_datarow["sadistrict"].ToString()),
                        sastate = (dr_datarow["sastate"].ToString()),
                        sacountry = (dr_datarow["sacountry"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        sapostal_code = (dr_datarow["sapostal_code"].ToString())

                    });
                }
                values.saOnboardInstiaddress_list = getsaOnboardinstiaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteAddress(string sainstitution2address_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2address where sainstitution2address_gid='" + sainstitution2address_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Address details deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the address";
                values.status = false;

            }
        }
        public void DaTempAddress(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaGetAddressTempList(string sacontactinstitution_gid, string employee_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = " select sacontactinstitution_gid,sainstitution2address_gid,saaddresstype_name,saprimary_status, addressline1, addressline2, sataluka, sadistrict, sastate, sacountry, latitude, longitude," +
                    " sapostal_code from ocs_mst_tsainstitution2address where" +
                    " sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardinstiaddress_list = new List<saOnboardInstiaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardinstiaddress_list.Add(new saOnboardInstiaddress_list
                    {
                        sainstitution2address_gid = (dr_datarow["sainstitution2address_gid"].ToString()),
                        saaddresstype_name = (dr_datarow["saaddresstype_name"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        sataluka = (dr_datarow["sataluka"].ToString()),
                        sadistrict = (dr_datarow["sadistrict"].ToString()),
                        sastate = (dr_datarow["sastate"].ToString()),
                        sacountry = (dr_datarow["sacountry"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        sapostal_code = (dr_datarow["sapostal_code"].ToString())

                    });
                }
                values.saOnboardInstiaddress_list = getsaOnboardinstiaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaAddressDetailEdit(string sainstitution2address_gid, MdlSaOnboardInstiAddress values)
        {
            try
            {
                msSQL = " select sacontactinstitution_gid,sainstitution2address_gid,saaddresstype_gid,saaddresstype_name," +
                        " saprimary_status, addressline1, addressline2, sataluka, sadistrict, sastate,saprimary_status, " +
                        " sacountry, latitude, longitude,sapostal_code,sacity,salandmark from ocs_mst_tsainstitution2address " +
                        " where sainstitution2address_gid='" + sainstitution2address_gid + "'";


                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.saaddresstype_gid = objODBCDatareader["saaddresstype_gid"].ToString();
                    values.saaddresstype_name = objODBCDatareader["saaddresstype_name"].ToString();
                    values.addressline1 = objODBCDatareader["addressline1"].ToString();
                    values.addressline2 = objODBCDatareader["addressline2"].ToString();
                    values.salandmark = objODBCDatareader["salandmark"].ToString();
                    values.sataluka = objODBCDatareader["sataluka"].ToString();
                    values.saprimary_status = objODBCDatareader["saprimary_status"].ToString();
                    values.sapostal_code = objODBCDatareader["sapostal_code"].ToString();
                    values.sacity = objODBCDatareader["sacity"].ToString();
                    values.sadistrict = objODBCDatareader["sadistrict"].ToString();
                    values.sastate = objODBCDatareader["sastate"].ToString();
                    values.sacountry = objODBCDatareader["sacountry"].ToString();
                    values.latitude = objODBCDatareader["latitude"].ToString();
                    values.longitude = objODBCDatareader["longitude"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    values.sainstitution2address_gid = objODBCDatareader["sainstitution2address_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaAddressDetailUpdate(string employee_gid, MdlSaOnboardInstiAddress values)
        {

            msSQL = " select sacontactinstitution_gid,sainstitution2address_gid,saaddresstype_gid,saaddresstype_name," +
                       " saprimary_status, addressline1, addressline2, sataluka, sadistrict, sastate,saprimary_status, " +
                       " sacountry, latitude, longitude,sapostal_code,sacity,salandmark from ocs_mst_tsainstitution2address " +
                       " where sainstitution2address_gid='" + values.sainstitution2address_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsaddress_typegid = objODBCDatareader["saaddresstype_gid"].ToString();
                lsaddress_type = objODBCDatareader["addresstype_name"].ToString();
                lsaddressline1 = objODBCDatareader["addressline1"].ToString();
                lsaddressline2 = objODBCDatareader["saaddressline2"].ToString();
                lslandmark = objODBCDatareader["salandmark"].ToString();
                lstaluka = objODBCDatareader["sataluka"].ToString();
                lsprimary_address = objODBCDatareader["saprimary_status"].ToString();
                lspostal_code = objODBCDatareader["sapostal_code"].ToString();
                lscity = objODBCDatareader["sacity"].ToString();
                lsdistrict = objODBCDatareader["sadistrict"].ToString();
                lsstate = objODBCDatareader["sastate"].ToString();
                lscountry = objODBCDatareader["sacountry"].ToString();
                lslatitude = objODBCDatareader["latitude"].ToString();
                lslongitude = objODBCDatareader["longitude"].ToString();
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                lsinstitution2address_gid = objODBCDatareader["sainstitution2address_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitution2address set " +
                         " saaddresstype_gid='" + values.saaddresstype_gid + "'," +
                         " saaddresstype_name='" + values.saaddresstype_name + "'," +
                         " addressline1='" + values.addressline1 + "'," +
                         " addressline2='" + values.addressline2 + "'," +
                         " salandmark='" + values.salandmark + "'," +
                         " sataluka='" + values.sataluka + "'," +
                         " saprimary_status='" + values.saprimary_status + "'," +
                         " sapostal_code='" + values.sapostal_code + "'," +
                         " sacity='" + values.sacity + "'," +
                         " sadistrict='" + values.sadistrict + "'," +
                         " sastate='" + values.sastate + "'," +
                         " sacountry='" + values.sacountry + "'," +
                         " latitude='" + values.latitude + "'," +
                         " longitude='" + values.longitude + "'," +
                         " saupdated_by='" + employee_gid + "'," +
                         " saupdated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sainstitution2address_gid='" + values.sainstitution2address_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (contactinstitution_gid == values.sacontactinstitution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAAL");

                        msSQL = " insert into ocs_mst_tsainstitution2addressupdatelog(" +
                      " sainstitution2address_logid," +
                      " sainstitution2address_gid," +
                      " sacontactinstitution_gid," +
                      " saaddresstype_gid," +
                      " saaddresstype_name," +
                      " addressline1," +
                      " addressline2," +
                      " saprimary_status," +
                      " salandmark," +
                      " sapostal_code," +
                      " sacity," +
                      " sataluka," +
                      " sataluka," +
                      " sastate," +
                      " sacountry," +
                      " latitude," +
                      " longitude," +
                      " created_by," +
                      " created_date)" +
                      " values(" +
                      "'" + msGetGid + "'," +
                      "'" + values.sainstitution2address_gid + "'," +
                      "'" + values.sacontactinstitution_gid + "'," +
                      "'" + values.saaddresstype_name + "'," +
                      "'" + values.saaddresstype_name + "'," +
                      "'" + values.addressline1 + "'," +
                      "'" + values.addressline2 + "'," +
                      "'" + values.saprimary_status + "'," +
                      "'" + values.salandmark + "'," +
                      "'" + values.sapostal_code + "'," +
                      "'" + values.sacity + "'," +
                      "'" + values.sataluka + "'," +
                      "'" + values.sadistrict + "'," +
                      "'" + values.sastate + "'," +
                      "'" + values.sacountry + "'," +
                      "'" + values.latitude + "'," +
                      "'" + values.longitude + "'," +
                      "'" + employee_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Address details updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }
        }
        public void DaInstitutionAddressList(string sacontactinstitution_gid, string employee_gid, MdlSaOnboardInstiAddress values)
        {
            msSQL = " select sacontactinstitution_gid,sainstitution2address_gid,saaddresstype_name,saprimary_status, addressline1, addressline2, sataluka, sadistrict, sastate, sacountry, latitude, longitude," +
                    " sapostal_code from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardinstiaddress_list = new List<saOnboardInstiaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardinstiaddress_list.Add(new saOnboardInstiaddress_list
                    {
                        sainstitution2address_gid = (dr_datarow["sainstitution2address_gid"].ToString()),
                        saaddresstype_name = (dr_datarow["saaddresstype_name"].ToString()),
                        saprimary_status = (dr_datarow["saprimary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        sataluka = (dr_datarow["sataluka"].ToString()),
                        sadistrict = (dr_datarow["sadistrict"].ToString()),
                        sastate = (dr_datarow["sastate"].ToString()),
                        sacountry = (dr_datarow["sacountry"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        sapostal_code = (dr_datarow["sapostal_code"].ToString())

                    });
                }
                values.saOnboardInstiaddress_list = getsaOnboardinstiaddress_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetPostalCodeDetails(string postal_code, MdlSaOnboardInstiAddress objMdlOnboardAddress)
        {
            try
            {
                msSQL = "select city,taluka,district, state from ocs_mst_tpostalcode where " +
                        " postalcode_value='" + postal_code + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        string country = "India";
                        objMdlOnboardAddress.sacity = (dr_datarow["city"].ToString());
                        objMdlOnboardAddress.sataluka = (dr_datarow["taluka"].ToString());
                        objMdlOnboardAddress.sadistrict = (dr_datarow["district"].ToString());
                        objMdlOnboardAddress.sastate = (dr_datarow["state"].ToString());
                        objMdlOnboardAddress.sacountry = country;
                    }

                }
                dt_datatable.Dispose();

                objMdlOnboardAddress.status = true;
            }
            catch
            {
                objMdlOnboardAddress.status = false;
            }

        }

        //GST
        public bool DaPostInstitutionGST(string employee_gid, MdlSAOnboardInstiGST values)
        {
            //msSQL = "select application_gid from tmp_application where employee_gid='" + employee_gid + "'";
            //lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

            //msSQL = "select * from ocs_mst_tinstitution2branch where gst_no='" + values.gst_no + "' and institution_gid='" + employee_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    objODBCDatareader.Close();
            //    values.status = false;
            //    values.message = "Already Added";
            //    return false;
            //}
            //objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("SACG");
            msSQL = " insert into ocs_mst_tsainstitution2gst(" +
                        " sainstitution2gst_gid," +
                        " sacontactinstitution_gid," +
                        //" gststate_gid," +
                        " gststate_name," +
                        " gst_no," +
                        " gstregister_status," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.gststate_name + "'," +
                    "'" + values.gst_no + "'," +
                    "'" + values.gstregister_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "GST details added successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";
                return false;
            }
        }
        public bool DaPostInstitutionGSTInEdit(string employee_gid, MdlSAOnboardInstiGST values)
        {
            //msSQL = "select application_gid from tmp_application where employee_gid='" + employee_gid + "'";
            //lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

            //msSQL = "select * from ocs_mst_tinstitution2branch where gst_no='" + values.gst_no + "' and institution_gid='" + employee_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    objODBCDatareader.Close();
            //    values.status = false;
            //    values.message = "Already Added";
            //    return false;
            //}
            //objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("SACG");
            msSQL = " insert into ocs_mst_tsainstitution2gst(" +
                        " sainstitution2gst_gid," +
                        " sacontactinstitution_gid," +
                        //" gststate_gid," +
                        " gststate_name," +
                        " gst_no," +
                        " gstregister_status," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.gststate_name + "'," +
                    "'" + values.gst_no + "'," +
                    "'" + values.gstregister_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "GST details added successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";
                return false;
            }
        }
        public bool DaPostGST(string employee_gid, MdlSAOnboardInstiGST values)
        {

            InstitutionGSTDetail[] GstArray = values.GSTArray;
            string GSTValue, GSTStateCode, GSTState;

            for (int i = 0; i < GstArray.Length; i++)
            {
                GSTValue = GstArray[i].gstinId;
                GSTStateCode = GSTValue.Substring(0, 2);

                msSQL = "select gst_state from ocs_mst_tgstcode2state where " +
                       " gst_code='" + GSTStateCode + "'";
                GSTState = objdbconn.GetExecuteScalar(msSQL);

                msGetGid = objcmnfunctions.GetMasterGID("SACG");
                msSQL = " insert into ocs_mst_tsainstitution2gst(" +
                        " sainstitution2gst_gid," +
                        " sacontactinstitution_gid," +
                        //" gststate_gid," +
                        " gststate_name," +
                        " gst_no," +
                        " gstregister_status," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + employee_gid + "'," +
                        //"'" + values.gststate_gid + "'," +
                        "'" + GSTState + "'," +
                        "'" + GSTValue + "'," +
                        "'" + "Yes" + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "GST details added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding GST details";
                return false;
            }

        }

        public void DaGetGSTList(string employee_gid, MdlSAOnboardInstiGST values)
        {
            msSQL = "select sainstitution2gst_gid,gststate_name,gst_no,gstregister_status from ocs_mst_tsainstitution2gst where " +
              " sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getInstigst_list = new List<gst_Onboard_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getInstigst_list.Add(new gst_Onboard_list
                    {
                        sainstitution2gst_gid = (dr_datarow["sainstitution2gst_gid"].ToString()),
                        gststate_name = (dr_datarow["gststate_name"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gstregister_status = (dr_datarow["gstregister_status"].ToString())
                    });
                }
                values.gst_Onboard_list = getInstigst_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteGST(string sainstitution2gst_gid, string employee_gid, MdlSAOnboardInstiGST values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2gst where sainstitution2gst_gid='" + sainstitution2gst_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "GST details deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the Gst details";
                values.status = false;

            }
        }
        public void DaDeleteGSTInstitution(string employee_gid, string sacontactinstitution_gid, MdlMstGST values)
        {
            msSQL = "select sainstitution2gst_gid from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + sacontactinstitution_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            string sainstitution2gst_gid;
            foreach (DataRow dr_datarow in dt_datatable.Rows)
            {
                sainstitution2gst_gid = (dr_datarow["sainstitution2gst_gid"].ToString());
                msSQL = "delete from ocs_mst_tsainstitution2gst where sainstitution2gst_gid='" + sainstitution2gst_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            dt_datatable.Dispose();

            if (mnResult != 0)
            {
                values.message = "GST details deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the Gst details";
                values.status = false;

            }
        }

        public void DaTempGST(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaInstitutionGSTList(string sacontactinstitution_gid, string employee_gid, MdlSAOnboardInstiGST values)
        {
            msSQL = "select sainstitution2gst_gid,gststate_name,gst_no,gstregister_status from ocs_mst_tsainstitution2gst where " +
                    " sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getInstigst_list = new List<gst_Onboard_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getInstigst_list.Add(new gst_Onboard_list
                    {
                        sainstitution2gst_gid = (dr_datarow["sainstitution2gst_gid"].ToString()),
                        gststate_name = (dr_datarow["gststate_name"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gstregister_status = (dr_datarow["gstregister_status"].ToString())
                    });
                }
                values.gst_Onboard_list = getInstigst_list;
            }
            dt_datatable.Dispose();
        }
        public void DaInstitutionGSTEditList(string sacontactinstitution_gid, string employee_gid, MdlSAOnboardInstiGST values)
        {
            msSQL = "select sainstitution2gst_gid,gststate_name,gst_no,gstregister_status from ocs_mst_tsainstitution2gst where " +
                    " sacontactinstitution_gid = '" + sacontactinstitution_gid + "' or sacontactinstitution_gid= '" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getInstigst_list = new List<gst_Onboard_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getInstigst_list.Add(new gst_Onboard_list
                    {
                        sainstitution2gst_gid = (dr_datarow["sainstitution2gst_gid"].ToString()),
                        gststate_name = (dr_datarow["gststate_name"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gstregister_status = (dr_datarow["gstregister_status"].ToString())
                    });
                }
                values.gst_Onboard_list = getInstigst_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGSTEdit(string sainstitution2gst_gid, MdlSAOnboardInstiGST values)
        {
            try
            {
                msSQL = "select gststate_name, gst_no, institution_gid, sainstitution2gst_gid, gstregister_status from ocs_mst_tsainstitution2gst where sainstitution2gst_gid='" + sainstitution2gst_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.gststate_name = objODBCDatareader["gststate_name"].ToString();
                    values.gst_no = objODBCDatareader["gst_no"].ToString();
                    values.sainstitution2gst_gid = objODBCDatareader["sainstitution2gst_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.gstregister_status = objODBCDatareader["gstregister_status"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaGSTUpdate(string employee_gid, MdlSAOnboardInstiGST values)
        {
            msSQL = "select gststate_name, gst_no, institution_gid, sainstitution2gst_gid, gstregister_status from ocs_mst_tsainstitution2gst where sainstitution2gst_gid='" + values.sainstitution2gst_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {

                lsgststate_name = objODBCDatareader["gststate_name"].ToString();
                lsgst_no = objODBCDatareader["gst_no"].ToString();
                lsinstitution2gst_gid = objODBCDatareader["sainstitution2gst_gid"].ToString();
                institution_gid = objODBCDatareader["institution_gid"].ToString();
                lsgstregister_status = objODBCDatareader["gstregister_status"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitution2gst set " +
                         " gststate_name='" + values.gststate_name + "'," +
                         " gst_no='" + values.gst_no + "'," +
                         " gstregister_status='" + values.gstregister_status + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sainstitution2gst_gid='" + values.sainstitution2gst_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (institution_gid == values.institution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAGL");

                        msSQL = "Insert into ocs_mst_tsainstitution2gstupdatelog(" +
                       " sainstitution2gst_update_logid, " +
                       " sainstitution2gst_gid, " +
                       " institution_gid, " +
                       " gststate_name," +
                       " gst_no," +
                       " gstregister_status," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.sainstitution2gst_gid + "'," +
                       "'" + values.institution_gid + "'," +
                       "'" + lsgststate_name + "'," +
                       "'" + lsgst_no + "'," +
                       "'" + lsgstregister_status + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Company GST updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }
        }
        public void DaGetGSTState(string gst_code, MdlSAOnboardInstiGST objMdlMstGST)
        {
            try
            {
                msSQL = "select gst_state from ocs_mst_tgstcode2state where " +
                        " gst_code='" + gst_code + "'";
                objMdlMstGST.gststate_name = objdbconn.GetExecuteScalar(msSQL);

                objMdlMstGST.status = true;
            }
            catch
            {
                objMdlMstGST.status = false;
            }
        }

        //Individual
        public bool DaPostIndividualDetails(string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {
            if (!string.IsNullOrEmpty(values.sa_firstname))
            {
                if (values.sa_firstname.Contains("'"))
                {
                    values.sa_firstname = values.sa_firstname.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_middlename))
            {
                if (values.sa_middlename.Contains("'"))
                {
                    values.sa_middlename = values.sa_middlename.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_lastname))
            {
                if (values.sa_lastname.Contains("'"))
                {
                    values.sa_lastname = values.sa_lastname.Replace("'", "");
                }
            }
            msGetGid = objcmnfunctions.GetMasterGID("SACI");
            msSQL = " insert into ocs_mst_tsainstitutionindividual(" +
                    " sainst_individual_gid," +
                    " sacontactinstitution_gid," +
                    " sa_firstname," +
                    " sa_middlename," +
                    " sa_lastname," +
                    " sa_designation," +
                    " sa_pannumber," +
                    " sa_aadharnumber," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.sa_firstname + "'," +
                    "'" + values.sa_middlename + "'," +
                    "'" + values.sa_lastname + "'," +
                    "'" + values.sa_designation + "'," +
                    "'" + values.sa_pannumber + "'," +
                    "'" + values.sa_aadharnumber + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Individual details added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding individual details";
                return false;
            }

        }
        public bool DaPostIndividualDetailsInEdit(string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SACI");
            msSQL = " insert into ocs_mst_tsainstitutionindividual(" +
                    " sainst_individual_gid," +
                    " sacontactinstitution_gid," +
                    " sa_firstname," +
                    " sa_middlename," +
                    " sa_lastname," +
                    " sa_designation," +
                    " sa_pannumber," +
                    " sa_aadharnumber," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.sa_firstname + "'," +
                    "'" + values.sa_middlename + "'," +
                    "'" + values.sa_lastname + "'," +
                    "'" + values.sa_designation + "'," +
                    "'" + values.sa_pannumber + "'," +
                    "'" + values.sa_aadharnumber + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Individual details added successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding individual details";
                return false;
            }

        }
        public void DaGetIndividualList(string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {
            msSQL = " select sainst_individual_gid,concat(sa_firstname ,' ',sa_middlename ,' ' ,sa_lastname) as sa_firstname,d.designation_type,  sa_pannumber,concat('XXXX-XXXX-',RIGHT(sa_aadharnumber,4)) as sa_aadharnumber" +
                    " from ocs_mst_tsainstitutionindividual i, ocs_mst_tdesignation d where " +
                    " d.designation_gid = i.sa_designation and sacontactinstitution_gid = '" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getInstiindivi_list = new List<onboard_IndividualInsti_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getInstiindivi_list.Add(new onboard_IndividualInsti_list
                    {
                        sainst_individual_gid = (dr_datarow["sainst_individual_gid"].ToString()),
                        sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                        //sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                        //sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                        designation_type = (dr_datarow["designation_type"].ToString()),
                        sa_pannumber = (dr_datarow["sa_pannumber"].ToString()),
                        sa_aadharnumber = (dr_datarow["sa_aadharnumber"].ToString())
                    });
                }
                values.onboard_IndividualInsti_list = getInstiindivi_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteIndividual(string sainst_individual_gid, MdlMstSAOnboardInstiIndividual values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionindividual where sainst_individual_gid='" + sainst_individual_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Individual details deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the individual details";
                values.status = false;

            }
        }
        public void DaTempIndividual(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaIndividualList(string sacontactinstitution_gid, string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {
            msSQL = " select sainst_individual_gid,concat(sa_firstname,' ',sa_middlename,' ',sa_lastname) as saName,d.designation_type,sa_pannumber,concat('XXXX-XXXX-',RIGHT(sa_aadharnumber,4)) as sa_aadharnumber" +
                   " from ocs_mst_tsainstitutionindividual i, ocs_mst_tdesignation d where " +
                   " d.designation_gid = i.sa_designation and sacontactinstitution_gid = '" + sacontactinstitution_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getindividual_list = new List<onboard_IndividualInsti_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getindividual_list.Add(new onboard_IndividualInsti_list
                    {
                        sainst_individual_gid = (dr_datarow["sainst_individual_gid"].ToString()),
                        sa_firstname = (dr_datarow["saName"].ToString()),
                        //sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                        //sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                        designation_type = (dr_datarow["designation_type"].ToString()),
                        sa_pannumber = (dr_datarow["sa_pannumber"].ToString()),
                        sa_aadharnumber = (dr_datarow["sa_aadharnumber"].ToString())
                    });
                }
                values.onboard_IndividualInsti_list = getindividual_list;
            }

            dt_datatable.Dispose();
        }
        public void DaGetIndividualList(string sacontactinstitution_gid, string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {
            msSQL = " select i.sainst_individual_gid,i.sa_firstname,d.designation_type, i.sa_pannumber,concat('XXXX-XXXX-',RIGHT(i.sa_aadharnumber,4)) as sa_aadharnumber" +
                   " from ocs_mst_tsainstitutionindividual i  " +
                   " left join ocs_mst_tdesignation d on d.designation_gid = i.sa_designation " +
                   " where i.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' or i.sacontactinstitution_gid= '" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getindividual_list = new List<onboard_IndividualInsti_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getindividual_list.Add(new onboard_IndividualInsti_list
                    {
                        sainst_individual_gid = (dr_datarow["sainst_individual_gid"].ToString()),
                        sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                        //sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                        //sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                        designation_type = (dr_datarow["designation_type"].ToString()),
                        sa_pannumber = (dr_datarow["sa_pannumber"].ToString()),
                        sa_aadharnumber = (dr_datarow["sa_aadharnumber"].ToString())
                    });
                }
                values.onboard_IndividualInsti_list = getindividual_list;
            }

            dt_datatable.Dispose();
        }
        public void DaIndividualEdit(string sainst_individual_gid, MdlMstSAOnboardInstiIndividual values, string employeeid)
        {
            try
            {
                msSQL = " select sainst_individual_gid, sacontactinstitution_gid, sa_firstname, sa_middlename, " +
                        " sa_lastname, sa_designation, sa_pannumber,sa_aadharnumber from " +
                        " ocs_mst_tsainstitutionindividual where " +
                        " sainst_individual_gid='" + sainst_individual_gid + "' or sainst_individual_gid='" + employeeid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.sainst_individual_gid = objODBCDatareader["sainst_individual_gid"].ToString();
                    values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                    values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                    values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                    values.sa_designation = objODBCDatareader["sa_designation"].ToString();
                    values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                    values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();


                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaIndividualUpdate(string employee_gid, MdlMstSAOnboardInstiIndividual values)
        {

            msSQL = " select sainst_individual_gid, sacontactinstitution_gid, sa_firstname, sa_middlename, " +
                      " sa_lastname, sa_designation, sa_pannumber,sa_aadharnumber from " +
                      " ocs_mst_tsainstitutionindividual where sainst_individual_gid='" + values.sainst_individual_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {

                sainst_individual_gid = objODBCDatareader["sainst_individual_gid"].ToString();
                sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                sa_designation = objODBCDatareader["sa_designation"].ToString();
                sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitutionindividual set " +
                         " sa_firstname='" + values.sa_firstname + "'," +
                         " sa_middlename='" + values.sa_middlename + "'," +
                          " sa_lastname='" + values.sa_lastname + "'," +
                         " sa_designation='" + values.sa_designation + "'," +
                          " sa_pannumber='" + values.sa_pannumber + "'," +
                         " sa_aadharnumber='" + values.sa_aadharnumber + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sainst_individual_gid='" + values.sainst_individual_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (contactinstitution_gid == values.sacontactinstitution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAIL");

                        msSQL = "Insert into ocs_mst_tsainstitutionindividualupdatelog(" +
                       " sainst_individual_update_logid, " +
                       " sainst_individual_gid, " +
                       " sacontactinstitution_gid, " +
                       " sa_firstname," +
                       " sa_middlename," +
                       " sa_lastname," +
                       " sa_designation," +
                       " sa_pannumber," +
                       " sa_aadharnumber," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.sainst_individual_gid + "'," +
                       "'" + values.sacontactinstitution_gid + "'," +
                       "'" + sa_firstname + "'," +
                       "'" + sa_middlename + "'," +
                       "'" + sa_lastname + "'," +
                       "'" + sa_designation + "'," +
                       "'" + sa_pannumber + "'," +
                       "'" + sa_aadharnumber + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Individual details updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }

        }

        //Prospects
        public bool DaAddIndividualProspects(string employee_gid, MdlsaOnboardIstitutionProspects values)
        {
            msSQL = "select salead_name from ocs_mst_tsainstitutionprospects where  sacontactinstitution_gid='" + employee_gid + "'";
            string salead_name = objdbconn.GetExecuteScalar(msSQL);
            if (salead_name == (values.salead_name))
            {
                values.status = false;
                values.message = "Already lead name added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SACP");
            msSQL = " insert into ocs_mst_tsainstitutionprospects(" +
                    " saprospects_institution_gid," +
                    " sacontactinstitution_gid," +
                    " salead_name," +
                    " sasector_industry,created_by,created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.salead_name + "'," +
                    "'" + values.sasector_industry + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Prospects details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding prospects";
                return false;
            }
        }
        public bool DaAddIndividualProspectsInEdit(string employee_gid, MdlsaOnboardIstitutionProspects values)
        {
            msSQL = "select salead_name from ocs_mst_tsainstitutionprospects where  sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            string salead_name = objdbconn.GetExecuteScalar(msSQL);
            if (salead_name == (values.salead_name))
            {
                values.status = false;
                values.message = "Already lead name added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SACP");
            msSQL = " insert into ocs_mst_tsainstitutionprospects(" +
                    " saprospects_institution_gid," +
                    " sacontactinstitution_gid," +
                    " salead_name," +
                    " sasector_industry,created_by,created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.salead_name + "'," +
                    "'" + values.sasector_industry + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Prospects details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding prospects";
                return false;
            }
        }
        public void DaGetprospectsList(string employee_gid, MdlsaOnboardIstitutionProspects values)
        {
            msSQL = " select saprospects_institution_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardInstiProspects_list = new List<saOnboardInstiProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardInstiProspects_list.Add(new saOnboardInstiProspects_list
                    {
                        saprospects_institution_gid = (dr_datarow["saprospects_institution_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())

                    });
                }
                values.saOnboardInstiProspects_list = getsaOnboardInstiProspects_list;
            }
            dt_datatable.Dispose();
        }
        public void DaDeleteProspects(string saprospects_institution_gid, MdlsaOnboardIstitutionProspects values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionprospects where saprospects_institution_gid='" + saprospects_institution_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Prospects deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the prospects";
                values.status = false;

            }
        }
        public void DaTempProspects(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaInstitutionProspectsList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardIstitutionProspects valuessa)
        {
            msSQL = " select saprospects_institution_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardInstiProspects_list = new List<saOnboardInstiProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardInstiProspects_list.Add(new saOnboardInstiProspects_list
                    {
                        saprospects_institution_gid = (dr_datarow["saprospects_institution_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())

                    });
                }
                valuessa.saOnboardInstiProspects_list = getsaOnboardInstiProspects_list;
            }
            dt_datatable.Dispose();

        }
        public void DaGetProspectsEditList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardIstitutionProspects values)
        {
            msSQL = " select saprospects_institution_gid,salead_name,sasector_industry " +
                    " from ocs_mst_tsainstitutionprospects where " +
                    " sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardInstiProspects_list = new List<saOnboardInstiProspects_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsaOnboardInstiProspects_list.Add(new saOnboardInstiProspects_list
                    {
                        saprospects_institution_gid = (dr_datarow["saprospects_institution_gid"].ToString()),
                        salead_name = (dr_datarow["salead_name"].ToString()),
                        sasector_industry = (dr_datarow["sasector_industry"].ToString())

                    });
                }
                values.saOnboardInstiProspects_list = getsaOnboardInstiProspects_list;
            }
            dt_datatable.Dispose();

        }
        public void DaProspectsEdit(string saprospects_institution_gid, MdlsaOnboardIstitutionProspects values)
        {
            try
            {
                msSQL = "select saprospects_institution_gid,sacontactinstitution_gid,salead_name,sasector_industry from ocs_mst_tsainstitutionprospects " +
                      " where saprospects_institution_gid='" + saprospects_institution_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.saprospects_institution_gid = objODBCDatareader["saprospects_institution_gid"].ToString();
                    values.salead_name = objODBCDatareader["salead_name"].ToString();
                    values.sasector_industry = objODBCDatareader["sasector_industry"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();


                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaProspectsUpdate(string employee_gid, MdlsaOnboardIstitutionProspects values)
        {

            msSQL = "select saprospects_institution_gid,sacontactinstitution_gid,salead_name,sasector_industry from ocs_mst_tsainstitutionprospects " +
                     " where saprospects_institution_gid='" + values.saprospects_institution_gid + "'";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {

                salead_name = objODBCDatareader["salead_name"].ToString();
                sasector_industry = objODBCDatareader["sasector_industry"].ToString();
                saprospects_institution_gid = objODBCDatareader["saprospects_institution_gid"].ToString();
                contactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_mst_tsainstitutionprospects set " +
                         " salead_name='" + values.salead_name + "'," +
                         " sasector_industry='" + values.sasector_industry + "'," +
                         " created_by='" + employee_gid + "'," +
                         " created_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where saprospects_institution_gid='" + values.saprospects_institution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    if (contactinstitution_gid == values.sacontactinstitution_gid)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("SAPL");

                        msSQL = "Insert into ocs_mst_tsainstitutionprospectsupdatelog(" +
                       " saprospects_institution_update_logid, " +
                       " saprospects_institution_gid, " +
                       " sacontactinstitution_gid, " +
                       " salead_name," +
                       " sasector_industry," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.saprospects_institution_gid + "'," +
                       "'" + values.sacontactinstitution_gid + "'," +
                       "'" + salead_name + "'," +
                       "'" + sasector_industry + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    values.status = true;
                    values.message = "Prospects updated successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error occured..";
            }
        }

        //Document

        public bool DaAddDocuments(string employee_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = "select sadocument_name from ocs_mst_tsainstitutiondocumentsupload where  sacontactinstitution_gid='" + employee_gid + "'";
            string sadocument_name = objdbconn.GetExecuteScalar(msSQL);
            if (sadocument_name == (values.sadocument_name))
            {
                values.status = false;
                values.message = "Already document name added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("SACD");
            msSQL = " insert into ocs_mst_tsainstitutiondocumentsupload(" +
                    " sainstidocument_gid," +
                    " sacontactinstitution_gid," +
                    " sadocument_name," +
                    " sadocument_id," +
                    " safile_path," +
                    " updated_by,updated_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.sadocument_name + "'," +
                     "'" + values.sadocument_id + "'," +
                      "'" + values.safile_path + "'," +
                     "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Document details added sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error occured while adding documents";
                return false;
            }
        }
        public bool DaInstitutionDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation;

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("SACD");
                        msSQL = " insert into ocs_mst_tsainstitutiondocumentsupload(" +
                                " sainstidocument_gid," +
                                " sacontactinstitution_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                " safile_path," +
                                " updated_by,updated_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetUploadDocumentsList(string employee_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = " select sainstidocument_gid,sadocument_name,document_title,safile_path,sadocument_id " +
                   " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getDocuments_list = new List<saOnboardInstiDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();


                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getDocuments_list.Add(new saOnboardInstiDocument_list
                    {
                        sainstidocument_gid = (dr_datarow["sainstidocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData((dr_datarow["safile_path"].ToString())),
                    });

                    values.saOnboardInstiDocument_list = getDocuments_list;
                }
                dt_datatable.Dispose();
            }

        }
        public void DaUploadDocumentsDelete(string sainstidocument_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = "delete from ocs_mst_tsainstitutiondocumentsupload where sainstidocument_gid='" + sainstidocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Documents deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the documents";
                values.status = false;

            }
        }
        public void DaTempDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5  ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaUploadList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = " select sainstidocument_gid,sadocument_name,safile_path,sadocument_id,document_title " +
                   " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getDocuments_list = new List<saOnboardInstiDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();


                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getDocuments_list.Add(new saOnboardInstiDocument_list
                    {
                        sainstidocument_gid = (dr_datarow["sainstidocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dr_datarow["safile_path"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                    });

                    values.saOnboardInstiDocument_list = getDocuments_list;
                }
                dt_datatable.Dispose();
            }
        }
        public void DaUploadDocList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = " select sainstidocument_gid,sadocument_name,safile_path,sadocument_id " +
                   " from ocs_mst_tsainstitutiondocumentsupload where " +
                   " sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getDocuments_list = new List<saOnboardInstiDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getDocuments_list.Add(new saOnboardInstiDocument_list
                    {
                        sainstidocument_gid = (dr_datarow["sainstidocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        safile_path = objcmnstorage.EncryptData(HttpContext.Current.Server.MapPath(dr_datarow["safile_path"].ToString())),
                    });

                    values.saOnboardInstiDocument_list = getDocuments_list;
                }
                dt_datatable.Dispose();
            }
        }
        public void DaInstitutionDocumentList(string sacontactinstitution_gid, string employee_gid, MdlsaOnboardInstitutionDocument valuessa)
        {
            msSQL = " select sainstidocument_gid,sadocument_name,safile_path,sadocument_id,document_title " +
                 " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getDocuments_list = new List<saOnboardInstiDocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getDocuments_list.Add(new saOnboardInstiDocument_list
                    {
                        sainstidocument_gid = (dr_datarow["sainstidocument_gid"].ToString()),
                        sadocument_id = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dr_datarow["safile_path"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                    });

                    valuessa.saOnboardInstiDocument_list = getDocuments_list;
                }
                dt_datatable.Dispose();


            }

        }


        //Cancelled cheque

        public bool DaSaInstCancelChequeUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsdocument_title = httpRequest.Form["document_title"].ToString();
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation;
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/ChequeDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("INCC");


                        msSQL = " delete from ocs_mst_tinstitutioncancelchequeupload where sacontactinstitution_gid = '" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        msSQL = " insert into ocs_mst_tinstitutioncancelchequeupload( " +
                                    " institutioncancelchequeupload_gid, " +
                                    " sacontactinstitution_gid," +
                                    " document_name ," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Cheque Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured in uploading cheque document..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetSaChequeDocumentList(string employee_gid, MdlSaChequeDocument values)
        {
            msSQL = " select institutioncancelchequeupload_gid ,document_name,document_path from ocs_mst_tinstitutioncancelchequeupload " +
                                 " where sacontactinstitution_gid ='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sachequedocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sachequedocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        institutioncancelchequeupload_gid = dt["institutioncancelchequeupload_gid"].ToString(),
                    });
                    values.sachequedocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetSaChequeDocumentEditList(string sacontactinstitution_gid, MdlSaChequeDocument values)
        {
            msSQL = " select institutioncancelchequeupload_gid ,document_name,document_path from ocs_mst_tinstitutioncancelchequeupload " +
                                 " where sacontactinstitution_gid ='" + sacontactinstitution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sachequedocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sachequedocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        institutioncancelchequeupload_gid = dt["institutioncancelchequeupload_gid"].ToString(),
                    });
                    values.sachequedocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaChequeDocumentDelete(string institutioncancelchequeupload_gid, MdlChequeDocument values)
        {
            msSQL = "delete from ocs_mst_tinstitutioncancelchequeupload where institutioncancelchequeupload_gid='" + institutioncancelchequeupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;

            }
        }

        //public void DaGetChequeDocumentList(string employee_gid, MdlChequeDocument values)
        //{
        //    msSQL = " select institutioncancelchequeupload_gid ,document_name,document_path from ocs_mst_tinstitutioncancelchequeupload " +
        //                         " where sacontactinstitution_gid ='" + employee_gid + "'";
        //    dt_datatable = objdbconn.GetDataTable(msSQL);
        //    var getdocumentdtlList = new List<chequedocument_list>();
        //    if (dt_datatable.Rows.Count != 0)
        //    {
        //        foreach (DataRow dt in dt_datatable.Rows)
        //        {
        //            getdocumentdtlList.Add(new chequedocument_list
        //            {
        //                document_name = dt["document_name"].ToString(),
        //                document_path = HttpContext.Current.Server.MapPath(dt["document_path"].ToString()),
        //                institutioncancelchequeupload_gid = dt["institutioncancelchequeupload_gid"].ToString(),
        //            });
        //            values.chequedocument_list = getdocumentdtlList;
        //        }
        //    }
        //    dt_datatable.Dispose();
        //}

        //public void DaChequeDocumentDelete(string institutioncancelchequeupload_gid, MdlChequeDocument values)
        //{
        //    msSQL = "delete from ocs_mst_tinstitutioncancelchequeupload where institutioncancelchequeupload_gid='" + institutioncancelchequeupload_gid + "'";
        //    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
        //    if (mnResult != 0)
        //    {

        //        values.message = "Document Deleted Successfully";
        //        values.status = true;
        //    }
        //    else
        //    {
        //        values.message = "Error Occured";
        //        values.status = false;

        //    }
        //}


        public bool DaSaOnboardSave(string employee_gid, MdlMstSAOnboardInstitution values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SACS");
            // msGetGidREF = objcmnfunctions.GetMasterGID("BBCH_");


            msSQL = " insert into ocs_mst_tsainstitution(" +
                    " sacontactinstitution_gid," +
                    " sa_reportingmanager," +
                    " satype_gid," +
                    " saentitytype_gid," +
                    " sa_associatename," +
                    " sa_contactfirstname," +
                    " sa_contactmiddlename," +
                    " sa_contactlastname," +
                    " sa_designation," +
                    " sa_dateofincorporation," +
                    " sa_companystdate," +
                    " sa_yearsinbusiness," +
                    " sa_monthsinbusiness," +
                    " sa_companypan," +
                    " sa_startdate," +
                    " sa_enddate," +
                    " sa_annualturnover," +
                    " sa_onboard_flag," +
                    " saifsc_code," +
                    " saaccount_number," +
                    " saaccountholder_name, " +
                    " sacanccheque_number, " +
                    " sabank_name, " +
                    " sabranch_name,rm_tagging, " +
                    " created_by, " +
                    " created_date, sa_apputr,sa_appcreditedamount" +
                    " sa_appcrediteddate)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.sa_reportingmanager + "', " +
                    "'" + values.satype_gid + "'," +
                    "'" + values.saentitytype_gid + "'," +
                    "'" + values.sa_associatename + "'," +
                    "'" + values.sa_contactfirstname + "'," +
                    "'" + values.sa_contactmiddlename + "'," +
                    "'" + values.sa_contactlastname + "'," +
                    "'" + values.sa_designation + "',";


            if ((values.sa_dateofincorporation == null) || (values.sa_dateofincorporation == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_dateofincorporation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.sa_companystdate == null) || (values.sa_companystdate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_companystdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL += "'" + values.sa_yearsinbusiness + "'," +
                     "'" + values.sa_monthsinbusiness + "'," +
                     "'" + values.sa_companypan + "',";

            if ((values.sa_startdate == null) || (values.sa_startdate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            if ((values.sa_enddate == null) || (values.sa_enddate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }


            msSQL += "'" + values.sa_annualturnover + "'," +
                     "'" + "N" + "'," +
                     "'" + values.saifsc_code + "'," +
                    "'" + values.saaccount_number + "'," +
                    "'" + values.saaccountholder_name + "'," +
                    "'" + values.sacanccheque_number + "'," +
                    "'" + values.sabank_name + "'," +
                    "'" + values.sabranch_name + "','" + employee_gid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', " +
                    "'" + values.sa_apputr + "','" + values.sa_appcreditedamount + "',)";

            if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                //Updates

                msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Onboard details saved successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured while saving onboard entry";
                return false;
            }

        }
        //Submit
        public bool DaOnboardSubmit(string employee_gid, MdlMstSAOnboardInstitution values)
        {
            bool sta = false;
            try
            {
                if (!string.IsNullOrEmpty(values.sa_associatename))
                {
                    if (values.sa_associatename.Contains("'"))
                    {
                        values.sa_associatename = values.sa_associatename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactfirstname))
                {
                    if (values.sa_contactfirstname.Contains("'"))
                    {
                        values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
                {
                    if (values.sa_contactmiddlename.Contains("'"))
                    {
                        values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sa_contactlastname))
                {
                    if (values.sa_contactlastname.Contains("'"))
                    {
                        values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }

                //msSQL = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                //string reporting_to = objdbconn.GetExecuteScalar(msSQL);



                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);


                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                    " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                    " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                    " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();



                //msSQL = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
                //string user_gid = objdbconn.GetExecuteScalar(msSQL);

                //msSQL = " select user_gid from adm_mst_tuser u " +
                // " where user_gid = '" + user_gid + "'";
                //string RMName = objdbconn.GetExecuteScalar(msSQL);


                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' and saprimary_status='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add primary mobile number";
                    return false;
                }

                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number";
                    return false;
                }
                msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one email";
                    return false;
                }
                if (values.rdbgstregister_status == "Yes")
                {
                    msSQL = "select sainstitution2gst_gid " + " from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    if (objODBCDatareader.HasRows == false)
                    {
                        values.status = false;
                        values.message = "Add atleast one Gst detail";
                        return false;
                    }
                }
                msSQL = "select saaddresstype_gid " + " from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one address";
                    return false;
                }
                msSQL = "select sainst_individual_gid " + " from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one individual";
                    return false;
                }
                msSQL = "select saprospects_institution_gid " + " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one prospects";
                    return false;
                }
                msSQL = "select sainstidocument_gid " + " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Upload atleast one document ";
                    return false;
                }
                //msSQL = "select * " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Add atleast one bureau";
                //    return false;

                //}

                string lsins_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "NCM";
                string msGETRef = objcmnfunctions.GetMasterGID("INST");
                msGETRef = msGETRef.Replace("INST", "");

                lsins_refno = lsins_refno + lsref_name + msGETRef;

                msGetGid = objcmnfunctions.GetMasterGID("SACS");
                msSQL = " insert into ocs_mst_tsainstitution(" +
                        " sacontactinstitution_gid," +
                          " sa_autogeneratedid," +
                        " sa_reportingmanager," +
                        " reportingmanager_gid," +
                        " satype_gid," +
                        " saentitytype_gid," +
                          " satype_name," +
                        " saentitytype_name," +
                        " sa_associatename," +
                        " sa_contactfirstname," +
                        " sa_contactmiddlename," +
                        " sa_contactlastname," +
                        " designation_gid," +
                         " designation_type," +
                        " sa_dateofincorporation," +
                        " sa_companystdate," +
                        " sa_yearsinbusiness," +
                        " sa_monthsinbusiness," +
                        " sa_companypan," +
                        " sa_startdate," +
                        " sa_enddate," +
                        " sa_annualturnover," +
                        " sa_onboard_flag," +
                        " saifsc_code," +
                        " micr," +
                        " branch_address," +
                        " city," +
                        " district," +
                        " state," +
                        " saaccount_number," +
                        " confirmbankaccountnumber," +
                        " saaccountholder_name, " +
                        " sacanccheque_number, " +
                        " sabank_name, " +
                        " sabranch_name, " +
                        " approvalstatus, " +
                          " renewal_status, " +
                         " origination, " +
                        " onboardinginstitution_flag,tagging_flag,rm_tagging,update_flag, " +
                        " assessmentagency_gid, " +
                        " assessmentagency_name, " +
                        " assessmentagencyrating_gid, " +
                        " assessmentagencyrating_name, " +
                        " ratingas_date, " +
                        " created_by, " +
                        " created_date," +
                        " updated_date," +
                        " sa_apputr,sa_appcreditedamount," +
                        " sa_appcrediteddate)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + lsins_refno + "'," +
                        "'" + values.sa_reportingmanager + "', " +
                       "'" + reporting_to + "', " +
                        "'" + values.satype_gid + "'," +
                        "'" + values.saentitytype_gid + "'," +
                         "'" + values.satype_name + "'," +
                        "'" + values.saentitytype_name + "'," +
                        "'" + values.sa_associatename + "'," +
                        "'" + values.sa_contactfirstname + "'," +
                        "'" + values.sa_contactmiddlename + "'," +
                        "'" + values.sa_contactlastname + "'," +
                         "'" + values.designation_gid + "'," +
                         "'" + values.designation_type + "',";


                if ((values.sa_dateofincorporation == null) || (values.sa_dateofincorporation == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_dateofincorporation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if ((values.sa_companystdate == null) || (values.sa_companystdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_companystdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                msSQL += "'" + values.sa_yearsinbusiness + "'," +
                         "'" + values.sa_monthsinbusiness + "'," +
                         "'" + values.sa_companypan + "',";

                if ((values.sa_startdate == null) || (values.sa_startdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                if ((values.sa_enddate == null) || (values.sa_enddate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }


                msSQL += "'" + values.sa_annualturnover + "'," +
                         "'" + "Y" + "'," +
                         "'" + values.saifsc_code + "'," +
                             "'" + values.micr + "'," +
                       "'" + values.branch_address + "'," +

                       "'" + values.city + "'," +
                       "'" + values.district + "'," +
                       "'" + values.state + "'," +
                        "'" + values.saaccount_number + "'," +
                        "'" + values.confirmbankaccountnumber + "'," +
                        "'" + values.saaccountholder_name + "'," +
                        "'" + values.sacanccheque_number + "'," +
                        "'" + values.sabank_name + "'," +
                        "'" + values.sabranch_name + "'," +
                        "'" + values.approvalstatus + "'," +
                         "'" + "Contract Renewed" + "'," +
                           "'" + "Internal" + "'," +
                        "'" + "Y" + "'," +
                         "'" + "Y" + "'," +
                        "'" + employee_gid + "'," +
                        "'" + "Y" + "'," +
                        "'" + values.assessmentagency_gid + "'," +
                        "'" + values.assessmentagency_name + "'," +
                        "'" + values.assessmentagencyrating_gid + "'," +
                        "'" + values.assessmentagencyrating_name + "',";
                if ((values.ratingas_date == null) || (values.ratingas_date == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") + "', ";
                }

                msSQL += "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       "'" + values.sa_apputr + "','" + values.sa_appcreditedamount + "',";

                if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
                {
                    msSQL += "null";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "')";
                }

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msGetGid1 = objcmnfunctions.GetMasterGID("SAUL");

                msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
               " institution_log_id, " +
               " sacontactinstitution_gid, " +
               " sa_associatename," +
               " sa_contactfirstname," +
               " sa_contactmiddlename," +
               " sa_contactlastname," +
               " sa_companypan," +
               " sa_yearsinbusiness," +
               " sa_monthsinbusiness," +
               " sacreated_by," +
               " sacreated_date)" +
               " values (" +
               "'" + msGetGid1 + "'," +
               "'" + msGetGid + "'," +
               "'" + sa_associatename + "'," +
               "'" + sa_contactfirstname + "'," +
               "'" + sa_contactmiddlename + "'," +
               "'" + sa_contactlastname + "'," +
                "'" + sa_companypan + "'," +
                         "'" + sa_yearsinbusiness + "'," +
                         "'" + sa_monthsinbusiness + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //Updates


                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    //values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

                    //msGetGid1 = objcmnfunctions.GetMasterGID("TEIL");

                    //string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    //string usergid = objdbconn.GetExecuteScalar(msql);


                    //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                    //          " where user_gid = '" + usergid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //if (objODBCDatareader.HasRows == true)
                    //{
                    //    tagName = objODBCDatareader["user_firstname"].ToString();
                    //}

                    //msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                    //  " taggedemployeeinstitutionlog_gid , " +
                    //  " sacontactinstitution_gid," +
                    //  " institutiontaggedemployee_gid," +
                    //  " institutiontaggedemployee_name," +
                    //  " approval_status," +
                    //  " created_by," +
                    //  " created_date) " +
                    //  " values (" +
                    //  " '" + msGetGid1 + "'," +
                    //   " '" + msGetGid + "'," +
                    //  " '" + employee_gid + "'," +
                    //  " '" + tagName + "'," +
                    //  " '" + "Pending BD Verification" + "'," +
                    //  " '" + employee_gid + "'," +
                    //  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Mail Trigger
                    try
                    {
                        k = 1;



                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);

                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                             " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                                " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                 " sacontactinstitution_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                               " where sacontactinstitution_gid = '" + msGetGid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                  "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                  "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SBA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger




                    values.status = true;
                    sta = true;
                    values.message = "SBA onboarding details submitted successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error occured while submitting details";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddsubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAddsubmit/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;

        }
        public bool DaOnboardSubmitSaveasdraft(string employee_gid, MdlMstSAOnboardInstitution values)
        {
            bool sta = false;
            try
            {
                if (!string.IsNullOrEmpty(values.sa_associatename))
                {
                    if (values.sa_associatename.Contains("'"))
                    {
                        values.sa_associatename = values.sa_associatename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactfirstname))
                {
                    if (values.sa_contactfirstname.Contains("'"))
                    {
                        values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
                {
                    if (values.sa_contactmiddlename.Contains("'"))
                    {
                        values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sa_contactlastname))
                {
                    if (values.sa_contactlastname.Contains("'"))
                    {
                        values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                   " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                   " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                   " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();



                string lsins_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "NCM";
                string msGETRef = objcmnfunctions.GetMasterGID("INST");
                msGETRef = msGETRef.Replace("INST", "");

                lsins_refno = lsins_refno + lsref_name + msGETRef;

                msGetGid = objcmnfunctions.GetMasterGID("SACS");
                msSQL = " insert into ocs_mst_tsainstitution(" +
                        " sacontactinstitution_gid," +
                          " sa_autogeneratedid," +
                        " sa_reportingmanager," +
                        " reportingmanager_gid," +
                        " satype_gid," +
                        " saentitytype_gid," +
                          " satype_name," +
                        " saentitytype_name," +
                        " sa_associatename," +
                        " sa_contactfirstname," +
                        " sa_contactmiddlename," +
                        " sa_contactlastname," +
                        " designation_gid," +
                         " designation_type," +
                        " sa_dateofincorporation," +
                        " sa_companystdate," +
                        " sa_yearsinbusiness," +
                        " sa_monthsinbusiness," +
                        " sa_companypan," +
                        " sa_startdate," +
                        " sa_enddate," +
                         " ratingas_date, " +
                         " sa_appcrediteddate, " +
                        " sa_annualturnover," +
                        " sa_onboard_flag," +
                        " saifsc_code," +
                        " micr," +
                        " branch_address," +
                        " city," +
                        " district," +
                        " state," +
                        " saaccount_number," +
                        " confirmbankaccountnumber," +
                        " saaccountholder_name, " +
                        " sacanccheque_number, " +
                        " sabank_name, " +
                        " sabranch_name, " +
                        " approvalstatus, " +
                        " origination, " +
                         " renewal_status, " +
                        " onboardinginstitution_flag,tagging_flag,rm_tagging,update_flag, " +
                        " assessmentagency_gid, " +
                        " assessmentagency_name, " +
                        " assessmentagencyrating_gid, " +
                        " assessmentagencyrating_name, " +
                        " saveasdraftadd_flag, " +
                        " sa_apputr, " +
                        " sa_appcreditedamount, " +
                        " created_date, " +
                        " created_by)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + lsins_refno + "'," +
                        "'" + values.sa_reportingmanager + "', " +
                       "'" + reporting_to + "', " +
                        "'" + values.satype_gid + "'," +
                        "'" + values.saentitytype_gid + "'," +
                         "'" + values.satype_name + "'," +
                        "'" + values.saentitytype_name + "'," +
                        "'" + values.sa_associatename + "'," +
                        "'" + values.sa_contactfirstname + "'," +
                        "'" + values.sa_contactmiddlename + "'," +
                        "'" + values.sa_contactlastname + "'," +
                         "'" + values.designation_gid + "'," +
                         "'" + values.designation_type + "',";


                if ((values.sa_dateofincorporation == null) || (values.sa_dateofincorporation == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_dateofincorporation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if ((values.sa_companystdate == null) || (values.sa_companystdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_companystdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                msSQL += "'" + values.sa_yearsinbusiness + "'," +
                         "'" + values.sa_monthsinbusiness + "'," +
                         "'" + values.sa_companypan + "',";

                if ((values.sa_startdate == null) || (values.sa_startdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                if ((values.sa_enddate == null) || (values.sa_enddate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if ((values.ratingas_datecredit == null) || (values.ratingas_datecredit == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.ratingas_datecredit).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if ((values.sa_appcrediteddate == null) || (values.sa_appcrediteddate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }

                msSQL += "'" + values.sa_annualturnover + "'," +
                         "'" + "Y" + "'," +
                         "'" + values.saifsc_code + "'," +
                             "'" + values.micr + "'," +
                       "'" + values.branch_address + "'," +

                       "'" + values.city + "'," +
                       "'" + values.district + "'," +
                       "'" + values.state + "'," +
                        "'" + values.saaccount_number + "'," +
                        "'" + values.confirmbankaccountnumber + "'," +
                        "'" + values.saaccountholder_name + "'," +
                        "'" + values.sacanccheque_number + "'," +
                        "'" + values.sabank_name + "'," +
                        "'" + values.sabranch_name + "'," +
                        "'" + values.approvalstatus + "'," +
                         "'" + "Internal" + "'," +
                        "'" + "Contract Renewed" + "'," +
                        "'" + "Y" + "'," +
                         "'" + "Y" + "'," +
                        "'" + employee_gid + "'," +
                        "'" + "N" + "'," +
                        "'" + values.assessmentagency_gid + "'," +
                        "'" + values.assessmentagency_name + "'," +
                        "'" + values.assessmentagencyrating_gid + "'," +
                        "'" + values.assessmentagencyrating_name + "'," +
                         "'" + "Y" + "'," +
                         "'" + values.sa_apputr + "'," +
                       "'" + values.sa_appcreditedamount + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                        "'" + employee_gid + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msGetGid1 = objcmnfunctions.GetMasterGID("SAUL");

                msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
               " institution_log_id, " +
               " sacontactinstitution_gid, " +
               " sa_associatename," +
               " sa_contactfirstname," +
               " sa_contactmiddlename," +
               " sa_contactlastname," +
               " sa_companypan," +
               " sa_yearsinbusiness," +
               " sa_monthsinbusiness," +
               " sacreated_by," +
               " sacreated_date)" +
               " values (" +
               "'" + msGetGid1 + "'," +
               "'" + msGetGid + "'," +
               "'" + sa_associatename + "'," +
               "'" + sa_contactfirstname + "'," +
               "'" + sa_contactmiddlename + "'," +
               "'" + sa_contactlastname + "'," +

                "'" + sa_companypan + "'," +
                         "'" + sa_yearsinbusiness + "'," +
                         "'" + sa_monthsinbusiness + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                if (mnResult != 0)
                {
                    //Updates


                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                    ////Mail Trigger
                    //try
                    //{
                    //    k = 1;



                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check


                    //    string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //    string reporting_to = objdbconn.GetExecuteScalar(msql);


                    //    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                    //            " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontactinstitution_gid,sa_associatename,i.created_by, " +
                    //            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                    //            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                    //             " sacontactinstitution_gid = '" + msGetGid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        saUser = objODBCDatareader["user_firstname"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                    //    "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                    //    "where b.employee_gid ='" + employee_gid + "'";
                    //    employeename = objdbconn.GetExecuteScalar(msSQL);




                    //    sub = "SBA Application submitted by RM";
                    //    body = "Dear Wellington,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lsins_refno + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + employeename;
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAtomail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }


                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                    //           " sacontactinstitution_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Intiated for Verification'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}
                    //catch (Exception ex)
                    //{

                    //}
                    ////Mail Trigger




                    values.status = true;
                    sta = true;
                    values.message = "SBA onboarding details save as draft added successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error occured while submitting details";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAdddraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();




                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAAdddraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;
        }


        public void DaGetRMName(string employee_gid, MdlsaOnboardRM values)
        {
            try
            {
                //msql= "select employeereporting_to from hrm_mst_temployee where employee_gid='" + employee_gid + "'";
                //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                //string reporting_to = objdbconn.GetExecuteScalar(msql);

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                     " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                     " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                     " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                     " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();

                if (RMName != "null" || RMName != "")
                {
                    var getSegmentRMName = new List<saRMReportingManagerList>();
                    getSegmentRMName.Add(new saRMReportingManagerList
                    {
                        reporting_manager = RMName
                    });
                    values.reporting_manager = RMName;
                }

            }
            catch
            {

            }
        }
        public void DaGetRMNameGid(string employee_gid, MdlsaOnboardRM values)
        {

            try
            {
                //msql= "select employeereporting_to from hrm_mst_temployee where employee_gid='" + employee_gid + "'";
                // msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);


                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                    " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                    " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                    " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();

                //string reporting_to = objdbconn.GetExecuteScalar(msql);
                //if (reporting_to != null || reporting_to != "")
                //{
                //    msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
                //    string user_gid = objdbconn.GetExecuteScalar(msql);


                //    if (user_gid != null || user_gid != "")
                //    {
                //msSQL = " select user_gid from adm_mst_tuser u " +
                //        " where user_gid = '" + user_gid + "'";
                //  string RMName = objdbconn.GetExecuteScalar(msSQL);
                if (RMName != "null" || RMName != "")
                {
                    var getSegmentRMName = new List<saRMReportingManagerList>();
                    getSegmentRMName.Add(new saRMReportingManagerList
                    {
                        reportingmanager_gid = RMName
                    });
                    values.reportingmanager_gid = reporting_to;
                }
                //}
                //}
            }
            catch
            {

            }
        }
        public void DaGetDropDown(string employee_gid, MdlDropDownList values)
        {

            //SAType

            msSQL = "select satype_gid,satype_name from ocs_mst_tsatype where status = 'Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<satype_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new satype_List
                    {
                        satype_gid = (dr_datarow["satype_gid"].ToString()),
                        satype_name = (dr_datarow["satype_name"].ToString()),
                        // vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.satype_list = getSegment1;
            }
            dt_datatable.Dispose();

            //saentitytype
            // msSQL = " SELECT a.vertical_gid,a.vertical_name,vertical_code " +
            //       " FROM ocs_mst_tvertical a  where status_log='Y' order by a.vertical_gid desc ";
            //for (var i = 0; i < values.satype_list.Count; i++)
            //{
            msSQL = "select saentitytype_gid,saentitytype_name from ocs_mst_tsaentitytype where status = 'Y'";
            // " satype_gid='" + values.satype_list[0].satype_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);




            var getSegment = new List<saentitytype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new saentitytype_list
                    {
                        saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                        saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                        // vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.saentitytype_list = getSegment;
            }
            dt_datatable.Dispose();

            //DocumentList

            msSQL = "select sadocumentlist_gid,sadocumentlist_name from ocs_mst_tsadocumentlist where status = 'Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegmentdoc = new List<sadocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegmentdoc.Add(new sadocument_list
                    {
                        sadocumentlist_gid = (dr_datarow["sadocumentlist_gid"].ToString()),
                        sadocumentlist_name = (dr_datarow["sadocumentlist_name"].ToString()),

                    });
                }
                values.sadocument_list = getSegmentdoc;
            }
            dt_datatable.Dispose();

            //Designation
            msSQL = " SELECT a.designation_gid,a.designation_type from ocs_mst_tdesignation a" +
                   "   order by a.designation_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdesignation = new List<sadesignationlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdesignation.Add(new sadesignationlist
                    {
                        designation_gid = (dr_datarow["designation_gid"].ToString()),
                        designation_type = (dr_datarow["designation_type"].ToString()),
                    });
                }
                values.sadesignationlist = getdesignation;
            }
            dt_datatable.Dispose();

            //Assessment Agency drop down
            msSQL = " SELECT a.assessmentagency_gid,a.assessmentagency_name from ocs_mst_tassessmentagency a" +
                 "   order by a.assessmentagency_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getassessmentagency = new List<saassessmentagencylist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getassessmentagency.Add(new saassessmentagencylist
                    {
                        assessmentagency_gid = (dr_datarow["assessmentagency_gid"].ToString()),
                        assessmentagency_name = (dr_datarow["assessmentagency_name"].ToString()),
                    });
                }
                values.saassessmentagencylist = getassessmentagency;
            }
            dt_datatable.Dispose();

            //Assessment Agency Rating drop down
            msSQL = " SELECT a.assessmentagencyrating_gid,a.assessmentagencyrating_name from ocs_mst_tassessmentagencyrating a" +
                 "  order by a.assessmentagencyrating_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getassessmentagencyrating = new List<assessmentagencyratinglist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getassessmentagencyrating.Add(new assessmentagencyratinglist
                    {
                        assessmentagencyrating_gid = (dr_datarow["assessmentagencyrating_gid"].ToString()),
                        assessmentagencyrating_name = (dr_datarow["assessmentagencyrating_name"].ToString()),
                    });
                }
                values.assessmentagencyratinglist = getassessmentagencyrating;
            }
            dt_datatable.Dispose();
        }
        public void DaAutoGenerateID(saAutoGenerate_ID values)
        {
            string auto_generate_id;
            try
            {
                auto_generate_id = "SA001";
                values.auto_generated_id = auto_generate_id;
            }
            catch
            {
            }
        }
        public void DaApprovalInitatedDetail(string sacontactinstitution_gid, Institutionedit values)
        {
            try
            {
                msSQL = " SELECT a.sacontactinstitution_gid,a.sa_autogeneratedid,a.approval_flag,a.sa_reportingmanager,concat(m.user_firstname,' ',m.user_lastname,' / ',m.user_code) as DirectReprtingTo, " +
                        " a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name,a.origination," +
                       " a.sa_associatename,a.sa_contactfirstname,a.sa_contactmiddlename,a.confirmbankaccountnumber,a.sa_contactlastname,a.referred_by," +
                       " a.designation_gid,a.designation_type,a.sa_dateofincorporation,a.sa_companystdate as sacompanystdate,a.sa_yearsinbusiness,a.sa_apputr,a.sa_appcrediteddate,a.sa_appcreditedamount," +
                       " a.sa_monthsinbusiness,a.sa_companypan,a.sa_startdate,a.sa_enddate, a.utr_no," +
                       " a.sa_annualturnover,city,branch_address,district,micr,state,a.saifsc_code,a.saaccount_number,a.saaccountholder_name,a.rejected_date,a.rejected_remarks,a.renewal_flag," +
                       " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement," +
                       "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
                       " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,a.agreementexecutiondate, " +
                       " a.agreementexpirydate,a.agroagreementexecutiondate,a.agroagreementexpirydate," +
                       "  a.agreementstatus,a.agroagreementstatus,a.verificationremarks,a.approvalinitated_flag,institutionsaveasdraft_flag," +
                       " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                      " concat(o.user_firstname,' ',o.user_lastname,' / ',o.user_code) as rejected_by, " +
                       " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus, " +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,samfin_code,samagro_code,a.assessmentagency_gid,a.assessmentagency_name," +
                       " a.assessmentagencyrating_gid,  a.assessmentagencyrating_name,a.ratingas_date,a.codecreation_date, " +
                       " (a.origination) as RecordSource FROM " +
                       " ocs_mst_tsainstitution a" +
                       " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                       " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                         " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
                       " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
                        " left join hrm_mst_temployee p on a.rejected_by = p.employee_gid " +
                       " left join adm_mst_tuser o on o.user_gid = p.user_gid" +
                       " left join hrm_mst_temployee r on a.reportingmanager_gid = r.employee_gid  left join adm_mst_tuser m on m.user_gid = r.user_gid" +
                       " where a.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.recordsource = objODBCDatareader["RecordSource"].ToString();
                    values.origination = objODBCDatareader["origination"].ToString();
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();

                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }

                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }

                    if (objODBCDatareader["codecreation_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.codecreation_date = "";
                    }
                    else
                    {
                        values.codecreation_date = Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("dd-MM-yyyy");
                    }

                    values.samfin_code = objODBCDatareader["samfin_code"].ToString();
                    values.samagro_code = objODBCDatareader["samagro_code"].ToString();

                    values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
                    values.applicationform = objODBCDatareader["applicationform"].ToString();
                    values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
                    values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
                    values.addressproof = objODBCDatareader["addressproof"].ToString();
                    values.photographs = objODBCDatareader["photographs"].ToString();
                    values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
                    values.institutionsaveasdraft_flag = objODBCDatareader["institutionsaveasdraft_flag"].ToString();
                    if (objODBCDatareader["agreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexpirydate = Convert.ToDateTime(objODBCDatareader["agreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
                    values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
                    values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
                    values.approval_flag = objODBCDatareader["approval_flag"].ToString();
                    if (objODBCDatareader["agroagreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agroagreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agroagreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexpirydate = Convert.ToDateTime(objODBCDatareader["agroagreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    values.agroagreementstatus = objODBCDatareader["agroagreementstatus"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["DirectReprtingTo"].ToString();
                    values.sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    values.sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    values.sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    values.sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sacompanystdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_companystdate = Convert.ToDateTime(objODBCDatareader["sacompanystdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_startdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_startdate = Convert.ToDateTime(objODBCDatareader["sa_startdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_enddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_enddate = Convert.ToDateTime(objODBCDatareader["sa_enddate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["rejected_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.rejected_date = Convert.ToDateTime(objODBCDatareader["rejected_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["approved_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
                    }
                    values.approved_by = objODBCDatareader["approved_by"].ToString();
                    values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
                    values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    values.sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    values.sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    values.sa_annualturnover = objODBCDatareader["sa_annualturnover"].ToString();
                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.renewal_flag = objODBCDatareader["renewal_flag"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();
                    values.rejected_by = objODBCDatareader["rejected_by"].ToString();
                    values.rejected_remarks = objODBCDatareader["rejected_remarks"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        //save as draft
        public void DaMakerSaveasdraftApprovalInitated(string employee_gid, MdlMstInitiateApprovalList values)
        {
            if (!string.IsNullOrEmpty(values.sa_associatename))
            {
                if (values.sa_associatename.Contains("'"))
                {
                    values.sa_associatename = values.sa_associatename.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactfirstname))
            {
                if (values.sa_contactfirstname.Contains("'"))
                {
                    values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
            {
                if (values.sa_contactmiddlename.Contains("'"))
                {
                    values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sa_contactlastname))
            {
                if (values.sa_contactlastname.Contains("'"))
                {
                    values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.branch_address))
            {
                if (values.branch_address.Contains("'"))
                {
                    values.branch_address = values.branch_address.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sabranch_name))
            {
                if (values.sabranch_name.Contains("'"))
                {
                    values.sabranch_name = values.sabranch_name.Replace("'", "");
                }
            }
            //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
            //{
            //    msSQL = "select * " + " from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + employee_gid + "'";
            //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //    if (objODBCDatareader.HasRows == false)
            //    {
            //        values.status = false;
            //        values.message = "Upload atleast one mail document ";
            //        return;
            //    }
            //}

            //msSQL = "select * " + " from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + employee_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //if (objODBCDatareader.HasRows == false)
            //{
            //    values.status = false;
            //    values.message = "Kindly Upload Atleast One Document ";
            //    return;
            //}
            msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                        " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                        " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,ratingas_date FROM " +
                        " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();


                sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                satype_gid = objODBCDatareader["satype_gid"].ToString();
                satype_name = objODBCDatareader["satype_name"].ToString();
                saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
            }
            objODBCDatareader.Close();
            msSQL = " update  ocs_mst_tsainstitution set " +
                    " interviewevalution = '" + values.interviewevalution + "'," +
                    " applicationform = '" + values.applicationform + "'," +
                    " kycdocuments = '" + values.kycdocuments + "'," +
                    " vettingstatus = '" + values.vettingstatus + "'," +
                    " addressproof = '" + values.addressproof + "'," +
                    " photographs = '" + values.photographs + "'," +
                    " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                    " sa_associatename = '" + values.sa_associatename + "'," +
                   " satype_gid='" + values.satype_gid + "'," +
                   " satype_name='" + values.satype_name + "',";
            //if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
            //{
            //}
            //else
            //{
            //    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            //}
            if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
            {
            }
            else
            {
                msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
            {
            }
            else
            {
                msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
            {

            }
            else
            {
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " saentitytype_gid='" + values.saentitytype_gid + "'," +
             " saentitytype_name='" + values.saentitytype_name + "'," +
            " sa_associatename='" + values.sa_associatename + "'," +
            " designation_gid='" + values.designation_gid + "'," +
             " designation_type='" + values.designation_type + "'," +
            " sa_companypan='" + values.sa_companypan + "'," +
            " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
            " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
            " sa_contactlastname='" + values.sa_contactlastname + "'," +
            " sa_annualturnover='" + values.sa_annualturnover + "'," +
             " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
             " sa_apputr='" + values.sa_apputr + "'," +
             " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

            if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            //if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
            //{

            //}
            //else
            //{
            //    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
            //}
            //if (string.IsNullOrEmpty(values.ratingas_date))
            //    //if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "")
            //{

            //}
            //else
            //{
            //    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            //}
            if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            //if (Editsa_ratingas_date == Convert.ToString(values.ratingas_date))
            //{

            //}
            //else
            //{
            //    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            //}
            msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                     " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                     " verificationremarks = '" + values.verificationremarks + "'," +
                    //"  approvalstatus =  'Institution Maker Approved' ," +
                    //"  approvalinitated_flag = 'Y'," +
                    "  institutionsaveasdraft_flag = 'Y'," +
                     " approvalinitiated_by='" + employee_gid + "'," +
                     " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


           


            if (mnResult != 0)
            {
                //msSQL = "update ocs_mst_tsainstitutionmaildocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionverifydocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                values.status = true;
                values.message = "SBA onboarding save as draft added successfully ";
            }
        }

        //Summary
        public void DaGetSaInstitutionSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate ,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date ,a.verify_flag,a.raisequery_flag,a.update_flag," +
                       " a.saveasdraftadd_flag,(a.origination) as RecordSource, " +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                          " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       //" where a.sa_updated_by = '" + employee_gid + "' " + 
                       " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus not in ('Approved','Rejected','BD Verification Rejected','Application Rejected')" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        verify_flag = dt["verify_flag"].ToString(),
                        raisequery_flag = (dt["raisequery_flag"].ToString()),
                        update_flag = dt["update_flag"].ToString(),
                        saveasdraftadd_flag = (dt["saveasdraftadd_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["submittedDate"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSaInstitutionCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = "";
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date ,a.verify_flag," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       //" where a.sa_updated_by = '" + employee_gid + "' " + 
                       " where rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    if ((dt["verify_flag"].ToString()) == "")
                    {
                        flag = "N";
                    }
                    else
                    {
                        flag = dt["verify_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        verify_flag = flag,

                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerfiyPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                     " (a.origination) as RecordSource," +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " where (a.checkermapping_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.makerinstitution_flag = 'Y' and a.checkerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred'))" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerifyInitiatedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.approvalraise_flag,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, " +
                    " a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.checkerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.checkerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.checkerapproved_date, now()), '60'), 'Mins') as tat , " +
                    " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                    " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                           " if (referred_by is null,'--',referred_by) as referred_by, " +
                    " (a.origination) as RecordSource," +
                          " (a.renewal_status) as Renewal_status" +
                    " from ocs_mst_tsainstitution a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                        " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                    " where a.checkerinstitution_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred')" +
                    " order by (concat(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p')) desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approvalinitiated_by = (dt["approvalinitiated_by"].ToString()),
                        approvalinitiated_date = (dt["approvalinitiated_date"].ToString()),
                        approvalraise_flag = (dt["approvalraise_flag"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaDeleteInstitution(string sacontactinstitution_gid, MdlsaOnboardInstitutionDocument values)
        {
            msSQL = "delete from ocs_mst_tsainstitution where sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Institution deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured while deleting the institution";
                values.status = false;

            }
        }

        //Edit
        public void DaInstitutionDetailsEdit(string sacontactinstitution_gid, Institutionedit values)
        {
            try
            {
                msSQL = " SELECT a.sacontactinstitution_gid,a.sa_reportingmanager,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
                       " a.sa_associatename,a.sa_contactfirstname,a.sa_contactmiddlename,a.confirmbankaccountnumber,a.sa_contactlastname," +
                       " a.designation_gid,a.designation_type,a.sa_dateofincorporation,a.sa_companystdate,a.sa_yearsinbusiness," +
                       " a.sa_monthsinbusiness,a.sa_companypan,a.sa_startdate,a.sa_enddate,a.sa_annualturnover, " +
                       " a.saifsc_code,a.saaccount_number,a.saaccountholder_name,a.referred_by,a.utr_no," +
                        " a.created_date,a.micr,a.branch_address,a.city,a.district,a.state," +
                          " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,tagging_flag, " +
                         " (a.origination) as RecordSource," +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_apputr,a.sa_appcreditedamount,a.sa_appcrediteddate,a.rm_tagging,a.training_status,a.remarks, " +
                       " concat(c.user_firstname,c.user_lastname,' / ',rm_tagging) as RMTagging,a.assessmentagency_gid,a.assessmentagency_name," +
                       " a.assessmentagencyrating_gid,a.rejected_remarks,a.assessmentagencyrating_name, a.ratingas_date,a.raisequery_flag,a.institutionsaveasdraft_flag,a.saveasdraftadd_flag,a.closeflag FROM " +
                       " ocs_mst_tsainstitution a" +
                       " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                       " where a.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.recordsource = (objODBCDatareader["RecordSource"].ToString());
                    values.closeflag = objODBCDatareader["closeflag"].ToString();
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();


                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }



                    values.rm_tagging_view = objODBCDatareader["created_by"].ToString();
                    values.raisequery_flag = objODBCDatareader["raisequery_flag"].ToString();
                    values.institutionsaveasdraft_flag = objODBCDatareader["institutionsaveasdraft_flag"].ToString();
                    values.saveasdraftadd_flag = objODBCDatareader["saveasdraftadd_flag"].ToString();
                    values.tagging_flag = objODBCDatareader["tagging_flag"].ToString();
                    values.rm_tagging_id = objODBCDatareader["rm_tagging"].ToString();
                    values.training_status = objODBCDatareader["training_status"].ToString();
                    values.remarks = objODBCDatareader["remarks"].ToString();

                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                    values.sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    values.sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    values.sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    values.sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                    if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_companystdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_startdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_startdate = Convert.ToDateTime(objODBCDatareader["sa_startdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_enddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_enddate = Convert.ToDateTime(objODBCDatareader["sa_enddate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }
                    values.sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    values.sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    values.sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    values.sa_annualturnover = objODBCDatareader["sa_annualturnover"].ToString();
                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.rejected_remarks = objODBCDatareader["rejected_remarks"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public bool DaInstitutionEditSave(string employee_gid, Institutionedit values)
        {

            msSQL = " SELECT sacontactinstitution_gid,sa_associatename,sa_contactfirstname,sa_contactmiddlename, " +
                     "sa_contactlastname,sa_yearsinbusiness,sa_monthsinbusiness," +
                       " sa_dateofincorporation,sa_companystdate, sa_companypan FROM " +
                       " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                {
                }
                else
                {
                    sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
                }
                if (objODBCDatareader["sa_companystdate"].ToString() == "")
                {
                }
                else
                {
                    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                }
                sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tsainstitution set " +
                    " sa_reportingmanager='" + values.sa_reportingmanager + "'," +
                    " satype_gid='" + values.satype_gid + "',";
            if (Convert.ToDateTime(values.sa_dateofincorporation).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                //msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.editsa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.sa_companystdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                //msSQL += " sa_companystdate='" + Convert.ToDateTime(values.editsa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.editsa_startdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                // msSQL += " sa_startdate='" + Convert.ToDateTime(values.editsa_startdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                msSQL += " sa_startdate='" + Convert.ToDateTime(values.editsa_startdate).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Convert.ToDateTime(values.editsa_enddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                //msSQL += " sa_enddate='" + Convert.ToDateTime(values.editsa_enddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                msSQL += " sa_enddate='" + Convert.ToDateTime(values.editsa_enddate).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
                     " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
                     " saentitytype_gid='" + values.saentitytype_gid + "'," +
                     " sa_associatename='" + values.sa_associatename + "'," +
                     " sa_designation='" + values.sa_designation + "'," +
                     " sa_companypan='" + values.sa_companypan + "'," +
                     " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                     " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                     " sa_contactlastname='" + values.sa_contactlastname + "'," +
                     " sa_annualturnover='" + values.sa_annualturnover + "'," +
                     " saifsc_code='" + values.saifsc_code + "'," +
                     " saaccount_number='" + values.saaccount_number + "'," +
                      " saaccountholder_name='" + values.saaccountholder_name + "'," +
                     " sacanccheque_number='" + values.sacanccheque_number + "'," +
                     " sabranch_name='" + values.sabranch_name + "'," +
                     " sabank_name='" + values.sabank_name + "'," +
                     " sa_onboard_flag='N'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("SAUL");

                msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
               " institution_log_id, " +
               " sacontactinstitution_gid, " +
               " sa_associatename," +
               " sa_contactfirstname," +
               " sa_contactmiddlename," +
               " sa_contactlastname," +            
               " sa_companypan," +
               " sa_yearsinbusiness," +
               " sa_monthsinbusiness," +
               " created_by," +
               " created_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.sacontactinstitution_gid + "'," +
               "'" + sa_associatename + "'," +
               "'" + sa_contactfirstname + "'," +
               "'" + sa_contactmiddlename + "'," +
               "'" + sa_contactlastname + "'," +              
                         "'" + sa_companypan + "'," +
                         "'" + sa_yearsinbusiness + "'," +
                         "'" + sa_monthsinbusiness + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //Updates

                msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2gst set institution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Company details saved successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured while saving company details";
                return false;
            }

        }
        //public bool DaInstitutionEditSubmit(string employee_gid, Institutionedit values)
        //{
        //    msSQL = "select * " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saprimary_status='Yes'";
        //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //    if (objODBCDatareader.HasRows == false)
        //    {
        //        values.status = false;
        //        values.message = "Add Primary Mobile Number";
        //        return false;
        //    }

        //    msSQL = "select * " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
        //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //    if (objODBCDatareader.HasRows == false)
        //    {
        //        values.status = false;
        //        values.message = "Add Atleast One Mobile Number";
        //        return false;
        //    }

        //    msSQL = "select * " + " from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
        //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

        //    if (objODBCDatareader.HasRows == false)
        //    {
        //        values.status = false;
        //        values.message = "Add Atleast One Address";
        //        return false;
        //    }

        //    msSQL = " SELECT sacontactinstitution_gid,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
        //              " sa_yearsinbusiness,sa_monthsinbusiness, sa_dateofincorporation,sa_companystdate, sa_companypan FROM " +
        //              " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

        //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
        //    if (objODBCDatareader.HasRows == true)
        //    {
        //        sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
        //        sa_associatename = objODBCDatareader["sa_associatename"].ToString();
        //        if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
        //        {
        //        }
        //        else
        //        {
        //            sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
        //        }
        //        if (objODBCDatareader["sa_companystdate"].ToString() == "")
        //        {
        //        }
        //        else
        //        {
        //            sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
        //        }
        //        sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
        //        sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
        //        sa_companypan = objODBCDatareader["sa_companypan"].ToString();
        //        sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
        //        sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
        //        sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
        //    }
        //    objODBCDatareader.Close();
        //    msSQL = " update ocs_mst_tsainstitution set " +
        //            " sa_reportingmanager='" + values.sa_reportingmanager + "'," +
        //            " satype_gid='" + values.satype_gid + "',";
        //    if (Convert.ToDateTime(values.sadateofincorporation).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //    {

        //    }
        //    else
        //    {
        //        //msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.editsa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sadateofincorporation).ToString("yyyy-MM-dd 00:00:00") + "',";
        //    }
        //    if (Convert.ToDateTime(values.editsa_companystdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //    {

        //    }
        //    else
        //    {
        //        //msSQL += " sa_companystdate='" + Convert.ToDateTime(values.editsa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        msSQL += " sa_companystdate='" + Convert.ToDateTime(values.editsa_companystdate).ToString("yyyy-MM-dd 00:00:00") + "',";
        //    }
        //    if (Convert.ToDateTime(values.editsa_startdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //    {

        //    }
        //    else
        //    {
        //        // msSQL += " sa_startdate='" + Convert.ToDateTime(values.editsa_startdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        msSQL += " sa_startdate='" + Convert.ToDateTime(values.editsa_startdate).ToString("yyyy-MM-dd 00:00:00") + "',";
        //    }
        //    if (Convert.ToDateTime(values.editsa_enddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        //    {

        //    }
        //    else
        //    {
        //        //msSQL += " sa_enddate='" + Convert.ToDateTime(values.editsa_enddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        //        msSQL += " sa_enddate='" + Convert.ToDateTime(values.editsa_enddate).ToString("yyyy-MM-dd 00:00:00") + "',";
        //    }
        //    msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
        //             " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
        //             " saentitytype_gid='" + values.saentitytype_gid + "'," +
        //             " sa_associatename='" + values.sa_associatename + "'," +
        //             " sa_designation='" + values.sa_designation + "'," +
        //             " sa_companypan='" + values.sa_companypan + "'," +
        //             " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
        //             " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
        //             " sa_contactlastname='" + values.sa_contactlastname + "'," +
        //             " sa_annualturnover='" + values.sa_annualturnover + "'," +
        //             " saifsc_code='" + values.saifsc_code + "'," +
        //             " saaccount_number='" + values.saaccount_number + "'," +
        //              " saaccountholder_name='" + values.saaccountholder_name + "'," +
        //             " sacanccheque_number='" + values.sacanccheque_number + "'," +
        //             " sabranch_name='" + values.sabranch_name + "'," +
        //             " sabank_name='" + values.sabank_name + "'," +
        //             " sa_onboard_flag='Y'," +
        //             " sa_updated_by='" + employee_gid + "'," +
        //             " sa_updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
        //             " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
        //    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
        //    if (mnResult != 0)
        //    {

        //        msGetGid = objcmnfunctions.GetMasterGID("SAUL");

        //        msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
        //       " institution_log_id, " +
        //       " sacontactinstitution_gid, " +
        //       " sa_associatename," +
        //       " sa_contactfirstname," +
        //       " sa_contactmiddlename," +
        //       " sa_contactlastname," +
        //       " sa_dateofincorporation," +
        //       " sa_companystdate," +
        //       " sa_companypan," +
        //       " sa_yearsinbusiness," +
        //       " sa_monthsinbusiness," +
        //       " updated_by," +
        //       " updated_date)" +
        //       " values (" +
        //       "'" + msGetGid + "'," +
        //       "'" + values.sacontactinstitution_gid + "'," +
        //       "'" + sa_associatename + "'," +
        //       "'" + sa_contactfirstname + "'," +
        //       "'" + sa_contactmiddlename + "'," +
        //       "'" + sa_contactlastname + "'," +
        //       "'" + sa_dateofincorporation + "'," +
        //                 "'" + sa_companystdate + "'," +
        //                 "'" + sa_companypan + "'," +
        //                 "'" + sa_yearsinbusiness + "'," +
        //                 "'" + sa_monthsinbusiness + "'," +
        //                 "'" + employee_gid + "'," +
        //                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        //Updates

        //        msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitution2gst set institution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //        msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
        //        values.status = true;
        //        values.message = "Company Details Saved Successfully";
        //        return true;
        //    }
        //    else
        //    {
        //        values.status = false;
        //        values.message = "Error Occured While Saving Company Details";
        //        return false;
        //    }
        //}
        public bool DaInstitutionEditUpdate(string employee_gid, Institutionedit values)
        {

            msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saprimary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add primary mobile number";
                return false;
            }

            msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one mobile number";
                return false;
            }
            msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one email";
                return false;
            }
            msSQL = "select sainstitution2gst_gid " + " from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one Gst detail";
                return false;
            }
            msSQL = "select saaddresstype_gid " + " from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one address";
                return false;
            }
            msSQL = "select sainst_individual_gid " + " from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one individual";
                return false;
            }
            msSQL = "select saprospects_institution_gid " + " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one prospects";
                return false;
            }
            msSQL = "select sainstidocument_gid " + " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Upload atleast one document ";
                return false;
            }

            msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                      " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                      " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount FROM " +
                      " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();

                //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                //}
                //if (objODBCDatareader["sa_companystdate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                //}
                //if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                //}
                sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                satype_gid = objODBCDatareader["satype_gid"].ToString();
                satype_name = objODBCDatareader["satype_name"].ToString();
                saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
            }
            objODBCDatareader.Close();
            CultureInfo cultures = new CultureInfo("en-US");
            msSQL = " update ocs_mst_tsainstitution set " +
                    " sa_associatename = ' " + values.sa_associatename + " '," +
                    " sa_reportingmanager='" + values.sa_reportingmanager + "'," +
                    " satype_gid='" + values.satype_gid + "'," +
                    " satype_name='" + values.satype_name + "',";
            if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
            {
            }
            else
            {
                msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
            {
            }
            else
            {
                msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
            {

            }
            else
            {
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
                     " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
                     " saentitytype_gid='" + values.saentitytype_gid + "'," +
                      " saentitytype_name='" + values.saentitytype_name + "'," +
                     " sa_associatename='" + values.sa_associatename + "'," +
                     " designation_gid='" + values.designation_gid + "'," +
                      " designation_type='" + values.designation_type + "'," +
                     " sa_companypan='" + values.sa_companypan + "'," +
                     " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                     " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                     " sa_contactlastname='" + values.sa_contactlastname + "'," +
                     " sa_annualturnover='" + values.sa_annualturnover + "'," +
                     " saifsc_code='" + values.saifsc_code + "'," +
                     " saaccount_number='" + values.saaccount_number + "'," +
                     " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                      " sa_apputr='" + values.sa_apputr + "'," +
                       " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                         " micr='" + values.micr + "'," +
                     " branch_address='" + values.branch_address + "'," +
                     " city='" + values.city + "'," +
                     " district='" + values.district + "'," +
                     " state='" + values.state + "'," +

                      " saaccountholder_name='" + values.saaccountholder_name + "'," +
                     " sacanccheque_number='" + values.sacanccheque_number + "'," +
                     " sabranch_name='" + values.sabranch_name + "'," +
                     " sabank_name='" + values.sabank_name + "'," +
                     " sa_onboard_flag='Y'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("SAUL");

                msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
               " institution_log_id, " +
               " sacontactinstitution_gid, " +
               " sa_associatename," +
               " sa_contactfirstname," +
               " sa_contactmiddlename," +
               " sa_contactlastname," +               
               " sa_companypan," +
               " sa_yearsinbusiness," +
               " sa_monthsinbusiness," +
               " created_by," +
               " created_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.sacontactinstitution_gid + "'," +
               "'" + sa_associatename + "'," +
               "'" + sa_contactfirstname + "'," +
               "'" + sa_contactmiddlename + "'," +
               "'" + sa_contactlastname + "'," +
                "'" + sa_companypan + "'," +
                         "'" + sa_yearsinbusiness + "'," +
                         "'" + sa_monthsinbusiness + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //Updates

                msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Company details updated successfully";
                return true;
                //try
                //{
                //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                //    if (objODBCDatareader.HasRows == true)
                //    {
                //        ls_server = objODBCDatareader["pop_server"].ToString();
                //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                //        ls_username = objODBCDatareader["pop_username"].ToString();
                //        ls_password = objODBCDatareader["pop_password"].ToString();
                //    }
                //    objODBCDatareader.Close();
                //    msSQL = "select email_id from hrm_mst_tdepartment where department_name='Credit Administration'";
                //    tomail_id = objdbconn.GetExecuteScalar(msSQL);
                //    msSQL = " select  date_format(a.created_date, '%d-%m-%Y %h:%i:%s %p') as 'created_date'," +
                //    " concat(c.user_firstname, ' ', c.user_lastname, '/', c.user_code) as created_by" +
                //    " from ocs_mst_tbuyer a  left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                //    " left join adm_mst_tuser c on b.user_gid = c.user_gid  " +
                //    " where buyer_gid='" + values.buyer_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                //    if (objODBCDatareader.HasRows == true)
                //    {
                //        lscreatedby = objODBCDatareader["created_by"].ToString();
                //        lscreateddate = objODBCDatareader["created_date"].ToString();
                //    }
                //    objODBCDatareader.Close();
                //    sub = "Buyer ";
                //    body = "Dear Sir/Madam,  <br />";
                //    body = body + "<br />";
                //    body = body + "Greetings,  <br />";
                //    body = body + "<br />";
                //    body = body + "A New Buyer is Created By " + lscreatedby + "  On:" + lscreateddate + "<br />";
                //    body = body + "<br />";
                //    body = body + "<b>Thanks & Regards, </b> ";
                //    body = body + "<br />";
                //    body = body + "<b> Team Buyer ";
                //    body = body + "<br />";
                //    MailMessage message = new MailMessage();
                //    SmtpClient smtp = new SmtpClient();
                //    message.From = new MailAddress(ls_username);
                //    message.To.Add(new MailAddress(tomail_id));
                //    message.Subject = sub;
                //    message.IsBodyHtml = true; //to make message body as html  
                //    message.Body = body;
                //    smtp.Port = ls_port;
                //    smtp.Host = ls_server; //for gmail host  
                //    smtp.EnableSsl = true;
                //    smtp.UseDefaultCredentials = false;
                //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                //    //smtp.Send(message);
                //    values.status = true;
                //    return true;
                //}
                //catch (Exception ex)
                //{
                //    values.message = ex.ToString();
                //    values.status = false;
                //    return false;
                //}
            }

            else
            {
                values.status = false;
                values.message = "Error occured while updating company details";
                return false;
            }

        }


        //Verification

        public void DaApprovalInitated(string employee_gid, MdlMstInitiateApprovalList values)
        {
            if (!string.IsNullOrEmpty(values.sa_associatename))
            {
                if (values.sa_associatename.Contains("'"))
                {
                    values.sa_associatename = values.sa_associatename.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactfirstname))
            {
                if (values.sa_contactfirstname.Contains("'"))
                {
                    values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
            {
                if (values.sa_contactmiddlename.Contains("'"))
                {
                    values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sa_contactlastname))
            {
                if (values.sa_contactlastname.Contains("'"))
                {
                    values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.branch_address))
            {
                if (values.branch_address.Contains("'"))
                {
                    values.branch_address = values.branch_address.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sabranch_name))
            {
                if (values.sabranch_name.Contains("'"))
                {
                    values.sabranch_name = values.sabranch_name.Replace("'", "");
                }
            }
            msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                      " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                      " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,date_format(agreementexecutiondate,'%d-%m-%Y') as agreementexecutiondate,date_format(agreementexpirydate,'%d-%m-%Y') as agreementexpirydate,date_format(agroagreementexecutiondate,'%d-%m-%Y') as agroagreementexecutiondate,date_format(agroagreementexpirydate,'%d-%m-%Y') as agroagreementexpirydate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date  FROM " +
                      " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();
                Edit_agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
                Edit_agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
                Edit_agroagreementexecutiondate = objODBCDatareader["agroagreementexecutiondate"].ToString();
                Edit_agroagreementexpirydate = objODBCDatareader["agroagreementexpirydate"].ToString();

                //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                //}
                //if (objODBCDatareader["sa_companystdate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                //}
                //if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                //}
                sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                satype_gid = objODBCDatareader["satype_gid"].ToString();
                satype_name = objODBCDatareader["satype_name"].ToString();
                saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select count(*) as openquery from ocs_mst_tcheckerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                            " and checkerinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = "select sainstitution2bureau_gid " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one bureau";
                    return;
                }
                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload atleast one mail document ";
                //        return;
                //    }
                //}
                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number/Add atleast one primary status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast one email id /Add atleast one primary status";
                    return;
                }
                msSQL = "select saaddresstype_gid " + " from ocs_mst_tsainstitution2address where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "'or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add address details";
                    return;
                }
                //msSQL = "select * " + " from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Kindly Upload Atleast One Document ";
                //    return false;
                //}

                msSQL = " update  ocs_mst_tsainstitution set " +
                      " interviewevalution = '" + values.interviewevalution + "'," +
                        " applicationform = '" + values.applicationform + "'," +
                        " kycdocuments = '" + values.kycdocuments + "'," +
                        " vettingstatus = '" + values.vettingstatus + "'," +
                        " addressproof = '" + values.addressproof + "'," +
                        " photographs = '" + values.photographs + "'," +
                        " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                        " sa_associatename = '" + values.sa_associatename + "'," +
                       " satype_gid='" + values.satype_gid + "'," +
                       " satype_name='" + values.satype_name + "',";

                if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
                {
                }
                else
                {
                    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_associatename='" + values.sa_associatename + "'," +
                " designation_gid='" + values.designation_gid + "'," +
                 " designation_type='" + values.designation_type + "'," +
                " sa_companypan='" + values.sa_companypan + "'," +
                " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                " sa_contactlastname='" + values.sa_contactlastname + "'," +
                " sa_annualturnover='" + values.sa_annualturnover + "'," +
                 " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                 " sa_apputr='" + values.sa_apputr + "'," +
                       " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
               // else
               //if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
               // {

               // }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agreementexpirydate == Convert.ToString(values.agreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agroagreementexecutiondate == Convert.ToString(values.agroagreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agroagreementexpirydate == Convert.ToString(values.agroagreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }

                if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
                {
                }
                else
                {
                    msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                         " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                         " verificationremarks = '" + values.verificationremarks + "'," +
                          " checkerapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         "  approvalstatus =  'Approver Pending' ," +
                         "  approvalinitated_flag = 'Y'," +
                        "  checkerinstitution_flag = 'Y'," +
                         " approvalinitiated_by='" + employee_gid + "'," +
                         " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

               

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsainstitutionmaildocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionverifydocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);





                    msSQL = "select agreementsubrenewal_date from ocs_mst_tsainstitution " +
                              " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsagreementrenewal_date = objODBCDatareader["agreementsubrenewal_date"].ToString();

                    }

                    objODBCDatareader.Close();
                   
                    if (!(String.IsNullOrEmpty(lsagreementrenewal_date)))
                    {
                        msSQL = "update ocs_mst_tsainstitution set agreementrenewal_date = '" + Convert.ToDateTime(lsagreementrenewal_date).AddYears(1).ToString("yyyy-MM-dd HH:mm") + "' where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                   
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details
                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                          " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();


                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.institutionchecker_name, " +
                            " i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.reportingmanager_gid)  as tomembers,group_concat(distinct i.institutionchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            institutionchecker_name = objODBCDatareader["institutionchecker_name"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                  "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                  "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);





                        sub = " SBA Onboarding approval required";
                        body = "Dear " + HttpUtility.HtmlEncode(lssa_reportingmanager) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "SBA Onboarding approval is required. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Checker verified date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Checker name :</b> " + HttpUtility.HtmlEncode(institutionchecker_name) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to approve the onboarding details";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingVerificationmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger



                    values.status = true;
                    values.message = "SBA Onboarding checker approved successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }

        }




        public void DaCheckerApprovalEdit(string employee_gid, MdlMstInitiateApprovalList values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tcheckerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                            " and checkerinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = "select sainstitution2bureau_gid " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one bureau";
                    return;
                }
                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload atleast one mail document ";
                //        return;
                //    }
                //}
                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number/Add atleast one primary status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast one email id /Add atleast one primary status";
                    return;
                }
                msSQL = "select saaddresstype_gid " + " from ocs_mst_tsainstitution2address where (sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "'or sacontactinstitution_gid='" + employee_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add address details";
                    return;
                }
                //msSQL = "select * " + " from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + employee_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Kindly Upload Atleast One Document ";
                //    return false;
                //}
                msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                       " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                       " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,date_format(agreementexecutiondate,'%d-%m-%Y') as agreementexecutiondate,date_format(agreementexpirydate,'%d-%m-%Y') as agreementexpirydate,date_format(agroagreementexecutiondate,'%d-%m-%Y') as agroagreementexecutiondate,date_format(agroagreementexpirydate,'%d-%m-%Y') as agroagreementexpirydate,date_format(ratingas_date,'%d-%m-%Y') as ratingas_date FROM " +
                       " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();
                    Edit_agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
                    Edit_agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
                    Edit_agroagreementexecutiondate = objODBCDatareader["agroagreementexecutiondate"].ToString();
                    Edit_agroagreementexpirydate = objODBCDatareader["agroagreementexpirydate"].ToString();

                    //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    //}
                    //if (objODBCDatareader["sa_companystdate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                    //}
                    //if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    //}
                    sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    satype_gid = objODBCDatareader["satype_gid"].ToString();
                    satype_name = objODBCDatareader["satype_name"].ToString();
                    saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                }
                objODBCDatareader.Close();
                msSQL = " update  ocs_mst_tsainstitution set " +
                      " interviewevalution = '" + values.interviewevalution + "'," +
                        " applicationform = '" + values.applicationform + "'," +
                        " kycdocuments = '" + values.kycdocuments + "'," +
                        " vettingstatus = '" + values.vettingstatus + "'," +
                        " addressproof = '" + values.addressproof + "'," +
                        " photographs = '" + values.photographs + "'," +
                        " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                        " sa_associatename = '" + values.sa_associatename + "'," +
                       " satype_gid='" + values.satype_gid + "'," +
                       " satype_name='" + values.satype_name + "',";
                if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
                {
                }
                else
                {
                    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_associatename='" + values.sa_associatename + "'," +
                " designation_gid='" + values.designation_gid + "'," +
                 " designation_type='" + values.designation_type + "'," +
                " sa_companypan='" + values.sa_companypan + "'," +
                " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                " sa_contactlastname='" + values.sa_contactlastname + "'," +
                " sa_annualturnover='" + values.sa_annualturnover + "'," +
                 " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
                 " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

                //if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if (Edit_agreementexecutiondate == Convert.ToString(values.agreementexecutiondate))
                {
                }
                // else
                //if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                // {

                // }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
               
                //if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agreementexpirydate == Convert.ToString(values.agreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agroagreementexecutiondate == Convert.ToString(values.agroagreementexecutiondate))
                {
                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecutiondate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                if (Edit_agroagreementexpirydate == Convert.ToString(values.agroagreementexpirydate))
                {
                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpirydate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }

                if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
                {
                }
                else
                {
                    msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                         " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                         " verificationremarks = '" + values.verificationremarks + "'," +
                         //"  approvalstatus =  'Checker Verified' ," +
                         "  approvalinitated_flag = 'Y'," +
                        "  checkerinstitution_flag = 'Y'," +
                         " approvalinitiated_by='" + employee_gid + "'," +
                         " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsainstitutionmaildocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionverifydocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "SBA Onboarding checker approved successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }

        }

        //public void DaApprovalInitatedDetail(string sacontactinstitution_gid, Institutionedit values)
        //{
        //    try
        //    {
        //        msSQL = " SELECT a.sacontactinstitution_gid,a.sa_autogeneratedid,a.approval_flag,a.sa_reportingmanager,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
        //               " a.sa_associatename,a.sa_contactfirstname,a.sa_contactmiddlename,a.confirmbankaccountnumber,a.sa_contactlastname," +
        //               " a.designation_gid,a.designation_type,a.sa_dateofincorporation,a.sa_companystdate,a.sa_yearsinbusiness," +
        //               " a.sa_monthsinbusiness,a.sa_companypan,a.sa_startdate,a.sa_enddate,a.sa_annualturnover, " +
        //               " a.saifsc_code,a.saaccount_number,a.saaccountholder_name," +
        //               " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement," +
        //               "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
        //               " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,a.agreementexecutiondate,a.agreementexpirydate," +
        //               "  a.agreementstatus,a.bookletnumber,a.verificationremarks,a.approvalinitated_flag,institutionsaveasdraft_flag," +
        //               " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
        //                  " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus, " +
        //               " a.sacanccheque_number,a.sabranch_name,a.sabank_name FROM " +
        //               " ocs_mst_tsainstitution a" +
        //               " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
        //               " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
        //                 " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
        //               " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
        //               " where a.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' ";
        //        objODBCDatareader = objdbconn.GetDataReader(msSQL);
        //        if (objODBCDatareader.HasRows == true)
        //        {

        //            values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
        //            values.applicationform = objODBCDatareader["applicationform"].ToString();
        //            values.yearsitreturns = objODBCDatareader["yearsitreturns"].ToString();
        //            values.bankstatement = objODBCDatareader["bankstatement"].ToString();
        //            values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
        //            values.prospect = objODBCDatareader["prospect"].ToString();
        //            values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
        //            values.scannedcopyreception = objODBCDatareader["scannedcopyreception"].ToString();
        //            values.addressproof = objODBCDatareader["addressproof"].ToString();
        //            values.photographs = objODBCDatareader["photographs"].ToString();
        //            values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
        //            values.houseofficeverification = objODBCDatareader["houseofficeverification"].ToString();
        //            values.institutionsaveasdraft_flag = objODBCDatareader["institutionsaveasdraft_flag"].ToString();
        //            values.agreementexecutiondate = objODBCDatareader["agreementexecutiondate"].ToString();
        //            values.agreementexpirydate = objODBCDatareader["agreementexpirydate"].ToString();
        //            values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
        //            values.bookletnumber = objODBCDatareader["bookletnumber"].ToString();
        //            values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
        //            values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
        //            values.approval_flag = objODBCDatareader["approval_flag"].ToString();

        //            values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
        //            values.satype_name = objODBCDatareader["satype_name"].ToString();
        //            values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
        //            values.satype_gid = objODBCDatareader["satype_gid"].ToString();
        //            values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
        //            values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
        //            values.sa_associatename = objODBCDatareader["sa_associatename"].ToString();
        //            values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
        //            values.sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
        //            values.sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
        //            values.sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
        //            values.designation_gid = objODBCDatareader["designation_gid"].ToString();
        //            values.designation_type = objODBCDatareader["designation_type"].ToString();
        //            if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["sa_companystdate"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["sa_startdate"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.editsa_startdate = Convert.ToDateTime(objODBCDatareader["sa_startdate"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["sa_enddate"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.editsa_enddate = Convert.ToDateTime(objODBCDatareader["sa_enddate"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["created_date"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
        //            }
        //            if (objODBCDatareader["approved_date"].ToString() == "")
        //            {
        //            }
        //            else
        //            {
        //                values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
        //            }
        //            values.approved_by = objODBCDatareader["approved_by"].ToString();
        //            values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
        //            values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();


        //            values.sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
        //            values.sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
        //            values.sa_companypan = objODBCDatareader["sa_companypan"].ToString();
        //            values.sa_annualturnover = objODBCDatareader["sa_annualturnover"].ToString();
        //            values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
        //            values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
        //            values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
        //            values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
        //            values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
        //            values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
        //            values.sabank_name = objODBCDatareader["sabank_name"].ToString();
        //            values.sa_updated_by = objODBCDatareader["created_by"].ToString();


        //        }
        //        values.status = true;
        //        values.message = "success";
        //        objODBCDatareader.Close();
        //    }
        //    catch
        //    {
        //        values.status = false;
        //        values.message = "failure";
        //    }
        //}
        public bool DaPostSABureauInstitution(string employee_gid, MdlSACICIndividual values)
        {

            msSQL = "select institutionsabureaudocumentupload_gid " + " from ocs_mst_tinstitutionsabureaudocumentupload where sainstitution2bureau_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one document";
                return false;
            }
            // Document Attachments
            //msSQL = "select document_name from ocs_tmp_tcicdocument where created_by='" + employee_gid + "'";
            //lsdocument_name = objdbconn.GetExecuteScalar(msSQL);
            //msSQL = "select document_path from ocs_tmp_tcicdocument where created_by='" + employee_gid + "'";
            //lsdocument_path = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("SABU");
            msSQL = " insert into ocs_mst_tsainstitution2bureau(" +
                   " sainstitution2bureau_gid ," +
                   " sacontactinstitution_gid," +
                   " bureauname_gid," +
                   " bureauname_name," +
                   " bureau_score," +
                   " bureauscore_date," +
                   " bureau_response," +
                   " observations," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.bureauname_gid + "'," +
                   "'" + values.bureauname_name + "'," +
                   "'" + values.bureau_score + "',";

            if (values.bureauscore_date == null || values.bureauscore_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.bureauscore_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL += "'" + values.bureau_response.Replace("'", "") + "'," +
                      "'" + values.observations.Replace("'", "") + "'," +
                      "'" + employee_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tinstitutionsabureaudocumentupload set sainstitution2bureau_gid='" + msGetGid + "' where sainstitution2bureau_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tindividual2cicdocumentupload set contact2bureau_gid='" + msGetGid + "' where contact2bureau_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tcontact2tuhighriskalert set contact_gid='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //msSQL = "update ocs_mst_tcontact2tuhighriskalert set contact2bureau_gid='" + msGetGid + "' where contact2bureau_gid='" + employee_gid + "'";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit score added for institution successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";
                return false;
            }

        }
        public void DaGetSABureauInstitutionList(string sacontactinstitution_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            //msSQL = "select sainstitution2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsainstitution2bureau where " +
            //  " sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            msSQL = "select sainstitution2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsainstitution2bureau where " +
           " sacontactinstitution_gid='" + sacontactinstitution_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsainstitutebureau_list = new List<sainstitutebureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsainstitutebureau_list.Add(new sainstitutebureau_list
                    {
                        sainstitution2bureau_gid = (dr_datarow["sainstitution2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.sainstitutebureau_list = getsainstitutebureau_list;
            dt_datatable.Dispose();
        }
        public void DaGetSABureauInstitutionTempList(string sacontactinstitution_gid,string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = "select sainstitution2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_mst_tsainstitution2bureau where " +
              " sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsainstitutebureau_list = new List<sainstitutebureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsainstitutebureau_list.Add(new sainstitutebureau_list
                    {
                        sainstitution2bureau_gid = (dr_datarow["sainstitution2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.sainstitutebureau_list = getsainstitutebureau_list;
            dt_datatable.Dispose();
        }
        public void DaSABureauView(string sainstitution2bureau_gid, MdlSACICIndividual values)
        {
            try
            {
                msSQL = " select sainstitution2bureau_gid, bureauname_gid,bureauname_name, bureau_score, date_format(bureauscore_date,'%d-%m-%Y') as bureauscore_date," +
                    " observations, bureau_response" +
                    " from ocs_mst_tsainstitution2bureau where sainstitution2bureau_gid='" + sainstitution2bureau_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.bureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.observations = objODBCDatareader["observations"].ToString();
                    values.bureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.bureauscore_date = objODBCDatareader["bureauscore_date"].ToString();
                    values.sainstitution2bureau_gid = objODBCDatareader["sainstitution2bureau_gid"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();

            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public void DaTempBureau(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteContactBureau(string sainstitution2bureau_gid, MdlContactBureau values)
        {
            msSQL = "delete from ocs_mst_tsainstitution2bureau where sainstitution2bureau_gid='" + sainstitution2bureau_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Bureau deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;

            }
        }
        //document
        public bool DaSaInstitutionDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT count(*) FROM ocs_tmp_tcicdocument where created_by = '" + employee_gid + "' ";
            string count = objdbconn.GetExecuteScalar(msSQL);

            int counts = Convert.ToInt32(count);

            if (counts < 1)
            {

                msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
                {
                    if ((!System.IO.Directory.Exists(path)))
                        System.IO.Directory.CreateDirectory(path);
                }

                try
                {
                    if (httpRequest.Files.Count > 0)
                    {
                        string lsfirstdocument_filepath = string.Empty;
                        httpFileCollection = httpRequest.Files;
                        for (int i = 0; i < httpFileCollection.Count; i++)
                        {
                            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                            httpPostedFile = httpFileCollection[i];
                            string FileExtension = httpPostedFile.FileName;
                            string lsfile_gid = msdocument_gid;
                            FileExtension = Path.GetExtension(FileExtension).ToLower();
                            lsfile_gid = lsfile_gid + FileExtension;
                            Stream ls_readStream;
                            ls_readStream = httpPostedFile.InputStream;
                            MemoryStream ms = new MemoryStream();
                            ls_readStream.CopyTo(ms);

                            // Check Document validation; 

                            byte[] bytes = ms.ToArray();

                            if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                            {

                                objfilename.message = "File format is not supported";

                                return false;

                            }
                            // Check Document validation; 
                            bool status;
                            status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                            ms.Close();
                            lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/CICUploadIndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                            msGetGid = objcmnfunctions.GetMasterGID("BUDO");
                            msSQL = " insert into ocs_mst_tinstitutionsabureaudocumentupload( " +
                                        " institutionsabureaudocumentupload_gid, " +
                                        " sainstitution2bureau_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + httpPostedFile.FileName + "'," +
                                        "'" + lspath + msdocument_gid + FileExtension + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            if (mnResult == 1)
                            {
                                objfilename.status = true;
                                objfilename.message = "Document uploaded successfully..!";
                            }
                            else
                            {
                                objfilename.status = false;
                                objfilename.message = "Error Occured..!";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    objfilename.message = ex.ToString();
                }

            }
            else
            {
                objfilename.message = "Only one file should upload..!";
            }
            return true;
        }
        public void DaSAUploadIndividualDocList(string sainstitution2bureau_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select institutionsabureaudocumentupload_gid,sainstitution2bureau_gid,document_name,document_path from ocs_mst_tinstitutionsabureaudocumentupload " +
                                 " where sainstitution2bureau_gid='" + sainstitution2bureau_gid + "' or sainstitution2bureau_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sainstitution2bureau_gid = dt["sainstitution2bureau_gid"].ToString(),
                        institutionsabureaudocumentupload_gid = dt["institutionsabureaudocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSAUploadIndDocList(string sainstitution2bureau_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select institutionsabureaudocumentupload_gid,sainstitution2bureau_gid,document_name,document_path from ocs_mst_tinstitutionsabureaudocumentupload " +
                                 " where sainstitution2bureau_gid='" + sainstitution2bureau_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {


                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sainstitution2bureau_gid = dt["sainstitution2bureau_gid"].ToString(),
                        institutionsabureaudocumentupload_gid = dt["institutionsabureaudocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempBureauDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tinstitutionsabureaudocumentupload where sainstitution2bureau_gid='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            msSQL = "delete from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid ='" + employee_gid + "' or length(sacontactinstitution_gid) < 5 ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaTempChequeDocuments(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tinstitutioncancelchequeupload where sacontactinstitution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteBureauDocuments(string institutionsabureaudocumentupload_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tinstitutionsabureaudocumentupload where institutionsabureaudocumentupload_gid='" + institutionsabureaudocumentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "Bureau document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;
            }
        }

        //MAIL APPROVAL
        public bool DaSaMailDocument(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT count(*) FROM ocs_tmp_tcicdocument where created_by = '" + employee_gid + "' ";
            string count = objdbconn.GetExecuteScalar(msSQL);

            int counts = Convert.ToInt32(count);

            if (counts < 1)
            {

                msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                //  path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
                path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                {
                    if ((!System.IO.Directory.Exists(path)))
                        System.IO.Directory.CreateDirectory(path);
                }

                try
                {
                    if (httpRequest.Files.Count > 0)
                    {
                        string lsfirstdocument_filepath = string.Empty;
                        httpFileCollection = httpRequest.Files;
                        for (int i = 0; i < httpFileCollection.Count; i++)
                        {
                            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                            httpPostedFile = httpFileCollection[i];
                            string FileExtension = httpPostedFile.FileName;
                            string lsfile_gid = msdocument_gid;
                            FileExtension = Path.GetExtension(FileExtension).ToLower();
                            lsfile_gid = lsfile_gid + FileExtension;
                            Stream ls_readStream;
                            ls_readStream = httpPostedFile.InputStream;
                            MemoryStream ms = new MemoryStream();
                            ls_readStream.CopyTo(ms);
                            // Check Document validation; 

                            byte[] bytes = ms.ToArray();

                            if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                            {

                                objfilename.message = "File format is not supported";

                                return false;

                            }
                            // Check Document validation;
                            bool status;
                            status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                            ms.Close();
                            lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                            //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                            //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                            //ms.WriteTo(file);
                            //file.Close();
                            //ms.Close();
                            //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/MailInstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                            msGetGid = objcmnfunctions.GetMasterGID("MAIS");
                            msSQL = " insert into ocs_mst_tsainstitutionmaildocument( " +
                                        " sainstitutionmaildocument_gid, " +
                                        " sacontactinstitution_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + httpPostedFile.FileName + "'," +
                                        "'" + lspath + msdocument_gid + FileExtension + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            if (mnResult == 1)
                            {
                                objfilename.status = true;
                                objfilename.message = "Document uploaded successfully..!";
                            }
                            else
                            {
                                objfilename.status = false;
                                objfilename.message = "Error occured..!";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    objfilename.message = ex.ToString();
                }

            }
            else
            {
                objfilename.message = "Only one file should upload..!";
            }
            return true;
        }
        public void DaSAMailDocumentTempList(string sacontactinstitution_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select sainstitutionmaildocument_gid,sacontactinstitution_gid,document_name,document_path from ocs_mst_tsainstitutionmaildocument " +
                                 " where sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontactinstitution_gid = dt["sacontactinstitution_gid"].ToString(),
                        sainstitutionmaildocument_gid = dt["sainstitutionmaildocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSAMailDocumentList(string sacontactinstitution_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select sainstitutionmaildocument_gid,sacontactinstitution_gid,document_name,document_path from ocs_mst_tsainstitutionmaildocument " +
                                 " where sacontactinstitution_gid='" + sacontactinstitution_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontactinstitution_gid = dt["sacontactinstitution_gid"].ToString(),
                        sainstitutionmaildocument_gid = dt["sainstitutionmaildocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempSAMailDocument(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteSAMailDocument(string sainstitutionmaildocument_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionmaildocument where sainstitutionmaildocument_gid='" + sainstitutionmaildocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "Mail document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;
            }
        }
        //Approval

        public void DaGetSaApprovalPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.checkerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.checkerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.checkerapproved_date, now()), '60'), 'Mins') as tat ,  " +
                    " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                    " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                    " (a.origination) as RecordSource, " +
                           " if (referred_by is null,'--',referred_by) as referred_by, " +
                    " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " where a.approvalinitated_flag = 'Y' and a.checkerinstitution_flag = 'Y' and a.finalinstitutionapproval_flag = 'N'" +
                      " and a.reportingmanager_gid='" + employee_gid + "' " +
                      " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        recordsource = (dt["RecordSource"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approvalinitiated_by = (dt["approvalinitiated_by"].ToString()),
                        approvalinitiated_date = (dt["approvalinitiated_date"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSaApprovalInitiatedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat  ,  " +
                      " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " (a.origination) as RecordSource," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                     " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                      " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved','Rejected') and a.reportingmanager_gid='" + employee_gid + "' " +
                      " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        code_created_flag = (dt["code_created_flag"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approved_by = (dt["approved_by"].ToString()),
                        approved_date = (dt["approved_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }

        public void DaPostApprove(string employee_gid, MdlApprove values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tapproverinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                              " and approverinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            
            logforAudit("------ Institution query count " + values.openquerycount + " -------");

            if (values.openquerycount == "0")
            {
                logforAudit("------ Institution enter approved case " + values.openquerycount + " -------");

                msSQL = " update ocs_mst_tsainstitution set approvalstatus='" + values.approval_status + "',";
                if (values.remarks == "" || values.remarks == null)
                {
                    msSQL += " approval_remarks='',";
                }
                else
                {
                    msSQL += " approval_remarks='" + values.remarks.Replace("'", "") + "',";
                }
                msSQL += " approved_by='" + employee_gid + "'," +
                       " approval_flag ='Y'," +
                        " renewal_flag ='Y'," +
                       " finalinstitutionapproval_flag ='Y'," +
                        " finalapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " approved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where  sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                
                logforAudit("------ institution update query" + msSQL + " -------");
                logforAudit("------ mnresult" + mnResult + " -------");

                if (mnResult != 0)
                {
                   
                    msSQL = "select code_created_flag,sa_autogeneratedid,sa_associatename from ocs_mst_tsainstitution  where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    logforAudit("------ objdatareader status " + objODBCDatareader.HasRows + " -------");


                    if (objODBCDatareader.HasRows == true)
                    {
                        codecreated_flag = objODBCDatareader["code_created_flag"].ToString();
                        lssaautogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lssa_associatename = objODBCDatareader["sa_associatename"].ToString();

                    }
                    objODBCDatareader.Close();

                    msGetGidLog = objcmnfunctions.GetMasterGID("ICCL");
                    msSQL = " insert into  ocs_mst_tinstitutioncodecreatedlog(" +
                             "institutioncodecreatedlog_gid, " +
                             "institution_gid, " +
                             "codecreated_flag, " +
                             "created_by, " +
                             "created_date) " +
                             " values(" +
                             "'" + msGetGidLog + "'," +
                             "'" + values.sacontactinstitution_gid + "', " +
                             "'" + codecreated_flag + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ mnresult codecreatedlog " + mnResult + " -------");

                    logforAudit("------ codecreatedflag " + codecreated_flag + " -------");

                    if (codecreated_flag == "Y")
                    {
                        values.status = true;
                        values.message = "Final approval approved successfully";
                        return;

                    }
                    //msSQL = " SELECT sacontactinstitution_gid,sa_autogeneratedid from" +
                    //" ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //if (objODBCDatareader.HasRows == true)
                    //{
                    //    sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    //}
                    //objODBCDatareader.Close();

                    string lsind_refno = "SAC";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");
                    lsind_refno = lsind_refno + msGETRef;
                    string fincode = lsind_refno;

                    string lsind_ref = "SAC";
                    lsind_ref = lsind_ref + msGETRef;
                    string agrocode = lsind_ref;

                    defPass = "Welcome@123";

                    msGetGid = objcmnfunctions.GetMasterGID("SBAL");

                    msSQL = "insert into ocs_mst_tsaloginsbauser(sbauser_gid,sa_autogeneratedid,samfin_code,samagro_code,sbauser_password, " +
                           " created_by,created_date,active,web_active) values ('" + msGetGid + "','" + lssaautogeneratedid + "','" + fincode + "', " +
                           " '" + agrocode + "','" + objcmnfunctions.ConvertToAscii(defPass) + "','" + employee_gid + "', " +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','Y')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ ocs_mst_tsaloginsbauser mnresult " + msSQL + " -------");

                    msGetAPICode = objcmnfunctions.GetApiMasterGID("ASSO");

                    msSQL = " update ocs_mst_tsainstitution set samfin_code='" + fincode + "', samagro_code='" + agrocode + "',api_code='" + msGetAPICode + "'," +
                       " code_created_by='" + employee_gid + "',code_created_flag='Y',renewal_flag='Y',codecreation_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' " +
                        " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    logforAudit("------ samfin code mnresult " + mnResult + " -------");
                    logforAudit("------ samfin code " + fincode + " -------");

                    msGetGidAssociate = objcmnfunctions.GetMasterGID("MSAM");
                    msSQL = " insert into ocs_mst_tassociatemaster(" +
                            " associatemaster_gid," +
                            " api_code," +
                            " name," +
                            " associate_code," +
                            " status," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGidAssociate + "'," +
                            "'" + msGetAPICode + "'," +
                            "'" + lssa_associatename + "'," +
                            "'" + fincode + "'," +
                            "'Yes'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    logforAudit("------ ocs_mst_tassociatemaster mnresult " + mnResult + " -------");
                   
                    values.message = "Final approval approved successfully";
                    values.status = true;


                    //Mail Trigger
                    //try
                    //{
                    //    k = 1;

                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check



                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                    //     " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                    //    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                    //            " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    //    }

                    //    objODBCDatareader.Close();


                    //    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.institutionchecker_name,i.sa_autogeneratedid,i.institutionmaker_name, " +
                    //        " group_concat(distinct i.reportingmanager_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                    //  " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                    //         " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                    //         " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                    //          " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        institutionchecker_name = objODBCDatareader["institutionchecker_name"].ToString();
                    //        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                    //        //lsto2members = objODBCDatareader["tomembers"].ToString();
                    //        lscc2members = objODBCDatareader["cc2members"].ToString();
                    //        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                    //        lscreated_date = objODBCDatareader["created_date"].ToString();
                    //        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    //    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                    //            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    sub = " SBA Code to be created";
                    //    body = "Dear sir/madam,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "New SBA has been approved. Please create SBA codes and confirm.  The details are as follows,<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b>  Approved date:</b> " + lscreated_date + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Approver name :</b> " + HttpUtility.HtmlEncode(lssa_reportingmanager) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + HttpUtility.HtmlEncode(lsuser_firstname);
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAfinalapprovalmail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingApprovalmailcount( " +
                    //           " sacontactinstitution_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Approved'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}

                    //catch (Exception ex)
                    //{

                    //}
                    //Mail Trigger

                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }

        public void DaPostRejected(string employee_gid, MdlApprove values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tapproverinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                              " and approverinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsainstitution set approvalstatus='" + values.approval_status + "',";
                if (values.remarks == "" || values.remarks == null)
                {
                    msSQL += " approval_remarks='',";
                }
                else
                {
                    msSQL += " approval_remarks='" + values.remarks.Replace("'", "") + "',";
                }
                msSQL += " approved_by='" + employee_gid + "'," +
                       " approval_flag ='Y'," +
                       " finalinstitutionapproval_flag ='Y'," +
                       " approved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " finalapproved_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where  sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Rejected Successfully";
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontactinstitution_gid,sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,i.institutionchecker_name,group_concat(b.saemail_address) as tomembers , " +
                            " group_concat(i.created_by) as cc2members ,i.created_by, " +
                                                    " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                                    " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                                    " join ocs_mst_tsainstitution2mobileno c on c.sacontactinstitution_gid = i.sacontactinstitution_gid " +
                                                    " join ocs_mst_tsainstitution2email b on b.sacontactinstitution_gid = i.sacontactinstitution_gid where " +
                                                     " i.sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingApprovalmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }

                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "Rejected Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }


        //Verify document
        public bool DaSaVerifyDocument(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
            //path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation; 

                        byte[] bytes = ms.ToArray();

                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))

                        {

                            objfilename.message = "File format is not supported";

                            return false;

                        }
                        // Check Document validation; 

                        //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                        //ms.WriteTo(file);
                        //file.Close();
                        //ms.Close();
                        //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualVerifyDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        msGetGid = objcmnfunctions.GetMasterGID("VSDO");
                        msSQL = " insert into ocs_mst_tsainstitutionverifydocument(" +
                                " sainstitutionverifydocument_gid," +
                                " sacontactinstitution_gid," +
                                " document_title ," +
                                " document_name," +
                                //" sadocument_id," +
                                " document_path," +
                                " created_by,created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                  //"'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }
        public void DaSaVerifyDocumentTempList(string sacontactinstitution_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select sainstitutionverifydocument_gid,sacontactinstitution_gid,document_title,document_name,document_path from ocs_mst_tsainstitutionverifydocument " +
                                 " where sacontactinstitution_gid='" + sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontactinstitution_gid = dt["sacontactinstitution_gid"].ToString(),
                        sainstitutionverifydocument_gid = dt["sainstitutionverifydocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaSaVerifyDocumentList(string sacontactinstitution_gid, string employee_gid, MdlSAInstituteBureau values)
        {
            msSQL = " select sainstitutionverifydocument_gid,sacontactinstitution_gid,document_title,document_name,document_path from ocs_mst_tsainstitutionverifydocument " +
                             " where sacontactinstitution_gid='" + sacontactinstitution_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<sauploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();



                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new sauploaddoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        sacontactinstitution_gid = dt["sacontactinstitution_gid"].ToString(),
                        sainstitutionverifydocument_gid = dt["sainstitutionverifydocument_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.sauploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaTempSaVerifyDocument(string employee_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        public void DaDeleteSaVerifyDocument(string sainstitutionverifydocument_gid, MdlsaOnboardInstiEmailAddress values)
        {
            msSQL = "delete from ocs_mst_tsainstitutionverifydocument where sainstitutionverifydocument_gid='" + sainstitutionverifydocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = " Verification document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;
            }
        }
        public void DaGetSAVerfiyMakerInstitutionPending(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                       " (a.origination) as RecordSource," +
                       "  CONCAT(FLOOR(timestampdiff(day, a.pendingassignment_date, now())), ' days ',MOD(timestampdiff(hour, a.pendingassignment_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.pendingassignment_date, now()), '60'), 'Mins') as tat, " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   " where (a.makermapping_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "'and a.makerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred') )" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerifyMakerInstitutionInitiated(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, " +
                    " a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat , " +
                    " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approvalinitiated_by," +
                    " date_format(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p') as approvalinitiated_date, " +
                    " if (referred_by is null,'--',referred_by) as referred_by, " +
                    " (a.origination) as RecordSource," +
                          " (a.renewal_status) as Renewal_status" +
                    " from ocs_mst_tsainstitution a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " left join hrm_mst_temployee e on e.employee_gid=a.approvalinitiated_by" +
                        " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                    " where a.makerinstitution_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "' and approvalstatus not in ('Deferred')" +
                    " order by (concat(a.approvalinitiated_date,'%d-%m-%Y %h:%i %p')) desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approvalinitiated_by = (dt["approvalinitiated_by"].ToString()),
                        approvalinitiated_date = (dt["approvalinitiated_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerfiyinstitutionRejectedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.makermapping_flag,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,(a.created_by)as institution_gid, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat,  " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   " where a.onboardinginstitution_flag = 'Y' and a.approvalstatus='Rejected' " +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        mapping_flag = (dt["makermapping_flag"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())


                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerfiyinstitutionFinalApprovedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.makermapping_flag,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,(a.created_by)as institution_gid, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat,  " +
                       " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   " where a.approvalstatus='Approved' " +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        mapping_flag = (dt["makermapping_flag"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }

        public void DaGetSAVerfiyinstitutionPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.makermapping_flag,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,(a.created_by)as institution_gid, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,CONCAT(FLOOR(timestampdiff(day, a.pendingassignment_date, now())), ' days ',MOD(timestampdiff(hour, a.pendingassignment_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.pendingassignment_date, now()), '60'), 'Mins') as tat , " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   "  where a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y' and a.finalinstitutionapproval_flag = 'N'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        mapping_flag = (dt["makermapping_flag"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerfiyinstitutionMappingPendingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.makermapping_flag,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,(a.created_by)as institution_gid, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.verify_date, now())), ' days ',MOD(timestampdiff(hour, a.verify_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.verify_date, now()), '60'), 'Mins') as tat," +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                   "  where a.verify_flag = 'Y' and a.approvalmapping_flag = 'N' and approvalstatus not in ('BD Verification Rejected')" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        mapping_flag = (dt["makermapping_flag"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }

        public void DaMakerApprovalInitated(string employee_gid, MdlMstInitiateApprovalList values)
        {
            if (!string.IsNullOrEmpty(values.sa_associatename))
            {
                if (values.sa_associatename.Contains("'"))
                {
                    values.sa_associatename = values.sa_associatename.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactfirstname))
            {
                if (values.sa_contactfirstname.Contains("'"))
                {
                    values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                }
            }
            if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
            {
                if (values.sa_contactmiddlename.Contains("'"))
                {
                    values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sa_contactlastname))
            {
                if (values.sa_contactlastname.Contains("'"))
                {
                    values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.branch_address))
            {
                if (values.branch_address.Contains("'"))
                {
                    values.branch_address = values.branch_address.Replace("'", "");
                }
            }

            if (!string.IsNullOrEmpty(values.sabranch_name))
            {
                if (values.sabranch_name.Contains("'"))
                {
                    values.sabranch_name = values.sabranch_name.Replace("'", "");
                }
            }
            msSQL = " select count(*) as openquery from ocs_mst_tmakerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                             " and makerinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = "select sainstitution2bureau_gid " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one credit score";
                    return;

                }
                //if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
                //{
                //    msSQL = "select * " + " from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                //    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //    if (objODBCDatareader.HasRows == false)
                //    {
                //        values.status = false;
                //        values.message = "Upload atleast one mail document ";
                //        return;

                //    }
                //}


                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where (sacontactinstitution_gid ='" + employee_gid + "' or  sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number/Add atleast one primary status";
                    return;
                }

                msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where (sacontactinstitution_gid ='" + employee_gid + "' or  sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one email id /Add atleast one primary status";
                    return;
                }
                msSQL = "select saaddresstype_name " + " from ocs_mst_tsainstitution2address where (sacontactinstitution_gid ='" + employee_gid + "' or  sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "') and saprimary_status = 'Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add address details";
                    return;
                }
                msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                        " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                        " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,ratingas_date FROM " +
                        " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();


                    sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    satype_gid = objODBCDatareader["satype_gid"].ToString();
                    satype_name = objODBCDatareader["satype_name"].ToString();
                    saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " update  ocs_mst_tsainstitution set " +
                        " interviewevalution = '" + values.interviewevalution + "'," +
                        " applicationform = '" + values.applicationform + "'," +
                        " kycdocuments = '" + values.kycdocuments + "'," +
                        " vettingstatus = '" + values.vettingstatus + "'," +
                        " addressproof = '" + values.addressproof + "'," +
                        " photographs = '" + values.photographs + "'," +
                        " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
                        " sa_associatename = '" + values.sa_associatename + "'," +
                       " satype_gid='" + values.satype_gid + "'," +
                       " satype_name='" + values.satype_name + "',";
                //if (Editsa_dateofincorporation == Convert.ToString(values.sadateofincorporation))
                //{
                //}
                //else
                //{
                //    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sadateofincorporation).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
                {
                }
                else
                {
                    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
                {
                }
                else
                {
                    msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                " sa_associatename='" + values.sa_associatename + "'," +
                " designation_gid='" + values.designation_gid + "'," +
                 " designation_type='" + values.designation_type + "'," +
                " sa_companypan='" + values.sa_companypan + "'," +
                " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                " sa_contactlastname='" + values.sa_contactlastname + "'," +
                " sa_annualturnover='" + values.sa_annualturnover + "'," +
                  " state='" + values.state + "'," +
            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
              " branch_address='" + values.branch_address + "'," +
            " city='" + values.city + "'," +
            " district='" + values.district + "'," +
             " micr='" + values.micr + "'," +
            " saifsc_code='" + values.saifsc_code + "'," +
            " saaccount_number='" + values.saaccount_number + "'," +
             " saaccountholder_name='" + values.saaccountholder_name + "'," +
            " sacanccheque_number='" + values.sacanccheque_number + "'," +
            " sabranch_name='" + values.sabranch_name + "'," +
             " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
             " assessmentagency_name='" + values.assessmentagency_name + "'," +
              " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
               " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "'," +
             " sa_apputr='" + values.sa_apputr + "'," +
              " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
            " sabank_name='" + values.sabank_name + "',";

                if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementsubrenewal_date='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(-10).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agroagreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agroagreementexecutiondate='" + Convert.ToDateTime(values.agroagreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.agroagreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " agroagreementexpirydate='" + Convert.ToDateTime(values.agroagreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}

                //if (Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                //{

                //}
                //else
                //{
                //    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                msSQL += " agreementstatus = '" + values.agreementstatus + "'," +
                         " agroagreementstatus = '" + values.agroagreementstatus + "'," +
                         " verificationremarks = '" + values.verificationremarks + "'," +
                          " makerapproved_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         "  approvalstatus =  'Checker Pending' ," +
                         "  approvalinitated_flag = 'Y'," +
                        "  makerinstitution_flag = 'Y'," +
                         " approvalinitiated_by='" + employee_gid + "'," +
                         " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    //msSQL = "update ocs_mst_tsainstitutionmaildocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionverifydocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.institutionchecker_gid)  as tomembers,group_concat(distinct i.institutionmaker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                       " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                              " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                              " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                               " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();
                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                  "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                  "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = " An SBA Application (checker) is assigned to you";
                        body = "Dear " + HttpUtility.HtmlEncode(values.institutionchecker_name) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Maker verified date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Maker name :</b> " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lssa_reportingmanager) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to Approve the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;
                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingVerificationmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger



                    values.status = true;
                    values.message = "SBA Onboarding maker approved successfully";

                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }

        }
        //save as draft
        ////public void DaMakerSaveasdraftApprovalInitated(string employee_gid, MdlMstInitiateApprovalList values)
        ////{

        ////        msSQL = "select * " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + employee_gid + "'";
        ////        objODBCDatareader = objdbconn.GetDataReader(msSQL);

        ////        if (objODBCDatareader.HasRows == false)
        ////        {
        ////            values.status = false;
        ////            values.message = "Add Atleast One Bureau";
        ////        }
        ////        if (values.interviewevalution == "No" || values.applicationform == "No" || values.yearsitreturns == "No" || values.bankstatement == "No" || values.kycdocuments == "No" || values.prospect == "No" || values.vettingstatus == "No" || values.scannedcopyreception == "No" || values.addressproof == "No" || values.photographs == "No" || values.cancelledcheckleaf == "No" || values.houseofficeverification == "No")
        ////        {
        ////            msSQL = "select * " + " from ocs_mst_tsainstitutionmaildocument where sacontactinstitution_gid='" + employee_gid + "'";
        ////            objODBCDatareader = objdbconn.GetDataReader(msSQL);

        ////            if (objODBCDatareader.HasRows == false)
        ////            {
        ////                values.status = false;
        ////                values.message = "Upload Atleast One Mail Document ";
        ////            }
        ////        }

        ////        msSQL = "select * " + " from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + employee_gid + "'";
        ////        objODBCDatareader = objdbconn.GetDataReader(msSQL);

        ////        if (objODBCDatareader.HasRows == false)
        ////        {
        ////            values.status = false;
        ////            values.message = "Kindly Upload Atleast One Document ";
        ////        }

        ////        msSQL = " update  ocs_mst_tsainstitution set " +
        ////                " interviewevalution = '" + values.interviewevalution + "'," +
        ////                " applicationform = '" + values.applicationform + "'," +
        ////                " yearsitreturns = '" + values.yearsitreturns + "'," +
        ////                " bankstatement = '" + values.bankstatement + "'," +
        ////                " kycdocuments = '" + values.kycdocuments + "'," +
        ////                " prospect = '" + values.prospect + "'," +
        ////                " vettingstatus = '" + values.vettingstatus + "'," +
        ////                " scannedcopyreception = '" + values.scannedcopyreception + "'," +
        ////                " addressproof = '" + values.addressproof + "'," +
        ////                " photographs = '" + values.photographs + "'," +
        ////                " cancelledcheckleaf = '" + values.cancelledcheckleaf + "'," +
        ////                " houseofficeverification = '" + values.houseofficeverification + "'," +
        ////                " sa_associatename = '" + values.sa_associatename + "'," +
        ////               " satype_gid='" + values.satype_gid + "'," +
        ////               " satype_name='" + values.satype_name + "',";
        ////        if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
        ////        {
        ////        }
        ////        else
        ////        {
        ////            msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        ////        }
        ////        msSQL += " saentitytype_gid='" + values.saentitytype_gid + "'," +
        ////         " saentitytype_name='" + values.saentitytype_name + "'," +
        ////        " sa_associatename='" + values.sa_associatename + "'," +
        ////        " designation_gid='" + values.designation_gid + "'," +
        ////         " designation_type='" + values.designation_type + "'," +
        ////        " sa_companypan='" + values.sa_companypan + "'," +
        ////        " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
        ////        " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
        ////        " sa_contactlastname='" + values.sa_contactlastname + "'," +
        ////        " sa_annualturnover='" + values.sa_annualturnover + "'," +
        ////        " saifsc_code='" + values.saifsc_code + "'," +
        ////        " saaccount_number='" + values.saaccount_number + "'," +
        ////         " saaccountholder_name='" + values.saaccountholder_name + "'," +
        ////        " sacanccheque_number='" + values.sacanccheque_number + "'," +
        ////        " sabranch_name='" + values.sabranch_name + "'," +
        ////        " sabank_name='" + values.sabank_name + "',";

        ////        if (Convert.ToDateTime(values.agreementexecution_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        ////        {

        ////        }
        ////        else
        ////        {
        ////            msSQL += " agreementexecutiondate='" + Convert.ToDateTime(values.agreementexecution_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        ////        }
        ////        if (Convert.ToDateTime(values.agreementexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
        ////        {

        ////        }
        ////        else
        ////        {
        ////            msSQL += " agreementexpirydate='" + Convert.ToDateTime(values.agreementexpiry_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
        ////        }
        ////        msSQL += " agreementstatus = ' " + values.agreementstatus + " '," +
        ////                 " bookletnumber = ' " + values.bookletnumber + " '," +
        ////                 " verificationremarks = ' " + values.verificationremarks + " '," +
        ////                //"  approvalstatus =  'Institution Maker Approved' ," +
        ////                //"  approvalinitated_flag = 'Y'," +
        ////                "  institutionsaveasdraft_flag = 'Y'," +
        ////                 " approvalinitiated_by='" + employee_gid + "'," +
        ////                 " approvalinitiated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
        ////                 " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";

        ////        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        ////        if (mnResult != 0)
        ////        {
        ////            msSQL = "update ocs_mst_tsainstitutionmaildocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        ////            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        ////            msSQL = "update ocs_mst_tsainstitutionverifydocument set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
        ////            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


        ////            values.status = true;
        ////            values.message = "SA Onboarding Saveas Draft Successfully Added";
        ////        }
        ////    }

        public void DaCreateSAmappingLog(string sacontactinstitution_gid, MdlMstInitiateApprovalList values)
        {
            try
            {
                msSQL = " SELECT a.sacontactinstitution_gid,samappingassigninstitutionlog_gid,a.institutionmaker_name,a.institutionchecker_name,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " FROM ocs_mst_tsamappingassigninstitutionlog a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.sacontactinstitution_gid ='" + sacontactinstitution_gid + "' order by a.samappingassigninstitutionlog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsamappinginstitutionassign_list = new List<samappinginstitutionassign_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsamappinginstitutionassign_list.Add(new samappinginstitutionassign_list
                        {
                            sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                            samappingassigninstitutionlog_gid = (dr_datarow["samappingassigninstitutionlog_gid"].ToString()),
                            institutionmaker_name = (dr_datarow["institutionmaker_name"].ToString()),
                            institutionchecker_name = (dr_datarow["institutionchecker_name"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    values.samappinginstitutionassign_list = getsamappinginstitutionassign_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }


        public void DaCreateSAMapping(MdlMstInitiateApprovalList values, string employee_gid)
        {


            msSQL = " update ocs_mst_tsainstitution set " +
                    " institutionmaker_gid='" + values.employee_gid + "'," +
                    " institutionmaker_name='" + values.employee_name + "'," +
                    " institutionchecker_gid='" + values.checkeremployee_gid + "'," +
                   " institutionchecker_name='" + values.checkeremployee_name + "'," +
                    " pendingassignment_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                  " checkermapping_flag = 'Y'," +
                  " approvalmapping_flag = 'Y'," +
                   " approvalstatus = 'Maker Pending'," +
                   " makermapping_flag = 'Y'" +
                    " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATIL");

                msSQL = " insert into ocs_mst_tsamappingassigninstitutionlog (" +
                      " samappingassigninstitutionlog_gid , " +
                      " sacontactinstitution_gid," +
                      " institutionmaker_gid," +
                      " institutionmaker_name," +
                      " institutionchecker_gid," +
                      " institutionchecker_name," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                       " '" + values.sacontactinstitution_gid + "'," +
                      " '" + values.employee_gid + "'," +
                      " '" + values.employee_name + "'," +
                      " '" + values.checkeremployee_gid + "'," +
                      " '" + values.checkeremployee_name + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Maker and Checker assigned successfully";
                try
                {
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.institutionmaker_gid)  as tomembers,group_concat(distinct i.institutionchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);



                    sub = " An SBA Application (maker) is assigned to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
            }
            else
            {
                values.message = "Error occured while adding";
                values.status = false;
            }



        }
        public void DaCreateSAMappingAssignment(MdlMstInitiateApprovalList values, string employee_gid)
        {


            msSQL = " update ocs_mst_tsainstitution set " +
                    " institutionmaker_gid='" + values.employee_gid + "'," +
                    " institutionmaker_name='" + values.employee_name + "'," +
                    " institutionchecker_gid='" + values.checkeremployee_gid + "'," +
                   " institutionchecker_name='" + values.checkeremployee_name + "'," +
                  " checkermapping_flag = 'Y'," +
                  " approvalmapping_flag = 'Y'," +
                   " makermapping_flag = 'Y'" +
                    " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATIL");

                msSQL = " insert into ocs_mst_tsamappingassigninstitutionlog (" +
                      " samappingassigninstitutionlog_gid , " +
                      " sacontactinstitution_gid," +
                      " institutionmaker_gid," +
                      " institutionmaker_name," +
                      " institutionchecker_gid," +
                      " institutionchecker_name," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                       " '" + values.sacontactinstitution_gid + "'," +
                      " '" + values.employee_gid + "'," +
                      " '" + values.employee_name + "'," +
                      " '" + values.checkeremployee_gid + "'," +
                      " '" + values.checkeremployee_name + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Maker and Checker assigned successfully";
                try
                {
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.institutionmaker_gid)  as tomembers,group_concat(distinct i.institutionchecker_gid, ',', i.created_by)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);



                    sub = " An SBA Application (maker) is assigned to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "An SBA Application has been assigned to you. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Assigned by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
            }
            else
            {
                values.message = "Error occured while adding";
                values.status = false;
            }



        }
        public void DaGetAssignedInformation(string sacontactinstitution_gid, MdlMstInitiateApprovalList values)
        {
            try
            {
                msSQL = " SELECT a.institutionmaker_gid, a.institutionmaker_name,a.institutionchecker_gid,institutionchecker_name " +
                        " FROM ocs_mst_tsainstitution a where sacontactinstitution_gid='" + sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.employee_name = objODBCDatareader["institutionmaker_name"].ToString();
                    values.checkeremployee_name = objODBCDatareader["institutionchecker_name"].ToString();

                }
                objODBCDatareader.Close();


            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }


        public void DaPostMakerInstitutionRaiseQuery(Mdlmakerinstitutionraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MAIN");
            msSQL = "Insert into ocs_mst_tmakerinstitutionraisequery( " +
                   " makerinstitutionraisequery_gid, " +
                   " sacontactinstitution_gid," +
                   " query_title, " +
                   " query_description," +
                   " makerinstitutionraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontactinstitution_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {

                    msSQL = " update ocs_mst_tsainstitution set raisequery_flag = 'Y',closeflag='Y',approvalstatus='Query Raised by Maker'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query raised  successfully";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised";
                    body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Maker  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
            }
            else
            {
                values.status = true;
                values.message = "Error occur while adding";
            }
        }


        public void DaGetMakerInstitutionRaiseQuery(string sacontactinstitution_gid, Mdlmakerinstitutionraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontactinstitution_gid,a.makerinstitutionraisequery_gid,a.query_title,a.query_description,a.makerinstitutionraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tmakerinstitutionraisequery a " +
                     " left join ocs_mst_tsainstitution b on a.sacontactinstitution_gid = b.sacontactinstitution_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontactinstitution_gid = '" + sacontactinstitution_gid + "'  group by makerinstitutionraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmakerinstitutionraisequery_list = new List<makerinstitutionraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmakerinstitutionraisequery_list.Add(new makerinstitutionraisequery_list
                    {
                        sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                        makerinstitutionraisequery_gid = (dr_datarow["makerinstitutionraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        makerinstitutionraisequery_status = (dr_datarow["makerinstitutionraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.makerinstitutionraisequery_list = getmakerinstitutionraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostMakerInstitutionresponsequery(Mdlmakerinstitutionraisequery values, string employee_gid)
        {
            try
            {

                msSQL = " update ocs_mst_tmakerinstitutionraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                       " queryresponse_by='" + employee_gid + "'," +
                       " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " makerinstitutionraisequery_status='Closed' " +
                       " where makerinstitutionraisequery_gid='" + values.makerinstitutionraisequery_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                if (mnResult == 1)
                {
                    try
                    {
                        msSQL = "select makerinstitutionraisequery_status from ocs_mst_tmakerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' " +
                                " and makerinstitutionraisequery_status='Query Raised' ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            raisequery_flag = "Y";
                            approvalstatus = "Query Raised by Maker";
                        }
                        else
                        {
                            raisequery_flag = "N";
                            approvalstatus = "Maker Pending";
                        }

                        msSQL = " update ocs_mst_tsainstitution set raisequery_flag = '" + raisequery_flag + "',approvalstatus ='" + approvalstatus + "' " +
                                  " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        values.status = true;
                        values.message = "Query closed successfully..!";

                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details


                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid," +
                            " i.institutionmaker_name,group_concat(distinct i.institutionmaker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                            " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                                   " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                   " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                    " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                          "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                          "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);

                        sub = "SBA Onboarding Query Closed";
                        body = "Dear" + HttpUtility.HtmlEncode(lsinstitutionmaker_name) + ",<br />";
                        body = body + "<br />";
                        body = body + "SBA Onboarding a query has been closed. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Level:</b> Maker  <br />";
                        body = body + "<br />";
                        body = body + "<b> Query Closed by :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {
                    }
                }
                else
                {
                    values.status = false;
                    values.message = "Error occured..!";
                }


            }
            catch (Exception ex)
            {
            }
        }


        public void DaPostCheckerInstitutionRaiseQuery(mdlcheckerinstitutionraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("CHIN");
            msSQL = "Insert into ocs_mst_tcheckerinstitutionraisequery( " +
                   " checkerinstitutionraisequery_gid, " +
                   " sacontactinstitution_gid," +
                   " query_title, " +
                   " query_description," +
                   " checkerinstitutionraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontactinstitution_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {
                    msSQL = " update ocs_mst_tsainstitution set raisequery_flag = 'Y',closeflag='Y',approvalstatus='Query Raised by Checker'" +
                     " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query raised  successfully";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised";
                    body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Checker  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                values.status = true;
                values.message = "Error occur while adding";
            }
        }

        public void DaGetCheckerInstitutionRaiseQuery(string sacontactinstitution_gid, mdlcheckerinstitutionraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontactinstitution_gid,a.checkerinstitutionraisequery_gid,a.query_title,a.query_description,a.checkerinstitutionraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tcheckerinstitutionraisequery a " +
                     " left join ocs_mst_tsainstitution b on a.sacontactinstitution_gid = b.sacontactinstitution_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' group by checkerinstitutionraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcheckerinstitutionraisequery_list = new List<checkerinstitutionraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcheckerinstitutionraisequery_list.Add(new checkerinstitutionraisequery_list
                    {
                        sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                        checkerinstitutionraisequery_gid = (dr_datarow["checkerinstitutionraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        checkerinstitutionraisequery_status = (dr_datarow["checkerinstitutionraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.checkerinstitutionraisequery_list = getcheckerinstitutionraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostCheckerInstitutionresponsequery(mdlcheckerinstitutionraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tcheckerinstitutionraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " checkerinstitutionraisequery_status='Closed' " +
                   " where checkerinstitutionraisequery_gid='" + values.checkerinstitutionraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try
                {
                    msSQL = "select checkerinstitutionraisequery_status from ocs_mst_tcheckerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' " +
                               " and checkerinstitutionraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        raisequery_flag = "Y";
                        approvalstatus = "Query Raised by Checker";
                    }
                    else
                    {
                        raisequery_flag = "N";
                        approvalstatus = "Checker Pending";
                    }

                    msSQL = " update ocs_mst_tsainstitution set raisequery_flag = '" + raisequery_flag + "',approvalstatus ='" + approvalstatus + "' " +
                              " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query closed successfully..!";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid, " +
                        " i.institutionmaker_name,i.institutionchecker_name,group_concat(distinct i.institutionchecker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionchecker_name = objODBCDatareader["institutionchecker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Closed";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionchecker_name) + ", />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been closed. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Checker  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query Closed by :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }


            else
            {
                values.status = false;
                values.message = "Error occured..!";
            }

        }
        public void DaPostApproverInstitutionRaiseQuery(Mdlapproverinstitutionraisequery values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("APIN");
            msSQL = "Insert into ocs_mst_tapproverinstitutionraisequery( " +
                   " approverinstitutionraisequery_gid, " +
                   " sacontactinstitution_gid," +
                   " query_title, " +
                   " query_description," +
                   " approverinstitutionraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontactinstitution_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {
                    msSQL = " update ocs_mst_tsainstitution set approvalraise_flag = 'Y',approvalstatus='Query Raised by Approver'" +
                           " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query raised  successfully";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,i.institutionchecker_name,group_concat(distinct i.institutionchecker_gid)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsinstitutionchecker_name = objODBCDatareader["institutionchecker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Raised";
                    body = "Dear " + HttpUtility.HtmlEncode(lsinstitutionchecker_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been raised. The details are as follows,<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Approver  <br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Description :</b> " + HttpUtility.HtmlEncode(values.query_description.Replace("'", "")) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
            }
            else
            {
                values.status = true;
                values.message = "Error occur while adding";
            }
        }


        public void DaGetApproverInstitutionRaiseQuery(string sacontactinstitution_gid, Mdlapproverinstitutionraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontactinstitution_gid,a.approverinstitutionraisequery_gid,a.query_title,a.query_description,a.approverinstitutionraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tapproverinstitutionraisequery a " +
                     " left join ocs_mst_tsainstitution b on a.sacontactinstitution_gid = b.sacontactinstitution_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' group by approverinstitutionraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapproverinstitutionraisequery_list = new List<approverinstitutionraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getapproverinstitutionraisequery_list.Add(new approverinstitutionraisequery_list
                    {
                        sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                        approverinstitutionraisequery_gid = (dr_datarow["approverinstitutionraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        approverinstitutionraisequery_status = (dr_datarow["approverinstitutionraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.approverinstitutionraisequery_list = getapproverinstitutionraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostApproverInstitutionresponsequery(Mdlapproverinstitutionraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tapproverinstitutionraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " approverinstitutionraisequery_status='Closed' " +
                   " where approverinstitutionraisequery_gid='" + values.approverinstitutionraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try
                {
                    msSQL = "select approverinstitutionraisequery_status from ocs_mst_tapproverinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' " +
                              " and approverinstitutionraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        approvalraise_flag = "Y";
                        approvalstatus = "Query Raised by Approver";
                    }
                    else
                    {
                        approvalraise_flag = "N";
                        approvalstatus = "Approver Pending";
                    }

                    msSQL = " update ocs_mst_tsainstitution set approvalraise_flag = '" + approvalraise_flag + "',approvalstatus ='" + approvalstatus + "' " +
                              " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query closed successfully..!";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA Onboarding Query Closed";
                    body = "Dear Sir/Madam<br />";
                    body = body + "<br />";
                    body = body + "SBA Onboarding a query has been closed. The details are as follows, <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query Closed by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                values.status = false;
                values.message = "Error occured..!";
            }


        }
        public void DaGetSaPendingAssignmentCounts(string employee_gid, geSaOnboardingCount values)
        {

            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.verify_flag = 'Y' and " +
                    " a.approvalmapping_flag = 'N' and approvalstatus not in ('BD Verification Rejected') order by a.created_date desc)  AS Institution_Count, " +
                        " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.verify_flag = 'Y' and a.approvalmapping_flag = 'N' " +
                        " and approvalstatus not in ('BD Verification Rejected') order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaAssignmentCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' order by a.created_date desc) AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where (a.verify_flag = 'Y' and a.approvalmapping_flag = 'Y') and a.finalindividualapproval_flag = 'N' order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaApprovedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalstatus='Approved' order by a.created_date desc)  AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus='Approved'  order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaMakerCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.makermapping_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "'and a.makerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.makerinstitution_flag = 'Y' and a.institutionmaker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makermapping_flag = 'Y' and a.individualmaker_gid='" + employee_gid + "' and a.makerindividual_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.makerrejected_flag ='Y' and a.approvalstatus = 'Deferred' order by a.created_date desc) As Institutiontrash_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makerrejected_flag ='Y' and a.approvalstatus = 'Deferred' order by a.created_date desc) As Individualtrash_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.makerindividual_flag = 'Y'and a.individualmaker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
                values.individualtrash_count = objODBCDatareader["Individualtrash_Count"].ToString();
                values.institutiontrash_count = objODBCDatareader["Institutiontrash_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaCheckerCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.checkermapping_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.makerinstitution_flag = 'Y' and a.checkerinstitution_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.checkerinstitution_flag = 'Y' and a.institutionchecker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkermapping_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "' and a.makerindividual_flag = 'Y' and a.checkerindividual_flag = 'N' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.checkerrejected_flag ='Y' and a.approvalstatus ='Deferred' order by a.created_date desc) As Institutiontrash_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkerrejected_flag ='Y' and a.approvalstatus ='Deferred' order by a.created_date desc) As Individualtrash_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.checkerindividual_flag = 'Y' and a.individualchecker_gid='" + employee_gid + "' and a.approvalstatus not in ('Deferred') order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
                values.individualtrash_count = objODBCDatareader["Individualtrash_Count"].ToString();
                values.institutiontrash_count = objODBCDatareader["Institutiontrash_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaApproverCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalinitated_flag = 'Y' " +
                " and a.checkerinstitution_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and a.approval_flag = 'Y' and a.approvalstatus in ('Approved','Rejected') and a.reportingmanager_gid='" + employee_gid + "' " +
            " order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y' and checkerindividual_flag = 'Y' and " +
            "  a.finalindividualapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved','Rejected') and a.reportingmanager_gid='" + employee_gid + "' " +
            "  order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaFutureDateCheck(string date, MdlsaOnboardSummary values)
        {
            try
            {
                DateTime documentdate = DateTime.Parse(Convert.ToDateTime(date).ToShortDateString());
                DateTime nowdate = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd"));

                if (documentdate > nowdate)
                {
                    values.status = false;
                    values.message = "Future Date is Not Allowed...";
                }
                else
                {
                    values.status = true;
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Kindly select valid Date...";
            }

        }
        public void DaDateCheck(string date, MdlsaOnboardSummary values)
        {
            try
            {
                DateTime documentdate = DateTime.Parse(Convert.ToDateTime(date).ToShortDateString());
                DateTime nowdate = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd"));

                if (documentdate > nowdate)
                {
                    values.status = false;
                    values.message = "Future Date is Not Allowed...";
                }
                else if (documentdate < nowdate)
                {
                    values.status = false;
                    values.message = "Past Date is Not Allowed...";
                }
                else
                {
                    values.status = true;
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Kindly select valid Date...";
            }

        }

        public void DaGetcodecreationSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            //msSQL = "select created_date,agreementrenewal_date from ocs_mst_tsainstitution where  agreementrenewal_date != ''";
            //dt_datatable = objdbconn.GetDataTable(msSQL);

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {
            //        String sDate = DateTime.Now.ToString();
            //        DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));
            //        String lscurrentdate = datevalue.ToString("yyyy-MM-dd");

            //        DateTime next_renewal_date = (Convert.ToDateTime(dr_datarow["agreementrenewal_date"].ToString()));
            //        String lsnextrenewaldatealert = next_renewal_date.ToString("yyyy-MM-dd");

            //        if (lscurrentdate == lsnextrenewaldatealert)
            //        {
            //            DateTime nextrenewaldate = (Convert.ToDateTime(dr_datarow["agreementrenewal_date"].ToString()));
            //            String renewaldatealert = nextrenewaldate.ToString("yyyy-MM-dd HH:mm");

            //            msSQL = "update ocs_mst_tsainstitution set renewal_flag='N' where agreementrenewal_date = '" + renewaldatealert + "' and approvalstatus='Approved'";
            //            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            //        }
            //        else
            //        {

            //        }

            //    }
            //}
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                                  " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                                  " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                                  " (a.origination) as RecordSource," +
                                  " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date,code_created_flag,a.created_by, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                                  " (a.renewal_status) as Renewal_status" +
                                  " from ocs_mst_tsainstitution a " +
                                  " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                                  " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                                    " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                                  " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                                  " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus = 'Approved' and code_created_flag='N'" +
                                  " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getsaOnboardSummary_list.Add(new saOnboardSummary_list
                                {
                                    code_created_flag = (dt["code_created_flag"].ToString()),
                                    sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                                    sa_updated_by = (dt["created_by"].ToString()),
                                    sa_associatename = (dt["sa_associatename"].ToString()),
                                    satype_name = (dt["satype_name"].ToString()),
                                    saentitytype_name = (dt["saentitytype_name"].ToString()),
                                    sa_updated_date = (dt["created_date"].ToString()),
                                    sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                                    approvalstatus = (dt["approvalstatus"].ToString()),
                                    approved_by = (dt["approved_by"].ToString()),
                                    approved_date = (dt["approved_date"].ToString()),
                                    recordsource = (dt["RecordSource"].ToString()),
                                    sa_tat = (dt["tat"].ToString()),
                                    renewal_status = (dt["Renewal_status"].ToString()),
                                    referred_by = (dt["referred_by"].ToString()),
                                    agreementrenewal_date = (dt["agreementrenewal_date"].ToString()),
                                    created_by = (dt["created_by"].ToString())
                                });

                            }
                        }
                        values.saOnboardSummary_list = getsaOnboardSummary_list;
                        dt_datatable.Dispose();
        }
                
        public void DaGetcodecreationCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as codecreated_by," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,date_format(a.codecreation_date,'%d-%m-%Y %h:%i %p') as codecreated_date,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                      " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " (a.origination) as RecordSource," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag,a.created_by, " +
                       "  concat(a.samfin_code, ' / ' ,a.samagro_code) as codesamagro_code,a.samfin_code,a.samagro_code,l.active,l.web_active,a.renewal_flag," +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                      " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                       " left join hrm_mst_temployee g on g.employee_gid=a.code_created_by" +
                      " left join adm_mst_tuser h on h.user_gid=g.user_gid " +
                      " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus = 'Approved' and code_created_flag='Y'" +
                      " order by a.sacontactinstitution_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_flag = dt["renewal_flag"].ToString(),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        active = (dt["active"].ToString()),
                        web_active = (dt["web_active"].ToString()),
                        code_created_flag = (dt["code_created_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approved_by = (dt["approved_by"].ToString()),
                        approved_date = (dt["approved_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        created_by = (dt["created_by"].ToString()),
                        //  samfin_code = (dt["LoginID"].ToString()),
                        samagro_code = (dt["codesamagro_code"].ToString()),
                        samfin_code = (dt["samfin_code"].ToString()),
                        codesamagro_code = (dt["samagro_code"].ToString()),
                        codecreated_by = (dt["codecreated_by"].ToString()),
                        agreementrenewal_date = (dt["agreementrenewal_date"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        codecreated_date = (dt["codecreated_date"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSacodecreationcompletedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalinitated_flag = 'Y' " +
                " and a.checkerinstitution_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' and created_by='" + employee_gid + "' and code_created_flag='Y' order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and " +
            " approval_flag = 'Y' and code_created_flag='Y' order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y' and checkerindividual_flag = 'Y' and " +
            "  a.finalindividualapproval_flag = 'N' and created_by='" + employee_gid + "' and code_created_flag='Y' order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus in ('Approved') and " +
            " a.onboardingindividual_flag='Y' and code_created_flag='Y'  order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSacodecreationCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and a.approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and a.code_created_flag = 'N'" +
                    " order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and a.approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and a.code_created_flag = 'Y'" +
            " order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag = 'N'" +
            " order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag = 'Y'" +
            " order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaSamcodesAutoGenerate(Codes values)
        {
            string samfincode = string.Empty;
            string samagrocode = string.Empty;
            int finval, agroval = 0;
            try
            {

                msSQL = "select code_created_flag from ocs_mst_tsainstitution  where sacontactinstitution_gid ='" + sacontactinstitution_gid + "'";
                string codecreated_flag = objdbconn.GetExecuteScalar(msSQL);

                if (codecreated_flag == "Y")
                {
                    return;

                }
                msSQL = "select created_date,samfin_code,samagro_code from ocs_mst_tsaloginsbauser  order by created_date desc limit 1";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    samfincode = objODBCDatareader["samfin_code"].ToString();
                    samagrocode = objODBCDatareader["samagro_code"].ToString();
                    //string[] finsplit = samfincode.Split('_');
                    //string[] agrosplit = samagrocode.Split('_');


                    //finval = Convert.ToInt16(finsplit[1]) + 1;
                    //agroval = Convert.ToInt16(agrosplit[1]) + 1;

                    //samfincode = "SAMFIN0000_" + finval;
                    //samagrocode = "SAMAGRO0000_" + agroval;
                    string lsind_refno = "SAC";
                    //String lsref_name = "SF";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");

                    lsind_refno = lsind_refno + msGETRef;


                    values.fincode = lsind_refno;

                    string lsind_ref = "SAC";
                    //String lsrefname = "SA";
                   

                    lsind_ref = lsind_ref + msGETRef;

                    values.agrocode = lsind_ref;
                }
                else
                {
                    string lsind_refno = "SAC";
                    //String lsref_name = "SF";
                    string msGETRef = objcmnfunctions.GetMasterGID("SFID");
                    msGETRef = msGETRef.Replace("SFID", "");

                    lsind_refno = lsind_refno + msGETRef;


                    values.fincode = lsind_refno;

                    string lsind_ref = "SAC";
                    //String lsrefname = "SA";
                    lsind_ref = lsind_ref + msGETRef;

                    values.agrocode = lsind_ref;
                }

            }
            catch (Exception ex)
            {

            }
        }
        //public void DaGetSacodecreationNextRenewal(string employee_gid, MdlsaOnboardSummary values)
        //{
        //    msSQL = "select created_date,next_renewal_date from ocs_mst_tsainstitution where approvalstatus='Approved' and next_renewal_date != ''";
        //    dt_datatable = objdbconn.GetDataTable(msSQL);

        //    if (dt_datatable.Rows.Count != 0)
        //    {
        //        foreach (DataRow dr_datarow in dt_datatable.Rows)
        //        {
        //            String sDate = DateTime.Now.ToString();
        //            DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));
        //            String lscurrentdate = datevalue.ToString("yyyy-MM-dd");

        //                DateTime next_renewal_date = (Convert.ToDateTime(dr_datarow["next_renewal_date"].ToString()));
        //                String lsnextrenewaldatealert = next_renewal_date.ToString("yyyy-MM-dd");

        //                if (lscurrentdate == lsnextrenewaldatealert)
        //                {
        //                DateTime nextrenewaldate = (Convert.ToDateTime(dr_datarow["next_renewal_date"].ToString()));
        //                String renewaldatealert = nextrenewaldate.ToString("yyyy-MM-dd HH:mm:ss");

        //                msSQL = "update ocs_mst_tsainstitution set renewal_flag='N' where next_renewal_date = '" + renewaldatealert + "' and approvalstatus='Approved'";
        //                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //                 }
        //            else
        //            {

        //            }

        //        }
        //    }
        //}

        public void DaGetSaInstitutionRejectedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate ,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date ,a.verify_flag,a.raisequery_flag,a.update_flag," +
                       " a.saveasdraftadd_flag,(a.origination) as RecordSource, " +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       //" where a.sa_updated_by = '" + employee_gid + "' " + 
                       " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected')" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        verify_flag = dt["verify_flag"].ToString(),
                        raisequery_flag = (dt["raisequery_flag"].ToString()),
                        update_flag = dt["update_flag"].ToString(),
                        saveasdraftadd_flag = (dt["saveasdraftadd_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["submittedDate"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSaInstitutionGroupingSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.samfin_code,a.samagro_code,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate ,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date ,a.verify_flag,a.raisequery_flag,a.update_flag," +
                       " a.saveasdraftadd_flag,(a.origination) as RecordSource, " +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       //" where a.sa_updated_by = '" + employee_gid + "' " + 
                       " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus='Approved' and a.samfin_code !=''" +
                      " group by a.samfin_code desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        verify_flag = dt["verify_flag"].ToString(),
                        raisequery_flag = (dt["raisequery_flag"].ToString()),
                        update_flag = dt["update_flag"].ToString(),
                        saveasdraftadd_flag = (dt["saveasdraftadd_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        saentitytype_gid = (dt["saentitytype_gid"].ToString()),
                        sa_updated_date = (dt["submittedDate"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        samfin_code = (dt["samfin_code"].ToString()),
                        samagro_code = (dt["samagro_code"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSaInstitutionRenewalGroupingSummary(string employee_gid,string samfin_code,string samagro_code ,string sacontactinstitution_gid,MdlsaOnboardSummary values)
        {
            string flag = string.Empty;
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.renewal_flag,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.samfin_code,a.samagro_code,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as submittedDate ,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date ,date_format(a.agreementrenewal_date,'%d-%m-%Y %h:%i %p') as agreementrenewal_date ,a.verify_flag,a.raisequery_flag,a.update_flag," +
                       " a.saveasdraftadd_flag,(a.origination) as RecordSource, " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       //" where a.sa_updated_by = '" + employee_gid + "' " + 
                       " where (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and  (a.samfin_code = '" + samfin_code + "' or a.samagro_code = '" + samagro_code + "')" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        verify_flag = dt["verify_flag"].ToString(),
                        raisequery_flag = (dt["raisequery_flag"].ToString()),
                        update_flag = dt["update_flag"].ToString(),
                        saveasdraftadd_flag = (dt["saveasdraftadd_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        saentitytype_gid = (dt["saentitytype_gid"].ToString()),
                        sa_updated_date = (dt["submittedDate"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        samfin_code = (dt["samfin_code"].ToString()),
                        samagro_code = (dt["samagro_code"].ToString()),
                        renewal_flag = (dt["renewal_flag"].ToString()),
                        agreementrenewal_date = (dt["agreementrenewal_date"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetInstitutionActivityManagementSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.samfin_code,a.samagro_code,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                      " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " (a.origination) as RecordSource," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag,a.created_by, " +
                       " concat(a.samfin_code, ' / ' ,a.samagro_code) as sam_code,l.active,l.web_active,a.renewal_flag," +
                      " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                      " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag='Y'" +
                      " group by a.samfin_code desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_flag = dt["renewal_flag"].ToString(),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        active = (dt["active"].ToString()),
                        web_active = (dt["web_active"].ToString()),
                        code_created_flag = (dt["code_created_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approved_by = (dt["approved_by"].ToString()),
                        approved_date = (dt["approved_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        created_by = (dt["created_by"].ToString()),
                        //  samfin_code = (dt["LoginID"].ToString()),
                        samagro_code = (dt["sam_code"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        samfin_code = (dt["samfin_code"].ToString()),
                        new_code = (dt["samagro_code"].ToString())


                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetInstitutionActivityWebSummary(string employee_gid,string samfin_code,string sam_code, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat ,  " +
                      " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " (a.origination) as RecordSource," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag,a.created_by, " +
                       " concat(a.samfin_code, ' / ' ,a.samagro_code) as samagro_code,l.active,l.web_active,a.renewal_flag," +
                       " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                      " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join ocs_mst_tsaloginsbauser l on l.sa_autogeneratedid=a.sa_autogeneratedid " +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus not in ('Rejected') and code_created_flag='Y' and (a.samfin_code = '" + samfin_code + "' or a.samagro_code = '" + sam_code + "')" +
                      " order by a.sacontactinstitution_gid desc ";

dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_flag = dt["renewal_flag"].ToString(),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        active = (dt["active"].ToString()),
                        web_active = (dt["web_active"].ToString()),
                        code_created_flag = (dt["code_created_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approved_by = (dt["approved_by"].ToString()),
                        approved_date = (dt["approved_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        created_by = (dt["created_by"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        //  samfin_code = (dt["LoginID"].ToString()),
                        samagro_code = (dt["samagro_code"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public bool DaInstitutionRenewal(string employee_gid, Institutionedit values)
        {
            bool sta = false;
            try
            {
                if (!string.IsNullOrEmpty(values.sa_associatename))
                {
                    if (values.sa_associatename.Contains("'"))
                    {
                        values.sa_associatename = values.sa_associatename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactfirstname))
                {
                    if (values.sa_contactfirstname.Contains("'"))
                    {
                        values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
                {
                    if (values.sa_contactmiddlename.Contains("'"))
                    {
                        values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sa_contactlastname))
                {
                    if (values.sa_contactlastname.Contains("'"))
                    {
                        values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }


                msSQL = "select count(sacontactinstitution_gid) from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid ='" + employee_gid + "'";
                string documentupload = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select count(saentitytype_gid) from ocs_mst_tsadocumentlist where saentitytype_gid ='" + values.saentitytype_gid + "' and status ='Y'";
                string entitytype = objdbconn.GetExecuteScalar(msSQL);

                if (entitytype != documentupload)
                {
                    values.message = "Kindly select the document";
                    return false;
                }


                msSQL = " SELECT a.sacontactinstitution_gid,a.sa_autogeneratedid,a.approval_flag,reportingmanager_gid,a.sa_reportingmanager,concat(m.user_firstname,' ',m.user_lastname,' / ',m.user_code) as DirectReprtingTo, " +
                        " a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
                       " a.sa_associatename,a.sa_contactfirstname,a.sa_contactmiddlename,a.confirmbankaccountnumber,a.sa_contactlastname," +
                       " a.designation_gid,a.designation_type,a.sa_dateofincorporation,a.sa_companystdate as sacompanystdate,a.sa_yearsinbusiness,a.sa_apputr,a.sa_appcrediteddate,a.sa_appcreditedamount," +
                       " a.sa_monthsinbusiness,a.sa_companypan,a.sa_startdate,a.sa_enddate, " +
                       " a.sa_annualturnover,city,branch_address,district,micr,state,a.saifsc_code,a.saaccount_number,a.saaccountholder_name," +
                       " a.created_date,a.interviewevalution,a.applicationform,a.yearsitreturns,a.bankstatement," +
                       "  a.kycdocuments,a.prospect,a.vettingstatus,a.scannedcopyreception,a.addressproof," +
                       " a.photographs,a.cancelledcheckleaf,a.houseofficeverification,a.agreementexecutiondate, " +
                       " a.agreementexpirydate,a.agroagreementexecutiondate,a.agroagreementexpirydate," +
                       "  a.agreementstatus,a.agroagreementstatus,a.verificationremarks,a.approvalinitated_flag,institutionsaveasdraft_flag," +
                       " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                          " concat(h.user_firstname,' ',h.user_lastname,' / ',h.user_code) as approved_by,a.approved_date,a.approval_remarks,a.approvalstatus,a.origination, " +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,samfin_code,samagro_code,a.referred_by,a.utr_no,a.assessmentagency_gid,a.assessmentagency_name," +
                       " a.assessmentagencyrating_gid,  a.assessmentagencyrating_name,a.ratingas_date,a.codecreation_date, " +
                       " (a.origination) as RecordSource FROM " +
                       " ocs_mst_tsainstitution a" +
                       " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                       " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                         " left join hrm_mst_temployee g on a.approved_by = g.employee_gid " +
                       " left join adm_mst_tuser h on h.user_gid = g.user_gid" +
                       " left join hrm_mst_temployee r on a.reportingmanager_gid = r.employee_gid  left join adm_mst_tuser m on m.user_gid = r.user_gid" +
                       " where a.sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.reportingmanager_gid = objODBCDatareader["reportingmanager_gid"].ToString();
                    values.recordsource = objODBCDatareader["RecordSource"].ToString();
                    //values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    //values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    //values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    //values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    //values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    //values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();

                    ////if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    ////{
                    ////}
                    ////else
                    ////{
                    ////    values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    ////}
                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                        lssaappcredited_date = "";
                    }
                    else
                    {
                        DateTime lssa_appcrediteddate = (Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"].ToString()));
                        lssaappcredited_date = lssa_appcrediteddate.ToString("dd-MM-yyyy");
                        lssaappcrediteddates = lssa_appcrediteddate.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    if (objODBCDatareader["ratingas_date"].ToString() == "")
                    {
                        lsratingasdate = "";
                    }
                    else
                    {
                        DateTime lsratingas_date = (Convert.ToDateTime(objODBCDatareader["ratingas_date"].ToString()));
                        lsratingasdate = lsratingas_date.ToString("dd-MM-yyyy");
                        lsratingasdates = lsratingas_date.ToString("yyyy-MM-dd HH:mm:ss");

                    }
                    if (objODBCDatareader["codecreation_date"].ToString() == "")
                    {
                        lscodecreationdate = "";
                    }
                    else
                    {
                        DateTime lscodecreation_date = (Convert.ToDateTime(objODBCDatareader["codecreation_date"].ToString()));
                        lscodecreationdate = lscodecreation_date.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    
                    //DateTime lscodecreation_date = (Convert.ToDateTime(objODBCDatareader["codecreation_date"].ToString()));
                    //lscodecreationdate = lscodecreation_date.ToString("yyyy-MM-dd HH:mm:ss");
                    //if (objODBCDatareader["codecreation_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    //{
                    //    values.codecreation_date = "";
                    //}
                    //else
                    //{
                    //    values.codecreation_date = Convert.ToDateTime(objODBCDatareader["codecreation_date"]).ToString("dd-MM-yyyy");
                    //}

                    values.samfin_code = objODBCDatareader["samfin_code"].ToString();
                    values.samagro_code = objODBCDatareader["samagro_code"].ToString();

                    values.interviewevalution = objODBCDatareader["interviewevalution"].ToString();
                    values.applicationform = objODBCDatareader["applicationform"].ToString();
                    values.kycdocuments = objODBCDatareader["kycdocuments"].ToString();
                    values.vettingstatus = objODBCDatareader["vettingstatus"].ToString();
                    values.addressproof = objODBCDatareader["addressproof"].ToString();
                    values.photographs = objODBCDatareader["photographs"].ToString();
                    values.cancelledcheckleaf = objODBCDatareader["cancelledcheckleaf"].ToString();
                    values.institutionsaveasdraft_flag = objODBCDatareader["institutionsaveasdraft_flag"].ToString();
                    if (objODBCDatareader["agreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agreementexpirydate = Convert.ToDateTime(objODBCDatareader["agreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    values.agreementstatus = objODBCDatareader["agreementstatus"].ToString();
                    values.verificationremarks = objODBCDatareader["verificationremarks"].ToString();
                    values.approvalinitated_flag = objODBCDatareader["approvalinitated_flag"].ToString();
                    values.approval_flag = objODBCDatareader["approval_flag"].ToString();
                    if (objODBCDatareader["agroagreementexecutiondate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexecutiondate = Convert.ToDateTime(objODBCDatareader["agroagreementexecutiondate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["agroagreementexpirydate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.agroagreementexpirydate = Convert.ToDateTime(objODBCDatareader["agroagreementexpirydate"]).ToString("dd-MM-yyyy");
                    }
                    values.agroagreementstatus = objODBCDatareader["agroagreementstatus"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    //values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    //values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                    //values.sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    values.sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //values.sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    //values.sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    //values.sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    //values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    //values.designation_type = objODBCDatareader["designation_type"].ToString();
                    if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    {
                        lssadateofincorporation = "";
                    }
                    else
                    {
                        DateTime lssa_dateofincorporation = (Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"].ToString()));
                        lssadateofincorporation = lssa_dateofincorporation.ToString("dd-MM-yyyy");
                        lssadateofincorporations = lssa_dateofincorporation.ToString("yyyy-MM-dd HH:mm:ss");

                    }

                    if (objODBCDatareader["sacompanystdate"].ToString() == "")
                    {
                        lssacompanyst_date = "";
                    }
                    else
                    {
                        DateTime lssacompanystdate = (Convert.ToDateTime(objODBCDatareader["sacompanystdate"].ToString()));
                        lssacompanyst_date = lssacompanystdate.ToString("dd-MM-yyyy");
                        lssacompanystdates = lssacompanystdate.ToString("yyyy-MM-dd HH:mm:ss");

                    }

                    //DateTime lssa_startdate = (Convert.ToDateTime(objODBCDatareader["sa_startdate"].ToString()));
                    // lssastartdate = lssa_startdate.ToString("yyyy-MM-dd HH:mm:ss");
                    //DateTime lssa_enddate = (Convert.ToDateTime(objODBCDatareader["sa_enddate"].ToString()));
                    // lssaenddate = lssa_enddate.ToString("yyyy-MM-dd HH:mm:ss");
                    //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    values.sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
                    //}
                    //if (objODBCDatareader["sacompanystdate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    values.sa_companystdate = Convert.ToDateTime(objODBCDatareader["sacompanystdate"]).ToString("dd-MM-yyyy");
                    //}
                    //if (objODBCDatareader["sa_startdate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    values.editsa_startdate = Convert.ToDateTime(objODBCDatareader["sa_startdate"]).ToString("dd-MM-yyyy");
                    //}
                    //if (objODBCDatareader["sa_enddate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    values.editsa_enddate = Convert.ToDateTime(objODBCDatareader["sa_enddate"]).ToString("dd-MM-yyyy");
                    //}
                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["approved_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.approved_date = Convert.ToDateTime(objODBCDatareader["approved_date"]).ToString("dd-MM-yyyy");
                    }
                    values.approved_by = objODBCDatareader["approved_by"].ToString();
                    values.approval_remarks = objODBCDatareader["approval_remarks"].ToString();
                    values.approvalstatus = objODBCDatareader["approvalstatus"].ToString();

                    values.origination = objODBCDatareader["origination"].ToString();
                    //values.sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    //values.sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    //values.sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    //values.sa_annualturnover = objODBCDatareader["sa_annualturnover"].ToString();
                    //values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    //values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    //values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    //values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    //values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    //values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    //values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    //values.micr = objODBCDatareader["micr"].ToString();
                    //values.branch_address = objODBCDatareader["branch_address"].ToString();
                    //values.state = objODBCDatareader["state"].ToString();
                    //values.city = objODBCDatareader["city"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    //values.district = objODBCDatareader["district"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();

                }
                objODBCDatareader.Close();
                //string lsins_refno = "SA_" + DateTime.Now.ToString("ddMMyyyy");
                //String lsref_name = "_CM_";
                //string msGETRef = objcmnfunctions.GetMasterGID("INST");
                //msGETRef = msGETRef.Replace("INST", "");
                string lsins_refno = "SA" + DateTime.Now.ToString("ddMMyyyy");
                String lsref_name = "RCM";
                string msGETRef = objcmnfunctions.GetMasterGID("REIN");
                msGETRef = msGETRef.Replace("REIN", "");

                lsins_refno = lsins_refno + lsref_name + msGETRef;

                //string Squery1 = "Select sa_autogeneratedid,samfin_code,samagro_code,reportingmanager_gid, " +
                //            " sa_appcrediteddate ,ratingas_date  from ocs_mst_tsainstitution where " +
                //            " sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                //objODBCDatareader = objdbconn.GetDataReader(Squery1);
                //if (objODBCDatareader.HasRows == true)
                //{
                //    lsins_refno = objODBCDatareader["sa_autogeneratedid"].ToString();
                //}

                msGetGid = objcmnfunctions.GetMasterGID("SACS");
                msSQL = " insert into ocs_mst_tsainstitution(" +
                        " sacontactinstitution_gid," +
                          " sa_autogeneratedid," +
                        " sa_reportingmanager," +
                        " reportingmanager_gid," +
                         " next_renewal_date," +
                        " satype_gid," +
                        " saentitytype_gid," +
                          " satype_name," +
                        " saentitytype_name," +
                        " sa_associatename," +
                        " sa_contactfirstname," +
                        " sa_contactmiddlename," +
                        " sa_contactlastname," +
                        " designation_gid," +
                         " designation_type," +                    
                        " sa_yearsinbusiness," +
                        " sa_monthsinbusiness," +
                        " sa_companypan," +
                        //" sa_startdate," +
                        //" sa_enddate," +
                        " sa_annualturnover," +
                        " sa_onboard_flag," +
                        " saifsc_code," +
                        " micr," +
                        " branch_address," +
                        " city," +
                        " district," +
                        " state," +
                        " saaccount_number," +
                        " confirmbankaccountnumber," +
                        " saaccountholder_name, " +
                        " sacanccheque_number, " +
                        " sabank_name, " +
                        " sabranch_name, " +
                         " referred_by, " +
                          " utr_no, " +
                        " approvalstatus, " +
                          " renewal_status, " +
                         " origination, " +
                          " renewal_gid, " +
                        " onboardinginstitution_flag,tagging_flag,code_created_flag,rm_tagging,update_flag, " +
                        " assessmentagency_gid, " +
                        " assessmentagency_name, " +
                        " assessmentagencyrating_gid, " +
                        " assessmentagencyrating_name, " +
                        " ratingas_date, " +
                       " sa_dateofincorporation," +
                        " sa_companystdate," +
                        " sa_appcrediteddate," +
                         " codecreation_date," +
                        " created_by, " +
                        " created_date," +
                        " updated_date," +
                        " sa_apputr,sa_appcreditedamount," +
                        " renewal_date,renewal_flag,samfin_code,samagro_code)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + lsins_refno + "'," +
                        "'" + values.sa_reportingmanager + "', " +
                       "'" + values.reportingmanager_gid + "', " +
                        "'" + DateTime.Now.AddYears(1).ToString("yyyy-MM-dd HH:mm") + "'," +
                        "'" + values.satype_gid + "'," +
                        "'" + values.saentitytype_gid + "'," +
                         "'" + values.satype_name + "'," +
                        "'" + values.saentitytype_name + "'," +
                        "'" + values.sa_associatename + "'," +
                        "'" + values.sa_contactfirstname + "'," +
                        "'" + values.sa_contactmiddlename + "'," +
                        "'" + values.sa_contactlastname + "'," +
                         "'" + values.designation_gid + "'," +
                         "'" + values.designation_type + "'," +                        
                 "'" + values.sa_yearsinbusiness + "'," +
                         "'" + values.sa_monthsinbusiness + "'," +
                         "'" + values.sa_companypan + "'," +
                 //"'" + lssastartdate + "'," +
                 //  "'" + lssaenddate + "'," +
                 "'" + values.sa_annualturnover + "'," +
                         "'" + "Y" + "'," +
                         "'" + values.saifsc_code + "'," +
                             "'" + values.micr + "'," +
                       "'" + values.branch_address + "'," +

                       "'" + values.city + "'," +
                       "'" + values.district + "'," +
                       "'" + values.state + "'," +
                        "'" + values.saaccount_number + "'," +
                        "'" + values.confirmbankaccountnumber + "'," +
                        "'" + values.saaccountholder_name + "'," +
                        "'" + values.sacanccheque_number + "'," +
                        "'" + values.sabank_name + "'," +
                        "'" + values.sabranch_name + "'," +
                         "'" + values.referred_by + "'," +
                          "'" + values.utr_no + "'," +
                        "'" + "Pending BD Verification" + "'," +
                          "'" + "Renewed" + "'," +
                        "'" + values.origination + "'," +
                        "'" + values.sacontactinstitution_gid + "'," +
                        "'" + "Y" + "'," +
                         "'" + "Y" + "'," +
                           "'" + "Y" + "'," +
                        "'" + employee_gid + "'," +
                        "'" + "Y" + "'," +
                        "'" + values.assessmentagency_gid + "'," +
                        "'" + values.assessmentagency_name + "'," +
                        "'" + values.assessmentagencyrating_gid + "'," +
                        "'" + values.assessmentagencyrating_name + "',";
                //if ((lsratingasdate == null) || (lsratingasdate == ""))
                //{
                //    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                //else
                //{
                //    msSQL += "'" + lsratingasdate + "',";
                //}
                ////if (lsratingasdate == Convert.ToString(values.ratingas_date))
                ////{
                ////    msSQL += "'" + lsratingasdates + "',";
                ////}
                ////else
                ////{
                ////    msSQL += "'" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                ////}
                //if ((lssadateofincorporation == null) || (lssadateofincorporation == ""))
                //{
                //    msSQL += "null,";
                //}
                //else
                //{
                //    msSQL += "'" + lssadateofincorporation + "',";
                //}
                //if ((lssacompanyst_date == null) || (lssacompanyst_date == ""))
                //{
                //    msSQL += "null,";
                //}
                //else
                //{
                //    msSQL += "'" + lssacompanyst_date + "',";
                //}
                //if (lssaappcredited_date == values.sa_appcrediteddate)
                //{

                //   msSQL += "'" + lssaappcrediteddate + "',";

                //}
                //else
                //{
                //    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd ") + "',";

                //    //msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if ((lsratingasdate == null) || (lsratingasdate == ""))
                {
                    msSQL += "'0001-01-01 00:00:00',";

                }
                else
                {
                    msSQL += "'" + lsratingasdates + "',";
                }
                if (lssadateofincorporation == values.sa_dateofincorporation)
                {
                    msSQL += "'" + lssadateofincorporations + "',";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (lssacompanyst_date == values.sa_companystdate)
                {
                    msSQL += "'" + lssacompanystdates + "',";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                //if (lssaappcredited_date == Convert.ToString(values.sa_appcrediteddate))
                //{
                //    msSQL += "'" + lssaappcrediteddates + "',";

                //}
                //else
                //{
                //    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                //}
                if (lssaappcredited_date == values.sa_appcrediteddate)
                {

                    msSQL += "'" + lssaappcrediteddates + "',";

                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd ") + "',";

                    //msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if ((lscodecreationdate == null) || (lscodecreationdate == ""))
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + lscodecreationdate + "',";
                }
                msSQL += "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       "'" + values.sa_apputr + "','" + values.sa_appcreditedamount + "'," +

                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','" + values.samfin_code + "','" + values.samagro_code + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                if (mnResult != 0)
                {
                    //Updates

                    msSQL = "update ocs_mst_tsainstitution set renewal_flag ='Y',renewal_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "select samobile_no,saprimary_status,sawhatsapp_no from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAOC");

                            msSQL = " insert into ocs_mst_tsainstitution2mobileno(" +
                                    " sainstitution2mobileno_gid," +
                                    " sacontactinstitution_gid," +
                                    " samobile_no," +
                                    " saprimary_status," +
                                    " sawhatsapp_no," +
                                    " created_by," +
                                    " created_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                    "'" + msGetGid + "'," +
                                    "'" + dr_datarow["samobile_no"].ToString() + "'," +
                                    "'" + dr_datarow["saprimary_status"].ToString() + "'," +
                                    "'" + dr_datarow["sawhatsapp_no"].ToString() + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            objdbconn.CloseConn();

                        }
                    }
                    msSQL = "select saemail_address,saprimary_status,samail_type from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SAEM");

                            msSQL = " insert into ocs_mst_tsainstitution2email(" +
                            " sainstitution2email_gid," +
                            " sacontactinstitution_gid," +
                            " saemail_address," +
                            " saprimary_status," +
                            " samail_type, " +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["saemail_address"].ToString() + "'," +
                            "'" + dr_datarow["saprimary_status"].ToString() + "'," +
                            "'" + dr_datarow["samail_type"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select saaddresstype_gid,saaddresstype_name,addressline1,addressline2,saprimary_status,salandmark,sapostal_code,sacity,sataluka,sadistrict,sastate,sacountry,latitude,longitude from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);

                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SACA");

                            msSQL = " insert into ocs_mst_tsainstitution2address(" +
                            " sainstitution2address_gid," +
                            " sacontactinstitution_gid," +
                            " saaddresstype_gid," +
                            " saaddresstype_name," +
                            " addressline1," +
                            " addressline2," +
                            " saprimary_status," +
                            " salandmark," +
                            " sapostal_code," +
                            " sacity," +
                            " sataluka," +
                            " sadistrict," +
                            " sastate," +
                            " sacountry," +
                            " latitude," +
                            " longitude," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["saaddresstype_gid"].ToString() + "'," +
                            "'" + dr_datarow["saaddresstype_name"].ToString() + "'," +
                            "'" + dr_datarow["addressline1"].ToString() + "'," +
                            "'" + dr_datarow["addressline2"].ToString() + "'," +
                            "'" + dr_datarow["saprimary_status"].ToString() + "'," +
                            "'" + dr_datarow["salandmark"].ToString() + "'," +
                            "'" + dr_datarow["sapostal_code"].ToString() + "'," +
                            "'" + dr_datarow["sacity"].ToString() + "'," +
                            "'" + dr_datarow["sataluka"].ToString() + "'," +
                            "'" + dr_datarow["sadistrict"].ToString() + "'," +
                            "'" + dr_datarow["sastate"].ToString() + "'," +
                            "'" + dr_datarow["sacountry"].ToString() + "'," +
                            "'" + dr_datarow["latitude"].ToString() + "'," +
                            "'" + dr_datarow["longitude"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select salead_name,sasector_industry from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SACP");

                            msSQL = " insert into ocs_mst_tsainstitutionprospects(" +
                            " saprospects_institution_gid," +
                            " sacontactinstitution_gid," +
                            " salead_name," +
                            " sasector_industry,created_by,created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["salead_name"].ToString() + "'," +
                            "'" + dr_datarow["sasector_industry"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select gststate_name,gst_no,gstregister_status from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SACG");

                            msSQL = " insert into ocs_mst_tsainstitution2gst(" +
                                " sainstitution2gst_gid," +
                                " sacontactinstitution_gid," +
                                //" gststate_gid," +
                                " gststate_name," +
                                " gst_no," +
                                " gstregister_status," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["gststate_name"].ToString() + "'," +
                            "'" + dr_datarow["gst_no"].ToString() + "'," +
                            "'" + dr_datarow["gstregister_status"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
                    msSQL = "select sa_firstname,sa_middlename,sa_lastname,sa_designation,sa_pannumber,sa_aadharnumber from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SACI");

                            msSQL = " insert into ocs_mst_tsainstitutionindividual(" +
                            " sainst_individual_gid," +
                            " sacontactinstitution_gid," +
                            " sa_firstname," +
                            " sa_middlename," +
                            " sa_lastname," +
                            " sa_designation," +
                            " sa_pannumber," +
                            " sa_aadharnumber," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid1 + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dr_datarow["sa_firstname"].ToString() + "'," +
                            "'" + dr_datarow["sa_middlename"].ToString() + "'," +
                            "'" + dr_datarow["sa_lastname"].ToString() + "'," +
                            "'" + dr_datarow["sa_designation"].ToString() + "'," +
                            "'" + dr_datarow["sa_pannumber"].ToString() + "'," +
                            "'" + dr_datarow["sa_aadharnumber"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_name,document_path from ocs_mst_tinstitutioncancelchequeupload where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("INCC");

                            msSQL = " insert into ocs_mst_tinstitutioncancelchequeupload( " +
                                   " institutioncancelchequeupload_gid, " +
                                   " sacontactinstitution_gid," +
                                   " document_name ," +
                                   " document_path," +
                                   " created_by," +
                                   " created_date" +
                                   " )values(" +
                                   "'" + msGetGid1 + "'," +
                                   "'" + msGetGid + "'," +
                                   "'" + dr_datarow["document_name"].ToString() + "'," +
                                   "'" + dr_datarow["document_path"].ToString() + "'," +
                                   "'" + employee_gid + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_title,sadocument_name,sadocument_id,companydocument_gid,safile_path,renewal_docflag,regflag from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SACD");

                            msSQL = " insert into ocs_mst_tsainstitutiondocumentsupload(" +
                                    " sainstidocument_gid," +
                                    " sacontactinstitution_gid," +
                                    " document_title ," +
                                    " sadocument_name," +
                                    " sadocument_id," +
                                     " companydocument_gid," +
                                    " safile_path," +
                                     " renewal_docflag," +
                                       " regflag," +
                                    " updated_by,updated_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                   "'" + msGetGid + "'," +
                                    "'" + dr_datarow["document_title"].ToString() + "'," +
                                     "'" + dr_datarow["sadocument_name"].ToString() + "'," +
                                    "'" + dr_datarow["sadocument_id"].ToString() + "'," +
                                     "'" + dr_datarow["companydocument_gid"].ToString() + "'," +
                                       "'" + dr_datarow["safile_path"].ToString() + "'," +
                                     "'" + dr_datarow["renewal_docflag"].ToString() + "'," +
                                      "'" + dr_datarow["regflag"].ToString() + "'," +
                                   "'" + employee_gid + "'," +
                                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select bureauname_gid,bureauname_name,bureau_score,date_format(bureauscore_date,'%Y-%m-%d') as bureauscore_date ,bureau_response,observations from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("SABU");
                            msSQL = " insert into ocs_mst_tsainstitution2bureau(" +
                                   " sainstitution2bureau_gid ," +
                                   " sacontactinstitution_gid," +
                                   " bureauname_gid," +
                                   " bureauname_name," +
                                   " bureau_score," +
                                   " bureauscore_date," +
                                   " bureau_response," +
                                   " observations," +
                                   " created_by," +
                                   " created_date)" +
                                   " values(" +
                                   "'" + msGetGid1 + "'," +
                                   "'" + msGetGid + "'," +
                                  "'" + dr_datarow["bureauname_gid"].ToString() + "'," +
                                     "'" + dr_datarow["bureauname_name"].ToString() + "'," +
                                    "'" + dr_datarow["bureau_score"].ToString() + "'," +
                                     "'" + dr_datarow["bureauscore_date"].ToString() + "'," +
                                       "'" + dr_datarow["bureau_response"].ToString() + "'," +
                                     "'" + dr_datarow["observations"].ToString() + "'," +
                                      "'" + employee_gid + "'," +
                                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_name,document_path from ocs_mst_tinstitutionsabureaudocumentupload where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("BUDO");
                            msSQL = " insert into ocs_mst_tinstitutionsabureaudocumentupload( " +
                                        " institutionsabureaudocumentupload_gid, " +
                                        " sainstitution2bureau_gid," +
                                        " document_name ," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " )values(" +
                                        "'" + msGetGid1 + "'," +
                                        "'" + msGetGid + "'," +
                                         "'" + dr_datarow["document_name"].ToString() + "'," +
                                      "'" + dr_datarow["document_path"].ToString() + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    msSQL = "select document_title,document_name,document_path from ocs_mst_tsainstitutionverifydocument where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' or sacontactinstitution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            msGetGid1 = objcmnfunctions.GetMasterGID("VSDO");
                            msSQL = " insert into ocs_mst_tsainstitutionverifydocument(" +
                                    " sainstitutionverifydocument_gid," +
                                    " sacontactinstitution_gid," +
                                    " document_title ," +
                                    " document_name," +
                                    //" sadocument_id," +
                                    " document_path," +
                                    " created_by,created_date)" +
                                    " values(" +
                                    "'" + msGetGid1 + "'," +
                                    "'" + msGetGid + "'," +
                                    "'" + dr_datarow["document_title"].ToString() + "'," +
                                    "'" + dr_datarow["document_name"].ToString() + "'," +
                                      "'" + dr_datarow["document_path"].ToString() + "'," +
                                     "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    //msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + msGetGid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    //values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

                    //msGetGid1 = objcmnfunctions.GetMasterGID("TEIL");

                    //string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    //string usergid = objdbconn.GetExecuteScalar(msql);


                    //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                    //          " where user_gid = '" + usergid + "'";
                    //objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //if (objODBCDatareader.HasRows == true)
                    //{
                    //    tagName = objODBCDatareader["user_firstname"].ToString();
                    //}

                    //msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                    //  " taggedemployeeinstitutionlog_gid , " +
                    //  " sacontactinstitution_gid," +
                    //  " institutiontaggedemployee_gid," +
                    //  " institutiontaggedemployee_name," +
                    //  " approval_status," +
                    //  " created_by," +
                    //  " created_date) " +
                    //  " values (" +
                    //  " '" + msGetGid1 + "'," +
                    //   " '" + msGetGid + "'," +
                    //  " '" + reportingmanager_gid + "'," +
                    //  " '" + values.sa_reportingmanager + "'," +
                    //  " '" + values.approvalstatus + "'," +
                    //  " '" + user_gid + "'," +
                    //  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Mail Trigger
                    try
                    {
                        k = 1;



                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);

                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                             " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                                " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                 " sacontactinstitution_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                               " where sacontactinstitution_gid = '" + msGetGid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + msGetGid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                  "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                  "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + employeename;
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger




                    values.status = true;
                    sta = true;
                    values.message = "SA renewal submitted successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error occured while submitting details";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/Renewal/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";
                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/Renewal/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";
            }
            return sta;

        }
        public bool DaInstitutionUploadDocument(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {


            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_name = httpRequest.Form["document_name"].ToString();
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsid_document = "";
            string lsinstitution_gid = httpRequest.Form["institution_gid"].ToString();
            string lscompanydocument_gid = httpRequest.Form["companydocument_gid"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = "select companydocument_gid from ocs_mst_tsainstitutiondocumentsupload where companydocument_gid = '" + lscompanydocument_gid + "' and sacontactinstitution_gid ='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objfilename.message = "Document name already added";
                return false;
            }
            objODBCDatareader.Close();


            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);



                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/InstitutionProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();


                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/InstitutionProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";




                        msGetGid = objcmnfunctions.GetMasterGID("SACD");

                        msSQL = " insert into ocs_mst_tsainstitutiondocumentsupload(" +
                                " sainstidocument_gid," +
                                " sacontactinstitution_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                 " companydocument_gid," +
                                " safile_path," +
                                 " renewal_docflag," +
                                " updated_by,updated_date,regflag)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lsid_document + "'," +
                                  "'" + lscompanydocument_gid + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                    "'Y'," +
                                 "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','N')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;

        }
        public void DaDocumentUploadList(string sacontactinstitution_gid, string employee_gid, RenewaldocumentList values)
        {
            msSQL = "Select sadocument_name,sadocument_id,sainstidocument_gid,document_title,safile_path from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrenewaldocument_list = new List<renewaldocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getrenewaldocument_list.Add(new renewaldocument_list
                    {
                        sainstidocument_gid = (dr_datarow["sainstidocument_gid"].ToString()),
                        sadocument_gid = (dr_datarow["sadocument_id"].ToString()),
                        sadocument_name = (dr_datarow["sadocument_name"].ToString()),
                        document_title = (dr_datarow["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dr_datarow["safile_path"].ToString()),

                    });
                }
                values.renewaldocument_list = getrenewaldocument_list;
            }
            dt_datatable.Dispose();
        }
        public void DaUploadDocumentDelete(string sainstidocument_gid, RenewaldocumentList values)
        {
            msSQL = "delete from ocs_mst_tsainstitutiondocumentsupload where sainstidocument_gid='" + sainstidocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Document deleted successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error occured";
                values.status = false;

            }
        }
        public void DaUploadDocumentTmpList(string sacontactinstitution_gid, string employee_gid, RenewaldocumentList values)
        {
            msSQL = " select sadocument_name,sadocument_id,sainstidocument_gid,safile_path,document_title from ocs_mst_tsainstitutiondocumentsupload " +
                             " where sacontactinstitution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrenewaldocument_list = new List<renewaldocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["sadocument_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["safile_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getrenewaldocument_list.Add(new renewaldocument_list
                    {
                        sainstidocument_gid = (dt["sainstidocument_gid"].ToString()),
                        sadocument_gid = (dt["sadocument_id"].ToString()),
                        sadocument_name = (dt["sadocument_name"].ToString()),
                        document_title = (dt["document_title"].ToString()),
                        safile_path = objcmnstorage.EncryptData(dt["safile_path"].ToString()),
                    });
                    values.renewaldocument_list = getrenewaldocument_list;
                }
            }
            dt_datatable.Dispose();
        }
        public void DaInstitutionTempClear(string employee_gid, RenewaldocumentList values)
        {
            msSQL = "delete from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
        }
        public void DaInstitutionCodePendingReport(MdlMstSAOnboardInstitution values)
        {
            msSQL = "call ocs_rpt_sbainstitutioncodependingreport";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;

            //ExcelPackage excel = new ExcelPackage();
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);
            var workSheet = excel.Workbook.Worksheets.Add("InstitutionCodeCreationPendingReport");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "InstitutionCodeCreationPendingReport.xlsx";
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                /* if (!exists)
                 {
                   //  System.IO.Directory.CreateDirectory(path);
                 }*/
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 52])  //Address "A1:A29"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);
                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationPendingReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.lscloudpath = objcmnstorage.EncryptData(values.lscloudpath);
            values.lspath = objcmnstorage.EncryptData(values.lspath);
            values.status = true;
            values.message = "Success";
        }
        public void DaInstitutionCodeCompletedReport(MdlMstSAOnboardInstitution values)
        {
            msSQL = "call ocs_rpt_sbainstitutioncodecompletedreport";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;

            //ExcelPackage excel = new ExcelPackage();
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);
            var workSheet = excel.Workbook.Worksheets.Add("InstitutionCodeCreationCompletedReport");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "InstitutionCodeCreationCompletedReport.xlsx";
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                /* if (!exists)
                 {
                   //  System.IO.Directory.CreateDirectory(path);
                 }*/
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 55])  //Address "A1:A29"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);
                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "CodeCreationReport/InstitutionCodeCreationCompletedReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.lscloudpath = objcmnstorage.EncryptData(values.lscloudpath);
            values.lspath = objcmnstorage.EncryptData(values.lspath);
            values.status = true;
            values.message = "Success";
        }
        public void DaInstitutionMakerRejected(string employee_gid, MdlApprove values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tmakerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                              " and makerinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsainstitution set approvalstatus='Deferred',";
                if (values.rejected_remarks == "" || values.rejected_remarks == null)
                {
                    msSQL += " rejected_remarks='',";
                }
                else
                {
                    msSQL += " rejected_remarks='" + values.rejected_remarks.Replace("'", "") + "',";
                }
                msSQL += " rejected_by='" + employee_gid + "'," +
                    " makerrejected_flag ='Y'," +
                       " rejected_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where  sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Deferred Successfully";
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontactinstitution_gid,sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,i.institutionchecker_name,group_concat(b.saemail_address) as tomembers , " +
                            " group_concat(i.created_by) as cc2members ,i.created_by, " +
                                                    " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                                    " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                                    " join ocs_mst_tsainstitution2mobileno c on c.sacontactinstitution_gid = i.sacontactinstitution_gid " +
                                                    " join ocs_mst_tsainstitution2email b on b.sacontactinstitution_gid = i.sacontactinstitution_gid where " +
                                                     " i.sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingApprovalmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }

                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "Rejected Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }
        public void DaInstitutionCheckerRejected(string employee_gid, MdlApprove values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tcheckerinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                              " and checkerinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {

                msSQL = " update ocs_mst_tsainstitution set approvalstatus='Deferred',";
                if (values.rejected_remarks == "" || values.rejected_remarks == null)
                {
                    msSQL += " rejected_remarks='',";
                }
                else
                {
                    msSQL += " rejected_remarks='" + values.rejected_remarks.Replace("'", "") + "',";
                }
                msSQL += " rejected_by='" + employee_gid + "'," +
                      " checkerrejected_flag ='Y'," +
                       " rejected_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where  sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Deferred Successfully";
                    //Mail Trigger
                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select i.sacontactinstitution_gid,sa_associatename,group_concat(b.saemail_address) as saemail_address,group_concat(c.samobile_no) as samobile_no,i.institutionchecker_name,group_concat(b.saemail_address) as tomembers , " +
                            " group_concat(i.created_by) as cc2members ,i.created_by, " +
                                                    " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                                    " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                                    " join ocs_mst_tsainstitution2mobileno c on c.sacontactinstitution_gid = i.sacontactinstitution_gid " +
                                                    " join ocs_mst_tsainstitution2email b on b.sacontactinstitution_gid = i.sacontactinstitution_gid where " +
                                                     " i.sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            saUser = objODBCDatareader["user_firstname"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();
                        }

                        objODBCDatareader.Close();
                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";

                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        sub = "Greetings from Samunnati!";
                        body = "Dear " + HttpUtility.HtmlEncode(saAssociateName) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings from Samunnati! ,  <br />";
                        body = body + "<br />";
                        body = body + "Thanks for showing interest with Samunnati. We would like to inform that we are not currently looking to engage with you as a Samunnati Business Associate. Thanks again for taking the time to put this proposal together for us. <br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + "Business Development Team – Samunnati,<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingApprovalmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Rejected'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }

                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "Rejected Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Approval can't be done,the query is still open";
            }
        }
        public void DaGetSAVerfiyInstitutionMakerDistractSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                     " (a.origination) as RecordSource," +
                  " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " where a.makerrejected_flag ='Y' and a.approvalstatus ='Deferred'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSAVerfiyInstitutionCheckerDistractSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                     " (a.origination) as RecordSource," +
                      " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " where a.checkerrejected_flag ='Y' and a.approvalstatus ='Deferred'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetInstitutionDeferredSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                     " (a.origination) as RecordSource," +
                      " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " where a.approvalstatus ='Deferred'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void logforAudit(string strVal)
        {

            string loglspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + "SBAErrorLog/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
            if ((!System.IO.Directory.Exists(loglspath)))
                System.IO.Directory.CreateDirectory(loglspath);

            loglspath = loglspath + "log.txt";
            System.IO.StreamWriter sw = new System.IO.StreamWriter(loglspath, true);
            sw.WriteLine(strVal);
            sw.Close();

        }

    }
}