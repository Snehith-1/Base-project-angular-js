using ems.master.Models;
using ems.utilities.Functions;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Odbc;
using System.IO;
using System.Linq;
using System.Web;
using ems.storage.Functions;
//using OfficeOpenXml.FormulaParsing.Excel.Functions.Math;

/// <summary>
///(It's used for All master in Samfin)Application360 Model Class accessed by API methods from related DataAccess class and is returning relevant response to client.
/// </summary>
/// <remarks>Written by Sumala,Logapriya and Abilash</remarks>

namespace ems.master.DataAccess
{
    public class DaMstApplication360
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        Fnazurestorage objcmnstorage = new Fnazurestorage();
        DataTable dt_datatable;
        OdbcDataReader objODBCDatareader, objODBCDatareader1, objODBCDatareader2, objodbcdatareader;
        string msSQL, msGetGid, msGetGidREF, msGetcreditops2maker_gid, msGetcreditops2checker_gid, lsopsmappinggid, msGetSeqGid, msGetAPICode;
        int mnResult, mnresult, mssql, msgetgid, getmastergid, GetApiMasterGID;
        string lslms_code, lsbureau_code, lsentity_code, lsvertical_code, lsremarks, lspercentage_name, lswef_date, lsdescription;
        string lsvariety_name, lsbotanical_name, lsalternative_name;
        string lsmaster_value, lschecklist_name, lsdocumentgid;
        string lsapproved_date;
        string lsdeviationapprovalgroup_lms, lsdeviationapprovalgroup_bureau;
        string lsbank_name, lsbranch_name, lsbank_address, lsmicr_code, lsifsc_code, lsbankaccount_name, lsbankaccounttype_gid, lschequebook_status;
        string lsbankaccounttype_name, lsbankaccount_number, lsconfirmbankaccountnumber, lsjoinaccount_status, lsjoinaccount_name, lsaccountopen_date, lssupplier_gid;
        string lsprogram_gid, lsopsgroupid, lscolendingprogram_gid, portfolio_gid;
        string msGetprogram2approval_gid, msGetprogram2vertical_gid, msGetProgramRefno, msGetGidCovenantperiodcode, msGetGiddisbursementdocumentid, msGetCompanyRefno;
        string lspath, lsgroupid;
        HttpPostedFile httpPostedFile;

        // Entity

        public void DaGetEntity(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT a.entity_gid,a.entity_name,a.entity_code,a.lms_code, a.bureau_code, date_format(a.created_date,'%d-%m-%Y') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM adm_mst_tentity a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.entity_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            entity_gid = (dr_datarow["entity_gid"].ToString()),
                            entity_name = (dr_datarow["entity_name"].ToString()),
                            entity_code = (dr_datarow["entity_code"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateEntity(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            if (values.entity_code == null || values.entity_code == "")
            {
                lsentity_code = "";
            }
            else
            {
                lsentity_code = values.entity_code.Replace("'", "");
            }
            msSQL = "select entity_name from adm_mst_tentity where entity_name = '" + values.entity_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Entity Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("ENAC");
                msGetGid = objcmnfunctions.GetMasterGID("CENT");
                msSQL = " insert into adm_mst_tentity(" +
                        " entity_gid," +
                        " entity_name," +
                        " entity_code," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.entity_name.Replace("'", "") + "'," +
                        "'" + lsentity_code + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {

                    msGetSeqGid = objcmnfunctions.GetMasterGID("ENSE");
                    msSQL = " insert into ocs_mst_tentitysequenceno(" +
                            " entitysequenceno," +
                            " entity_gid," +
                            " colending_dbs," +
                            " verticalref_no," +
                            " colending_aar," +
                            " colending_livfin," +
                            " colending_visage)" +
                            " values(" +
                            "'" + msGetSeqGid + "'," +
                            "'" + msGetGid + "'," +
                            "'0'," +
                            "'0'," +
                            "'0'," +
                            "'0'," +
                            "'0')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Entity Added Successfully";
                    }

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditEntity(string entity_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT entity_gid,entity_name,entity_code,lms_code, bureau_code, status as Status FROM adm_mst_tentity where entity_gid='" + entity_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.entity_gid = objODBCDatareader["entity_gid"].ToString();
                    values.entity_name = objODBCDatareader["entity_name"].ToString();
                    values.entity_code = objODBCDatareader["entity_code"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateEntity(string employee_gid, application360 values)
        {
            msSQL = "select entity_gid from adm_mst_tentity where entity_name = '" + values.entity_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.entity_gid)
                {
                    values.message = "Entity Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.entity_code == null || values.entity_code == "")
            {
                lsentity_code = "";
            }
            else
            {
                lsentity_code = values.entity_code.Replace("'", "");
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
           
                msSQL = " update adm_mst_tentity set " +
                 " entity_name='" + values.entity_name.Replace("'", "") + "'," +
                 " entity_code='" + lsentity_code + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where entity_gid='" + values.entity_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("MELG");

                    msSQL = " insert into ocs_mst_tentitylog (" +
                           " entity_LOGgid, " +
                           " entity_gid, " +
                           " entity_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.entity_gid + "'," +
                           " '" + values.entity_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Entity Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
          
        }
        public void DaInactiveEntity(application360 values, string employee_gid)
        {
            msSQL = " update adm_mst_tentity set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where entity_gid='" + values.entity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("EILG");

                msSQL = " insert into ocs_mst_tentityinactivelog (" +
                      " entityinactivelog_gid, " +
                      " entity_gid," +
                      " entity_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.entity_gid + "'," +
                      " '" + values.entity_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Entity Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Entity Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteEntity(string entity_gid, string employee_gid, result values)
        {

            msSQL = " select vertical_gid from ocs_mst_tvertical where entity_gid='" + entity_gid + "'";
            objODBCDatareader1 = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader1.HasRows == true)
            {
                objODBCDatareader1.Close();
                values.message = "Can't able to delete Entity, Because it is tagged to Vertical";
                values.status = false;
            }
            else
            {
                objODBCDatareader1.Close();
                msSQL = " select entity_name from adm_mst_tentity where entity_gid='" + entity_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from adm_mst_tentity where entity_gid='" + entity_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Entity Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Entity'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaEntityInactiveLogview(string entity_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT a.entity_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tentityinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.entity_gid ='" + entity_gid + "' order by a.entityinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            entity_gid = (dr_datarow["entity_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaEntityList(Mdlentitylist values)
        {


            msSQL = " select entity_gid,entity_name from adm_mst_tentity " +
                    " order by entity_gid desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_entity = new List<entitylist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_entity.Add(new entitylist
                    {

                        entity_gid = dt["entity_gid"].ToString(),
                        entity_name = dt["entity_name"].ToString(),
                    });
                    values.entitylist = get_entity;
                }
            }
            dt_datatable.Dispose();
        }

        // Vertical Taggs

        public void DaGetVerticalTaggs(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT verticaltaggs_gid,verticaltaggs_name,a.entity_gid,a.entity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tverticaltaggs a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.verticaltaggs_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            verticaltaggs_gid = (dr_datarow["verticaltaggs_gid"].ToString()),
                            verticaltaggs_name = (dr_datarow["verticaltaggs_name"].ToString()),
                            entity_gid = (dr_datarow["entity_gid"].ToString()),
                            entity_name = (dr_datarow["entity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateVerticalTaggs(application360 values, string employee_gid)
        {
            msSQL = "select verticaltaggs_gid from ocs_mst_tverticaltaggs where verticaltaggs_name = '" + values.verticaltaggs_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.verticaltaggs_gid)
                //{
                values.message = " This Vertical Tags Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("VTAC");
            msGetGid = objcmnfunctions.GetMasterGID("MVTG");
            msSQL = " insert into ocs_mst_tverticaltaggs(" +
                    " verticaltaggs_gid," +
                    " verticaltaggs_name," +
                    " api_code," +
                    " entity_gid," +
                    " entity_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.verticaltaggs_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.entity_gid + "'," +
                    "'" + values.entity_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Vertical Taggs Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditVerticalTaggs(string verticaltaggs_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT verticaltaggs_gid, verticaltaggs_name, entity_gid,entity_name,lms_code, bureau_code, status as Status" +
                        " FROM ocs_mst_tverticaltaggs where verticaltaggs_gid='" + verticaltaggs_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.verticaltaggs_gid = objODBCDatareader["verticaltaggs_gid"].ToString();
                    values.verticaltaggs_name = objODBCDatareader["verticaltaggs_name"].ToString();
                    values.entity_gid = objODBCDatareader["entity_gid"].ToString();
                    values.entity_name = objODBCDatareader["entity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateVerticalTaggs(string employee_gid, application360 values)
        {
            msSQL = "select verticaltaggs_gid from ocs_mst_tverticaltaggs where verticaltaggs_name = '" + values.verticaltaggs_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.verticaltaggs_gid)
                {
                    values.message = " This Vertical Tags Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tverticaltaggs set " +
                 " verticaltaggs_name='" + values.verticaltaggs_name.Replace("'", "") + "'," +
                 " entity_gid='" + values.entity_gid + "'," +
                 " entity_name='" + values.entity_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where verticaltaggs_gid='" + values.verticaltaggs_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("VTLG");

                msSQL = " insert into ocs_mst_tverticaltaggslog (" +
                       " verticaltaggs_LOGgid, " +
                       " verticaltaggs_gid, " +
                       " verticaltaggs_name," +
                       " entity_gid, " +
                       " entity_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.verticaltaggs_gid + "'," +
                       " '" + values.verticaltaggs_name.Replace("'", "") + "'," +
                       " '" + values.entity_gid + "'," +
                       " '" + values.entity_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Vertical Taggs Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveVerticalTaggs(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tverticaltaggs set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where verticaltaggs_gid='" + values.verticaltaggs_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("VTIL");

                msSQL = " insert into ocs_mst_tverticaltaggsinactivelog (" +
                      " verticaltaggsinactivelog_gid, " +
                      " verticaltaggs_gid," +
                      " verticaltaggs_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.verticaltaggs_gid + "'," +
                      " '" + values.verticaltaggs_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Vertical Taggs Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Vertical Taggs Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteVerticalTaggs(string verticaltaggs_gid, string employee_gid, result values)
        {

            msSQL = " select application_gid from ocs_mst_tapplication where verticaltaggs_gid='" + verticaltaggs_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Can't able to delete Vertical Tags, Because it is tagged to Application Creation";
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select verticaltaggs_name from ocs_mst_tverticaltaggs where verticaltaggs_gid='" + verticaltaggs_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tverticaltaggs where verticaltaggs_gid='" + verticaltaggs_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Vertical Taggs Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Vertical Taggs'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaVerticalTaggsInactiveLogview(string verticaltaggs_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT verticaltaggs_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tverticaltaggsinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where verticaltaggs_gid ='" + verticaltaggs_gid + "' order by a.verticaltaggsinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            verticaltaggs_gid = (dr_datarow["verticaltaggs_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Business Category

        public void GetBusinessCategory(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT businesscategory_gid,api_code,businesscategory_name, lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbusinesscategory a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.businesscategory_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            businesscategory_gid = (dr_datarow["businesscategory_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            businesscategory_name = (dr_datarow["businesscategory_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBusinessCategory(application360 values, string employee_gid)
        {
            msSQL = "select businesscategory_gid from ocs_mst_tbusinesscategory where businesscategory_name = '" + values.businesscategory_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.businesscategory_gid)
                //{
                    values.message = " This Business Category Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("MBCG");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BUSC");
            msSQL = " insert into ocs_mst_tbusinesscategory(" +
                    " businesscategory_gid," +
                    " api_code," +
                    " businesscategory_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.businesscategory_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Business Category Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditBusinessCategory(string businesscategory_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT businesscategory_gid,businesscategory_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbusinesscategory where businesscategory_gid='" + businesscategory_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.businesscategory_gid = objODBCDatareader["businesscategory_gid"].ToString();
                    values.businesscategory_name = objODBCDatareader["businesscategory_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBusinessCategory(string employee_gid, application360 values)
        {
            msSQL = "select businesscategory_gid from ocs_mst_tbusinesscategory where businesscategory_name = '" + values.businesscategory_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.businesscategory_gid)
                {
                    values.message = " This Business Category Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbusinesscategory set " +
                 " businesscategory_name='" + values.businesscategory_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where businesscategory_gid='" + values.businesscategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MBCL");

                msSQL = " insert into ocs_mst_tbusinesscategorylog (" +
                       " businesscategorylog_gid, " +
                       " businesscategory_gid, " +
                       " businesscategory_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.businesscategory_gid + "'," +
                       " '" + values.businesscategory_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Business Category Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveBusinessCategory(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbusinesscategory set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where businesscategory_gid='" + values.businesscategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BCIL");

                msSQL = " insert into ocs_mst_tbusinesscategoryinactivelog (" +
                      " businesscategoryinactivelog_gid, " +
                      " businesscategory_gid," +
                      " businesscategory_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.businesscategory_gid + "'," +
                      " '" + values.businesscategory_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Business Category Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Business Category Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DeleteBusinessCategory(string businesscategory_gid, string employee_gid, result values)
        {
            msSQL = " select institution_gid from ocs_mst_tinstitution where businesscategory_gid='" + businesscategory_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Business Category, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select institution_gid from ocs_mst_tinstitution where businesscategory_gid='" + businesscategory_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    values.message = "Can't able to delete Business Category, Because it is tagged to Application Creation";
                    values.status = false;
                    return;
                }
                else
                {
                    objODBCDatareader.Close();
                    msSQL = " select businesscategory_name from ocs_mst_tbusinesscategory where businesscategory_gid='" + businesscategory_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tbusinesscategory where businesscategory_gid='" + businesscategory_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Business Category Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Business Category'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
                }
            }
        }

        public void DaBusinessCategoryInactiveLogview(string businesscategory_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT businesscategory_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tbusinesscategoryinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where businesscategory_gid ='" + businesscategory_gid + "' order by a.businesscategoryinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            businesscategory_gid = (dr_datarow["businesscategory_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Business Industry Type

        public void DaGetBusinessIndustryType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT businessindustrytype_gid,api_code ,businessindustrytype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbusinessindustrytype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.businessindustrytype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            businessindustrytype_gid = (dr_datarow["businessindustrytype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            businessindustrytype_name = (dr_datarow["businessindustrytype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBusinessIndustryType(application360 values, string employee_gid)
        {
            msSQL = "select businessindustrytype_name from ocs_mst_tbusinessindustrytype where businessindustrytype_name = '" + values.businessindustrytype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.businessindustrytype_gid)
                //{
                    values.message = " This Business Industry Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("MBIT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BUST");
            msSQL = " insert into ocs_mst_tbusinessindustrytype(" +
                    " businessindustrytype_gid," +
                    " api_code," +
                    " businessindustrytype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.businessindustrytype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Business Industry Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditBusinessIndustryType(string businessindustrytype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT businessindustrytype_gid,businessindustrytype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbusinessindustrytype where businessindustrytype_gid='" + businessindustrytype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.businessindustrytype_gid = objODBCDatareader["businessindustrytype_gid"].ToString();
                    values.businessindustrytype_name = objODBCDatareader["businessindustrytype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBusinessIndustryType(string employee_gid, application360 values)
        {
            msSQL = "select businessindustrytype_gid from ocs_mst_tbusinessindustrytype where businessindustrytype_name = '" + values.businessindustrytype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.businessindustrytype_gid)
                {
                    values.message = " This Business Industry Type Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbusinessindustrytype set " +
                 " businessindustrytype_name='" + values.businessindustrytype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where businessindustrytype_gid='" + values.businessindustrytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BITL");

                msSQL = " insert into ocs_mst_tbusinessindustrytypelog (" +
                       " businessindustrytype_LOGgid, " +
                       " businessindustrytype_gid, " +
                       " businessindustrytype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.businessindustrytype_gid + "'," +
                       " '" + values.businessindustrytype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Business Industry Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveBusinessIndustryType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbusinessindustrytype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where businessindustrytype_gid='" + values.businessindustrytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BIIL");

                msSQL = " insert into ocs_mst_tbusinessindustrytypeinactivelog (" +
                      " businessindustrytypeinactivelog_gid, " +
                      " businessindustrytype_gid," +
                      " businessindustrytype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.businessindustrytype_gid + "'," +
                      " '" + values.businessindustrytype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Business Industry Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Business Industry Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteBusinessIndustryType(string businessindustrytype_gid, string employee_gid, result values)
        {
            msSQL = " select businessindustrytype_name from ocs_mst_tbusinessindustrytype where businessindustrytype_gid='" + businessindustrytype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tbusinessindustrytype where businessindustrytype_gid='" + businessindustrytype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Business Industry Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Business Industry Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaBusinessIndustryTypeInactiveLogview(string businessindustrytype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT businessindustrytype_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tbusinessindustrytypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where businessindustrytype_gid ='" + businessindustrytype_gid + "' order by a.businessindustrytypeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            businessindustrytype_gid = (dr_datarow["businessindustrytype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Income Type

        public void DaGetIncomeType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT incometype_gid,api_code,incometype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tincometype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.incometype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            incometype_gid = (dr_datarow["incometype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            incometype_name = (dr_datarow["incometype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateIncomeType(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }


            msSQL = "select incometype_name from ocs_mst_tincometype where incometype_name = '" + values.incometype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Income Type Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MICT");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("INCT");
                msSQL = " insert into ocs_mst_tincometype(" +
                        " incometype_gid," +
                        " api_code," +
                        " incometype_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.incometype_name.Replace("'", "\\'") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Income Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditIncomeType(string incometype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT incometype_gid,incometype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tincometype where incometype_gid='" + incometype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.incometype_gid = objODBCDatareader["incometype_gid"].ToString();
                    values.incometype_name = objODBCDatareader["incometype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateIncomeType(string employee_gid, application360 values)
        {
            msSQL = "select incometype_gid from ocs_mst_tincometype where incometype_name = '" + values.incometype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.incometype_gid)
                {
                    values.message = "Income Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

           

            msSQL = " update ocs_mst_tincometype set " +
                 " incometype_name='" + values.incometype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where incometype_gid='" + values.incometype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MITL");

                msSQL = " insert into ocs_mst_tincometypelog (" +
                       " incometypelog_gid, " +
                       " incometype_gid, " +
                       " incometype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.incometype_gid + "'," +
                       " '" + values.incometype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Income Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveIncomeType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tincometype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where incometype_gid='" + values.incometype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ITIL");

                msSQL = " insert into ocs_mst_tincometypeinactivelog (" +
                      " incometypeinactivelog_gid, " +
                      " incometype_gid," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.incometype_gid + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Income Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Income Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteIncomeType(string incometype_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where incometype_gid = '" + incometype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Income Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select incometype_name from ocs_mst_tincometype where incometype_gid='" + incometype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tincometype where incometype_gid='" + incometype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Income Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Income Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaIncomeTypeInactiveLogview(string incometype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT incometype_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tincometypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where incometype_gid ='" + incometype_gid + "' order by a.incometypeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            incometype_gid = (dr_datarow["incometype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Individual Proof

        public void DaGetIndividualProof(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT individualproof_gid,api_code,individualproof_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tindividualproof a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.individualproof_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            individualproof_gid = (dr_datarow["individualproof_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            individualproof_name = (dr_datarow["individualproof_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateIndividualProof(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select individualproof_name from ocs_mst_tindividualproof where individualproof_name = '" + values.individualproof_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Individual Proof Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MIPG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("INDP");
                msSQL = " insert into ocs_mst_tindividualproof(" +
                        " individualproof_gid," +
                        " api_code," +
                        " individualproof_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.individualproof_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Individual Proof Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditIndividualProof(string individualproof_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT individualproof_gid,individualproof_name,lms_code, bureau_code, status as Status FROM ocs_mst_tindividualproof where individualproof_gid='" + individualproof_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.individualproof_gid = objODBCDatareader["individualproof_gid"].ToString();
                    values.individualproof_name = objODBCDatareader["individualproof_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateIndividualProof(string employee_gid, application360 values)
        {
            msSQL = "select individualproof_gid from ocs_mst_tindividualproof where individualproof_name = '" + values.individualproof_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.individualproof_gid)
                {
                    values.message = "Individual Proof Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tindividualproof set " +
                 " individualproof_name='" + values.individualproof_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where individualproof_gid='" + values.individualproof_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MIPL");

                msSQL = " insert into ocs_mst_tindividualprooflog (" +
                       " individualproof_LogGID, " +
                       " individualproof_gid, " +
                       " individualproof_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.individualproof_gid + "'," +
                       " '" + values.individualproof_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Individual Proof Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveIndividualProof(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tindividualproof set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where individualproof_gid='" + values.individualproof_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("IPIL");

                msSQL = " insert into ocs_mst_tindividualproofinactivelog (" +
                      " individualproofinactivelog_gid, " +
                      " individualproof_gid," +
                      " individualproof_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.individualproof_gid + "'," +
                      " '" + values.individualproof_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Individual Proof Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Individual Proof Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteIndividualProof(string individualproof_gid, string employee_gid, result values)
        {
            msSQL = "select contact2idproof_gid from ocs_mst_tcontact2idproof where idproof_gid = '" + individualproof_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Individual Proof, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select individualproof_name from ocs_mst_tindividualproof where individualproof_gid='" + individualproof_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " delete from ocs_mst_tindividualproof where individualproof_gid='" + individualproof_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Individual Proof Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Individual Proof'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaIndividualProofInactiveLogview(string individualproof_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT individualproof_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tindividualproofinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where individualproof_gid ='" + individualproof_gid + "' order by a.individualproofinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            individualproof_gid = (dr_datarow["individualproof_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Security Coverage
        public void DaGetSecurityCoverage(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT securitycoverage_gid,api_code,securitycoverage_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsecuritycoverage a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.securitycoverage_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            securitycoverage_gid = (dr_datarow["securitycoverage_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            securitycoverage_name = (dr_datarow["securitycoverage_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSecurityCoverage(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SRCE");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("SECO");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select securitycoverage_name from ocs_mst_tsecuritycoverage where securitycoverage_name = '" + values.securitycoverage_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Security Coverage Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tsecuritycoverage(" +
                    " securitycoverage_gid," +
                    " api_code," +
                    " securitycoverage_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.securitycoverage_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Security Coverage Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditSecurityCoverage(string securitycoverage_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT securitycoverage_gid,securitycoverage_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsecuritycoverage where securitycoverage_gid='" + securitycoverage_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.securitycoverage_gid = objODBCDatareader["securitycoverage_gid"].ToString();
                    values.securitycoverage_name = objODBCDatareader["securitycoverage_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSecurityCoverage(string employee_gid, application360 values)
        {
                msSQL = "select securitycoverage_gid from ocs_mst_tsecuritycoverage where securitycoverage_name = '" + values.securitycoverage_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.securitycoverage_gid)
                    {
                        values.message = "Security Coverage Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tsecuritycoverage set " +
                 " securitycoverage_name='" + values.securitycoverage_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where securitycoverage_gid='" + values.securitycoverage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SRCL");

                msSQL = " insert into ocs_mst_tsecuritycoveragelog (" +
                       " securitycoverage_LOGgid, " +
                       " securitycoverage_gid, " +
                       " securitycoverage_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.securitycoverage_gid + "'," +
                       " '" + values.securitycoverage_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Security Coverage Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSecurityCoverage(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsecuritycoverage set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where securitycoverage_gid='" + values.securitycoverage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("STYI");

                msSQL = " insert into ocs_mst_tsecuritycoverageinactivelog (" +
                      " securitycoverageinactivelog_gid, " +
                      " securitycoverage_gid," +
                      " securitycoverage_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.securitycoverage_gid + "'," +
                      " '" + values.securitycoverage_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Security Coverage Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Security Coverage Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveSecurityCoverageHistory(ApplicationInactiveHistory objapplicationhistory, string securitycoverage_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tsecuritycoverageinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.securitycoverage_gid='" + securitycoverage_gid + "' order by a.securitycoverageinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteSecurityCoverage(string securitycoverage_gid, string employee_gid, result values)
        {
            msSQL = " select securitycoverage_name from ocs_mst_tsecuritycoverage where securitycoverage_gid='" + securitycoverage_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tsecuritycoverage where securitycoverage_gid='" + securitycoverage_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Security Coverage Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Security Coverage'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Credit Type of facility

        public void CreateCreditTypeOfFacility(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CTFA");

            msGetGid = objcmnfunctions.GetMasterGID("MCTF");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select credittypeoffacility_name from ocs_mst_tcredittypeoffacility where credittypeoffacility_name = '" + values.credittypeoffacility_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Type of Facility Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcredittypeoffacility(" +
                    " credittypeoffacility_gid," +
                    " credittypeoffacility_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.credittypeoffacility_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Type Of Facility Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetCreditTypeOfFacilitySummary(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT credittypeoffacility_gid,credittypeoffacility_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcredittypeoffacility a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.credittypeoffacility_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittypeoffacility_gid = (dr_datarow["credittypeoffacility_gid"].ToString()),
                            credittypeoffacility_name = (dr_datarow["credittypeoffacility_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreditTypeOfFacilityEdit(string credittypeoffacility_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT credittypeoffacility_gid,credittypeoffacility_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcredittypeoffacility where credittypeoffacility_gid='" + credittypeoffacility_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.credittypeoffacility_gid = objODBCDatareader["credittypeoffacility_gid"].ToString();
                    values.credittypeoffacility_name = objODBCDatareader["credittypeoffacility_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaCreditTypeOfFacilityUpdate(string employee_gid, application360 values)
        {
            msSQL = "select credittypeoffacility_gid from ocs_mst_tcredittypeoffacility where credittypeoffacility_name = '" + values.credittypeoffacility_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.credittypeoffacility_gid)
                {
                    values.message = "Credit Type of Facility Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tcredittypeoffacility set " +
                 " credittypeoffacility_name='" + values.credittypeoffacility_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where credittypeoffacility_gid='" + values.credittypeoffacility_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CTFL");
                msSQL = " insert into ocs_mst_tcredittypeoffacilitylog (" +
                       " credittypeoffacilitylog_gid, " +
                       " credittypeoffacility_gid, " +
                       " credittypeoffacility_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.credittypeoffacility_gid + "'," +
                       " '" + values.credittypeoffacility_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Type of Facility Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Credit Type of Facility";
            }
        }

        public void DaCreditTypeOfFacilityInactive(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcredittypeoffacility set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where credittypeoffacility_gid='" + values.credittypeoffacility_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CTFI");

                msSQL = " insert into ocs_mst_tcredittypeoffacilityinactivelog (" +
                      " credittypeoffacilityinactivelog_gid, " +
                      " credittypeoffacility_gid," +
                      " credittypeoffacility_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.credittypeoffacility_gid + "'," +
                      " '" + values.credittypeoffacility_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Type of Facility Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Type of Facility Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaCreditTypeOfFacilityDelete(string credittypeoffacility_gid, string employee_gid, result values)
        {
            msSQL = " select credittypeoffacility_name from ocs_mst_tcredittypeoffacility where credittypeoffacility_gid='" + credittypeoffacility_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcredittypeoffacility where credittypeoffacility_gid='" + credittypeoffacility_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Type of Facility Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Type of Facility'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditTypeOfFacilityInactiveLogview(string credittypeoffacility_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT credittypeoffacility_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcredittypeoffacilityinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                        " where credittypeoffacility_gid ='" + credittypeoffacility_gid + "'  order by a.credittypeoffacilityinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittypeoffacility_gid = (dr_datarow["credittypeoffacility_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        // Credit Type

        public void DaCreditTypeAdd(application360 values, string employee_gid)
        {

            msGetGid = objcmnfunctions.GetMasterGID("MCRT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CTAC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select credittype_name from ocs_mst_tcredittype where credittype_name = '" + values.credittype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Type Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcredittype(" +
                    " credittype_gid," +
                    " api_code," +
                    " credittype_name," +

                    " lms_code," +
                    //" lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                      "'" + msGetAPICode + "'," +
                    "'" + values.credittype_name.Replace("'", "") + "'," +

                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetCreditTypeSummary(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT credittype_gid,credittype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcredittype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.credittype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittype_gid = (dr_datarow["credittype_gid"].ToString()),
                            credittype_name = (dr_datarow["credittype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreditTypeEdit(string credittype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT credittype_gid,credittype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcredittype where credittype_gid='" + credittype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.credittype_gid = objODBCDatareader["credittype_gid"].ToString();
                    values.credittype_name = objODBCDatareader["credittype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaCreditTypeUpdate(string employee_gid, application360 values)
        {
            msSQL = "select credittype_gid from ocs_mst_tcredittype where credittype_name = '" + values.credittype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.credittype_gid)
                {
                    values.message = "Credit Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcredittype set " +
                 " credittype_name='" + values.credittype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where credittype_gid='" + values.credittype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CRTL");
                msSQL = " insert into ocs_mst_tcredittypelog (" +
                       " credittypelog_gid, " +
                       " credittype_gid, " +
                       " credittype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.credittype_gid + "'," +
                       " '" + values.credittype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Credit Type";
            }
        }

        public void DaCreditTypeInactive(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcredittype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where credittype_gid='" + values.credittype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CRTI");

                msSQL = " insert into ocs_mst_tcredittypeinactivelog (" +
                      " credittypeinactivelog_gid, " +
                      " credittype_gid," +
                      " credittype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.credittype_gid + "'," +
                      " '" + values.credittype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaCreditTypeDelete(string credittype_gid, string employee_gid, result values)
        {
            msSQL = " select credittype_name from ocs_mst_tcredittype where credittype_gid='" + credittype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcredittype where credittype_gid='" + credittype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditTypeInactiveLogview(string credittype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT credittype_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcredittypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid  where credittype_gid ='" + credittype_gid + "' order by a.credittypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittype_gid = (dr_datarow["credittype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        // Credit Account Classification

        public void DaCreditAccountClassificationAdd(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("ACAC");
            msGetGid = objcmnfunctions.GetMasterGID("MCAC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select creditaccountclassification_name from ocs_mst_tcreditaccountclassification where creditaccountclassification_name = '" + values.creditaccountclassification_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Account Classification Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcreditaccountclassification(" +
                    " creditaccountclassification_gid," +
                    " creditaccountclassification_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.creditaccountclassification_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Account Classification Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetCreditAccountClassificationSummary(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT creditaccountclassification_gid,creditaccountclassification_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcreditaccountclassification a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.creditaccountclassification_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditaccountclassification_gid = (dr_datarow["creditaccountclassification_gid"].ToString()),
                            creditaccountclassification_name = (dr_datarow["creditaccountclassification_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreditAccountClassificationEdit(string creditaccountclassification_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT creditaccountclassification_gid,creditaccountclassification_name,lms_code, bureau_code," +
                        " status as Status FROM ocs_mst_tcreditaccountclassification " +
                        " where creditaccountclassification_gid='" + creditaccountclassification_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.creditaccountclassification_gid = objODBCDatareader["creditaccountclassification_gid"].ToString();
                    values.creditaccountclassification_name = objODBCDatareader["creditaccountclassification_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaCreditAccountClassificationUpdate(string employee_gid, application360 values)
        {
            msSQL = "select creditaccountclassification_gid from ocs_mst_tcreditaccountclassification where creditaccountclassification_name = '" + values.creditaccountclassification_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.creditaccountclassification_gid)
                {
                    values.message = "Credit Account Classification Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcreditaccountclassification set " +
                 " creditaccountclassification_name='" + values.creditaccountclassification_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where creditaccountclassification_gid='" + values.creditaccountclassification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CACL");
                msSQL = " insert into ocs_mst_tcreditaccountclassificationlog (" +
                       " creditaccountclassificationlog_gid, " +
                       " creditaccountclassification_gid, " +
                       " creditaccountclassification_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.creditaccountclassification_gid + "'," +
                       " '" + values.creditaccountclassification_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Account Classification Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Credit Account Classification";
            }
        }

        public void DaCreditAccountClassificationInactive(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcreditaccountclassification set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where creditaccountclassification_gid='" + values.creditaccountclassification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CACI");

                msSQL = " insert into ocs_mst_tcreditaccountclassificationinactivelog (" +
                      " creditaccountclassificationinactivelog_gid, " +
                      " creditaccountclassification_gid," +
                      " creditaccountclassification_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.creditaccountclassification_gid + "'," +
                      " '" + values.creditaccountclassification_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Account Classification Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Account Classification Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaCreditAccountClassificationDelete(string creditaccountclassification_gid, string employee_gid, result values)
        {
            msSQL = " select creditaccountclassification_name from ocs_mst_tcreditaccountclassification where creditaccountclassification_gid='" + creditaccountclassification_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcreditaccountclassification where creditaccountclassification_gid='" + creditaccountclassification_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Account Classification Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Account Classification'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditAccountClassificationInactiveLogview(string creditaccountclassification_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT creditaccountclassification_gid,creditaccountclassification_name, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcreditaccountclassificationinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid  where creditaccountclassification_gid ='" + creditaccountclassification_gid + "' order by a.creditaccountclassificationinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditaccountclassification_gid = (dr_datarow["creditaccountclassification_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        // Credit Instalment Frequency

        public void DaCreditInstalmentFrequencyAdd(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CIFA");
            msGetGid = objcmnfunctions.GetMasterGID("MCIF");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select creditinstalmentfrequency_name from ocs_mst_tcreditinstalmentfrequency where creditinstalmentfrequency_name = '" + values.creditinstalmentfrequency_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Instalment Frequency Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcreditinstalmentfrequency(" +
                    " creditinstalmentfrequency_gid," +
                    " creditinstalmentfrequency_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.creditinstalmentfrequency_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Instalment Frequency Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetCreditInstalmentFrequencySummary(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT creditinstalmentfrequency_gid,creditinstalmentfrequency_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcreditinstalmentfrequency a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.creditinstalmentfrequency_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditinstalmentfrequency_gid = (dr_datarow["creditinstalmentfrequency_gid"].ToString()),
                            creditinstalmentfrequency_name = (dr_datarow["creditinstalmentfrequency_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreditInstalmentFrequencyEdit(string creditinstalmentfrequency_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT creditinstalmentfrequency_gid,creditinstalmentfrequency_name,lms_code, bureau_code," +
                        " status as Status FROM ocs_mst_tcreditinstalmentfrequency " +
                        " where creditinstalmentfrequency_gid='" + creditinstalmentfrequency_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.creditinstalmentfrequency_gid = objODBCDatareader["creditinstalmentfrequency_gid"].ToString();
                    values.creditinstalmentfrequency_name = objODBCDatareader["creditinstalmentfrequency_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaCreditInstalmentFrequencyUpdate(string employee_gid, application360 values)
        {
            msSQL = "select creditinstalmentfrequency_gid from ocs_mst_tcreditinstalmentfrequency where creditinstalmentfrequency_name = '" + values.creditinstalmentfrequency_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.creditinstalmentfrequency_gid)
                {
                    values.message = "Credit Instalment Frequency Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcreditinstalmentfrequency set " +
                 " creditinstalmentfrequency_name='" + values.creditinstalmentfrequency_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where creditinstalmentfrequency_gid='" + values.creditinstalmentfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CIFL");
                msSQL = " insert into ocs_mst_tcreditinstalmentfrequencylog (" +
                       " creditinstalmentfrequencylog_gid, " +
                       " creditinstalmentfrequency_gid, " +
                       " creditinstalmentfrequency_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.creditinstalmentfrequency_gid + "'," +
                       " '" + values.creditinstalmentfrequency_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Instalment Frequency Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Credit Instalment Frequency";
            }
        }

        public void DaCreditInstalmentFrequencyInactive(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcreditinstalmentfrequency set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where creditinstalmentfrequency_gid='" + values.creditinstalmentfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CIFI");

                msSQL = " insert into ocs_mst_tcreditinstalmentfrequencyinactivelog (" +
                      " creditinstalmentfrequencyinactivelog_gid, " +
                      " creditinstalmentfrequency_gid," +
                      " creditinstalmentfrequency_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.creditinstalmentfrequency_gid + "'," +
                      " '" + values.creditinstalmentfrequency_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Instalment Frequency Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Instalment Frequency Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaCreditInstalmentFrequencyDelete(string creditinstalmentfrequency_gid, string employee_gid, result values)
        {
            msSQL = " select creditinstalmentfrequency_name from ocs_mst_tcreditinstalmentfrequency where creditinstalmentfrequency_gid='" + creditinstalmentfrequency_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcreditinstalmentfrequency where creditinstalmentfrequency_gid='" + creditinstalmentfrequency_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Instalment Frequency Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Instalment Frequency'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditInstalmentFrequencyInactiveLogview(string creditinstalmentfrequency_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT creditinstalmentfrequency_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcreditinstalmentfrequencyinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid where creditinstalmentfrequency_gid ='" + creditinstalmentfrequency_gid + "' order by a.creditinstalmentfrequencyinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditinstalmentfrequency_gid = (dr_datarow["creditinstalmentfrequency_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        // Credit Type Of Existing Funded

        public void DaCreditTypeOfExistingFundedAdd(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CTEA");
            msGetGid = objcmnfunctions.GetMasterGID("CTEF");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select credittypeofexistingfunded_name from ocs_mst_tcredittypeofexistingfunded where credittypeofexistingfunded_name = '" + values.credittypeofexistingfunded_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Type of Existing Funded Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcredittypeofexistingfunded(" +
                    " credittypeofexistingfunded_gid," +
                    " credittypeofexistingfunded_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.credittypeofexistingfunded_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Type of Existing Funded Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetCreditTypeOfExistingFundedSummary(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT credittypeofexistingfunded_gid,credittypeofexistingfunded_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcredittypeofexistingfunded a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.credittypeofexistingfunded_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittypeofexistingfunded_gid = (dr_datarow["credittypeofexistingfunded_gid"].ToString()),
                            credittypeofexistingfunded_name = (dr_datarow["credittypeofexistingfunded_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreditTypeOfExistingFundedEdit(string credittypeofexistingfunded_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT credittypeofexistingfunded_gid,credittypeofexistingfunded_name,lms_code, bureau_code," +
                        " status as Status FROM ocs_mst_tcredittypeofexistingfunded " +
                        " where credittypeofexistingfunded_gid='" + credittypeofexistingfunded_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.credittypeofexistingfunded_gid = objODBCDatareader["credittypeofexistingfunded_gid"].ToString();
                    values.credittypeofexistingfunded_name = objODBCDatareader["credittypeofexistingfunded_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaCreditTypeOfExistingFundedUpdate(string employee_gid, application360 values)
        {
            msSQL = "select credittypeofexistingfunded_gid from ocs_mst_tcredittypeofexistingfunded where credittypeofexistingfunded_name = '" + values.credittypeofexistingfunded_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.credittypeofexistingfunded_gid)
                {
                    values.message = "Credit Type of Existing Funded Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcredittypeofexistingfunded set " +
                 " credittypeofexistingfunded_name='" + values.credittypeofexistingfunded_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where credittypeofexistingfunded_gid='" + values.credittypeofexistingfunded_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CEFL");
                msSQL = " insert into ocs_mst_tcredittypeofexistingfundedlog (" +
                       " credittypeofexistingfundedlog_gid, " +
                       " credittypeofexistingfunded_gid, " +
                       " credittypeofexistingfunded_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.credittypeofexistingfunded_gid + "'," +
                       " '" + values.credittypeofexistingfunded_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Type of Existing Funded Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Credit Type of Existing Funded";
            }
        }

        public void DaCreditTypeOfExistingFundedInactive(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcredittypeofexistingfunded set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where credittypeofexistingfunded_gid='" + values.credittypeofexistingfunded_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CEFI");

                msSQL = " insert into ocs_mst_tcredittypeofexistingfundedinactivelog (" +
                      " credittypeofexistingfundedinactivelog_gid, " +
                      " credittypeofexistingfunded_gid," +
                      " credittypeofexistingfunded_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.credittypeofexistingfunded_gid + "'," +
                      " '" + values.credittypeofexistingfunded_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Type of Existing Funded Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Type of Existing Funded Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaCreditTypeOfExistingFundedDelete(string credittypeofexistingfunded_gid, string employee_gid, result values)
        {
            msSQL = " select credittypeofexistingfunded_name from ocs_mst_tcredittypeofexistingfunded where credittypeofexistingfunded_gid='" + credittypeofexistingfunded_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcredittypeofexistingfunded where credittypeofexistingfunded_gid='" + credittypeofexistingfunded_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Type of Existing Funded Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Type of Existing Funded'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditTypeExistingFundInactiveLogview(string credittypeofexistingfunded_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT credittypeofexistingfunded_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcredittypeofexistingfundedinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid  where credittypeofexistingfunded_gid ='" + credittypeofexistingfunded_gid + "' order by a.credittypeofexistingfundedinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            credittypeofexistingfunded_gid = (dr_datarow["credittypeofexistingfunded_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        // Lending Arrangement

        public void DaGetLendingArrangement(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT lendingarrangement_gid,api_code,lendingarrangement_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tlendingarrangement a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.lendingarrangement_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            lendingarrangement_gid = (dr_datarow["lendingarrangement_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            lendingarrangement_name = (dr_datarow["lendingarrangement_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLendingArrangement(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("LGAT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("LENA");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select lendingarrangement_name from ocs_mst_tlendingarrangement where lendingarrangement_name = '" + values.lendingarrangement_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Lending Arrangement Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tlendingarrangement(" +
                       " lendingarrangement_gid," +
                        " api_code," +
                       " lendingarrangement_name," +
                       " lms_code," +
                       " bureau_code," +
                       " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                         "'" + values.lendingarrangement_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Lending Arrangement Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }

        }
        public void DaEditLendingArrangement(string lendingarrangement_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT lendingarrangement_gid,lendingarrangement_name,lms_code, bureau_code, status as Status FROM ocs_mst_tlendingarrangement where lendingarrangement_gid='" + lendingarrangement_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lendingarrangement_gid = objODBCDatareader["lendingarrangement_gid"].ToString();
                    values.lendingarrangement_name = objODBCDatareader["lendingarrangement_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLendingArrangement(string employee_gid, application360 values)
        {
                msSQL = "select lendingarrangement_gid from ocs_mst_tlendingarrangement where lendingarrangement_name = '" + values.lendingarrangement_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.lendingarrangement_gid)
                    {
                        values.message = "Lending Arrangement Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tlendingarrangement set " +
         " lendingarrangement_name='" + values.lendingarrangement_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where lendingarrangement_gid='" + values.lendingarrangement_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LDAL");
                msSQL = " insert into ocs_mst_tlendingarrangementlog (" +
                       " lendingarrangement_LOGgid, " +
                       " lendingarrangement_gid, " +
                       " lendingarrangement_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.lendingarrangement_gid + "'," +
                       " '" + values.lendingarrangement_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Lending Arrangement Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveLendingArrangement(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tlendingarrangement set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where lendingarrangement_gid='" + values.lendingarrangement_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LAMI");

                msSQL = " insert into ocs_mst_tlendingarrangementinactivelog (" +
                      " lendingarrangementinactivelog_gid, " +
                      " lendingarrangement_gid," +
                      " lendingarrangement_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.lendingarrangement_gid + "'," +
                      " '" + values.lendingarrangement_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Lending Arrangement Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Lending Arrangement Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveLendingArrangementHistory(ApplicationInactiveHistory objapplicationhistory, string lendingarrangement_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tlendingarrangementinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.lendingarrangement_gid='" + lendingarrangement_gid + "' order by a.lendingarrangementinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteLendingArrangement(string lendingarrangement_gid, string employee_gid, result values)
        {
            msSQL = " select lendingarrangement_name from ocs_mst_tlendingarrangement where lendingarrangement_gid='" + lendingarrangement_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tlendingarrangement where lendingarrangement_gid='" + lendingarrangement_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Lending Arrangement Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Lending Arrangement'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Assets Type

        public void DaGetAssetsType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT assetstype_gid,api_code,assetstype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tassetstype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.assetstype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            assetstype_gid = (dr_datarow["assetstype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            assetstype_name = (dr_datarow["assetstype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAssetsType(application360 values, string employee_gid)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("ASTY");
                    msGetAPICode = objcmnfunctions.GetApiMasterGID("ASST");
                    if (values.lms_code == null || values.lms_code == "")
                    {
                        lslms_code = "";
                    }
                    else
                    {
                        lslms_code = values.lms_code.Replace("'", "");
                    }
                    if (values.bureau_code == null || values.bureau_code == "")
                    {
                        lsbureau_code = "";
                    }
                    else
                    {
                        lsbureau_code = values.bureau_code.Replace("'", "");
                    }
                    msSQL = "select assetstype_name from ocs_mst_tassetstype where assetstype_name = '" + values.assetstype_name.Replace("'", "\\'") + "' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.status = false;
                        values.message = "Assets Type Already Exist";
                    }
                    else
                    {
                        msSQL = " insert into ocs_mst_tassetstype(" +
                    " assetstype_gid," +
                     " api_code," +
                    " assetstype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.assetstype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult != 0)
                        {
                            values.status = true;
                            values.message = "Assets Type Added Successfully";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occurred While Adding";
                        }
                    }
                }
        public void DaEditAssetsType(string assetstype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT assetstype_gid,assetstype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tassetstype where assetstype_gid='" + assetstype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.assetstype_gid = objODBCDatareader["assetstype_gid"].ToString();
                    values.assetstype_name = objODBCDatareader["assetstype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateAssetsType(string employee_gid, application360 values)
        {
                    msSQL = "select assetstype_gid from ocs_mst_tassetstype where assetstype_name = '" + values.assetstype_name.Replace("'", "\\'") + "'";
                    lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentgid != "")
                    {
                        if (lsdocumentgid != values.assetstype_gid)
                        {
                            values.message = "Assets Type Already Exist";
                            values.status = false;
                            return;
                        }
                    }

                    if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tassetstype set " +
         " assetstype_name='" + values.assetstype_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where assetstype_gid='" + values.assetstype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATTL");
                msSQL = " insert into ocs_mst_tassetstypelog (" +
                       " assetstype_LOGgid, " +
                       " assetstype_gid, " +
                       " assetstype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.assetstype_gid + "'," +
                       " '" + values.assetstype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Assets Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveAssetsType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tassetstype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where assetstype_gid='" + values.assetstype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATTI");

                msSQL = " insert into ocs_mst_tassetstypeinactivelog (" +
                      " assetstypeinactivelog_gid, " +
                      " assetstype_gid," +
                      " assetstype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.assetstype_gid + "'," +
                      " '" + values.assetstype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Assets Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Assets Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveAssetsTypeHistory(ApplicationInactiveHistory objapplicationhistory, string assetstype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tassetstypeinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.assetstype_gid='" + assetstype_gid + "' order by a.assetstypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteAssetsType(string assetstype_gid, string employee_gid, result values)
        {
            msSQL = " select assetstype_name from ocs_mst_tassetstype where assetstype_gid='" + assetstype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tassetstype where assetstype_gid='" + assetstype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Assets Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Assets Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Party Type

        public void DaGetPartyType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT partytype_gid,api_code,partytype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tpartytype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.partytype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            partytype_gid = (dr_datarow["partytype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            partytype_name = (dr_datarow["partytype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePartyType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("PTTY");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PART");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select partytype_name from ocs_mst_tpartytype where partytype_name = '" + values.partytype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Party Type Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tpartytype(" +
                        " partytype_gid," +
                        " api_code," +
                        " partytype_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.partytype_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Party Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }

        }
        public void DaEditPartyType(string partytype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT partytype_gid,partytype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tpartytype where partytype_gid='" + partytype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.partytype_gid = objODBCDatareader["partytype_gid"].ToString();
                    values.partytype_name = objODBCDatareader["partytype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePartyType(string employee_gid, application360 values)
        {
            msSQL = "select partytype_gid from ocs_mst_tpartytype where partytype_name = '" + values.partytype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.partytype_gid)
                {
                    values.message = "Party Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tpartytype set " +
         " partytype_name='" + values.partytype_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where partytype_gid='" + values.partytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PYTL");
                msSQL = " insert into ocs_mst_tpartytypelog (" +
                       " partytype_LOGgid, " +
                       " partytype_gid, " +
                       " partytype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.partytype_gid + "'," +
                       " '" + values.partytype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Party Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactivePartyType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tpartytype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where partytype_gid='" + values.partytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PRTI");

                msSQL = " insert into ocs_mst_tpartytypeinactivelog (" +
                      " partytypeinactivelog_gid, " +
                      " partytype_gid," +
                      " partytype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.partytype_gid + "'," +
                      " '" + values.partytype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Party Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Party Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactivePartyTypeHistory(ApplicationInactiveHistory objapplicationhistory, string partytype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tpartytypeinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.partytype_gid='" + partytype_gid + "' order by a.partytypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeletePartyType(string partytype_gid, string employee_gid, result values)
        {
            msSQL = " select partytype_name from ocs_mst_tpartytype where partytype_gid='" + partytype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tpartytype where partytype_gid='" + partytype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Party Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Party Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Caste

        public void DaGetCaste(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT caste_gid,api_code,caste_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcaste a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.caste_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            caste_gid = (dr_datarow["caste_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            caste_name = (dr_datarow["caste_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCaste(application360 values, string employee_gid)
        {

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            msSQL = "select caste_name from ocs_mst_tcaste where caste_name = '" + values.caste_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Cast Name Already Exist";
            }
            else
            {
                //string bureau_code, caste_name, lms_code;

                //msSQL = " SELECT lms_code,bureau_code,caste_name FROM ocs_mst_tcaste ";

                //dt_datatable = objdbconn.GetDataTable(msSQL);
                ////var getSegment = new List<CalendarGroupComparison_List>();

                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {

                //        //getSegment.Add(new EncoreProductComparison_List
                //        //{

                //        lms_code = (dr_datarow["lms_code"].ToString());
                //        bureau_code = (dr_datarow["bureau_code"].ToString());
                //        caste_name = (dr_datarow["caste_name"].ToString());

                //        if (lms_code == lslms_code && bureau_code == lsbureau_code && caste_name == values.caste_name)
                //        {
                //            values.message = "This Caste Already Exists";
                //            values.status = false;
                //            return;
                //        }
                //    }

                //    dt_datatable.Dispose();
                //}

                msGetGid = objcmnfunctions.GetMasterGID("MCST");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CAST");
                msSQL = " insert into ocs_mst_tcaste(" +
                        " caste_gid," +
                        " api_code," +
                        " caste_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.caste_name.Replace("'", "\\'") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Caste Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditCaste(string caste_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT caste_gid,caste_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcaste where caste_gid='" + caste_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.caste_gid = objODBCDatareader["caste_gid"].ToString();
                    values.caste_name = objODBCDatareader["caste_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCaste(string employee_gid, application360 values)
        {
            msSQL = "select caste_gid from ocs_mst_tcaste where caste_name = '" + values.caste_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.caste_gid)
                {
                    values.message = "Caste Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }



            msSQL = " update ocs_mst_tcaste set " +
                 " caste_name='" + values.caste_name.Replace("'", "\\'") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where caste_gid='" + values.caste_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CSTL");

                msSQL = " insert into ocs_mst_tcastelog (" +
                       " castelog_gid, " +
                       " caste_gid, " +
                       " caste_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.caste_gid + "'," +
                       " '" + values.caste_name.Replace("'", "\\'") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Caste Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Caste";
            }
        }

        public void DaInactiveCaste(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcaste set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where caste_gid='" + values.caste_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CSIL");

                msSQL = " insert into ocs_mst_tcasteinactivelog (" +
                      " casteinactivelog_gid, " +
                      " caste_gid," +
                      " caste_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.caste_gid + "'," +
                      " '" + values.caste_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Caste Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Caste Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteCaste(string caste_gid, string employee_gid, result values)
        {
            msSQL = " select caste_name from ocs_mst_tcaste where caste_gid='" + caste_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcaste where caste_gid='" + caste_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Caste Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Caste'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveCasteHistory(ApplicationInactiveHistory objapplicationhistory, string caste_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tcasteinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.caste_gid='" + caste_gid + "' order by a.casteinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Type Of Charge Created

        public void DaGetTypeOfChargeCreated(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT typeofchargecreated_gid,api_code,typeofchargecreated_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_ttypeofchargecreated a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.typeofchargecreated_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            typeofchargecreated_gid = (dr_datarow["typeofchargecreated_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            typeofchargecreated_name = (dr_datarow["typeofchargecreated_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateTypeOfChargeCreated(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MCHC");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TYPC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select typeofchargecreated_name from ocs_mst_ttypeofchargecreated where typeofchargecreated_name = '" + values.typeofchargecreated_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Type Of Charge Created Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_ttypeofchargecreated(" +
                    " typeofchargecreated_gid," +
                    " api_code," +
                    " typeofchargecreated_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.typeofchargecreated_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Type Of Charge Created Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditTypeOfChargeCreated(string typeofchargecreated_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT typeofchargecreated_gid,typeofchargecreated_name,lms_code, bureau_code, status as Status FROM ocs_mst_ttypeofchargecreated where typeofchargecreated_gid='" + typeofchargecreated_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.typeofchargecreated_gid = objODBCDatareader["typeofchargecreated_gid"].ToString();
                    values.typeofchargecreated_name = objODBCDatareader["typeofchargecreated_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateTypeOfChargeCreated(string employee_gid, application360 values)
        {
            msSQL = "select typeofchargecreated_gid from ocs_mst_ttypeofchargecreated where typeofchargecreated_name = '" + values.typeofchargecreated_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.typeofchargecreated_gid)
                {
                    values.message = "Type Of Charge Created Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_ttypeofchargecreated set " +
                 " typeofchargecreated_name='" + values.typeofchargecreated_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where typeofchargecreated_gid='" + values.typeofchargecreated_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CHCL");

                msSQL = " insert into ocs_mst_ttypeofchargecreatedlog (" +
                       " typeofchargecreatedlog_gid, " +
                       " typeofchargecreated_gid, " +
                       " typeofchargecreated_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.typeofchargecreated_gid + "'," +
                       " '" + values.typeofchargecreated_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Type Of Charge Created Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Type Of Charge Created";
            }
        }

        public void DaInactiveTypeOfChargeCreated(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_ttypeofchargecreated set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where typeofchargecreated_gid='" + values.typeofchargecreated_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CCIL");

                msSQL = " insert into ocs_mst_ttypeofchargecreatedinactivelog (" +
                      " typeofchargecreatedinactivelog_gid, " +
                      " typeofchargecreated_gid," +
                      " typeofchargecreated_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.typeofchargecreated_gid + "'," +
                      " '" + values.typeofchargecreated_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Type Of Charge Created Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Type Of Charge Created Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteTypeOfChargeCreated(string typeofchargecreated_gid, string employee_gid, result values)
        {
            msSQL = " select typeofchargecreated_name from ocs_mst_ttypeofchargecreated where typeofchargecreated_gid='" + typeofchargecreated_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_ttypeofchargecreated where typeofchargecreated_gid='" + typeofchargecreated_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Type Of Charge Created Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Type Of Charge Created'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveTypeOfChargeCreatedHistory(ApplicationInactiveHistory objapplicationhistory, string typeofchargecreated_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_ttypeofchargecreatedinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.typeofchargecreated_gid='" + typeofchargecreated_gid + "' order by a.typeofchargecreatedinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Construction Type

        public void DaGetConstructionType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT constructiontype_gid,api_code,constructiontype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tconstructiontype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.constructiontype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            constructiontype_gid = (dr_datarow["constructiontype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            constructiontype_name = (dr_datarow["constructiontype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateConstructionType(application360 values, string employee_gid)
        {
            msSQL = "select constructiontype_gid from ocs_mst_tconstructiontype where constructiontype_name = '" + values.constructiontype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.constructiontype_gid)
                //{
                    values.message = " This Construction Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("MCNT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CONT");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tconstructiontype(" +
                    " constructiontype_gid," +
                    " api_code," +
                    " constructiontype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.constructiontype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Construction Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditConstructionType(string constructiontype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT constructiontype_gid,constructiontype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tconstructiontype where constructiontype_gid='" + constructiontype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.constructiontype_gid = objODBCDatareader["constructiontype_gid"].ToString();
                    values.constructiontype_name = objODBCDatareader["constructiontype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateConstructionType(string employee_gid, application360 values)
        {
            msSQL = "select constructiontype_gid from ocs_mst_tconstructiontype where constructiontype_name = '" + values.constructiontype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.constructiontype_gid)
                {
                    values.message = " This Construction Type Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tconstructiontype set " +
                 " constructiontype_name='" + values.constructiontype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where constructiontype_gid='" + values.constructiontype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CNTL");

                msSQL = " insert into ocs_mst_tconstructiontypelog (" +
                       " constructiontypelog_gid, " +
                       " constructiontype_gid, " +
                       " constructiontype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.constructiontype_gid + "'," +
                       " '" + values.constructiontype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Construction Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Construction Type";
            }
        }

        public void DaInactiveConstructionType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tconstructiontype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks + "'" +
                    " where constructiontype_gid='" + values.constructiontype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CTIL");

                msSQL = " insert into ocs_mst_tconstructiontypeinactivelog (" +
                      " constructiontypeinactivelog_gid, " +
                      " constructiontype_gid," +
                      " constructiontype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.constructiontype_gid + "'," +
                      " '" + values.constructiontype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Construction Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Construction Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteConstructionType(string constructiontype_gid, string employee_gid, result values)
        {
            msSQL = " select constructiontype_name from ocs_mst_tconstructiontype where constructiontype_gid='" + constructiontype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tconstructiontype where constructiontype_gid='" + constructiontype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Construction Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Construction Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveConstructionTypeHistory(ApplicationInactiveHistory objapplicationhistory, string constructiontype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tconstructiontypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.constructiontype_gid='" + constructiontype_gid + "' order by a.constructiontypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // SA Type

        public void DaGetSAType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT satype_gid,satype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsatype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.satype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            satype_gid = (dr_datarow["satype_gid"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSAType(application360 values, string employee_gid)
        {
            msSQL = "select satype_gid from ocs_mst_tsatype where satype_name = '" + values.satype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.satype_gid)
                //{
                    values.message = " This SA Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("STAC");
            msGetGid = objcmnfunctions.GetMasterGID("MSAG");
            msSQL = " insert into ocs_mst_tsatype(" +
                    " satype_gid," +
                    " satype_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.satype_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "SA Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditSAType(string satype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT satype_gid,satype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsatype where satype_gid='" + satype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSAType(string employee_gid, application360 values)
        {
            msSQL = "select satype_gid from ocs_mst_tsatype where satype_name = '" + values.satype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.satype_gid)
                {
                    values.message = " This SA Type Already Exists";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tsatype set " +
                 " satype_name='" + values.satype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where satype_gid='" + values.satype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SALG");

                msSQL = " insert into ocs_mst_tsatypelog (" +
                       " satype_LOGgid, " +
                       " satype_gid, " +
                       " satype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.satype_gid + "'," +
                       " '" + values.satype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "SA Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSAType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsatype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where satype_gid='" + values.satype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SAIL");

                msSQL = " insert into ocs_mst_tsatypeinactivelog (" +
                      " satypeinactivelog_gid, " +
                      " satype_gid," +
                      " satype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.satype_gid + "'," +
                      " '" + values.satype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "SA Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "SA Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSAType(string satype_gid, string employee_gid, result values)
        {
            msSQL = " select saentitytype_gid from ocs_mst_tsaentitytype where satype_gid='" + satype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete SA Type, Because it is tagged to SA Entity Type";
                values.status = false;
            }
            else
            {
                msSQL = " select sadocumentlist_gid from ocs_mst_tsadocumentlist where satype_gid='" + satype_gid + "'";
                objODBCDatareader1 = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader1.HasRows == true)
                {
                    objODBCDatareader1.Close();
                    values.message = "Can't able to delete SA Type, Because it is tagged to SA Document List";
                    values.status = false;
                }
                else
                {
                    objODBCDatareader1.Close();
                    msSQL = " select satype_name from ocs_mst_tsatype where satype_gid='" + satype_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tsatype where satype_gid='" + satype_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "SA Type Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'SA Type'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
                }
            }
        }

        public void DaSATypeInactiveLogview(string satype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT satype_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsatypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where satype_gid ='" + satype_gid + "' order by a.satypeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            satype_gid = (dr_datarow["satype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaSATypeList(MdlSATypeList values)
        {
            msSQL = " select satype_gid, satype_name from ocs_mst_tsatype";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_satype = new List<satype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.satype_list = dt_datatable.AsEnumerable().Select(row => new satype_list
                {
                    satype_gid = row["satype_gid"].ToString(),
                    satype_name = row["satype_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // SA Entity Type

        public void DaGetSAEntityType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT saentitytype_gid,saentitytype_name,satype_gid,satype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsaentitytype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.saentitytype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            satype_gid = (dr_datarow["satype_gid"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSAEntityType(application360 values, string employee_gid)
        {
            msSQL = "select saentitytype_gid from ocs_mst_tsaentitytype where saentitytype_name = '" + values.saentitytype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.saentitytype_gid)
                //{
                    values.message = " This SA Entity Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("SETA");
            msGetGid = objcmnfunctions.GetMasterGID("SAEG");
            msSQL = " insert into ocs_mst_tsaentitytype(" +
                    " saentitytype_gid," +
                    " saentitytype_name," +
                    " api_code," +
                    " satype_gid," +
                    " satype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.saentitytype_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.satype_gid + "'," +
                    "'" + values.satype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "SA Entity Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditSAEntityType(string saentitytype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT saentitytype_gid, saentitytype_name, satype_gid,satype_name,lms_code, bureau_code, status as Status" +
                        " FROM ocs_mst_tsaentitytype where saentitytype_gid='" + saentitytype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSAEntityType(string employee_gid, application360 values)
        {
            msSQL = "select saentitytype_gid from ocs_mst_tsaentitytype where saentitytype_name = '" + values.saentitytype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.saentitytype_gid)
                {
                    values.message = " This SA Entity Type Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tsaentitytype set " +
                 " saentitytype_name='" + values.saentitytype_name + "'," +
                 " satype_gid='" + values.satype_gid + "'," +
                 " satype_name='" + values.satype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where saentitytype_gid='" + values.saentitytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SELG");

                msSQL = " insert into ocs_mst_tsaentitytypelog (" +
                       " saentitytype_LOGgid, " +
                       " saentitytype_gid, " +
                       " saentitytype_name," +
                       " satype_gid, " +
                       " satype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.saentitytype_gid + "'," +
                       " '" + values.saentitytype_name.Replace("'", "") + "'," +
                       " '" + values.satype_gid + "'," +
                       " '" + values.satype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "SA Entity Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSAEntityType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsaentitytype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where saentitytype_gid='" + values.saentitytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SEIL");

                msSQL = " insert into ocs_mst_tsaentitytypeinactivelog (" +
                      " saentitytypeinactivelog_gid, " +
                      " saentitytype_gid," +
                      " saentitytype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.saentitytype_gid + "'," +
                      " '" + values.saentitytype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "SA Entity Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "SA Entity Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSAEntityType(string saentitytype_gid, string employee_gid, result values)
        {
            msSQL = " select saentitytype_name from ocs_mst_tsaentitytype where saentitytype_gid='" + saentitytype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsaentitytype where saentitytype_gid='" + saentitytype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "SA Entity Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'SA Entity Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaSAEntityTypeInactiveLogview(string saentitytype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT saentitytype_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsaentitytypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where saentitytype_gid ='" + saentitytype_gid + "' order by a.saentitytypeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // SA Document list 

        public void DaGetSADocumentList(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT sadocumentlist_gid,api_code,sadocumentlist_name,satype_gid,satype_name,saentitytype_gid,saentitytype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsadocumentlist a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.sadocumentlist_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            sadocumentlist_gid = (dr_datarow["sadocumentlist_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            sadocumentlist_name = (dr_datarow["sadocumentlist_name"].ToString()),
                            satype_gid = (dr_datarow["satype_gid"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            saentitytype_gid = (dr_datarow["saentitytype_gid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSADocumentList(application360 values, string employee_gid)
        {
            msSQL = "select sadocumentlist_gid from ocs_mst_tsadocumentlist where sadocumentlist_name = '" + values.sadocumentlist_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.sadocumentlist_gid)
                //{
                    values.message = " This SA Document List Already Exists";
                    values.status = false;
                    return;
                //}
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("SDLG");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("SADL");
            msSQL = " insert into ocs_mst_tsadocumentlist(" +
                    " sadocumentlist_gid," +
                    " api_code," +
                    " sadocumentlist_name," +
                    " satype_gid," +
                    " satype_name," +
                    " saentitytype_gid," +
                    " saentitytype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                     "'" + msGetAPICode + "'," +
                    "'" + values.sadocumentlist_name.Replace("'", "") + "'," +
                    "'" + values.satype_gid + "'," +
                    "'" + values.satype_name.Replace("'", "") + "'," +
                    "'" + values.saentitytype_gid + "'," +
                    "'" + values.saentitytype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "SA Document List Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditSADocumentList(string sadocumentlist_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT sadocumentlist_gid, sadocumentlist_name, satype_gid,satype_name,saentitytype_gid,saentitytype_name,lms_code, bureau_code, status as Status" +
                        " FROM ocs_mst_tsadocumentlist where sadocumentlist_gid='" + sadocumentlist_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.sadocumentlist_gid = objODBCDatareader["sadocumentlist_gid"].ToString();
                    values.sadocumentlist_name = objODBCDatareader["sadocumentlist_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSADocumentList(string employee_gid, application360 values)
        {
            msSQL = "select sadocumentlist_gid from ocs_mst_tsadocumentlist where sadocumentlist_name = '" + values.sadocumentlist_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.sadocumentlist_gid)
                {
                    values.message = " This SA Document List Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tsadocumentlist set " +
                 " sadocumentlist_name='" + values.sadocumentlist_name + "'," +
                 " satype_gid='" + values.satype_gid + "'," +
                 " satype_name='" + values.satype_name.Replace("'", "") + "'," +
                 " saentitytype_gid='" + values.saentitytype_gid + "'," +
                 " saentitytype_name='" + values.saentitytype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where sadocumentlist_gid='" + values.sadocumentlist_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SDLL");

                msSQL = " insert into ocs_mst_tsadocumentlistlog (" +
                       " sadocumentlist_LOGgid, " +
                       " sadocumentlist_gid, " +
                       " sadocumentlist_name," +
                       " satype_gid, " +
                       " satype_name," +
                       " saentitytype_gid, " +
                       " saentitytype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.sadocumentlist_gid + "'," +
                       " '" + values.sadocumentlist_name.Replace("'", "") + "'," +
                       " '" + values.satype_gid + "'," +
                       " '" + values.satype_name.Replace("'", "") + "'," +
                       " '" + values.saentitytype_gid + "'," +
                       " '" + values.saentitytype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "SA Document List Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSADocumentList(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsadocumentlist set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where sadocumentlist_gid='" + values.sadocumentlist_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SDIL");

                msSQL = " insert into ocs_mst_tsadocumentlistinactivelog (" +
                      " sadocumentlistinactivelog_gid, " +
                      " sadocumentlist_gid," +
                      " sadocumentlist_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.sadocumentlist_gid + "'," +
                      " '" + values.sadocumentlist_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "SA Document List Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "SA Document List Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSADocumentList(string sadocumentlist_gid, string employee_gid, result values)
        {
            msSQL = " select sadocumentlist_name from ocs_mst_tsadocumentlist where sadocumentlist_gid='" + sadocumentlist_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tsadocumentlist where sadocumentlist_gid='" + sadocumentlist_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "SA Document List Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'SA Document List'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaSADocumentListInactiveLogview(string sadocumentlist_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT sadocumentlist_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsadocumentlistinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where sadocumentlist_gid ='" + sadocumentlist_gid + "' order by a.sadocumentlistinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            sadocumentlist_gid = (dr_datarow["sadocumentlist_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Loan Purpose

        public void DaGetLoanPurpose(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT loanpurpose_gid,api_code,loanpurpose_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tloanpurpose a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.loanpurpose_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loanpurpose_gid = (dr_datarow["loanpurpose_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            loanpurpose_name = (dr_datarow["loanpurpose_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLoanPurpose(application360 values, string employee_gid)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LNPP");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("LOAP");
                if (values.lms_code == null || values.lms_code == "")
                {
                    lslms_code = "";
                }
                else
                {
                    lslms_code = values.lms_code.Replace("'", "");
                }
                if (values.bureau_code == null || values.bureau_code == "")
                {
                    lsbureau_code = "";
                }
                else
                {
                    lsbureau_code = values.bureau_code.Replace("'", "");
                }
                msSQL = "select loanpurpose_name from ocs_mst_tloanpurpose where loanpurpose_name = '" + values.loanpurpose_name.Replace("'", "\\'") + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.status = false;
                    values.message = "Loan Purpose Already Exist";
                }
                else
                {
                    msSQL = " insert into ocs_mst_tloanpurpose(" +
                       " loanpurpose_gid," +
                        " api_code," +
                       " loanpurpose_name," +
                       " lms_code," +
                       " bureau_code," +
                       " created_by," +
                       " created_date)" +

                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                         "'" + values.loanpurpose_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Loan Purpose Added Successfully";
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occurred While Adding";
                    }
                }
            }

        public void DaEditLoanPurpose(string loanpurpose_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT loanpurpose_gid,loanpurpose_name,lms_code, bureau_code, status as Status FROM ocs_mst_tloanpurpose where loanpurpose_gid='" + loanpurpose_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.loanpurpose_gid = objODBCDatareader["loanpurpose_gid"].ToString();
                    values.loanpurpose_name = objODBCDatareader["loanpurpose_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLoanPurpose(string employee_gid, application360 values)
        {
                msSQL = "select loanpurpose_gid from ocs_mst_tloanpurpose where loanpurpose_name = '" + values.loanpurpose_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.loanpurpose_gid)
                    {
                        values.message = "Loan Purpose Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tloanpurpose set " +
         " loanpurpose_name='" + values.loanpurpose_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where loanpurpose_gid='" + values.loanpurpose_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LOPL");
                msSQL = " insert into ocs_mst_tloanpurposelog (" +
                       " loanpurpose_LOGgid, " +
                       " loanpurpose_gid, " +
                       " loanpurpose_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.loanpurpose_gid + "'," +
                       " '" + values.loanpurpose_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Loan Purpose Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveLoanPurpose(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tloanpurpose set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where loanpurpose_gid='" + values.loanpurpose_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LNPI");

                msSQL = " insert into ocs_mst_tloanpurposeinactivelog (" +
                      " loanpurposeinactivelog_gid, " +
                      " loanpurpose_gid," +
                      " loanpurpose_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.loanpurpose_gid + "'," +
                      " '" + values.loanpurpose_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Loan Purpose Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Loan Purpose Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveLoanPurposeHistory(ApplicationInactiveHistory objapplicationhistory, string loanpurpose_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tloanpurposeinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.loanpurpose_gid='" + loanpurpose_gid + "' order by a.loanpurposeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteLoanPurpose(string loanpurpose_gid, string employee_gid, result values)
        {
            msSQL = "  select loanpurpose_name from ocs_mst_tloanpurpose where loanpurpose_gid='" + loanpurpose_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tloanpurpose where loanpurpose_gid='" + loanpurpose_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Loan Purpose Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Loan Purpose'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Type of Debt

        public void DaGetTypeofDebt(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT typeofdebt_gid,api_code,typeofdebt_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_ttypeofdebt a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.typeofdebt_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            typeofdebt_gid = (dr_datarow["typeofdebt_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            typeofdebt_name = (dr_datarow["typeofdebt_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateTypeofDebt(application360 values, string employee_gid)
            {
            msGetGid = objcmnfunctions.GetMasterGID("TYOD");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TYDT");
               
                if (values.lms_code == null || values.lms_code == "")
                {
                    lslms_code = "";
                }
                else
                {
                    lslms_code = values.lms_code.Replace("'", "");
                }
                if (values.bureau_code == null || values.bureau_code == "")
                {
                    lsbureau_code = "";
                }
                else
                {
                    lsbureau_code = values.bureau_code.Replace("'", "");
                }
                msSQL = "select typeofdebt_name from ocs_mst_ttypeofdebt where typeofdebt_name = '" + values.typeofdebt_name.Replace("'", "\\'") + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.status = false;
                    values.message = "Type of Debt Already Exist";
                }
                else
                {
                    msSQL = " insert into ocs_mst_ttypeofdebt(" +
                       " typeofdebt_gid," +
                       " api_code," +
                       " typeofdebt_name," +
                       " lms_code," +
                       " bureau_code," +
                       " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                         "'" + values.typeofdebt_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Type of Debt Added Successfully";
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occurred While Adding";
                    }
                }

            }
        public void DaEditTypeofDebt(string typeofdebt_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT typeofdebt_gid,typeofdebt_name,lms_code, bureau_code, status as Status FROM ocs_mst_ttypeofdebt where typeofdebt_gid='" + typeofdebt_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.typeofdebt_gid = objODBCDatareader["typeofdebt_gid"].ToString();
                    values.typeofdebt_name = objODBCDatareader["typeofdebt_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateTypeofDebt(string employee_gid, application360 values)
        {
                msSQL = "select typeofdebt_gid from ocs_mst_ttypeofdebt where typeofdebt_name = '" + values.typeofdebt_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.typeofdebt_gid)
                    {
                        values.message = "Type of Debt Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_ttypeofdebt set " +
         " typeofdebt_name='" + values.typeofdebt_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where typeofdebt_gid='" + values.typeofdebt_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("TPOL");
                msSQL = " insert into ocs_mst_ttypeofdebtlog (" +
                       " typeofdebt_LOGgid, " +
                       " typeofdebt_gid, " +
                       " typeofdebt_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.typeofdebt_gid + "'," +
                       " '" + values.typeofdebt_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Type of Debt Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveTypeofDebt(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_ttypeofdebt set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where typeofdebt_gid='" + values.typeofdebt_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("TODI");

                msSQL = " insert into ocs_mst_ttypeofdebtinactivelog (" +
                      " typeofdebtinactivelog_gid, " +
                      " typeofdebt_gid," +
                      " typeofdebt_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.typeofdebt_gid + "'," +
                      " '" + values.typeofdebt_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Type of Debt Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Type of Debt Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveTypeofDebtHistory(ApplicationInactiveHistory objapplicationhistory, string typeofdebt_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_ttypeofdebtinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.typeofdebt_gid='" + typeofdebt_gid + "' order by a.typeofdebtinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteTypeofDebt(string typeofdebt_gid, string employee_gid, result values)
        {
            msSQL = " select typeofdebt_name from ocs_mst_ttypeofdebt where typeofdebt_gid='" + typeofdebt_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_ttypeofdebt where typeofdebt_gid='" + typeofdebt_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Type of Debt Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Type of Debt'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Bank Account Level

        public void DaGetBankAccountLevel(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT bankaccountlevel_gid,api_code,bankaccountlevel_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbankaccountlevel a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.bankaccountlevel_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bankaccountlevel_gid = (dr_datarow["bankaccountlevel_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            bankaccountlevel_name = (dr_datarow["bankaccountlevel_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBankAccountLevel(application360 values, string employee_gid)
            {
                if (values.lms_code == null || values.lms_code == "")
                {
                    lslms_code = "";
                }
                else
                {
                    lslms_code = values.lms_code.Replace("'", "");
                }
                if (values.bureau_code == null || values.bureau_code == "")
                {
                    lsbureau_code = "";
                }
                else
                {
                    lsbureau_code = values.bureau_code.Replace("'", "");
                }
                msSQL = "select bankaccountlevel_name from ocs_mst_tbankaccountlevel where bankaccountlevel_name = '" + values.bankaccountlevel_name.Replace("'", "\\'") + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.status = false;
                    values.message = "Bank Account Level Already Exist";
                }
                else
                {
                    msGetGid = objcmnfunctions.GetMasterGID("MBAL");
                    msGetAPICode = objcmnfunctions.GetApiMasterGID("BANL");
                    msSQL = " insert into ocs_mst_tbankaccountlevel(" +
                            " bankaccountlevel_gid," +
                             " api_code," +
                            " bankaccountlevel_name," +
                            " lms_code," +
                            " bureau_code," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + msGetAPICode + "'," +
                            "'" + values.bankaccountlevel_name.Replace("'", "") + "'," +
                            "'" + lslms_code + "'," +
                            "'" + lsbureau_code + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Bank Account Level Added Successfully";
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occurred While Adding";
                    }
                }
            }
        public void DaEditBankAccountLevel(string bankaccountlevel_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT bankaccountlevel_gid,bankaccountlevel_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbankaccountlevel where bankaccountlevel_gid='" + bankaccountlevel_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.bankaccountlevel_gid = objODBCDatareader["bankaccountlevel_gid"].ToString();
                    values.bankaccountlevel_name = objODBCDatareader["bankaccountlevel_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBankAccountLevel(string employee_gid, application360 values)
        {
                msSQL = "select bankaccountlevel_gid from ocs_mst_tdesignation where bankaccountlevel_name = '" + values.bankaccountlevel_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.bankaccountlevel_gid)
                    {
                        values.message = "Bank Account Level Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbankaccountlevel set " +
                 " bankaccountlevel_name='" + values.bankaccountlevel_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where bankaccountlevel_gid='" + values.bankaccountlevel_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BALL");

                msSQL = " insert into ocs_mst_tbankaccountlevellog (" +
                       " bankaccountlevel_LOGgid, " +
                       " bankaccountlevel_gid, " +
                       " bankaccountlevel_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.bankaccountlevel_gid + "'," +
                       " '" + values.bankaccountlevel_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Bank Account Level Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveBankAccountLevel(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbankaccountlevel set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where bankaccountlevel_gid='" + values.bankaccountlevel_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BAIL");

                msSQL = " insert into ocs_mst_tbankaccountlevelinactivelog (" +
                      " bankaccountlevelinactivelog_gid, " +
                      " bankaccountlevel_gid," +
                      " bankaccountlevel_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.bankaccountlevel_gid + "'," +
                      " '" + values.bankaccountlevel_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Bank Account Level Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Bank Account Level Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteBankAccountLevel(string bankaccountlevel_gid, string employee_gid, result values)
        {
            msSQL = " select buyer2bank_gid from ocs_mst_tbuyer2bank where bankaccountlevel_gid='" + bankaccountlevel_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Bank Account Level, Because it is tagged to Buyer";
                values.status = false;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select bankaccountlevel_name from ocs_mst_tbankaccountlevel where bankaccountlevel_gid='" + bankaccountlevel_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tbankaccountlevel where bankaccountlevel_gid='" + bankaccountlevel_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Bank Account Level Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Bank Account Level'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaBankAccountLevelInactiveLogview(string bankaccountlevel_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT bankaccountlevel_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tbankaccountlevelinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where bankaccountlevel_gid ='" + bankaccountlevel_gid + "' order by a.bankaccountlevelinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bankaccountlevel_gid = (dr_datarow["bankaccountlevel_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Relationship

        public void DaGetRelationship(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT relationship_gid,api_code,relationship_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_trelationship a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.relationship_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            relationship_gid = (dr_datarow["relationship_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            relationship_name = (dr_datarow["relationship_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateRelationship(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select relationship_name from ocs_mst_trelationship where relationship_name = '" + values.relationship_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Relationship name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MRLG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("RELT");
                msSQL = " insert into ocs_mst_trelationship(" +
                        " relationship_gid," +
                         " api_code," +
                        " relationship_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.relationship_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Relationship Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditRelationship(string relationship_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT relationship_gid,relationship_name,lms_code, bureau_code, status as Status FROM ocs_mst_trelationship where relationship_gid='" + relationship_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.relationship_gid = objODBCDatareader["relationship_gid"].ToString();
                    values.relationship_name = objODBCDatareader["relationship_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateRelationship(string employee_gid, application360 values)
        {
            msSQL = "select relationship_gid from ocs_mst_trelationship where relationship_name = '" + values.relationship_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.relationship_gid)
                {
                    values.message = "Relationship Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_trelationship set " +
                 " relationship_name='" + values.relationship_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where relationship_gid='" + values.relationship_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RLLG");

                msSQL = " insert into ocs_mst_trelationshiplog (" +
                       " relationship_LOGgid, " +
                       " relationship_gid, " +
                       " relationship_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.relationship_gid + "'," +
                       " '" + values.relationship_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Relationship Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveRelationship(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_trelationship set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where relationship_gid='" + values.relationship_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RLIL");

                msSQL = " insert into ocs_mst_trelationshipinactivelog (" +
                      " relationshipinactivelog_gid, " +
                      " relationship_gid," +
                      " relationship_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.relationship_gid + "'," +
                      " '" + values.relationship_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Relationship Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Relationship Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteRelationship(string relationship_gid, string employee_gid, result values)
        {
            msSQL = " select relationship_name from ocs_mst_trelationship where relationship_gid='" + relationship_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_trelationship where relationship_gid='" + relationship_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Relationship Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Relationship'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaRelationshipInactiveLogview(string relationship_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT relationship_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_trelationshipinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where relationship_gid ='" + relationship_gid + "' order by a.relationshipinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            relationship_gid = (dr_datarow["relationship_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Samunnati Branch Name

        public void DaGetSamunnatiBranchName(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT samunnatibranch_gid,samunnatibranch_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsamunnatibranchname a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.samunnatibranch_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            samunnatibranch_gid = (dr_datarow["samunnatibranch_gid"].ToString()),
                            samunnatibranch_name = (dr_datarow["samunnatibranch_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSamunnatiBranchName(application360 values, string employee_gid)
        {
            msSQL = "select samunnatibranch_gid from ocs_mst_tsamunnatibranchname where samunnatibranch_name = '" + values.samunnatibranch_name.Replace("'", "") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.samunnatibranch_gid)
                //{
                    values.message = " This Samunnati Branch Name Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BRAC");
            msGetGid = objcmnfunctions.GetMasterGID("SBNG");
            msSQL = " insert into ocs_mst_tsamunnatibranchname(" +
                    " samunnatibranch_gid," +
                    " samunnatibranch_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.samunnatibranch_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Samunnati Branch Name Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditSamunnatiBranchName(string samunnatibranch_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT samunnatibranch_gid,samunnatibranch_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsamunnatibranchname " +
                        " where samunnatibranch_gid='" + samunnatibranch_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.samunnatibranch_gid = objODBCDatareader["samunnatibranch_gid"].ToString();
                    values.samunnatibranch_name = objODBCDatareader["samunnatibranch_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSamunnatiBranchName(string employee_gid, application360 values)
        {
            msSQL = "select samunnatibranch_gid from ocs_mst_tsamunnatibranchname where samunnatibranch_name = '" + values.samunnatibranch_name.Replace("'", "") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.samunnatibranch_gid)
                {
                    values.message = " This Samunnati Branch Name Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tsamunnatibranchname set " +
                 " samunnatibranch_name='" + values.samunnatibranch_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where samunnatibranch_gid='" + values.samunnatibranch_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SBNL");

                msSQL = " insert into ocs_mst_tsamunnatibranchnamelog (" +
                       " samunnatibranch_LOGgid, " +
                       " samunnatibranch_gid, " +
                       " samunnatibranch_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.samunnatibranch_gid + "'," +
                       " '" + values.samunnatibranch_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Samunnati Branch Name Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSamunnatiBranchName(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsamunnatibranchname set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where samunnatibranch_gid='" + values.samunnatibranch_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SBIL");

                msSQL = " insert into ocs_mst_tsamunnatibranchinactivelog (" +
                      " samunnatibranchinactivelog_gid, " +
                      " samunnatibranch_gid," +
                      " samunnatibranch_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.samunnatibranch_gid + "'," +
                      " '" + values.samunnatibranch_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Samunnati Branch Name Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Samunnati Branch Name Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSamunnatiBranchName(string samunnatibranch_gid, string employee_gid, result values)
        {
            msSQL = " select samunnatibranch_name from ocs_mst_tsamunnatibranchname where samunnatibranch_gid='" + samunnatibranch_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsamunnatibranchname where samunnatibranch_gid='" + samunnatibranch_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Samunnati Branch Name Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Samunnati Branch Name'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaSamunnatiBranchNameInactiveLogview(string samunnatibranch_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT samunnatibranch_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsamunnatibranchinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where samunnatibranch_gid ='" + samunnatibranch_gid + "' order by a.samunnatibranchinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            samunnatibranch_gid = (dr_datarow["samunnatibranch_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Samunnati Branch State

        public void DaGetSamunnatiBranchState(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT samunnatibranchstate_gid,api_code,samunnatibranchstate_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsamunnatibranchstate a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.samunnatibranchstate_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            samunnatibranchstate_gid = (dr_datarow["samunnatibranchstate_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            samunnatibranchstate_name = (dr_datarow["samunnatibranchstate_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                           
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSamunnatiBranchState(application360 values, string employee_gid)
        {
            msSQL = "select samunnatibranchstate_gid from ocs_mst_tsamunnatibranchstate where samunnatibranchstate_name = '" + values.samunnatibranchstate_name.Replace("'", "") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.samunnatibranchstate_gid)
                //{
                    values.message = " This Samunnati Branch State Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BSAC");
            msGetGid = objcmnfunctions.GetMasterGID("SBSG");
            msSQL = " insert into ocs_mst_tsamunnatibranchstate(" +
                    " samunnatibranchstate_gid," +
                     " api_code," +
                    " samunnatibranchstate_name," +
                   
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                      "'" + msGetAPICode + "'," +
                    "'" + values.samunnatibranchstate_name.Replace("'", "") + "'," +
                  
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Samunnati Branch State Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditSamunnatiBranchState(string samunnatibranchstate_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT samunnatibranchstate_gid,samunnatibranchstate_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsamunnatibranchstate " +
                        " where samunnatibranchstate_gid='" + samunnatibranchstate_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.samunnatibranchstate_gid = objODBCDatareader["samunnatibranchstate_gid"].ToString();
                    values.samunnatibranchstate_name = objODBCDatareader["samunnatibranchstate_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSamunnatiBranchState(string employee_gid, application360 values)
        {
            msSQL = "select samunnatibranchstate_gid from ocs_mst_tsamunnatibranchstate where samunnatibranchstate_name = '" + values.samunnatibranchstate_name.Replace("'", "") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.samunnatibranchstate_gid)
                {
                    values.message = " This Samunnati Branch State Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tsamunnatibranchstate set " +
                 " samunnatibranchstate_name='" + values.samunnatibranchstate_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where samunnatibranchstate_gid='" + values.samunnatibranchstate_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SBSL");

                msSQL = " insert into ocs_mst_tsamunnatibranchstatelog (" +
                       " samunnatibranchstate_LOGgid, " +
                       " samunnatibranchstate_gid, " +
                       " samunnatibranchstate_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.samunnatibranchstate_gid + "'," +
                       " '" + values.samunnatibranchstate_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Samunnati Branch State Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSamunnatiBranchState(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsamunnatibranchstate set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where samunnatibranchstate_gid='" + values.samunnatibranchstate_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SSIL");

                msSQL = " insert into ocs_mst_tsamunnatibranchstateinactivelog (" +
                      " samunnatibranchstateinactivelog_gid, " +
                      " samunnatibranchstate_gid," +
                      " samunnatibranchstate_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.samunnatibranchstate_gid + "'," +
                      " '" + values.samunnatibranchstate_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Samunnati Branch State Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Samunnati Branch State Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSamunnatiBranchState(string samunnatibranchstate_gid, string employee_gid, result values)
        {
            msSQL = " select samunnatibranchstate_name from ocs_mst_tsamunnatibranchstate where samunnatibranchstate_gid='" + samunnatibranchstate_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsamunnatibranchstate where samunnatibranchstate_gid='" + samunnatibranchstate_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Samunnati Branch State Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Samunnati Branch State'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaSamunnatiBranchStateInactiveLogview(string samunnatibranchstate_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT samunnatibranchstate_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsamunnatibranchstateinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where samunnatibranchstate_gid ='" + samunnatibranchstate_gid + "' order by a.samunnatibranchstateinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            samunnatibranchstate_gid = (dr_datarow["samunnatibranchstate_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Genetic Code

        public void DaGetGeneticCode(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT geneticcode_gid,api_code,geneticcode_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tgeneticcode a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.geneticcode_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGeneticCode(application360 values, string employee_gid)
        {
            msSQL = "select geneticcode_gid from ocs_mst_tgeneticcode where geneticcode_name = '" + values.geneticcode_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.geneticcode_gid)
                //{
                    values.message = " This Genetic Code Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("MGCC");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("GENC");
            msSQL = " insert into ocs_mst_tgeneticcode(" +
                    " geneticcode_gid," +
                    " api_code," +
                    " geneticcode_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.geneticcode_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Genetic Code Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditGeneticCode(string geneticcode_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT geneticcode_gid,geneticcode_name,lms_code, bureau_code, status as Status FROM ocs_mst_tgeneticcode " +
                        " where geneticcode_gid='" + geneticcode_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.geneticcode_gid = objODBCDatareader["geneticcode_gid"].ToString();
                    values.geneticcode_name = objODBCDatareader["geneticcode_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateGeneticCode(string employee_gid, application360 values)
        {
            msSQL = "select geneticcode_gid from ocs_mst_tgeneticcode where geneticcode_name = '" + values.geneticcode_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.geneticcode_gid)
                {
                    values.message = " This Genetic Code Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tgeneticcode set " +
                 " geneticcode_name='" + values.geneticcode_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where geneticcode_gid='" + values.geneticcode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MGCL");

                msSQL = " insert into ocs_mst_tgeneticcodelog (" +
                       " geneticcode_LOGgid, " +
                       " geneticcode_gid, " +
                       " geneticcode_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.geneticcode_gid + "'," +
                       " '" + values.geneticcode_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Genetic Code Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveGeneticCode(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tgeneticcode set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks + "'" +
                    " where geneticcode_gid='" + values.geneticcode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("GCIL");

                msSQL = " insert into ocs_mst_tgeneticcodeinactivelog (" +
                      " geneticcodeinactivelog_gid, " +
                      " geneticcode_gid," +
                      " geneticcode_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.geneticcode_gid + "'," +
                      " '" + values.geneticcode_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Genetic Code Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Genetic Code Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteGeneticCode(string geneticcode_gid, string employee_gid, result values)
        {
            msSQL = " select application2geneticcode_gid from ocs_mst_tapplication2geneticcode where geneticcode_gid='" + geneticcode_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Genetic Code, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select geneticcode_name from ocs_mst_tgeneticcode where geneticcode_gid='" + geneticcode_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tgeneticcode where geneticcode_gid='" + geneticcode_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Genetic Code Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Genetic Code'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaGeneticCodeInactiveLogview(string geneticcode_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT geneticcode_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tgeneticcodeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where geneticcode_gid ='" + geneticcode_gid + "' order by a.geneticcodeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Gender

        public void DaGetGender(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT gender_gid,api_code,gender_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tgender a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.gender_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            gender_gid = (dr_datarow["gender_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            gender_name = (dr_datarow["gender_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGender(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            //string bureau_code, gender_name, lms_code;

            //msSQL = " SELECT lms_code,bureau_code,gender_name FROM ocs_mst_tgender ";

            //dt_datatable = objdbconn.GetDataTable(msSQL);
            ////var getSegment = new List<CalendarGroupComparison_List>();

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {

            //        //getSegment.Add(new EncoreProductComparison_List
            //        //{

            //        lms_code = (dr_datarow["lms_code"].ToString());
            //        bureau_code = (dr_datarow["bureau_code"].ToString());
            //        gender_name = (dr_datarow["gender_name"].ToString());

            //        if (lms_code == lslms_code && bureau_code == lsbureau_code && gender_name == values.gender_name)
            //        {
            //            values.message = "This Gender Already Exists";
            //            values.status = false;
            //            return;
            //        }
            //    }

            //    dt_datatable.Dispose();
            //}
            msSQL = "select gender_name from ocs_mst_tgender where gender_name = '" + values.gender_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Gender Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MGEG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("GEND");
                msSQL = " insert into ocs_mst_tgender(" +
                        " gender_gid," +
                        " api_code," +
                        " gender_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.gender_name.Replace("'", "\\'") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Gender Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditGender(string gender_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT gender_gid,gender_name,lms_code, bureau_code, status as Status FROM ocs_mst_tgender " +
                        " where gender_gid='" + gender_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.gender_gid = objODBCDatareader["gender_gid"].ToString();
                    values.gender_name = objODBCDatareader["gender_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateGender(string employee_gid, application360 values)
        {
            msSQL = "select gender_gid from ocs_mst_tgender where gender_name = '" + values.gender_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.gender_gid)
                {
                    values.message = "Gender Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            //string bureau_code, gender_name, lms_code, lsscalarvalue;

            //msSQL = " SELECT gender_name FROM ocs_mst_tgender where gender_gid='" + values.gender_gid + "' ";
            //lsscalarvalue = objdbconn.GetExecuteScalar(msSQL);

            //msSQL = " SELECT lms_code,bureau_code,gender_name FROM ocs_mst_tgender ";

            //dt_datatable = objdbconn.GetDataTable(msSQL);
            ////var getSegment = new List<CalendarGroupComparison_List>();

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {

            //        //getSegment.Add(new EncoreProductComparison_List
            //        //{

            //        lms_code = (dr_datarow["lms_code"].ToString());
            //        bureau_code = (dr_datarow["bureau_code"].ToString());
            //        gender_name = (dr_datarow["gender_name"].ToString());

            //        if (lms_code == lslms_code && bureau_code == lsbureau_code && gender_name == values.gender_name)
            //        {
            //            values.message = "This Gender Already Exists";
            //            values.status = false;
            //            return;
            //        }
            //    }

            //    dt_datatable.Dispose();
            //}
            msSQL = " update ocs_mst_tgender set " +
                 " gender_name='" + values.gender_name.Replace("'", "\\'") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where gender_gid='" + values.gender_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MGLG");

                msSQL = " insert into ocs_mst_tgenderlog (" +
                       " gender_LOGgid, " +
                       " gender_gid, " +
                       " gender_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.gender_gid + "'," +
                       " '" + values.gender_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Gender Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveGender(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tgender set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where gender_gid='" + values.gender_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MGIL");

                msSQL = " insert into ocs_mst_tgenderinactivelog (" +
                      " genderinactivelog_gid, " +
                      " gender_gid," +
                      " gender_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.gender_gid + "'," +
                      " '" + values.gender_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Gender Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Gender Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteGender(string gender_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where gender_gid = '" + gender_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Gender, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();

                msSQL = " select gender_name from ocs_mst_tgender where gender_gid='" + gender_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tgender where gender_gid='" + gender_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Gender Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Gender'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaGenderInactiveLogview(string gender_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT gender_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tgenderinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where gender_gid ='" + gender_gid + "' order by a.genderinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            gender_gid = (dr_datarow["gender_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Vernacular language

        public void DaGetVernacularLanguage(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT vernacularlanguage_gid,api_code,vernacular_language,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tvernacularlanguage a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.vernacularlanguage_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            vernacularlanguage_gid = (dr_datarow["vernacularlanguage_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            vernacular_language = (dr_datarow["vernacular_language"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateVernacularLanguage(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select vernacular_language from ocs_mst_tvernacularlanguage where vernacular_language = '" + values.vernacular_language.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Vernacular Language Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("VLST");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("VERL");
                msSQL = " insert into ocs_mst_tvernacularlanguage(" +
                        " vernacularlanguage_gid," +
                        " api_code," +
                        " vernacular_language," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.vernacular_language.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Vernacular Language Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditVernacularLanguage(string vernacularlanguage_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT vernacularlanguage_gid,vernacular_language,lms_code, bureau_code, status as Status FROM ocs_mst_tvernacularlanguage " +
                        " where vernacularlanguage_gid='" + vernacularlanguage_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.vernacularlanguage_gid = objODBCDatareader["vernacularlanguage_gid"].ToString();
                    values.vernacular_language = objODBCDatareader["vernacular_language"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateVernacularLanguage(string employee_gid, application360 values)
        {
            msSQL = "select vernacularlanguage_gid from ocs_mst_tvernacularlanguage where vernacular_language = '" + values.vernacular_language.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.vernacularlanguage_gid)
                {
                    values.message = "Vernacular Language Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tvernacularlanguage set " +
                 " vernacular_language='" + values.vernacular_language.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where vernacularlanguage_gid='" + values.vernacularlanguage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("VLML");

                msSQL = " insert into ocs_mst_tvernacularlanguagelog (" +
                       " vernacularlanguage_LOGgid , " +
                       " vernacularlanguage_gid, " +
                       " vernacular_language," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.vernacularlanguage_gid + "'," +
                       " '" + values.vernacular_language.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Vernacular Language Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveVernacularLanguage(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tvernacularlanguage set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where vernacularlanguage_gid='" + values.vernacularlanguage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("VLST");

                msSQL = " insert into ocs_mst_tvernacularlanguageinactivelog (" +
                      " vernacularlanguageinactivelog_gid , " +
                      " vernacularlanguage_gid," +
                      " vernacular_language," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.vernacularlanguage_gid + "'," +
                      " '" + values.vernacular_language + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Vernacular Language Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Vernacular Language Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteVernacularLanguage(string vernacularlanguage_gid, string employee_gid, result values)
        {

            msSQL = " select application_gid from ocs_mst_tapplication where vernacularlanguage_gid='" + vernacularlanguage_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Vernacular Language, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                msSQL = " select vernacular_language from ocs_mst_tvernacularlanguage where vernacularlanguage_gid='" + vernacularlanguage_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                objODBCDatareader.Close();
                msSQL = " delete from ocs_mst_tvernacularlanguage where vernacularlanguage_gid='" + vernacularlanguage_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Vernacular Language Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Vernacular Language'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaVernacularLanguageInactiveLogview(string vernacularlanguage_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT vernacularlanguage_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tvernacularlanguageinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where vernacularlanguage_gid ='" + vernacularlanguage_gid + "' order by a.vernacularlanguageinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            vernacularlanguage_gid = (dr_datarow["vernacularlanguage_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }

        //credit underwriting

        public void DaGetCreditUnderwritingFacilityType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT creditunderwritingfacilitytype_gid,credit_underwriting_facility_type,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcreditunderwritingfacilitytype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.creditunderwritingfacilitytype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditunderwritingfacilitytype_gid = (dr_datarow["creditunderwritingfacilitytype_gid"].ToString()),
                            credit_underwriting_facility_type = (dr_datarow["credit_underwriting_facility_type"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCreditUnderwritingFacilityType(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("FTAC");
            msGetGid = objcmnfunctions.GetMasterGID("CFST");
            msSQL = " insert into ocs_mst_tcreditunderwritingfacilitytype(" +
                    " creditunderwritingfacilitytype_gid," +
                    " credit_underwriting_facility_type," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.credit_underwriting_facility_type.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Underwriting Facility Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditCreditUnderwritingFacilityType(string creditunderwritingfacilitytype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT creditunderwritingfacilitytype_gid,credit_underwriting_facility_type,lms_code, bureau_code, status as Status FROM ocs_mst_tcreditunderwritingfacilitytype " +
                        " where creditunderwritingfacilitytype_gid='" + creditunderwritingfacilitytype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.creditunderwritingfacilitytype_gid = objODBCDatareader["creditunderwritingfacilitytype_gid"].ToString();
                    values.credit_underwriting_facility_type = objODBCDatareader["credit_underwriting_facility_type"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCreditUnderwritingFacilityType(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcreditunderwritingfacilitytype set " +
                 " credit_underwriting_facility_type='" + values.credit_underwriting_facility_type.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where creditunderwritingfacilitytype_gid='" + values.creditunderwritingfacilitytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CFML");

                msSQL = " insert into ocs_mst_tcreditunderwritingfacilitytypelog (" +
                       " creditunderwritingfacilitytype_LOGgid , " +
                       " creditunderwritingfacilitytype_gid, " +
                       " credit_underwriting_facility_type," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.creditunderwritingfacilitytype_gid + "'," +
                       " '" + values.credit_underwriting_facility_type.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Underwriting Facility Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveCreditUnderwritingFacilityType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcreditunderwritingfacilitytype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where creditunderwritingfacilitytype_gid='" + values.creditunderwritingfacilitytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CFSI");

                msSQL = " insert into ocs_mst_tcreditunderwritingfacilitytypeinactivelog (" +
                      " creditunderwritingfacilitytypeinactivelog_gid , " +
                      " creditunderwritingfacilitytype_gid," +
                      " credit_underwriting_facility_type," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.creditunderwritingfacilitytype_gid + "'," +
                      " '" + values.credit_underwriting_facility_type + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Underwriting Facility Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Underwriting Facility Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteCreditUnderwritingFacilityType(string creditunderwritingfacilitytype_gid, string employee_gid, result values)
        {
            msSQL = " select credit_underwriting_facility_type from ocs_mst_tcreditunderwritingfacilitytype where creditunderwritingfacilitytype_gid='" + creditunderwritingfacilitytype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcreditunderwritingfacilitytype where creditunderwritingfacilitytype_gid='" + creditunderwritingfacilitytype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Underwriting Facility Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Underwriting Facility Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCreditUnderwritingFacilityTypeInactiveLogview(string creditunderwritingfacilitytype_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT creditunderwritingfacilitytype_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcreditunderwritingfacilitytypeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where creditunderwritingfacilitytype_gid ='" + creditunderwritingfacilitytype_gid + "' order by a.creditunderwritingfacilitytypeinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditunderwritingfacilitytype_gid = (dr_datarow["creditunderwritingfacilitytype_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }

        // Marital Status

        public void DaGetMaritalStatus(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT maritalstatus_gid,api_code,maritalstatus_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tmaritalstatus a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.maritalstatus_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            maritalstatus_gid = (dr_datarow["maritalstatus_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            maritalstatus_name = (dr_datarow["maritalstatus_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetMaritalStatusActive(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT maritalstatus_gid,maritalstatus_name FROM ocs_mst_tmaritalstatus where status='Y' order by maritalstatus_gid desc ";
                        
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            maritalstatus_gid = (dr_datarow["maritalstatus_gid"].ToString()),
                            maritalstatus_name = (dr_datarow["maritalstatus_name"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateMaritalStatus(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            msSQL = "select maritalstatus_name from ocs_mst_tmaritalstatus where maritalstatus_name = '" + values.maritalstatus_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Marital Status Already Exist";
            }
            else
            {
                //string bureau_code, lms_code, maritalstatus_name;

                //msSQL = " SELECT lms_code,bureau_code,maritalstatus_name FROM ocs_mst_tmaritalstatus ";

                //dt_datatable = objdbconn.GetDataTable(msSQL);
                ////var getSegment = new List<CalendarGroupComparison_List>();

                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {

                //        //getSegment.Add(new EncoreProductComparison_List
                //        //{

                //        lms_code = (dr_datarow["lms_code"].ToString());
                //        bureau_code = (dr_datarow["bureau_code"].ToString());
                //        maritalstatus_name = (dr_datarow["maritalstatus_name"].ToString());

                //        if (lms_code == lslms_code && bureau_code == lsbureau_code && maritalstatus_name == values.maritalstatus_name)
                //        {
                //            values.message = "This Marital Status Already Exists";
                //            values.status = false;
                //            return;
                //        }
                //    }

                //    dt_datatable.Dispose();
                //}
                msGetGid = objcmnfunctions.GetMasterGID("MMSG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("MARS");
                msSQL = " insert into ocs_mst_tmaritalstatus(" +
                        " maritalstatus_gid," +
                        " api_code," +
                        " maritalstatus_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.maritalstatus_name.Replace("'", "\\'") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Marital Status Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditMaritalStatus(string maritalstatus_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT maritalstatus_gid,maritalstatus_name,lms_code, bureau_code, status as Status FROM ocs_mst_tmaritalstatus " +
                        " where maritalstatus_gid='" + maritalstatus_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.maritalstatus_gid = objODBCDatareader["maritalstatus_gid"].ToString();
                    values.maritalstatus_name = objODBCDatareader["maritalstatus_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateMaritalStatus(string employee_gid, application360 values)
        {
            msSQL = "select maritalstatus_gid from ocs_mst_tmaritalstatus where maritalstatus_name = '" + values.maritalstatus_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.maritalstatus_gid)
                {
                    values.message = "Marital Status Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            //string bureau_code, maritalstatus_name, lms_code, lsscalarvalue;

            ////msSQL = " SELECT maritalstatus_name FROM ocs_mst_tmaritalstatus where maritalstatus_gid='" + values.maritalstatus_gid + "' ";
            ////lsscalarvalue = objdbconn.GetExecuteScalar(msSQL);

            //msSQL = " SELECT lms_code,bureau_code,maritalstatus_name FROM ocs_mst_tmaritalstatus ";

            //dt_datatable = objdbconn.GetDataTable(msSQL);
            ////var getSegment = new List<CalendarGroupComparison_List>();

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {

            //        //getSegment.Add(new EncoreProductComparison_List
            //        //{

            //        lms_code = (dr_datarow["lms_code"].ToString());
            //        bureau_code = (dr_datarow["bureau_code"].ToString());
            //        maritalstatus_name = (dr_datarow["maritalstatus_name"].ToString());

            //        if (lms_code == lslms_code && bureau_code == lsbureau_code && maritalstatus_name == values.maritalstatus_name)
            //        {
            //            values.message = "This Marital Status Already Exists";
            //            values.status = false;
            //            return;
            //        }
            //    }

            //    dt_datatable.Dispose();
            //}

            msSQL = " update ocs_mst_tmaritalstatus set " +
                 " maritalstatus_name='" + values.maritalstatus_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where maritalstatus_gid='" + values.maritalstatus_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSLG");

                msSQL = " insert into ocs_mst_tmaritalstatuslog (" +
                       " maritalstatus_LOGgid, " +
                       " maritalstatus_gid, " +
                       " maritalstatus_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.maritalstatus_gid + "'," +
                       " '" + values.maritalstatus_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Marital Status Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveMaritalStatus(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tmaritalstatus set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where maritalstatus_gid='" + values.maritalstatus_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSIL");

                msSQL = " insert into ocs_mst_tmaritalstatusinactivelog (" +
                      " maritalstatusinactivelog_gid, " +
                      " maritalstatus_gid," +
                      " maritalstatus_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.maritalstatus_gid + "'," +
                      " '" + values.maritalstatus_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Marital Status Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Marital Status Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteMaritalStatus(string maritalstatus_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where maritalstatus_gid = '" + maritalstatus_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Marital Status, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select maritalstatus_name from ocs_mst_tmaritalstatus where maritalstatus_gid='" + maritalstatus_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tmaritalstatus where maritalstatus_gid='" + maritalstatus_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Marital Status Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Marital Status'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaMaritalStatusInactiveLogview(string maritalstatus_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT maritalstatus_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tmaritalstatusinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where maritalstatus_gid ='" + maritalstatus_gid + "' order by a.maritalstatusinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            maritalstatus_gid = (dr_datarow["maritalstatus_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Educational Qualification

        public void DaGetEducationalQualification(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT educationalqualification_gid,api_code,educationalqualification_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_teducationalqualification a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.educationalqualification_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            educationalqualification_gid = (dr_datarow["educationalqualification_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            educationalqualification_name = (dr_datarow["educationalqualification_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateEducationalQualification(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            msSQL = "select educationalqualification_name from ocs_mst_teducationalqualification where educationalqualification_name = '" + values.educationalqualification_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Educational Qualification Already Exist";
            }
            else
            {
                
                msGetGid = objcmnfunctions.GetMasterGID("MEQG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("EDUQ");
                msSQL = " insert into ocs_mst_teducationalqualification(" +
                        " educationalqualification_gid," +
                        " api_code," +
                        " educationalqualification_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.educationalqualification_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Educational Qualification Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditEducationalQualification(string educationalqualification_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT educationalqualification_gid,educationalqualification_name,lms_code, bureau_code, status as Status FROM ocs_mst_teducationalqualification " +
                        " where educationalqualification_gid='" + educationalqualification_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.educationalqualification_gid = objODBCDatareader["educationalqualification_gid"].ToString();
                    values.educationalqualification_name = objODBCDatareader["educationalqualification_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateEducationalQualification(string employee_gid, application360 values)
        {
            msSQL = "select educationalqualification_gid from ocs_mst_teducationalqualification where educationalqualification_name = '" + values.educationalqualification_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.educationalqualification_gid)
                {
                    values.message = "Educational Qualification Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            
            msSQL = " update ocs_mst_teducationalqualification set " +
                 " educationalqualification_name='" + values.educationalqualification_name.Replace("'", "\\'") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where educationalqualification_gid='" + values.educationalqualification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("EQLG");

                msSQL = " insert into ocs_mst_teducationalqualificationlog (" +
                       " educationalqualification_LOGgid, " +
                       " educationalqualification_gid, " +
                       " educationalqualification_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.educationalqualification_gid + "'," +
                       " '" + values.educationalqualification_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Educational Qualification Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveEducationalQualification(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_teducationalqualification set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where educationalqualification_gid='" + values.educationalqualification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("EQIL");

                msSQL = " insert into ocs_mst_teducationalqualificationinactivelog (" +
                      " educationalqualificationinactivelog_gid, " +
                      " educationalqualification_gid," +
                      " educationalqualification_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.educationalqualification_gid + "'," +
                      " '" + values.educationalqualification_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Educational Qualification Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Educational Qualification Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteEducationalQualification(string educationalqualification_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where educationalqualification_gid = '" + educationalqualification_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Educational Qualification, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select educationalqualification_name from ocs_mst_teducationalqualification where educationalqualification_gid='" + educationalqualification_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_teducationalqualification where educationalqualification_gid='" + educationalqualification_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Educational Qualification Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Educational Qualification'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaEducationalQualificationInactiveLogview(string educationalqualification_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT educationalqualification_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_teducationalqualificationinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where educationalqualification_gid ='" + educationalqualification_gid + "' order by a.educationalqualificationinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            educationalqualification_gid = (dr_datarow["educationalqualification_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Guarantee Coverage

        public void DaGetGuaranteeCoverage(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT guaranteecoverage_gid,api_code,guaranteecoverage_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tguaranteecoverage a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.guaranteecoverage_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            guaranteecoverage_gid = (dr_datarow["guaranteecoverage_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            guaranteecoverage_name = (dr_datarow["guaranteecoverage_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGuaranteeCoverage(application360 values, string employee_gid)
                {
                    if (values.lms_code == null || values.lms_code == "")
                    {
                        lslms_code = "";
                    }
                    else
                    {
                        lslms_code = values.lms_code.Replace("'", "");
                    }
                    if (values.bureau_code == null || values.bureau_code == "")
                    {
                        lsbureau_code = "";
                    }
                    else
                    {
                        lsbureau_code = values.bureau_code.Replace("'", "");
                    }
                    msSQL = "select guaranteecoverage_name from ocs_mst_tguaranteecoverage where guaranteecoverage_name = '" + values.guaranteecoverage_name.Replace("'", "\\'") + "' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.status = false;
                        values.message = "Guarantee Coverage Already Exist";
                    }
                    else
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("MGCG");
                        msGetAPICode = objcmnfunctions.GetApiMasterGID("GUAC");
                        msSQL = " insert into ocs_mst_tguaranteecoverage(" +
                                " guaranteecoverage_gid," +
                                " api_code," +
                                " guaranteecoverage_name," +
                                " lms_code," +
                                " bureau_code," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + msGetAPICode + "'," +
                                "'" + values.guaranteecoverage_name.Replace("'", "") + "'," +
                                "'" + lslms_code + "'," +
                                "'" + lsbureau_code + "'," +
                                "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult != 0)
                        {
                            values.status = true;
                            values.message = "Guarantee Coverage Added Successfully";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occurred While Adding";
                        }
                    }
                }
        public void DaEditGuaranteeCoverage(string guaranteecoverage_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT guaranteecoverage_gid,guaranteecoverage_name,lms_code, bureau_code, status as Status FROM ocs_mst_tguaranteecoverage " +
                        " where guaranteecoverage_gid='" + guaranteecoverage_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.guaranteecoverage_gid = objODBCDatareader["guaranteecoverage_gid"].ToString();
                    values.guaranteecoverage_name = objODBCDatareader["guaranteecoverage_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateGuaranteeCoverage(string employee_gid, application360 values)
        {
                    msSQL = "select guaranteecoverage_gid from ocs_mst_tguaranteecoverage where guaranteecoverage_name = '" + values.guaranteecoverage_name.Replace("'", "\\'") + "'";
                    lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentgid != "")
                    {
                        if (lsdocumentgid != values.guaranteecoverage_gid)
                        {
                            values.message = "Guarantee Coverage Already Exist";
                            values.status = false;
                            return;
                        }
                    }
                    if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tguaranteecoverage set " +
                 " guaranteecoverage_name='" + values.guaranteecoverage_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where guaranteecoverage_gid='" + values.guaranteecoverage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("GCLG");

                msSQL = " insert into ocs_mst_tguaranteecoveragelog (" +
                       " guaranteecoverage_LOGgid, " +
                       " guaranteecoverage_gid, " +
                       " guaranteecoverage_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.guaranteecoverage_gid + "'," +
                       " '" + values.guaranteecoverage_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Guarantee Coverage Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveGuaranteeCoverage(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tguaranteecoverage set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where guaranteecoverage_gid='" + values.guaranteecoverage_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("GILG");

                msSQL = " insert into ocs_mst_tguaranteecoverageinactivelog (" +
                      " guaranteecoverageinactivelog_gid, " +
                      " guaranteecoverage_gid," +
                      " guaranteecoverage_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.guaranteecoverage_gid + "'," +
                      " '" + values.guaranteecoverage_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Guarantee Coverage Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Guarantee Coverage Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteGuaranteeCoverage(string guaranteecoverage_gid, string employee_gid, result values)
        {
            msSQL = " select guaranteecoverage_name from ocs_mst_tguaranteecoverage where guaranteecoverage_gid='" + guaranteecoverage_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tguaranteecoverage where guaranteecoverage_gid='" + guaranteecoverage_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Guarantee Coverage Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Guarantee Coverage'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaGuaranteeCoverageInactiveLogview(string guaranteecoverage_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT guaranteecoverage_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tguaranteecoverageinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where guaranteecoverage_gid ='" + guaranteecoverage_gid + "' order by a.guaranteecoverageinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            guaranteecoverage_gid = (dr_datarow["guaranteecoverage_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaInactiveCompanyDocument(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcompanydocument set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where companydocument_gid='" + values.companydocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPDI");

                msSQL = " insert into ocs_mst_tcompanydocumentinactivelog (" +
                      " companydocumentinactivelog_gid, " +
                      " companydocument_gid," +
                      " companydocument_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.companydocument_gid + "'," +
                      " '" + values.companydocument_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Company Document Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Company Document Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveCompanyDocumentHistory(ApplicationInactiveHistory objapplicationhistory, string companydocument_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tcompanydocumentinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.companydocument_gid='" + companydocument_gid + "' order by a.companydocumentinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteCompanyDocument(string companydocument_gid, string employee_gid, result values)
        {
            msSQL = " select companydocument_name from ocs_mst_tcompanydocument where companydocument_gid='" + companydocument_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcompanydocument where companydocument_gid='" + companydocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Company Document Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Company Document'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Area Type

        public void DaGetAreaType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT areatype_gid,api_code,areatype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tareatype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.areatype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            areatype_gid = (dr_datarow["areatype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            areatype_name = (dr_datarow["areatype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAreaType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MART");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("ARET");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select areatype_name from ocs_mst_tareatype where areatype_name = '" + values.areatype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Area Type Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tareatype(" +
                    " areatype_gid," +
                    " api_code," +
                    " areatype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.areatype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Area Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditAreaType(string areatype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT areatype_gid,areatype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tareatype where areatype_gid='" + areatype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.areatype_gid = objODBCDatareader["areatype_gid"].ToString();
                    values.areatype_name = objODBCDatareader["areatype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateAreaType(string employee_gid, application360 values)
        {
            msSQL = "select areatype_gid from ocs_mst_tareatype where areatype_name = '" + values.areatype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.areatype_gid)
                {
                    values.message = "Area Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tareatype set " +
                 " areatype_name='" + values.areatype_name + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where areatype_gid='" + values.areatype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ARTL");

                msSQL = " insert into ocs_mst_tareatypelog (" +
                       " areatypelog_gid, " +
                       " areatype_gid, " +
                       " areatype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.areatype_gid + "'," +
                       " '" + values.areatype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Area Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Area Type";
            }
        }

        public void DaInactiveAreaType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tareatype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where areatype_gid='" + values.areatype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATIL");

                msSQL = " insert into ocs_mst_tareatypeinactivelog (" +
                      " areatypeinactivelog_gid, " +
                      " areatype_gid," +
                      " areatype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.areatype_gid + "'," +
                      " '" + values.areatype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Area Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Area Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteAreaType(string areatype_gid, string employee_gid, result values)
        {
            msSQL = " select areatype_name from ocs_mst_tareatype where areatype_gid='" + areatype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tareatype where areatype_gid='" + areatype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Area Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Area Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveAreaTypeHistory(ApplicationInactiveHistory objapplicationhistory, string areatype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tareatypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.areatype_gid='" + areatype_gid + "' order by a.areatypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Religion

        public void DaGetReligion(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT religion_gid,api_code,religion_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_treligion a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.religion_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            religion_gid = (dr_datarow["religion_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            religion_name = (dr_datarow["religion_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateReligion(application360 values, string employee_gid)
        {

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            msSQL = "select religion_name from ocs_mst_treligion where religion_name = '" + values.religion_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Religion name Already Exist";
            }
            else
            {
                //string bureau_code, religion_name, lms_code;

                //msSQL = " SELECT lms_code,bureau_code,religion_name FROM ocs_mst_treligion ";

                //dt_datatable = objdbconn.GetDataTable(msSQL);
                ////var getSegment = new List<CalendarGroupComparison_List>();

                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {

                //        //getSegment.Add(new EncoreProductComparison_List
                //        //{

                //        lms_code = (dr_datarow["lms_code"].ToString());
                //        bureau_code = (dr_datarow["bureau_code"].ToString());
                //        religion_name = (dr_datarow["religion_name"].ToString());

                //        if (lms_code == lslms_code && bureau_code == lsbureau_code && religion_name == values.religion_name)
                //        {
                //            values.message = "This Religion Already Exists";
                //            values.status = false;
                //            return;
                //        }
                //    }

                //    dt_datatable.Dispose();
                //}

                msGetGid = objcmnfunctions.GetMasterGID("MRLN");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("RELG");
                msSQL = " insert into ocs_mst_treligion(" +
                        " religion_gid," +
                        " api_code," +
                        " religion_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.religion_name.Replace("'", "\\'") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Religion Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditReligion(string religion_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT religion_gid,religion_name,lms_code, bureau_code, status as Status FROM ocs_mst_treligion where religion_gid='" + religion_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.religion_gid = objODBCDatareader["religion_gid"].ToString();
                    values.religion_name = objODBCDatareader["religion_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateReligion(string employee_gid, application360 values)
        {
            msSQL = "select religion_gid from ocs_mst_treligion where religion_name = '" + values.religion_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.religion_gid)
                {
                    values.message = "Religion Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            //string bureau_code, religion_name, lms_code;

            //msSQL = " SELECT lms_code,bureau_code,religion_name FROM ocs_mst_treligion ";

            //dt_datatable = objdbconn.GetDataTable(msSQL);
            ////var getSegment = new List<CalendarGroupComparison_List>();

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {

            //        //getSegment.Add(new EncoreProductComparison_List
            //        //{

            //        lms_code = (dr_datarow["lms_code"].ToString());
            //        bureau_code = (dr_datarow["bureau_code"].ToString());
            //        religion_name = (dr_datarow["religion_name"].ToString());

            //        if (lms_code == lslms_code && bureau_code == lsbureau_code && religion_name == values.religion_name)
            //        {
            //            values.message = "This Religion Already Exists";
            //            values.status = false;
            //            return;
            //        }
            //    }

            //    dt_datatable.Dispose();
            //}

            msSQL = " update ocs_mst_treligion set " +
                 " religion_name='" + values.religion_name.Replace("'", "\\'") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where religion_gid='" + values.religion_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RLNL");

                msSQL = " insert into ocs_mst_treligionlog (" +
                       " religionlog_gid, " +
                       " religion_gid, " +
                       " religion_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.religion_gid + "'," +
                       " '" + values.religion_name.Replace("'", "\\'") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Religion Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Religion";
            }
        }

        public void DaInactiveReligion(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_treligion set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where religion_gid='" + values.religion_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RLIL");

                msSQL = " insert into ocs_mst_treligioninactivelog (" +
                      " religioninactivelog_gid, " +
                      " religion_gid," +
                      " religion_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.religion_gid + "'," +
                      " '" + values.religion_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Religion Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Religion Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteReligion(string religion_gid, string employee_gid, result values)
        {

            msSQL = " select religion_name from ocs_mst_treligion where religion_gid='" + religion_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_treligion where religion_gid='" + religion_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Religion Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Religion'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveReligionHistory(ApplicationInactiveHistory objapplicationhistory, string religion_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_treligioninactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.religion_gid='" + religion_gid + "' order by a.religioninactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Assessment Agency

        public void DaGetAssessmentAgency(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT assessmentagency_gid,api_code,assessmentagency_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tassessmentagency a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.assessmentagency_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            assessmentagency_gid = (dr_datarow["assessmentagency_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            assessmentagency_name = (dr_datarow["assessmentagency_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAssessmentAgency(application360 values, string employee_gid)
        {
            msSQL = "select assessmentagency_gid from ocs_mst_tassessmentagency where assessmentagency_name = '" + values.assessmentagency_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.assessmentagency_gid)
                //{
                    values.message = " This Assessment Agency Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("MAAG");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("AAGR");
            msSQL = " insert into ocs_mst_tassessmentagency(" +
                    " assessmentagency_gid," +
                     " api_code," +
                    " assessmentagency_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.assessmentagency_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Assessment Agency Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditAssessmentAgency(string assessmentagency_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT assessmentagency_gid,assessmentagency_name,lms_code, bureau_code, status as Status FROM ocs_mst_tassessmentagency " +
                        " where assessmentagency_gid='" + assessmentagency_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateAssessmentAgency(string employee_gid, application360 values)
        {
            msSQL = "select assessmentagency_gid from ocs_mst_tassessmentagency where assessmentagency_name = '" + values.assessmentagency_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.assessmentagency_gid)
                {
                    values.message = " This Assessment Agency Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tassessmentagency set " +
                 " assessmentagency_name='" + values.assessmentagency_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where assessmentagency_gid='" + values.assessmentagency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AALG");

                msSQL = " insert into ocs_mst_tassessmentagencylog (" +
                       " assessmentagency_LOGgid, " +
                       " assessmentagency_gid, " +
                       " assessmentagency_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.assessmentagency_gid + "'," +
                       " '" + values.assessmentagency_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Assessment Agency Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveAssessmentAgency(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tassessmentagency set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where assessmentagency_gid='" + values.assessmentagency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AAIL");

                msSQL = " insert into ocs_mst_tassessmentagencyinactivelog (" +
                      " assessmentagencyinactivelog_gid, " +
                      " assessmentagency_gid," +
                      " assessmentagency_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.assessmentagency_gid + "'," +
                      " '" + values.assessmentagency_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Assessment Agency Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Assessment Agency Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteAssessmentAgency(string assessmentagency_gid, string employee_gid, result values)
        {
            msSQL = " select institution_gid from ocs_mst_tinstitution where assessmentagency_gid='" + assessmentagency_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Assessment Agency, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select bureauscoreadd_GID from ocs_mst_tbureauscoreadd where assessmentagency_gid='" + assessmentagency_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    values.message = "Can't able to delete Assessment Agency, Because it is tagged to Buyer";
                    values.status = false;
                }
                else
                {
                    msSQL = " select assessmentagency_name from ocs_mst_tassessmentagency where assessmentagency_gid='" + assessmentagency_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tassessmentagency where assessmentagency_gid='" + assessmentagency_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Assessment Agency Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Assessment Agency'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
                }
            }
        }

        public void DaAssessmentAgencyInactiveLogview(string assessmentagency_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT assessmentagency_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tassessmentagencyinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where assessmentagency_gid ='" + assessmentagency_gid + "' order by a.assessmentagencyinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            assessmentagency_gid = (dr_datarow["assessmentagency_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }


        // Loan Product

        public void DaGetLoanProduct(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT loanproduct_gid,api_code,loanproduct_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tloanproduct a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.loanproduct_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatetLoanProduct(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select loanproduct_name from ocs_mst_tloanproduct where loanproduct_name = '" + values.loanproduct_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Loan Product Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MLPG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("LOPT");
                msSQL = " insert into ocs_mst_tloanproduct(" +
                        " loanproduct_gid," +
                         " api_code," +
                        " loanproduct_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                         "'" + msGetAPICode + "'," +
                        "'" + values.loanproduct_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan Product Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void EditLoanProduct(string loanproduct_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT loanproduct_gid,loanproduct_name,lms_code, bureau_code, status as Status FROM ocs_mst_tloanproduct " +
                        " where loanproduct_gid='" + loanproduct_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.loanproduct_gid = objODBCDatareader["loanproduct_gid"].ToString();
                    values.loanproduct_name = objODBCDatareader["loanproduct_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLoanProduct(string employee_gid, application360 values)
        {
            msSQL = "select loanproduct_gid from ocs_mst_tloanproduct where loanproduct_name = '" + values.loanproduct_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.loanproduct_gid)
                {
                    values.message = "Loan Product Already Exist";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tloanproduct set " +
                 " loanproduct_name='" + values.loanproduct_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where loanproduct_gid='" + values.loanproduct_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LPLG");

                msSQL = " insert into ocs_mst_tloanproductlog (" +
                       " loanproduct_LOGgid, " +
                       " loanproduct_gid, " +
                       " loanproduct_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.loanproduct_gid + "'," +
                       " '" + values.loanproduct_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Loan Product Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveLoanProduct(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tloanproduct set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where loanproduct_gid='" + values.loanproduct_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LPIL");

                msSQL = " insert into ocs_mst_tloanproductinactivelog (" +
                      " loanproductinactivelog_gid, " +
                      " loanproduct_gid," +
                      " loanproduct_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.loanproduct_gid + "'," +
                      " '" + values.loanproduct_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Loan Product Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Loan Product Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteLoanProduct(string loanproduct_gid, string employee_gid, result values)
        {
            msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where producttype_gid='" + loanproduct_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to Delete Loan Product, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select loanproduct_name from ocs_mst_tloanproduct where loanproduct_gid='" + loanproduct_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tloanproduct where loanproduct_gid='" + loanproduct_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan Product Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Loan Product'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaLoanProductInactiveLogview(string loanproduct_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT loanproduct_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tloanproductinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where loanproduct_gid ='" + loanproduct_gid + "' order by a.loanproductinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        // Bureau Name
        public void DaGetBureauName(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT bureauname_gid,api_code,bureauname_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbureauname a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.bureauname_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bureauname_gid = (dr_datarow["bureauname_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBureauName(application360 values, string employee_gid)
        {
            msSQL = "select bureauname_gid from ocs_mst_tbureauname where bureauname_name = '" + values.bureauname_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.bureauname_gid)
                //{
                    values.message = " This Bureau Name Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("BRNE");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BUAR");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tbureauname(" +
                        " bureauname_gid," +
                        " api_code," +
                        " bureauname_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.bureauname_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Bureau Name Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditBureauName(string bureauname_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT bureauname_gid,bureauname_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbureauname where bureauname_gid='" + bureauname_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBureauName(string employee_gid, application360 values)
        {
            msSQL = "select bureauname_gid from ocs_mst_tbureauname where bureauname_name = '" + values.bureauname_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.bureauname_gid)
                {
                    values.message = " This Bureau Name Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbureauname set " +
                 " bureauname_name='" + values.bureauname_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where bureauname_gid='" + values.bureauname_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BUNL");
                msSQL = " insert into ocs_mst_tbureaunamelog (" +
                       " bureauname_LOGgid, " +
                       " bureauname_gid, " +
                       " bureauname_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.bureauname_gid + "'," +
                       " '" + values.bureauname_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Bureau Name Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveBureauName(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbureauname set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where bureauname_gid='" + values.bureauname_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BNEI");

                msSQL = " insert into ocs_mst_tbureaunameinactivelog (" +
                      " bureaunameinactivelog_gid, " +
                      " bureauname_gid," +
                      " bureauname_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.bureauname_gid + "'," +
                      " '" + values.bureauname_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Bureau Name Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Bureau Name Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveBureauNameHistory(ApplicationInactiveHistory objapplicationhistory, string bureauname_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tbureaunameinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.bureauname_gid='" + bureauname_gid + "' order by a.bureaunameinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteBureauName(string bureauname_gid, string employee_gid, result values)
        {
            msSQL = " select bureauscoreadd_GID from ocs_mst_tbureauscoreadd where bureauname_gid='" + bureauname_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Bureau Name, Because it is tagged to Buyer";
                values.status = false;
            }
            else
            {
                msSQL = " select bureauname_name from ocs_mst_tbureauname where bureauname_gid='" + bureauname_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tbureauname where bureauname_gid='" + bureauname_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Bureau Name Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Bureau Name'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        // Company Type

        public void DaGetCompanyType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT companytype_gid,api_code,companytype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcompanytype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.companytype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            companytype_gid = (dr_datarow["companytype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            companytype_name = (dr_datarow["companytype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCompanyType(application360 values, string employee_gid)
        {
            //msSQL = "select companydocument_name from ocs_mst_tcompanydocument where companydocument_name = '" + values.companydocument_name.Replace("'", "\\'") + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    objODBCDatareader.Close();
            //    values.status = false;
            //    values.message = "Company Document Name Already Exist";
            //}

            msSQL = "select companytype_name from ocs_mst_tcompanytype where companytype_name = '" + values.companytype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.companytype_gid)
                //{
                values.message = " This Company Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("CMTY");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CMPT");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tcompanytype(" +
                        " companytype_gid," +
                         " api_code," +
                        " companytype_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.companytype_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Company Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditCompanyType(string companytype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT companytype_gid,companytype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcompanytype where companytype_gid='" + companytype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.companytype_gid = objODBCDatareader["companytype_gid"].ToString();
                    values.companytype_name = objODBCDatareader["companytype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCompanyType(string employee_gid, application360 values)
        {
            msSQL = "select companytype_gid from ocs_mst_tcompanytype where companytype_name = '" + values.companytype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.companytype_gid)
                {
                    values.message = " This Company Type Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcompanytype set " +
                 " companytype_name='" + values.companytype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where companytype_gid='" + values.companytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CYTL");
                msSQL = " insert into ocs_mst_tcompanytypelog (" +
                       " companytype_LOGgid, " +
                       " companytype_gid, " +
                       " companytype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.companytype_gid + "'," +
                       " '" + values.companytype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Company Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveCompanyType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcompanytype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where companytype_gid='" + values.companytype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPTI");

                msSQL = " insert into ocs_mst_tcompanytypeinactivelog (" +
                      " companytypeinactivelog_gid, " +
                      " companytype_gid," +
                      " companytype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.companytype_gid + "'," +
                      " '" + values.companytype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Company Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Company Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveCompanyTypeHistory(ApplicationInactiveHistory objapplicationhistory, string companytype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tcompanytypeinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.companytype_gid='" + companytype_gid + "' order by a.companytypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteCompanyType(string companytype_gid, string employee_gid, result values)
        {
            msSQL = " select institution_gid from ocs_mst_tinstitution where companytype_gid='" + companytype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Company Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select companytype_name from ocs_mst_tcompanytype where companytype_gid='" + companytype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tcompanytype where companytype_gid='" + companytype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Company Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Company Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        //Funded Type Indicator

        public void DaGetFundedTypeIndicator(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT fundedtypeindicator_gid,api_code,fundedtypeindicator_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tfundedtypeindicator a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.fundedtypeindicator_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            fundedtypeindicator_gid = (dr_datarow["fundedtypeindicator_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            fundedtypeindicator_name = (dr_datarow["fundedtypeindicator_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateFundedTypeIndicator(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MFTI");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("FUNT");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select fundedtypeindicator_name from ocs_mst_tfundedtypeindicator where fundedtypeindicator_name = '" + values.fundedtypeindicator_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Funded Type Indicator Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tfundedtypeindicator(" +
                    " fundedtypeindicator_gid," +
                    " api_code," +
                    " fundedtypeindicator_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.fundedtypeindicator_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Funded Type Indicator Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditFundedTypeIndicator(string fundedtypeindicator_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT fundedtypeindicator_gid,fundedtypeindicator_name,lms_code, bureau_code, status as Status FROM ocs_mst_tfundedtypeindicator where fundedtypeindicator_gid='" + fundedtypeindicator_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.fundedtypeindicator_gid = objODBCDatareader["fundedtypeindicator_gid"].ToString();
                    values.fundedtypeindicator_name = objODBCDatareader["fundedtypeindicator_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateFundedTypeIndicator(string employee_gid, application360 values)
        {
            msSQL = "select fundedtypeindicator_gid from ocs_mst_tfundedtypeindicator where fundedtypeindicator_name = '" + values.fundedtypeindicator_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.fundedtypeindicator_gid)
                {
                    values.message = "Funded Type Indicator Already Exist";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tfundedtypeindicator set " +
                 " fundedtypeindicator_name='" + values.fundedtypeindicator_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where fundedtypeindicator_gid='" + values.fundedtypeindicator_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("FTIL");

                msSQL = " insert into ocs_mst_tfundedtypeindicatorlog (" +
                       " fundedtypeindicatorlog_gid, " +
                       " fundedtypeindicator_gid, " +
                       " fundedtypeindicator_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.fundedtypeindicator_gid + "'," +
                       " '" + values.fundedtypeindicator_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Funded Type Indicator Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Funded Type Indicator";
            }
        }

        public void DaInactiveFundedTypeIndicator(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tfundedtypeindicator set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where fundedtypeindicator_gid='" + values.fundedtypeindicator_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("FIIL");

                msSQL = " insert into ocs_mst_tfundedtypeindicatorinactivelog (" +
                      " fundedtypeindicatorinactivelog_gid, " +
                      " fundedtypeindicator_gid," +
                      " fundedtypeindicator_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.fundedtypeindicator_gid + "'," +
                      " '" + values.fundedtypeindicator_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Funded Type Indicator Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Funded Type Indicator Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteFundedTypeIndicator(string fundedtypeindicator_gid, string employee_gid, result values)
        {

            msSQL = " select fundedtypeindicator_name from ocs_mst_tfundedtypeindicator where fundedtypeindicator_gid='" + fundedtypeindicator_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tfundedtypeindicator where fundedtypeindicator_gid='" + fundedtypeindicator_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Funded Type Indicator Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Funded Type Indicator'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveFundedTypeIndicatorHistory(ApplicationInactiveHistory objapplicationhistory, string fundedtypeindicator_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tfundedtypeindicatorinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.fundedtypeindicator_gid='" + fundedtypeindicator_gid + "' order by a.fundedtypeindicatorinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // AML Category

        public void DaGetAmlCategory(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT amlcategory_gid,api_code,amlcategory_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tamlcategory a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.amlcategory_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            amlcategory_gid = (dr_datarow["amlcategory_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            amlcategory_name = (dr_datarow["amlcategory_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAmlCategory(application360 values, string employee_gid)
        {
            msSQL = "select amlcategory_gid from ocs_mst_tamlcategory where amlcategory_name = '" + values.amlcategory_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.amlcategory_gid)
                //{
                    values.message = " This AmlCategory Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("AMCY");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("AMLC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tamlcategory(" +
                        " amlcategory_gid," +
                         " api_code," +
                        " amlcategory_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.amlcategory_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "AML Category Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditAmlCategory(string amlcategory_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT amlcategory_gid,amlcategory_name,lms_code, bureau_code, status as Status FROM ocs_mst_tamlcategory where amlcategory_gid='" + amlcategory_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.amlcategory_gid = objODBCDatareader["amlcategory_gid"].ToString();
                    values.amlcategory_name = objODBCDatareader["amlcategory_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateAmlCategory(string employee_gid, application360 values)
        {
            msSQL = "select amlcategory_gid from ocs_mst_tamlcategory where amlcategory_name = '" + values.amlcategory_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.amlcategory_gid)
                {
                    values.message = " This AmlCategory Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tamlcategory set " +
         " amlcategory_name='" + values.amlcategory_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where amlcategory_gid='" + values.amlcategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ALCL");
                msSQL = " insert into ocs_mst_tamlcategorylog (" +
                       " amlcategory_LOGgid, " +
                       " amlcategory_gid, " +
                       " amlcategory_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.amlcategory_gid + "'," +
                       " '" + values.amlcategory_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "AML Category Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveAmlCategory(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tamlcategory set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where amlcategory_gid='" + values.amlcategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AMCI");

                msSQL = " insert into ocs_mst_tamlcategoryinactivelog (" +
                      " amlcategoryinactivelog_gid, " +
                      " amlcategory_gid," +
                      " amlcategory_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.amlcategory_gid + "'," +
                      " '" + values.amlcategory_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "AML Category Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "AML Category Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveAmlCategoryHistory(ApplicationInactiveHistory objapplicationhistory, string amlcategory_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tamlcategoryinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.amlcategory_gid='" + amlcategory_gid + "' order by a.amlcategoryinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteAmlCategory(string amlcategory_gid, string employee_gid, result values)
        {
            msSQL = " select institution_gid from ocs_mst_tinstitution where amlcategory_gid='" + amlcategory_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete AML Category, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select amlcategory_name from ocs_mst_tamlcategory where amlcategory_gid='" + amlcategory_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tamlcategory where amlcategory_gid='" + amlcategory_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "AML Category Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'AML Category'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        // Loan Type
        public void DaGetLoanType(MdlMstApplication360 objMdlloantype)
        {
            try
            {
                msSQL = " SELECT loantype_gid,api_code,loan_type,lms_code,bureau_code,status_log, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by " +
                    " from ocs_mst_tloantype a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid order by loantype_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getloantype_list = new List<loantype_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getloantype_list.Add(new loantype_list
                        {
                            loantype_gid = (dr_datarow["loantype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            loan_type = (dr_datarow["loan_type"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objMdlloantype.loantype_list = getloantype_list;
                }
                dt_datatable.Dispose();
                objMdlloantype.status = true;
            }
            catch
            {
                objMdlloantype.status = false;
            }
        }

        public void DaCreateLoanType(loantype values, string employee_gid)
        {
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }
            msSQL = "select loan_type from ocs_mst_tloantype where loan_type = '" + values.loan_type.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Loan Type Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("LNTY");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("LONT");
                msSQL = " insert into ocs_mst_tloantype(" +
                        " loantype_gid," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " loan_type," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                          "'" + lslms_code + "'," +
                            "'" + lsbureau_code + "'," +

                        "'" + values.loan_type.Replace("'", "") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.message = "Loan Type Added Successfully";
                    values.status = true;
                }
                else
                {
                    values.message = "Error Occured while adding";
                    values.status = false;
                }
            }
        }
        public void DaEditLoanType(string loantype_gid, loantype values)
        {
            try
            {
                msSQL = " select loantype_gid,lms_code,bureau_code,status_log ,loan_type from ocs_mst_tloantype where loantype_gid='" + loantype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.status_log = objODBCDatareader["status_log"].ToString();
                    values.loan_type = objODBCDatareader["loan_type"].ToString();
                    values.loantype_gid = objODBCDatareader["loantype_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLoanType(string employee_gid, loantype values)
        {
            msSQL = "select updated_by, updated_date,loan_type from ocs_mst_tloantype where loantype_gid = '" + values.loantype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("LNTY");
                    msSQL = " insert into ocs_trn_tloantypelog(" +
                              " loantypelog_gid," +
                              " loantype_gid," +
                              " loan_type, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.loantype_gid + "'," +
                              "'" + objODBCDatareader["loan_type"].ToString() + "'," +
                               "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tloantype set ";
            msSQL = "select loantype_gid from ocs_mst_tloantype where loan_type = '" + values.loan_type.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.loantype_gid)
                {
                    values.message = "Loan Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " loan_type='" + values.loan_type + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where loantype_gid='" + values.loantype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Loan Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaLoanTypeDelete(string loantype_gid, string employee_gid, loantype values)
        {
            msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where loantype_gid='" + loantype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to Delete Loan Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select loan_type from ocs_mst_tloantype where loantype_gid='" + loantype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tloantype where loantype_gid='" + loantype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Loan Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                }
            }
        }
        public void DaLoanTypeStatusUpdate(string employee_gid, loantype values)
        {

            msSQL = " update ocs_mst_tloantype set status_log='" + values.status_log + "'," +
                " remarks='" + values.remarks.Replace("'", " ") + "'," +
                " updated_by='" + employee_gid + "'," +
                " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                " where loantype_gid='" + values.loantype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LNTY");
                msSQL = " insert into ocs_trn_tloantypeinactivelog(" +
                          " loantypeinactivelog_gid," +
                          " loantype_gid," +
                          " status_log, " +
                          " remarks, " +
                          " created_by, " +
                          " created_date) " +
                          " values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.loantype_gid + "'," +
                          "'" + values.status_log + "'," +
                          "'" + values.remarks.Replace("'", " ") + "'," +
                          "'" + employee_gid + "'," +
                          "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.message = "Status Updated Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while updating Status";
                values.status = false;
            }
        }
        public void DaGetLLoanTypeActiveLog(string loantype_gid, MdlMstApplication360 objgetsegment)
        {
            try
            {
                msSQL = " SELECT d.loan_type,a.status_log,a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_trn_tloantypeinactivelog a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                    "  left join ocs_mst_tloantype d on a.loantype_gid=d.loantype_gid where a.loantype_gid='" + loantype_gid + "'" +
                    " order by a.loantypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<loantype_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new loantype_list
                        {
                            loan_type = (dr_datarow["loan_type"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objgetsegment.loantype_list = getSegment;
                }
                dt_datatable.Dispose();
                objgetsegment.status = true;

            }
            catch
            {
                objgetsegment.status = false;
            }
        }
        
        public void DaGetCountryCode(countrycode objcountrycode)
        {
            try
            {
                msSQL = " SELECT countrycode_gid,api_code,country_code,lms_code,bureau_code,status_log, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by " +
                    " from ocs_mst_tcountrycode a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid order by countrycode_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcountrycode_list = new List<countrycode_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcountrycode_list.Add(new countrycode_list
                        {
                            countrycode_gid = (dr_datarow["countrycode_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            country_code = (dr_datarow["country_code"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objcountrycode.countrycode_list = getcountrycode_list;
                }
                dt_datatable.Dispose();
                objcountrycode.status = true;
            }
            catch
            {
                objcountrycode.status = false;
            }
        }

        public void DaCreateCountryCode(countrycode values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            msSQL = "select country_code from ocs_mst_tcountrycode where country_code = '" + values.country_code.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Country Code Already Exist";
            }
            else
            {
                //    string bureau_code, country_code, lms_code;

                //msSQL = " SELECT lms_code,bureau_code,country_code FROM ocs_mst_tcountrycode ";

                //dt_datatable = objdbconn.GetDataTable(msSQL);
                ////var getSegment = new List<CalendarGroupComparison_List>();

                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {

                //        //getSegment.Add(new EncoreProductComparison_List
                //        //{

                //        lms_code = (dr_datarow["lms_code"].ToString());
                //        bureau_code = (dr_datarow["bureau_code"].ToString());
                //        country_code = (dr_datarow["country_code"].ToString());

                //        if (lms_code == lslms_code && bureau_code == lsbureau_code && country_code == values.country_code)
                //        {
                //            values.message = "This Country Already Exists";
                //            values.status = false;
                //            return;
                //        }
                //    }

                //    dt_datatable.Dispose();
                //}

                msGetGid = objcmnfunctions.GetMasterGID("CTYC");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("COUC");
                msSQL = " insert into ocs_mst_tcountrycode(" +
                        " countrycode_gid," +
                         " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " country_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + values.country_code.Replace("'", "\\'") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.message = "Country Code Added Successfully";
                    values.status = true;
                }
                else
                {
                    values.message = "Error Occured while adding";
                    values.status = false;
                }
            }
        }
        public void DaEditCountryCode(string countrycode_gid, countrycode values)
        {
            try
            {
                msSQL = " select countrycode_gid,lms_code,bureau_code,status_log ,country_code from ocs_mst_tcountrycode where countrycode_gid='" + countrycode_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.status_log = objODBCDatareader["status_log"].ToString();
                    values.country_code = objODBCDatareader["country_code"].ToString();
                    values.countrycode_gid = objODBCDatareader["countrycode_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCountryCode(string employee_gid, countrycode values)
        {
            msSQL = "select countrycode_gid from ocs_mst_tcountrycode where country_code = '" + values.country_code.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.countrycode_gid)
                {
                    values.message = "Country Code Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            //string bureau_code, country_code, lms_code;

            //msSQL = " SELECT lms_code,bureau_code,country_code FROM ocs_mst_tcountrycode ";

            //dt_datatable = objdbconn.GetDataTable(msSQL);
            ////var getSegment = new List<CalendarGroupComparison_List>();

            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dr_datarow in dt_datatable.Rows)
            //    {

            //        //getSegment.Add(new EncoreProductComparison_List
            //        //{

            //        lms_code = (dr_datarow["lms_code"].ToString());
            //        bureau_code = (dr_datarow["bureau_code"].ToString());
            //        country_code = (dr_datarow["country_code"].ToString());

            //        if (lms_code == lslms_code && bureau_code == lsbureau_code && country_code == values.country_code)
            //        {
            //            values.message = "This Country Already Exists";
            //            values.status = false;
            //            return;
            //        }
            //    }

            //    dt_datatable.Dispose();
            //}

            msSQL = "select updated_by,updated_date,country_code from ocs_mst_tcountrycode where countrycode_gid = '" + values.countrycode_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CTYC");
                    msSQL = " insert into ocs_trn_tcountrycodelog(" +
                              " countrycodelog_gid," +
                              " countrycode_gid," +
                              " country_code, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.countrycode_gid + "'," +
                              "'" + objODBCDatareader["country_code"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tcountrycode set " +
                " country_code='" + values.country_code.Replace("'", "\\'") + "'," +
                " lms_code='" + lslms_code + "'," +
                " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where countrycode_gid='" + values.countrycode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Country Code Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void CountryCodeDelete(string countrycode_gid, string employee_gid, countrycode values)
        {
            //msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where application2loan_gid='" + encoreproduct_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    objODBCDatareader.Close();
            //    values.message = "Can't able to Delete Country code, Because it is tagged to Employee Master";
            //    values.status = false;
            //    return;
            //}

            msSQL = " select country_code from ocs_mst_tcountrycode where countrycode_gid='" + countrycode_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcountrycode where countrycode_gid='" + countrycode_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Country Code'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
            }
        }
        public void DaCountryStatusUpdate(string employee_gid, countrycode values)
        {

            msSQL = " update ocs_mst_tcountrycode set status_log='" + values.status_log + "'," +
                " remarks='" + values.remarks.Replace("'", " ") + "'," +
                " updated_by='" + employee_gid + "'," +
                " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                " where countrycode_gid='" + values.countrycode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CTYC");
                msSQL = " insert into ocs_trn_tcountrycodeinactivelog(" +
                          " countrycodeinactivelog_gid," +
                          " countrycode_gid," +
                          " status_log, " +
                          " remarks, " +
                          " created_by, " +
                          " created_date) " +
                          " values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.countrycode_gid + "'," +
                          "'" + values.status_log + "'," +
                          "'" + values.remarks.Replace("'", " ") + "'," +
                          "'" + employee_gid + "'," +
                          "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.message = "Status Updated Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while updating Status";
                values.status = false;
            }
        }
        public void DaGetCountryCodeActiveLog(string countrycode_gid, countrycode objgetsegment)
        {
            try
            {
                msSQL = " SELECT d.country_code,a.status_log,a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_trn_tcountrycodeinactivelog a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                    "  left join ocs_mst_tcountrycode d on a.countrycode_gid=d.countrycode_gid where a.countrycode_gid='" + countrycode_gid + "'" +
                    " order by a.countrycodeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<countrycode_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new countrycode_list
                        {
                            country_code = (dr_datarow["country_code"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objgetsegment.countrycode_list = getSegment;
                }
                dt_datatable.Dispose();
                objgetsegment.status = true;

            }
            catch
            {
                objgetsegment.status = false;
            }
        }
        //Loan term Period

        public void DaGetLoanTermPeriod(Mdlloantermperiod objMdlloantype)
        {
            try
            {
                msSQL = " SELECT loantermperiod_gid,api_code,loanterm_period,lms_code,bureau_code,status_log, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by " +
                    " from ocs_mst_tloantermperiod a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid order by loantermperiod_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getloanterm_period_list = new List<loanterm_period_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getloanterm_period_list.Add(new loanterm_period_list
                        {
                            loantermperiod_gid = (dr_datarow["loantermperiod_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            loanterm_period = (dr_datarow["loanterm_period"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objMdlloantype.loanterm_period_list = getloanterm_period_list;
                }
                dt_datatable.Dispose();
                objMdlloantype.status = true;
            }
            catch
            {
                objMdlloantype.status = false;
            }
        }

        public void DaCreateLoanTermPeriod(Mdlloantermperiod values, string employee_gid)
        {
            msSQL = "select loanterm_period from ocs_mst_tloantermperiod where loanterm_period = '" + values.loanterm_period.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Loan Term Period Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("LOTP");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("LTMP");
                msSQL = " insert into ocs_mst_tloantermperiod(" +
                        " loantermperiod_gid," +
                         " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " loanterm_period," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
                }

                msSQL += "'" + values.loanterm_period.Replace("'", "") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan term period Added successfully";
                }
                else
                {
                    values.message = "Error Occured while Adding";
                    values.status = false;
                }
            }
        }
        public void DaEditLoanTermPeriod(string loantermperiod_gid, Mdlloantermperiod values)
        {
            try
            {
                msSQL = " select loantermperiod_gid,lms_code,bureau_code,status_log ,loanterm_period from ocs_mst_tloantermperiod" +
                    " where loantermperiod_gid='" + loantermperiod_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.status_log = objODBCDatareader["status_log"].ToString();
                    values.loanterm_period = objODBCDatareader["loanterm_period"].ToString();
                    values.loantermperiod_gid = objODBCDatareader["loantermperiod_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLoanTermPeriod(string employee_gid, Mdlloantermperiod values)
        {
            msSQL = "select updated_by, updated_date,loanterm_period from ocs_mst_tloantermperiod where loantermperiod_gid='" + values.loantermperiod_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("LOTP");
                    msSQL = " insert into ocs_trn_tloantermperiodlog(" +
                              " loantermperiodlog_gid," +
                              " loantermperiod_gid," +
                              " loanterm_period, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.loantermperiod_gid + "'," +
                              "'" + objODBCDatareader["loanterm_period"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tloantermperiod set ";
            msSQL = "select loantermperiod_gid from ocs_mst_tloantermperiod where loanterm_period = '" + values.loanterm_period.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.loantermperiod_gid)
                {
                    values.message = "Loan Term Period Already Exist";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " loanterm_period='" + values.loanterm_period + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where loantermperiod_gid='" + values.loantermperiod_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Loan term period updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating";
            }
        }

        public void DaLoanTermPeriodDelete(string loantermperiod_gid, string employee_gid, Mdlloantermperiod values)
        {
            msSQL = " select loanterm_period from ocs_mst_tloantermperiod where loantermperiod_gid='" + loantermperiod_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tloantermperiod where loantermperiod_gid='" + loantermperiod_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Loan Term Period'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
            }
        }
        public void DaLoanTermPeriodStatusUpdate(string employee_gid, Mdlloantermperiod values)
        {

            msSQL = " update ocs_mst_tloantermperiod set status_log='" + values.status_log + "'," +
                " remarks='" + values.remarks.Replace("'", " ") + "'," +
                " updated_by='" + employee_gid + "'," +
                " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                " where loantermperiod_gid='" + values.loantermperiod_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LOTP");
                msSQL = " insert into ocs_trn_tloantermperiodinactivelog(" +
                          " loantermperiodinactivelog_gid," +
                          " loantermperiod_gid," +
                          " status_log, " +
                          " remarks, " +
                          " created_by, " +
                          " created_date) " +
                          " values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.loantermperiod_gid + "'," +
                          "'" + values.status_log + "'," +
                          "'" + values.remarks.Replace("'", " ") + "'," +
                          "'" + employee_gid + "'," +
                          "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.message = "Status Updated Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while updating Status";
                values.status = false;
            }
        }

        public void DaGetLoanTermPeriodActiveLog(string loantermperiod_gid, Mdlloantermperiod objgetsegment)
        {
            try
            {
                msSQL = " SELECT d.loanterm_period,a.status_log,a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_trn_tloantermperiodinactivelog a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                    "  left join ocs_mst_tloantermperiod d on a.loantermperiod_gid=d.loantermperiod_gid where a.loantermperiod_gid='" + loantermperiod_gid + "'" +
                    " order by a.loantermperiodinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<loanterm_period_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new loanterm_period_list
                        {
                            loanterm_period = (dr_datarow["loanterm_period"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objgetsegment.loanterm_period_list = getSegment;
                }
                dt_datatable.Dispose();
                objgetsegment.status = true;

            }
            catch
            {
                objgetsegment.status = false;
            }
        }
        public void DaGetamortization_method(Mdlamortization_method objMdlloantype)
        {
            try
            {
                msSQL = " SELECT amortization_gid,api_code,amortization_method,lms_code,bureau_code,status_log, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by " +
                    " from ocs_mst_tamortization a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid order by amortization_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getamortizationmethod_list = new List<amortizationmethod_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getamortizationmethod_list.Add(new amortizationmethod_list
                        {
                            amortization_gid = (dr_datarow["amortization_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            amortization_method = (dr_datarow["amortization_method"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objMdlloantype.amortizationmethod_list = getamortizationmethod_list;
                }
                dt_datatable.Dispose();
                objMdlloantype.status = true;
            }
            catch
            {
                objMdlloantype.status = false;
            }
        }

        public void DaCreateamortization_mtd(Mdlamortization_method values, string employee_gid)
        {
            msSQL = "select amortization_method from ocs_mst_tamortization where amortization_method = '" + values.amortization_method.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Amortization Method Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("AMTD");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("AMOR");
                msSQL = " insert into ocs_mst_tamortization(" +
                        " amortization_gid," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " amortization_method," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
                }

                msSQL += "'" + values.amortization_method.Replace("'", "") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.message = "Amortization Method Added Successfully";
                    values.status = true;
                }
                else
                {
                    values.message = "Error Occured while adding";
                    values.status = false;
                }
            }
        }
        public void DaEditamortization_mtd(string amortization_gid, Mdlamortization_method values)
        {
            try
            {
                msSQL = " select amortization_gid,lms_code,bureau_code,status_log ,amortization_method from ocs_mst_tamortization where amortization_gid='" + amortization_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.status_log = objODBCDatareader["status_log"].ToString();
                    values.amortization_method = objODBCDatareader["amortization_method"].ToString();
                    values.amortization_gid = objODBCDatareader["amortization_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateamortization_mtd(string employee_gid, Mdlamortization_method values)
        {
            msSQL = "select updated_by, updated_date,amortization_method from ocs_mst_tamortization where amortization_gid = '" + values.amortization_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SBLG");
                    msSQL = " insert into ocs_trn_tamortizationlog(" +
                              " amortizationlog_gid," +
                              " amortization_gid," +
                              " amortization_method, " +
                             " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.amortization_gid + "'," +
                              "'" + objODBCDatareader["amortization_method"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tamortization set ";
            msSQL = "select amortization_gid from ocs_mst_tamortization where amortization_method = '" + values.amortization_method.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.amortization_gid)
                {
                    values.message = "Amortization Method Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " amortization_method='" + values.amortization_method + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where amortization_gid='" + values.amortization_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Amortization Method Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void Daamortization_mtdDelete(string amortization_gid, string employee_gid, Mdlamortization_method values)
        {
            msSQL = " select amortization_method from ocs_mst_tamortization where amortization_gid='" + amortization_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tamortization where amortization_gid='" + amortization_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Amortization'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
            }
        }

        public void Daamortization_mtdStatusUpdate(string employee_gid, Mdlamortization_method values)
        {

            msSQL = " update ocs_mst_tamortization set status_log='" + values.status_log + "'," +
                " remarks='" + values.remarks.Replace("'", " ") + "'," +
                " updated_by='" + employee_gid + "'," +
                " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                " where amortization_gid='" + values.amortization_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SBLG");
                msSQL = " insert into ocs_trn_tamortizationinactivelog(" +
                          " amortizationinactivelog_gid," +
                          " amortization_gid," +
                          " status_log, " +
                          " remarks, " +
                          " created_by, " +
                          " created_date) " +
                          " values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.amortization_gid + "'," +
                          "'" + values.status_log + "'," +
                          "'" + values.remarks.Replace("'", " ") + "'," +
                          "'" + employee_gid + "'," +
                          "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.message = "Status Updated Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while updating Status";
                values.status = false;
            }
        }

        public void DaGetamortizationActiveLog(string amortization_gid, Mdlamortization_method objgetsegment)
        {
            try
            {
                msSQL = " SELECT d.amortization_method,a.status_log,a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_trn_tamortizationinactivelog a" +
                    " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                    "  left join ocs_mst_tamortization d on a.amortization_gid=d.amortization_gid where a.amortization_gid='" + amortization_gid + "'" +
                    " order by a.amortizationinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<amortizationmethod_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new amortizationmethod_list
                        {
                            amortization_method = (dr_datarow["amortization_method"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objgetsegment.amortizationmethod_list = getSegment;
                }
                dt_datatable.Dispose();
                objgetsegment.status = true;

            }
            catch
            {
                objgetsegment.status = false;
            }
        }

        // Assessment Agency Rating

        public void DaGetAssessmentAgencyRating(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT assessmentagencyrating_gid,api_code,assessmentagencyrating_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tassessmentagencyrating a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.assessmentagencyrating_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            assessmentagencyrating_gid = (dr_datarow["assessmentagencyrating_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            assessmentagencyrating_name = (dr_datarow["assessmentagencyrating_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAssessmentAgencyRating(application360 values, string employee_gid)
        {
            msSQL = "select assessmentagencyrating_gid from ocs_mst_tassessmentagencyrating where assessmentagencyrating_name = '" + values.assessmentagencyrating_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.assessmentagencyrating_gid)
                //{
                    values.message = " This Assessment Agency Rating Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("ATAR");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("AARM");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tassessmentagencyrating(" +
                       " assessmentagencyrating_gid," +
                       " api_code," +
                       " assessmentagencyrating_name," +
                       " lms_code," +
                       " bureau_code," +
                       " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                         "'" + values.assessmentagencyrating_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Assessment Agency Rating Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditAssessmentAgencyRating(string assessmentagencyrating_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT assessmentagencyrating_gid,assessmentagencyrating_name,lms_code, bureau_code, status as Status FROM ocs_mst_tassessmentagencyrating where assessmentagencyrating_gid='" + assessmentagencyrating_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateAssessmentAgencyRating(string employee_gid, application360 values)
        {
            msSQL = "select assessmentagencyrating_gid from ocs_mst_tassessmentagencyrating where assessmentagencyrating_name = '" + values.assessmentagencyrating_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.assessmentagencyrating_gid)
                {
                    values.message = " This Assessment Agency Rating Already Exists";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tassessmentagencyrating set " +
         " assessmentagencyrating_name='" + values.assessmentagencyrating_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AARL");
                msSQL = " insert into ocs_mst_tassessmentagencyratinglog (" +
                       " assessmentagencyrating_LOGgid, " +
                       " assessmentagencyrating_gid, " +
                       " assessmentagencyrating_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.assessmentagencyrating_gid + "'," +
                       " '" + values.assessmentagencyrating_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Assessment Agency Rating Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }
        public void DaInactiveAssessmentAgencyRating(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tassessmentagencyrating set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AMAI");

                msSQL = " insert into ocs_mst_tassessmentagencyratinginactivelog (" +
                      " assessmentagencyratinginactivelog_gid, " +
                      " assessmentagencyrating_gid," +
                      " assessmentagencyrating_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.assessmentagencyrating_gid + "'," +
                      " '" + values.assessmentagencyrating_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Assessment Agency Rating Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Assessment Agency Rating Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }
        public void DaInactiveAssessmentAgencyRatingHistory(ApplicationInactiveHistory objapplicationhistory, string assessmentagencyrating_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tassessmentagencyratinginactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.assessmentagencyrating_gid='" + assessmentagencyrating_gid + "' order by a.assessmentagencyratinginactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteAssessmentAgencyRating(string assessmentagencyrating_gid, string employee_gid, result values)
        {
            msSQL = " select institution_gid from ocs_mst_tinstitution where assessmentagencyrating_gid='" + assessmentagencyrating_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Assessment Agency Rating, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select bureauscoreadd_GID from ocs_mst_tbureauscoreadd where creditrating_gid='" + assessmentagencyrating_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    values.message = "Can't able to delete Assessment Agency Rating, Because it is tagged to Buyer";
                    values.status = false;
                }
                else
                {
                    msSQL = " select assessmentagencyrating_name from ocs_mst_tassessmentagencyrating where assessmentagencyrating_gid='" + assessmentagencyrating_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tassessmentagencyrating where assessmentagencyrating_gid='" + assessmentagencyrating_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Assessment Agency Rating Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Assessment Agency Rating'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
                }
            }
        }

        // Security Classification

        public void GetSecurityClassification(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT securityclassification_gid,api_code,securityclassification_name, lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsecurityclassification a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.securityclassification_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            securityclassification_gid = (dr_datarow["securityclassification_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            securityclassification_name = (dr_datarow["securityclassification_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSecurityClassification(application360 values, string employee_gid)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SRCN");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("SECC");
                if (values.lms_code == null || values.lms_code == "")
                {
                    lslms_code = "";
                }
                else
                {
                    lslms_code = values.lms_code.Replace("'", "");
                }
                if (values.bureau_code == null || values.bureau_code == "")
                {
                    lsbureau_code = "";
                }
                else
                {
                    lsbureau_code = values.bureau_code.Replace("'", "");
                }
                msSQL = "select securityclassification_name from ocs_mst_tsecurityclassification where securityclassification_name = '" + values.securityclassification_name.Replace("'", "\\'") + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.status = false;
                    values.message = "Security Classification Already Exist";
                }
                else
                {
                    msSQL = " insert into ocs_mst_tsecurityclassification(" +
                    " securityclassification_gid," +
                    " api_code," +
                    " securityclassification_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.securityclassification_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Security Classification Added Successfully";
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occurred While Adding";
                    }
                }
            }
        public void DaEditSecurityClassification(string securityclassification_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT securityclassification_gid,securityclassification_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsecurityclassification where securityclassification_gid='" + securityclassification_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.securityclassification_gid = objODBCDatareader["securityclassification_gid"].ToString();
                    values.securityclassification_name = objODBCDatareader["securityclassification_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSecurityClassification(string employee_gid, application360 values)
        {
                msSQL = "select securityclassification_gid from ocs_mst_tsecurityclassification where securityclassification_name = '" + values.securityclassification_name.Replace("'", "\\'") + "'";
                lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                if (lsdocumentgid != "")
                {
                    if (lsdocumentgid != values.securityclassification_gid)
                    {
                        values.message = "Security Classification Already Exist";
                        values.status = false;
                        return;
                    }
                }
                if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tsecurityclassification set " +
                 " securityclassification_name='" + values.securityclassification_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where securityclassification_gid='" + values.securityclassification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SECL");

                msSQL = " insert into ocs_mst_tsecurityclassificationlog (" +
                       " securityclassification_LOGgid, " +
                       " securityclassification_gid, " +
                       " securityclassification_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.securityclassification_gid + "'," +
                       " '" + values.securityclassification_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Security Classification Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveSecurityClassification(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsecurityclassification set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where securityclassification_gid='" + values.securityclassification_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SYCI");

                msSQL = " insert into ocs_mst_tsecurityclassificationinactivelog (" +
                      " securityclassificationinactivelog_gid, " +
                      " securityclassification_gid," +
                      " securityclassification_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.securityclassification_gid + "'," +
                      " '" + values.securityclassification_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Security Classification Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Security Classification Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }
        public void DaInactiveSecurityClassificationHistory(ApplicationInactiveHistory objapplicationhistory, string securityclassification_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tsecurityclassificationinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.securityclassification_gid='" + securityclassification_gid + "' order by a.securityclassificationinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DeleteSecurityClassification(string securityclassification_gid, string employee_gid, result values)
        {

            msSQL = " select securityclassification_name from ocs_mst_tsecurityclassification where securityclassification_gid='" + securityclassification_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsecurityclassification where securityclassification_gid='" + securityclassification_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Security Classification Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Security Classification'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Interest Frequency

        public void DaGetInterestFrequency(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT interestfrequency_gid,api_code,interestfrequency_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tinterestfrequency a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.interestfrequency_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            interestfrequency_gid = (dr_datarow["interestfrequency_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateInterestFrequency(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MINF");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("INTF");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select interestfrequency_name from ocs_mst_tinterestfrequency where interestfrequency_name = '" + values.interestfrequency_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Interest Frequency Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tinterestfrequency(" +
                    " interestfrequency_gid," +
                     " api_code," +
                    " interestfrequency_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.interestfrequency_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Interest Frequency Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditInterestFrequency(string interestfrequency_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT interestfrequency_gid,interestfrequency_name,lms_code, bureau_code, status as Status FROM ocs_mst_tinterestfrequency where interestfrequency_gid='" + interestfrequency_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.interestfrequency_gid = objODBCDatareader["interestfrequency_gid"].ToString();
                    values.interestfrequency_name = objODBCDatareader["interestfrequency_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateInterestFrequency(string employee_gid, application360 values)
        {
            msSQL = "select interestfrequency_gid from ocs_mst_tinterestfrequency where interestfrequency_name = '" + values.interestfrequency_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.interestfrequency_gid)
                {
                    values.message = "Interest Frequency Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tinterestfrequency set " +
                 " interestfrequency_name='" + values.interestfrequency_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where interestfrequency_gid='" + values.interestfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("INFL");

                msSQL = " insert into ocs_mst_tinterestfrequencylog (" +
                       " interestfrequencylog_gid, " +
                       " interestfrequency_gid, " +
                       " interestfrequency_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.interestfrequency_gid + "'," +
                       " '" + values.interestfrequency_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Interest Frequency Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Interest Frequency";
            }
        }

        public void DaInactiveInterestFrequency(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tinterestfrequency set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where interestfrequency_gid='" + values.interestfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("IFIL");

                msSQL = " insert into ocs_mst_tinterestfrequencyinactivelog (" +
                      " interestfrequencyinactivelog_gid, " +
                      " interestfrequency_gid," +
                      " interestfrequency_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.interestfrequency_gid + "'," +
                      " '" + values.interestfrequency_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Interest Frequency Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Interest Frequency Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteInterestFrequency(string interestfrequency_gid, string employee_gid, result values)
        {
            msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where interestfrequency_gid='" + interestfrequency_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Interest Frequency, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select interestfrequency_name from ocs_mst_tinterestfrequency where interestfrequency_gid='" + interestfrequency_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tinterestfrequency where interestfrequency_gid='" + interestfrequency_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Interest Frequency Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Interest Frequency'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaInactiveInterestFrequencyHistory(ApplicationInactiveHistory objapplicationhistory, string interestfrequency_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tinterestfrequencyinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.interestfrequency_gid='" + interestfrequency_gid + "' order by a.interestfrequencyinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Principal Frequency

        public void DaGetPrincipalFrequency(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT principalfrequency_gid,api_code,principalfrequency_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tprincipalfrequency a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.principalfrequency_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            principalfrequency_gid = (dr_datarow["principalfrequency_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePrincipalFrequency(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MPRF");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PRFY");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select principalfrequency_name from ocs_mst_tprincipalfrequency where principalfrequency_name = '" + values.principalfrequency_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Principal Frequency Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tprincipalfrequency(" +
                    " principalfrequency_gid," +
                    " api_code," +
                    " principalfrequency_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.principalfrequency_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Principal Frequency Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditPrincipalFrequency(string principalfrequency_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT principalfrequency_gid,principalfrequency_name,lms_code, bureau_code, status as Status FROM ocs_mst_tprincipalfrequency where principalfrequency_gid='" + principalfrequency_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.principalfrequency_gid = objODBCDatareader["principalfrequency_gid"].ToString();
                    values.principalfrequency_name = objODBCDatareader["principalfrequency_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePrincipalFrequency(string employee_gid, application360 values)
        {
            msSQL = "select principalfrequency_gid from ocs_mst_tprincipalfrequency where principalfrequency_name = '" + values.principalfrequency_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.principalfrequency_gid)
                {
                    values.message = "Principal Frequency Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tprincipalfrequency set " +
                 " principalfrequency_name='" + values.principalfrequency_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where principalfrequency_gid='" + values.principalfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PRFL");

                msSQL = " insert into ocs_mst_tprincipalfrequencylog (" +
                       " principalfrequencylog_gid, " +
                       " principalfrequency_gid, " +
                       " principalfrequency_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.principalfrequency_gid + "'," +
                       " '" + values.principalfrequency_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Principal Frequency Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Principal Frequency";
            }
        }

        public void DaInactivePrincipalFrequency(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tprincipalfrequency set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where principalfrequency_gid='" + values.principalfrequency_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PFIL");

                msSQL = " insert into ocs_mst_tprincipalfrequencyinactivelog (" +
                      " principalfrequencyinactivelog_gid, " +
                      " principalfrequency_gid," +
                      " principalfrequency_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.principalfrequency_gid + "'," +
                      " '" + values.principalfrequency_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Principal Frequency Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Principal Frequency Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeletePrincipalFrequency(string principalfrequency_gid, string employee_gid, result values)
        {

            msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where principalfrequency_gid='" + principalfrequency_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Principal Frequency, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select application_gid from ocs_mst_tapplication where principalfrequency_gid='" + principalfrequency_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    values.message = "Can't able to delete Principal Frequency, Because it is tagged to Application Creation";
                    values.status = false;
                    return;
                }
                else
                {
                    msSQL = " select principalfrequency_name from ocs_mst_tprincipalfrequency where principalfrequency_gid='" + principalfrequency_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tprincipalfrequency where principalfrequency_gid='" + principalfrequency_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Principal Frequency Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Principal Frequency'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
                }
            }
        }

        public void DaInactivePrincipalFrequencyHistory(ApplicationInactiveHistory objapplicationhistory, string principalfrequency_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tprincipalfrequencyinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.principalfrequency_gid='" + principalfrequency_gid + "' order by a.principalfrequencyinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Ownership Type

        public void DaGetOwnershipType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT ownershiptype_gid,api_code,ownershiptype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_townershiptype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.ownershiptype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            ownershiptype_gid = (dr_datarow["ownershiptype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            ownershiptype_name = (dr_datarow["ownershiptype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateOwnershipType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MOWT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("OWNT");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select ownershiptype_name from ocs_mst_townershiptype where ownershiptype_name = '" + values.ownershiptype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Ownership Type Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_townershiptype(" +
                    " ownershiptype_gid," +
                    " api_code," +
                    " ownershiptype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.ownershiptype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Ownership Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditOwnershipType(string ownershiptype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT ownershiptype_gid,ownershiptype_name,lms_code, bureau_code, status as Status FROM ocs_mst_townershiptype where ownershiptype_gid='" + ownershiptype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.ownershiptype_gid = objODBCDatareader["ownershiptype_gid"].ToString();
                    values.ownershiptype_name = objODBCDatareader["ownershiptype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateOwnershipType(string employee_gid, application360 values)
        {
            msSQL = "select ownershiptype_gid from ocs_mst_townershiptype where ownershiptype_name = '" + values.ownershiptype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.ownershiptype_gid)
                {
                    values.message = "Ownership Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_townershiptype set " +
                 " ownershiptype_name='" + values.ownershiptype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where ownershiptype_gid='" + values.ownershiptype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("OWTL");

                msSQL = " insert into ocs_mst_townershiptypelog (" +
                       " ownershiptypelog_gid, " +
                       " ownershiptype_gid, " +
                       " ownershiptype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.ownershiptype_gid + "'," +
                       " '" + values.ownershiptype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Ownership Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Ownership Type";
            }
        }

        public void DaInactiveOwnershipType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_townershiptype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where ownershiptype_gid='" + values.ownershiptype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("OTIL");

                msSQL = " insert into ocs_mst_townershiptypeinactivelog (" +
                      " ownershiptypeinactivelog_gid, " +
                      " ownershiptype_gid," +
                      " ownershiptype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.ownershiptype_gid + "'," +
                      " '" + values.ownershiptype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Ownership Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Ownership Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteOwnershipType(string ownershiptype_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where ownershiptype_gid = '" + ownershiptype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to Delete Ownership Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select ownershiptype_name from ocs_mst_townershiptype where ownershiptype_gid='" + ownershiptype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_townershiptype where ownershiptype_gid='" + ownershiptype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Ownership Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Ownership Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaInactiveOwnershipTypeHistory(ApplicationInactiveHistory objapplicationhistory, string ownershiptype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_townershiptypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.ownershiptype_gid='" + ownershiptype_gid + "' order by a.ownershiptypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Residence Type

        public void DaGetResidenceType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT residencetype_gid,api_code,residencetype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tresidencetype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.residencetype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            residencetype_gid = (dr_datarow["residencetype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            residencetype_name = (dr_datarow["residencetype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateResidenceType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("MRST");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("REST");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select residencetype_name from ocs_mst_tresidencetype where residencetype_name = '" + values.residencetype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Residence Type Name Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tresidencetype(" +
                    " residencetype_gid," +
                    " api_code," +
                    " residencetype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.residencetype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Residence Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditResidenceType(string residencetype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT residencetype_gid,residencetype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tresidencetype where residencetype_gid='" + residencetype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.residencetype_gid = objODBCDatareader["residencetype_gid"].ToString();
                    values.residencetype_name = objODBCDatareader["residencetype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateResidenceType(string employee_gid, application360 values)
        {
            msSQL = "select residencetype_gid from ocs_mst_tresidencetype where residencetype_name = '" + values.residencetype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.residencetype_gid)
                {
                    values.message = "Residence Type Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tresidencetype set " +
                 " residencetype_name='" + values.residencetype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where residencetype_gid='" + values.residencetype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RSTL");

                msSQL = " insert into ocs_mst_tresidencetypelog (" +
                       " residencetypelog_gid, " +
                       " residencetype_gid, " +
                       " residencetype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.residencetype_gid + "'," +
                       " '" + values.residencetype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Residence Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Residence Type";
            }
        }

        public void DaInactiveResidenceType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tresidencetype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where residencetype_gid='" + values.residencetype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("RTIL");

                msSQL = " insert into ocs_mst_tresidencetypeinactivelog (" +
                      " residencetypeinactivelog_gid, " +
                      " residencetype_gid," +
                      " residencetype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.residencetype_gid + "'," +
                      " '" + values.residencetype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Residence Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Residence Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteResidenceType(string residencetype_gid, string employee_gid, result values)
        {
            msSQL = "select contact_gid from ocs_mst_tcontact where residencetype_gid = '" + residencetype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to Delete Residence Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select residencetype_name from ocs_mst_tresidencetype where residencetype_gid='" + residencetype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tresidencetype where residencetype_gid='" + residencetype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Residence Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Residence Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaInactiveResidenceTypeHistory(ApplicationInactiveHistory objapplicationhistory, string residencetype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tresidencetypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.residencetype_gid='" + residencetype_gid + "' order by a.residencetypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //License Type

        public void DaGetLicenseType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT licensetype_gid,api_code,licensetype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tlicensetype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.licensetype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            licensetype_gid = (dr_datarow["licensetype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            licensetype_name = (dr_datarow["licensetype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLicenseType(application360 values, string employee_gid)
        {
            msSQL = "select licensetype_gid from ocs_mst_tlicensetype where licensetype_name = '" + values.licensetype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.licensetype_gid)
                //{
                    values.message = " This License Type Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("MLCT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("LICT");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tlicensetype(" +
                    " licensetype_gid," +
                    " api_code," +
                    " licensetype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.licensetype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "License Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditLicenseType(string licensetype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT licensetype_gid,licensetype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tlicensetype where licensetype_gid='" + licensetype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.licensetype_gid = objODBCDatareader["licensetype_gid"].ToString();
                    values.licensetype_name = objODBCDatareader["licensetype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLicenseType(string employee_gid, application360 values)
        {
            msSQL = "select licensetype_gid from ocs_mst_tlicensetype where licensetype_name = '" + values.licensetype_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.licensetype_gid)
                {
                    values.message = " This License Type Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tlicensetype set " +
                 " licensetype_name='" + values.licensetype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where licensetype_gid='" + values.licensetype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LCTL");

                msSQL = " insert into ocs_mst_tlicensetypelog (" +
                       " licensetypelog_gid, " +
                       " licensetype_gid, " +
                       " licensetype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.licensetype_gid + "'," +
                       " '" + values.licensetype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "License Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating License Type";
            }
        }

        public void DaInactiveLicenseType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tlicensetype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where licensetype_gid='" + values.licensetype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LTIL");

                msSQL = " insert into ocs_mst_tlicensetypeinactivelog (" +
                      " licensetypeinactivelog_gid, " +
                      " licensetype_gid," +
                      " licensetype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.licensetype_gid + "'," +
                      " '" + values.licensetype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "License Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "License Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteLicenseType(string licensetype_gid, string employee_gid, result values)
        {
            msSQL = " select institution2licensedtl_gid from ocs_mst_tinstitution2licensedtl where licensetype_gid='" + licensetype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete License Type, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select licensetype_name from ocs_mst_tlicensetype where licensetype_gid='" + licensetype_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tlicensetype where licensetype_gid='" + licensetype_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "License Type Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'License Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaInactiveLicenseTypeHistory(ApplicationInactiveHistory objapplicationhistory, string licensetype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tlicensetypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.licensetype_gid='" + licensetype_gid + "' order by a.licensetypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Loan Product List

        public void DaLoanProductList(MdlLoanProductList values)
        {
            msSQL = " select loanproduct_gid, loanproduct_name from ocs_mst_tloanproduct";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_loanproduct = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.loanproduct_list = dt_datatable.AsEnumerable().Select(row => new loanproduct_list
                {
                    loanproduct_gid = row["loanproduct_gid"].ToString(),
                    loanproduct_name = row["loanproduct_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Loan Sub Product

        public void DaGetLoanSubProduct(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT loansubproduct_gid,api_code,loansubproduct_name,a.loanproduct_gid,a.loanproduct_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tloansubproduct a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.loansubproduct_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loansubproduct_gid = (dr_datarow["loansubproduct_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString()),
                            loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                            loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLoanSubProduct(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select loansubproduct_name from ocs_mst_tloansubproduct where loansubproduct_name = '" + values.loansubproduct_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Loan Sub Product Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("LSPG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("LOSP");
                msSQL = " insert into ocs_mst_tloansubproduct(" +
                        " loansubproduct_gid," +
                         " api_code," +
                        " loansubproduct_name," +
                        " loanproduct_gid," +
                        " loanproduct_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.loansubproduct_name.Replace("'", "") + "'," +
                        "'" + values.loanproduct_gid + "'," +
                        "'" + values.loanproduct_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan Sub Product Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditLoanSubProduct(string loansubproduct_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT loansubproduct_gid, loansubproduct_name, loanproduct_gid,loanproduct_name,lms_code, bureau_code, status as Status" +
                        " FROM ocs_mst_tloansubproduct where loansubproduct_gid='" + loansubproduct_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.loansubproduct_gid = objODBCDatareader["loansubproduct_gid"].ToString();
                    values.loansubproduct_name = objODBCDatareader["loansubproduct_name"].ToString();
                    values.loanproduct_gid = objODBCDatareader["loanproduct_gid"].ToString();
                    values.loanproduct_name = objODBCDatareader["loanproduct_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLoanSubProduct(string employee_gid, application360 values)
        {
            msSQL = "select loanproduct_gid from ocs_mst_tloansubproduct where loansubproduct_name = '" + values.loansubproduct_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.loanproduct_gid)
                {
                    values.message = "Loan Sub Product Already Exist";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tloansubproduct set " +
                 " loansubproduct_name='" + values.loansubproduct_name.Replace("'", "") + "'," +
                 " loanproduct_gid='" + values.loanproduct_gid + "'," +
                 " loanproduct_name='" + values.loanproduct_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where loansubproduct_gid='" + values.loansubproduct_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LSPL");

                msSQL = " insert into ocs_mst_tloansubproductlog (" +
                       " loansubproduct_LOGgid, " +
                       " loansubproduct_gid, " +
                       " loansubproduct_name," +
                       " loanproduct_gid, " +
                       " loanproduct_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.loansubproduct_gid + "'," +
                       " '" + values.loansubproduct_name.Replace("'", "") + "'," +
                       " '" + values.loanproduct_gid + "'," +
                       " '" + values.loanproduct_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Loan Sub Product Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveLoanSubProduct(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tloansubproduct set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where loansubproduct_gid='" + values.loansubproduct_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LSIL");

                msSQL = " insert into ocs_mst_tloansubproductinactivelog (" +
                      " loansubproductinactivelog_gid, " +
                      " loansubproduct_gid," +
                      " loansubproduct_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.loansubproduct_gid + "'," +
                      " '" + values.loansubproduct_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Loan Sub Product Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Loan Sub Product Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteLoanSubProduct(string loansubproduct_gid, string employee_gid, result values)
        {
            msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where productsubtype_gid='" + loansubproduct_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to Delete Loan Sub Product, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select loansubproduct_name from ocs_mst_tloansubproduct where loansubproduct_gid='" + loansubproduct_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tloansubproduct where loansubproduct_gid='" + loansubproduct_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan Sub Product Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Loan Sub Product'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        public void DaLoanSubProductInactiveLogview(string loansubproduct_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT loansubproduct_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tloansubproductinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where loansubproduct_gid ='" + loansubproduct_gid + "' order by a.loansubproductinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loansubproduct_gid = (dr_datarow["loansubproduct_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        //Colending Master

        public void DaGetColendingMaster(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT colendingmaster_gid,colendingmaster_name,lms_code, bureau_code,description, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcolendingmaster a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.colendingmaster_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            colendingmaster_gid = (dr_datarow["colendingmaster_gid"].ToString()),
                            colendingmaster_name = (dr_datarow["colendingmaster_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            description = (dr_datarow["description"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateColendingMaster(application360 values, string employee_gid)
        {
           
            msGetGid = objcmnfunctions.GetMasterGID("CMST");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("COAC");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tcolendingmaster(" +
                    " colendingmaster_gid," +
                    
                    " api_code," +
                    " colendingmaster_name," +
                    " lms_code," +
                    " bureau_code," +
                     "description," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                   
                    "'" + msGetAPICode + "'," +
                     "'" + values.colendingmaster_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + values.description.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Colending Master Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditColendingMaster(string colendingmaster_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT colendingmaster_gid,colendingmaster_name,lms_code, bureau_code,description, status as Status FROM ocs_mst_tcolendingmaster where colendingmaster_gid='" + colendingmaster_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.colendingmaster_gid = objODBCDatareader["colendingmaster_gid"].ToString();
                    values.colendingmaster_name = objODBCDatareader["colendingmaster_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.description = objODBCDatareader["description"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateColendingMaster(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcolendingmaster set " +
                 " colendingmaster_name='" + values.colendingmaster_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " description='" + values.description.Replace("'", "") + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where colendingmaster_gid='" + values.colendingmaster_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CDML");

                msSQL = " insert into ocs_mst_tcolendingmasterlog (" +
                       " colendingmasterlog_gid, " +
                       " colendingmaster_gid, " +
                       " colendingmaster_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.colendingmaster_gid + "'," +
                       " '" + values.colendingmaster_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Colending Master Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Colending Master";
            }
        }

        public void DaInactiveColendingMaster(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcolendingmaster set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where colendingmaster_gid='" + values.colendingmaster_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CMSI");

                msSQL = " insert into ocs_mst_tcolendingmasterinactivelog (" +
                      " colendingmasterinactivelog_gid, " +
                      " colendingmaster_gid," +
                      " colendingmaster_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.colendingmaster_gid + "'," +
                      " '" + values.colendingmaster_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Colending Master Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Colending Master Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteColendingMaster(string colendingmaster_gid, string employee_gid, result values)
        {
            msSQL = " select colendingmaster_name from ocs_mst_tcolendingmaster where colendingmaster_gid='" + colendingmaster_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcolendingmaster where colendingmaster_gid='" + colendingmaster_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Colending Master Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Colending Master'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveColendingMasterHistory(ApplicationInactiveHistory objapplicationhistory, string colendingmaster_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tcolendingmasterinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.colendingmaster_gid='" + colendingmaster_gid + "' order by a.colendingmasterinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Lender Type
        public void DaGetLenderType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT lendertype_gid,lendertype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tlendertype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.lendertype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            lendertype_gid = (dr_datarow["lendertype_gid"].ToString()),
                            lendertype_name = (dr_datarow["lendertype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLenderType(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("LTAC");
            msGetGid = objcmnfunctions.GetMasterGID("LDTE");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tlendertype(" +
                    " lendertype_gid," +
                    " lendertype_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.lendertype_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Lender Type Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditLenderType(string lendertype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT lendertype_gid,lendertype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tlendertype where lendertype_gid='" + lendertype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lendertype_gid = objODBCDatareader["lendertype_gid"].ToString();
                    values.lendertype_name = objODBCDatareader["lendertype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLenderType(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tlendertype set " +
                 " lendertype_name='" + values.lendertype_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where lendertype_gid='" + values.lendertype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LETL");

                msSQL = " insert into ocs_mst_tlendertypelog (" +
                       " lendertypelog_gid, " +
                       " lendertype_gid, " +
                       " lendertype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.lendertype_gid + "'," +
                       " '" + values.lendertype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Lender Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Lender Type";
            }
        }

        public void DaInactiveLenderType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tlendertype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where lendertype_gid='" + values.lendertype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LDIL");

                msSQL = " insert into ocs_mst_tlendertypeinactivelog (" +
                      " lendertypeinactivelog_gid, " +
                      " lendertype_gid," +
                      " lendertype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.lendertype_gid + "'," +
                      " '" + values.lendertype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Lender Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Lender Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteLenderType(string lendertype_gid, string employee_gid, result values)
        {
            msSQL = " select lendertype_name from ocs_mst_tlendertype where lendertype_gid='" + lendertype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tlendertype where lendertype_gid='" + lendertype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Lender Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Lender Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveLenderTypeHistory(ApplicationInactiveHistory objapplicationhistory, string lendertype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tlendertypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.lendertype_gid='" + lendertype_gid + "' order by a.lendertypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }
        //Credit Policy Compliance
        public void DaGetCreditPolicyCompliance(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT creditpolicycompliance_gid,creditpolicycompliance_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcreditpolicycompliance a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.creditpolicycompliance_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            creditpolicycompliance_gid = (dr_datarow["creditpolicycompliance_gid"].ToString()),
                            creditpolicycompliance_name = (dr_datarow["creditpolicycompliance_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCreditPolicyCompliance(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PCAC");
            msGetGid = objcmnfunctions.GetMasterGID("CRPC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select creditpolicycompliance_name from ocs_mst_tcreditpolicycompliance where creditpolicycompliance_name = '" + values.creditpolicycompliance_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Policy Compliance Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tcreditpolicycompliance(" +
                        " creditpolicycompliance_gid," +
                        " creditpolicycompliance_name," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.creditpolicycompliance_name.Replace("'", "") + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Policy Compliance Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditCreditPolicyCompliance(string creditpolicycompliance_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT creditpolicycompliance_gid, creditpolicycompliance_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcreditpolicycompliance where creditpolicycompliance_gid='" + creditpolicycompliance_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.creditpolicycompliance_gid = objODBCDatareader["creditpolicycompliance_gid"].ToString();
                    values.creditpolicycompliance_name = objODBCDatareader["creditpolicycompliance_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }
        public void DaUpdateCreditPolicyCompliance(string employee_gid, application360 values)
        {
            msSQL = "select creditpolicycompliance_gid from ocs_mst_tcreditpolicycompliance where creditpolicycompliance_name = '" + values.creditpolicycompliance_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.creditpolicycompliance_gid)
                {
                    values.message = "Credit Policy Compliance Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tcreditpolicycompliance set " +
         " creditpolicycompliance_name='" + values.creditpolicycompliance_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where creditpolicycompliance_gid='" + values.creditpolicycompliance_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPCL");
                msSQL = " insert into ocs_mst_tcreditpolicycompliancelog(" +
                       " creditpolicycompliance_LOGgid, " +
                       " creditpolicycompliance_gid, " +
                       " creditpolicycompliance_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.creditpolicycompliance_gid + "'," +
                       " '" + values.creditpolicycompliance_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Credit Policy Compliance Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }
        public void DaInactiveCreditPolicyCompliance(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcreditpolicycompliance set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where creditpolicycompliance_gid='" + values.creditpolicycompliance_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPCI");

                msSQL = " insert into ocs_mst_tcreditpolicycomplianceinactivelog(" +
                      " creditpolicycomplianceinactivelog_gid, " +
                      " creditpolicycompliance_gid," +
                      " creditpolicycompliance_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.creditpolicycompliance_gid + "'," +
                      " '" + values.creditpolicycompliance_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Policy Compliance Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Policy Compliance Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }
        public void DaCreditPolicyComplianceInactiveLogview(string creditpolicycompliance_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT a.creditpolicycompliance_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcreditpolicycomplianceinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.creditpolicycompliance_gid ='" + creditpolicycompliance_gid + "' order by a.creditpolicycomplianceinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            entity_gid = (dr_datarow["creditpolicycompliance_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteCreditPolicyCompliance(string creditpolicycompliance_gid, string employee_gid, result values)
        {
            msSQL = " select creditpolicycompliance_name from ocs_mst_tcreditpolicycompliance where creditpolicycompliance_gid='" + creditpolicycompliance_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcreditpolicycompliance where creditpolicycompliance_gid='" + creditpolicycompliance_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Policy Compliance Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Credit Policy Compliance'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }


        // Assessment Agency List

        public void DaAssessmentAgencyList(MdlMstApplication360 values)
        {
            msSQL = " select assessmentagency_gid, assessmentagency_name from ocs_mst_tassessmentagency where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_assessmentagency = new List<assessmentagency_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.assessmentagency_list = dt_datatable.AsEnumerable().Select(row => new assessmentagency_list
                {
                    assessmentagency_gid = row["assessmentagency_gid"].ToString(),
                    assessmentagency_name = row["assessmentagency_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Bueau Name List

        public void DaBureauNameList(MdlMstApplication360 values)
        {
            msSQL = " select bureauname_gid, bureauname_name from ocs_mst_tbureauname where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_bureauname = new List<bureauname_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.bureauname_list = dt_datatable.AsEnumerable().Select(row => new bureauname_list
                {
                    bureauname_gid = row["bureauname_gid"].ToString(),
                    bureauname_name = row["bureauname_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Bank Account Level List

        public void DaBankAccountLevelList(MdlMstApplication360 values)
        {
            msSQL = " select bankaccountlevel_gid, bankaccountlevel_name from ocs_mst_tbankaccountlevel where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_bankaccountlevel = new List<bankaccountlevel_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.bankaccountlevel_list = dt_datatable.AsEnumerable().Select(row => new bankaccountlevel_list
                {
                    bankaccountlevel_gid = row["bankaccountlevel_gid"].ToString(),
                    bankaccountlevel_name = row["bankaccountlevel_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Assessment Agency Rating List

        public void DaAssessmentAgencyRatingList(MdlMstApplication360 values)
        {
            msSQL = " select assessmentagencyrating_gid, assessmentagencyrating_name from ocs_mst_tassessmentagencyrating where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_assessmentagencyrating = new List<assessmentagencyrating_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.assessmentagencyrating_list = dt_datatable.AsEnumerable().Select(row => new assessmentagencyrating_list
                {
                    assessmentagencyrating_gid = row["assessmentagencyrating_gid"].ToString(),
                    assessmentagencyrating_name = row["assessmentagencyrating_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // License Type List

        public void DalicensetypeList(MdlMstApplication360 values)
        {
            msSQL = " SELECT licensetype_gid,licensetype_name FROM ocs_mst_tlicensetype where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_licensetype = new List<licensetype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.licensetype_list = dt_datatable.AsEnumerable().Select(row => new licensetype_list
                {
                    licensetype_gid = row["licensetype_gid"].ToString(),
                    licensetype_name = row["licensetype_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Business Category List

        public void DaBusinessCategoryList(MdlMstApplication360 values)
        {
            msSQL = " SELECT businesscategory_gid,businesscategory_name FROM ocs_mst_tbusinesscategory where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_businesscategory = new List<businesscategory_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.businesscategory_list = dt_datatable.AsEnumerable().Select(row => new businesscategory_list
                {
                    businesscategory_gid = row["businesscategory_gid"].ToString(),
                    businesscategory_name = row["businesscategory_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // AML Category List

        public void DaAMLCategoryList(MdlMstApplication360 values)
        {
            msSQL = " SELECT amlcategory_gid,amlcategory_name FROM ocs_mst_tamlcategory where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_amlcategory = new List<amlcategory_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.amlcategory_list = dt_datatable.AsEnumerable().Select(row => new amlcategory_list
                {
                    amlcategory_gid = row["amlcategory_gid"].ToString(),
                    amlcategory_name = row["amlcategory_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Company Type List

        public void DaCompanyTypeList(MdlMstApplication360 values)
        {
            msSQL = " SELECT companytype_gid,companytype_name FROM ocs_mst_tcompanytype where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_companytype = new List<companytype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.companytype_list = dt_datatable.AsEnumerable().Select(row => new companytype_list
                {
                    companytype_gid = row["companytype_gid"].ToString(),
                    companytype_name = row["companytype_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        // Company Document List

        public void DaCompanyDocumentList(MdlMstApplication360 values,string documenttypes_gid, string program_gid)
        {
            msSQL = " SELECT a.companydocument_gid,a.companydocument_name FROM ocs_mst_tcompanydocument a" +
                    " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                    " where status='Y' and a.documenttypes_gid ='" + documenttypes_gid + "' and" +
                    " b.program_gid = '" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_companydocument = new List<companydocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.companydocument_list = dt_datatable.AsEnumerable().Select(row => new companydocument_list
                {
                    companydocument_gid = row["companydocument_gid"].ToString(),
                    companydocument_name = row["companydocument_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }
        // User Type List

        public void DaGetUserTypeList(MdlUserType objMdlUserType)
        {
            msSQL = " SELECT usertype_gid,user_type FROM ocs_mst_tusertype where status_log='Y' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getusertype = new List<usertype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlUserType.usertype_list = dt_datatable.AsEnumerable().Select(row => new usertype_list
                {
                    usertype_gid = row["usertype_gid"].ToString(),
                    user_type = row["user_type"].ToString(),
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Designation List

        public void DaGetDesignationList(MdlDesignation objMdlDesignation)
        {
            msSQL = " SELECT designation_gid,designation_type FROM ocs_mst_tdesignation where status_log='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdesignation = new List<designation_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlDesignation.designation_list = dt_datatable.AsEnumerable().Select(row => new designation_list
                {
                    designation_gid = row["designation_gid"].ToString(),
                    designation_type = row["designation_type"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }
        //Assessment Criteria
        public void DaGetAssessmentCriteria(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT assessmentcriteria_gid,api_code,assessmentcriteria_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tassessmentcriteria a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.assessmentcriteria_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            assessmentcriteria_gid = (dr_datarow["assessmentcriteria_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            assessmentcriteria_name = (dr_datarow["assessmentcriteria_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateAssessmentCriteria(application360 values, string employee_gid)
        {
            msSQL = "select assessmentcriteria_gid from ocs_mst_tassessmentcriteria where assessmentcriteria_name = '" + values.assessmentcriteria_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.assessmentcriteria_gid)
                //{
                    values.message = " This Assessment Criteria Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("AMCA");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("ASSC");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tassessmentcriteria(" +
                        " assessmentcriteria_gid," +
                        " api_code," +
                        " assessmentcriteria_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.assessmentcriteria_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Assessment Criteria Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }
        public void DaEditAssessmentCriteria(string assessmentcriteria_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT assessmentcriteria_gid, assessmentcriteria_name,lms_code, bureau_code, status as Status FROM ocs_mst_tassessmentcriteria where assessmentcriteria_gid='" + assessmentcriteria_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.assessmentcriteria_gid = objODBCDatareader["assessmentcriteria_gid"].ToString();
                    values.assessmentcriteria_name = objODBCDatareader["assessmentcriteria_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }
        public void DaUpdateAssessmentCriteria(string employee_gid, application360 values)
        {
            msSQL = "select assessmentcriteria_gid from ocs_mst_tassessmentcriteria where assessmentcriteria_name = '" + values.assessmentcriteria_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.assessmentcriteria_gid)
                {
                    values.message = " This Assessment Criteria Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tassessmentcriteria set " +
         " assessmentcriteria_name='" + values.assessmentcriteria_name.Replace("'", "") + "'," +
         " lms_code='" + lslms_code + "'," +
         " bureau_code='" + lsbureau_code + "'," +
         " updated_by='" + employee_gid + "'," +
         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
         " where assessmentcriteria_gid='" + values.assessmentcriteria_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ATCL");
                msSQL = " insert into ocs_mst_tassessmentcriterialog(" +
                       " assessmentcriteria_LOGgid, " +
                       " assessmentcriteria_gid, " +
                       " assessmentcriteria_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.assessmentcriteria_gid + "'," +
                       " '" + values.assessmentcriteria_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Assessment Criteria Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }
        public void DaInactiveAssessmentCriteria(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tassessmentcriteria set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where assessmentcriteria_gid='" + values.assessmentcriteria_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ACIL");

                msSQL = " insert into ocs_mst_tassessmentcriteriainactivelog(" +
                      " assessmentcriteriainactivelog_gid, " +
                      " assessmentcriteria_gid," +
                      " assessmentcriteria_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.assessmentcriteria_gid + "'," +
                      " '" + values.assessmentcriteria_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                     " '" + employee_gid + "'," +
                     " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Assessment Criteria Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Assessment Criteria Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }
        public void DaAssessmentCriteriaInactiveHistory(ApplicationInactiveHistory objapplicationhistory, string assessmentcriteria_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tassessmentcriteriainactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.assessmentcriteria_gid='" + assessmentcriteria_gid + "' order by a.assessmentcriteriainactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteAssessmentCriteria(string assessmentcriteria_gid, string employee_gid, result values)
        {
            msSQL = " select assessmentcriteria_name from ocs_mst_tassessmentcriteria where assessmentcriteria_gid='" + assessmentcriteria_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tassessmentcriteria where assessmentcriteria_gid='" + assessmentcriteria_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Assessment Criteria Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'AssessmentCriteria'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaGetPropertyinNameList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT property_gid,property_name FROM ocs_mst_tproperty where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    propertyin_gid = row["property_gid"].ToString(),
                    propertyin_name = row["property_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaGenderList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT gender_gid,gender_name FROM ocs_mst_tgender where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    gender_gid = (row["gender_gid"].ToString()),
                    gender_name = (row["gender_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaGetMaritalStatusList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT maritalstatus_gid,maritalstatus_name FROM ocs_mst_tmaritalstatus where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    maritalstatus_gid = (row["maritalstatus_gid"].ToString()),
                    maritalstatus_name = (row["maritalstatus_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaEducationalQualificationList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT educationalqualification_gid,educationalqualification_name FROM ocs_mst_teducationalqualification where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    educationalqualification_gid = (row["educationalqualification_gid"].ToString()),
                    educationalqualification_name = (row["educationalqualification_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaIncomeTypeList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT incometype_gid,incometype_name FROM ocs_mst_tincometype where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    incometype_gid = (row["incometype_gid"].ToString()),
                    incometype_name = (row["incometype_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaIndividualProofList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT individualproof_gid,individualproof_name FROM ocs_mst_tindividualproof where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    individualproof_gid = (row["individualproof_gid"].ToString()),
                    individualproof_name = (row["individualproof_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaOwnershipTypeList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT ownershiptype_gid,ownershiptype_name FROM ocs_mst_townershiptype where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    ownershiptype_gid = (row["ownershiptype_gid"].ToString()),
                    ownershiptype_name = (row["ownershiptype_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaResidenceTypeList(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT residencetype_gid,residencetype_name FROM ocs_mst_tresidencetype where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    residencetype_gid = (row["residencetype_gid"].ToString()),
                    residencetype_name = (row["residencetype_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaIndividualDocumentList(MdlMstApplication360 objapplication360,string documenttypes_gid, string program_gid )
        {
            msSQL = " SELECT a.individualdocument_gid,a.individualdocument_name FROM ocs_mst_tindividualdocument a" +
                    " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                    " where status='Y' and a.documenttypes_gid ='" + documenttypes_gid + "'" +
                    " and b.program_gid='" + program_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    individualdocument_gid = (row["individualdocument_gid"].ToString()),
                    individualdocument_name = (row["individualdocument_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }
        //Line of Activity

        public void DaGetLineofActivity(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT lineofactivity_gid,lineof_activity,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tlineofactivity a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.lineofactivity_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            lineofactivity_gid = (dr_datarow["lineofactivity_gid"].ToString()),
                            lineof_activity = (dr_datarow["lineof_activity"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateLineofActivity(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("LAAC");
            msGetGid = objcmnfunctions.GetMasterGID("LOAT");
            msSQL = " insert into ocs_mst_tlineofactivity(" +
                    " lineofactivity_gid," +
                    " lineof_activity," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.lineof_activity.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Line of Activity Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditLineofActivity(string lineofactivity_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT lineofactivity_gid,lineof_activity,lms_code, bureau_code, status as Status FROM ocs_mst_tlineofactivity " +
                        " where lineofactivity_gid='" + lineofactivity_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.lineofactivity_gid = objODBCDatareader["lineofactivity_gid"].ToString();
                    values.lineof_activity = objODBCDatareader["lineof_activity"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateLineofActivity(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tlineofactivity set " +
                 " lineof_activity='" + values.lineof_activity.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where lineofactivity_gid='" + values.lineofactivity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LOAL");

                msSQL = " insert into ocs_mst_tlineofactivitylog (" +
                       " lineofactivity_LOGgid , " +
                       " lineofactivity_gid, " +
                       " lineof_activity," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.lineofactivity_gid + "'," +
                       " '" + values.lineof_activity.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Line of Activity Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveLineofActivity(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tlineofactivity set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where lineofactivity_gid='" + values.lineofactivity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LOAI");

                msSQL = " insert into ocs_mst_tlineofactivityinactivelog (" +
                      " lineofactivityinactivelog_gid , " +
                      " lineofactivity_gid," +
                      " lineof_activity," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.lineofactivity_gid + "'," +
                      " '" + values.lineof_activity + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Line of Activity Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Line of Activity Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteLineofActivity(string lineofactivity_gid, string employee_gid, result values)
        {

            msSQL = " select lineof_activity from ocs_mst_tlineofactivity where lineofactivity_gid='" + lineofactivity_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tlineofactivity where lineofactivity_gid='" + lineofactivity_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Line of Activity Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Line of Activity'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaLineofActivityInactiveLogview(string lineofactivity_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT lineofactivity_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tlineofactivityinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where lineofactivity_gid ='" + lineofactivity_gid + "' order by a.lineofactivityinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            lineofactivity_gid = (dr_datarow["lineofactivity_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }


        //BSR Code

        public void DaGetBsrCode(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT bsrcode_gid,bsr_code,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbsrcode a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.bsrcode_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bsrcode_gid = (dr_datarow["bsrcode_gid"].ToString()),
                            bsr_code = (dr_datarow["bsr_code"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBsrCode(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BCAC");
            msGetGid = objcmnfunctions.GetMasterGID("BSRT");
            msSQL = " insert into ocs_mst_tbsrcode(" +
                    " bsrcode_gid," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " bsr_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," + 
                    "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.bsr_code.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "BSR Code Added successfully";
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }
        }
        public void DaEditBsrCode(string bsrcode_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT bsrcode_gid,bsr_code,lms_code, bureau_code, status as Status FROM ocs_mst_tbsrcode " +
                        " where bsrcode_gid='" + bsrcode_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.bsrcode_gid = objODBCDatareader["bsrcode_gid"].ToString();
                    values.bsr_code = objODBCDatareader["bsr_code"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBsrCode(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,bsr_code from ocs_mst_tbsrcode where bsrcode_gid='" + values.bsrcode_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("BSRL");
                    msSQL = " insert into ocs_mst_tbsrcodelog(" +
                              " bsrcode_LOGgid ," +
                              " bsrcode_gid," +
                              " bsr_code, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.bsrcode_gid + "'," +
                              "'" + objODBCDatareader["bsr_code"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tbsrcode set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " bsr_code='" + values.bsr_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where bsrcode_gid='" + values.bsrcode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "BSR Code updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating";
            }
        }

        public void DaInactiveBsrCode(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbsrcode set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where bsrcode_gid='" + values.bsrcode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BSRI");

                msSQL = " insert into ocs_mst_tbsrcodeinactivelog (" +
                      " bsrcodeinactivelog_gid , " +
                      " bsrcode_gid," +
                      " bsr_code," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.bsrcode_gid + "'," +
                      " '" + values.bsr_code + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "BSR Code Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "BSR Code Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteBsrCode(string bsrcode_gid, string employee_gid, result values)
        {
            msSQL = " select bsr_code from ocs_mst_tbsrcode where bsrcode_gid ='" + bsrcode_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tbsrcode where bsrcode_gid='" + bsrcode_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "BSR Code Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'BSR Code'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaBsrCodeInactiveLogview(string bsrcode_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT bsrcode_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tbsrcodeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where bsrcode_gid ='" + bsrcode_gid + "' order by a.bsrcodeinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bsrcode_gid = (dr_datarow["bsrcode_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //PSL Category

        public void DaGetPslCategory(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT pslcategory_gid,psl_category,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tpslcategory a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.pslcategory_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            pslcategory_gid = (dr_datarow["pslcategory_gid"].ToString()),
                            psl_category = (dr_datarow["psl_category"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePslCategory(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PCAC");
            msGetGid = objcmnfunctions.GetMasterGID("MPST");
            msSQL = " insert into ocs_mst_tpslcategory(" +
                    " pslcategory_gid ," +
                    " api_code ," +
                    " lms_code," +
                    " bureau_code," +
                    " psl_category ," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," + 
                    "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.psl_category.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Category Added successfully";
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }
        }
        public void DaEditPslCategory(string pslcategory_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT pslcategory_gid,psl_category,lms_code, bureau_code, status as Status FROM ocs_mst_tpslcategory " +
                        " where pslcategory_gid='" + pslcategory_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.pslcategory_gid = objODBCDatareader["pslcategory_gid"].ToString();
                    values.psl_category = objODBCDatareader["psl_category"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePslCategory(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,psl_category from ocs_mst_tpslcategory where pslcategory_gid ='" + values.pslcategory_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("MPSL");
                    msSQL = " insert into ocs_mst_tpslcategorylog(" +
                              " pslcategory_loggid  ," +
                              " pslcategory_gid," +
                              " psl_category, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.pslcategory_gid + "'," +
                              "'" + objODBCDatareader["psl_category"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tpslcategory set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " psl_category='" + values.psl_category + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where pslcategory_gid='" + values.pslcategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Category updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating";
            }
        }

        public void DaInactivePslCategory(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tpslcategory set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where pslcategory_gid='" + values.pslcategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MPSI");

                msSQL = " insert into ocs_mst_tpslcategoryinactivelog (" +
                      " pslcategoryinactivelog_gid  , " +
                      " pslcategory_gid," +
                      " psl_category," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.pslcategory_gid + "'," +
                      " '" + values.psl_category + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "PSL Category Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "PSL Category Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeletePslCategory(string pslcategory_gid, string employee_gid, result values)
        {
            msSQL = " select psl_category from ocs_mst_tpslcategory where pslcategory_gid='" + pslcategory_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tpslcategory where pslcategory_gid ='" + pslcategory_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Category Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'PSL Category'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaPslCategoryInactiveLogview(string pslcategory_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT pslcategory_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tpslcategoryinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where pslcategory_gid ='" + pslcategory_gid + "' order by a.pslcategoryinactivelog_gid   desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            pslcategory_gid = (dr_datarow["pslcategory_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Weaker Section

        public void DaGetWeakerSection(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT weakersection_gid,weaker_section,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tweakersection a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.weakersection_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            weakersection_gid = (dr_datarow["weakersection_gid"].ToString()),
                            weaker_section = (dr_datarow["weaker_section"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }


        public void DaCreateWeakerSection(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("WSAC");
            msGetGid = objcmnfunctions.GetMasterGID("MWST");
            msSQL = " insert into ocs_mst_tweakersection (" +
                    " weakersection_gid," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " weaker_section," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," + 
                    "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.weaker_section.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Weaker Section Added successfully";
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }
        }
        public void DaEditWeakerSection(string weakersection_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT weakersection_gid,weaker_section,lms_code, bureau_code, status as Status FROM ocs_mst_tweakersection " +
                        " where weakersection_gid='" + weakersection_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.weakersection_gid = objODBCDatareader["weakersection_gid"].ToString();
                    values.weaker_section = objODBCDatareader["weaker_section"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateWeakerSection(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,weaker_section from ocs_mst_tweakersection where weakersection_gid ='" + values.weakersection_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("MWSL");
                    msSQL = " insert into ocs_mst_tweakersectionlog(" +
                              " weakersection_loggid   ," +
                              " weakersection_gid," +
                              " weaker_section, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.weakersection_gid + "'," +
                              "'" + objODBCDatareader["weaker_section"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tweakersection set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " weaker_section='" + values.weaker_section + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where weakersection_gid='" + values.weakersection_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Weaker Section updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating";
            }
        }

        public void DaInactiveWeakerSection(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tweakersection set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where weakersection_gid='" + values.weakersection_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MWSI");

                msSQL = " insert into ocs_mst_tweakersectioninactivelog (" +
                      " weakersectioninactivelog_gid   , " +
                      " weakersection_gid," +
                      " weaker_section," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.weakersection_gid + "'," +
                      " '" + values.weaker_section + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Weaker Section Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Weaker Section Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteWeakerSection(string weakersection_gid, string employee_gid, result values)
        {
            msSQL = " select weaker_section from ocs_mst_tweakersection where weakersection_gid='" + weakersection_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tweakersection where weakersection_gid ='" + weakersection_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Weaker Section Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Weaker Section'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaWeakerSectionInactiveLogview(string weakersection_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT weakersection_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tweakersectioninactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where weakersection_gid ='" + weakersection_gid + "' order by a.weakersectioninactivelog_gid    desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            weakersection_gid = (dr_datarow["weakersection_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //PSL Purpose

        public void DaGetPslPurpose(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT pslpurpose_gid ,psl_purpose,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tpslpurpose a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.pslpurpose_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            pslpurpose_gid = (dr_datarow["pslpurpose_gid"].ToString()),
                            psl_purpose = (dr_datarow["psl_purpose"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePslPurpose(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PPAC");
            msGetGid = objcmnfunctions.GetMasterGID("PSLT");
            msSQL = " insert into ocs_mst_tpslpurpose(" +
                    " pslpurpose_gid," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " psl_purpose," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," + 
                    "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.psl_purpose.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Purpose Added successfully";
            }
            else
            {
                values.message = "Error Occured while Adding";
                values.status = false;
            }
        }
        public void DaEditPslPurpose(string pslpurpose_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT pslpurpose_gid,psl_purpose,lms_code, bureau_code, status as Status FROM ocs_mst_tpslpurpose " +
                        " where pslpurpose_gid='" + pslpurpose_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.pslpurpose_gid = objODBCDatareader["pslpurpose_gid"].ToString();
                    values.psl_purpose = objODBCDatareader["psl_purpose"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePslPurpose(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,psl_purpose from ocs_mst_tpslpurpose where pslpurpose_gid ='" + values.pslpurpose_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("PSLL");
                    msSQL = " insert into ocs_mst_tpslpurposelog(" +
                              " pslpurpose_loggid  ," +
                              " pslpurpose_gid," +
                              " psl_purpose, " +
                              " created_by, " +
                              " created_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.pslpurpose_gid + "'," +
                              "'" + objODBCDatareader["psl_purpose"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tpslpurpose set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " psl_purpose='" + values.psl_purpose + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where pslpurpose_gid='" + values.pslpurpose_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Purpose updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating";
            }
        }

        public void DaInactivePslPurpose(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tpslpurpose set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where pslpurpose_gid='" + values.pslpurpose_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PSLI");

                msSQL = " insert into ocs_mst_tpslpurposeinactivelog(" +
                      " pslpurposeinactivelog_gid  , " +
                      " pslpurpose_gid," +
                      " psl_purpose," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.pslpurpose_gid + "'," +
                      " '" + values.psl_purpose + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "PSL Purpose Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "PSL Purpose Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeletePslPurpose(string pslpurpose_gid, string employee_gid, result values)
        {
            msSQL = " select psl_purpose from ocs_mst_tpslpurpose where pslpurpose_gid='" + pslpurpose_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tpslpurpose where pslpurpose_gid ='" + pslpurpose_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "PSL Purpose Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'PSL Purpose'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaPslPurposeInactiveLogview(string pslpurpose_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT pslpurpose_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tpslpurposeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where pslpurpose_gid ='" + pslpurpose_gid + "' order by a.pslpurposeinactivelog_gid   desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            pslpurpose_gid = (dr_datarow["pslpurpose_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        // Occupation

        public void DaGetOccupation(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT occupation_gid,api_code,occupation_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_toccupation a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.occupation_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            occupation_gid = (dr_datarow["occupation_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            occupation_name = (dr_datarow["occupation_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateOccupation(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select occupation_name from ocs_mst_toccupation where occupation_name = '" + values.occupation_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Occupation Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("MOCG");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("OCCP");
                msSQL = " insert into ocs_mst_toccupation(" +
                       " occupation_gid," +
                       " api_code," +
                       " occupation_name," +
                       " lms_code," +
                       " bureau_code," +
                       " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                       "'" + values.occupation_name.Replace("'", "") + "'," +
                       "'" + lslms_code + "'," +
                       "'" + lsbureau_code + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Occupation Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditOccupation(string occupation_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  occupation_gid, occupation_name,lms_code, bureau_code, status as Status FROM ocs_mst_toccupation " +
                        " where occupation_gid='" + occupation_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.occupation_gid = objODBCDatareader["occupation_gid"].ToString();
                    values.occupation_name = objODBCDatareader["occupation_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateOccupation(string employee_gid, application360 values)
        {
            msSQL = "select occupation_gid from ocs_mst_toccupation where occupation_name = '" + values.occupation_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.occupation_gid)
                {
                    values.message = "Occuption Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_toccupation set " +
                 " occupation_name='" + values.occupation_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where occupation_gid='" + values.occupation_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("OCLG");

                msSQL = " insert into ocs_mst_toccupationlog (" +
                       " occupation_LOGgid, " +
                       " occupation_gid, " +
                       " occupation_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.occupation_gid + "'," +
                       " '" + values.occupation_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Occupation Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveOccupation(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_toccupation set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  occupation_gid='" + values.occupation_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("OCIL");

                msSQL = " insert into ocs_mst_toccupationinactivelog (" +
                      " occupationinactivelog_gid, " +
                      " occupation_gid," +
                      " occupation_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.occupation_gid + "'," +
                      " '" + values.occupation_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Occupation Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Occupation Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaOccupationInactiveLogview(string occupation_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  occupation_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_toccupationinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  occupation_gid ='" + occupation_gid + "' order by a.occupationinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            occupation_gid = (dr_datarow["occupation_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteOccupation(string occupation_gid, string employee_gid, result values)
        {
            msSQL = " select occupation_name from ocs_mst_toccupation where occupation_gid='" + occupation_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_toccupation where occupation_gid='" + occupation_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Occupation Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Occupation'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }




        // Turnover

        public void DaGetTurnover(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT turnover_gid,turnover_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tturnover a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.turnover_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            turnover_gid = (dr_datarow["turnover_gid"].ToString()),
                            turnover_name = (dr_datarow["turnover_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateTurnover(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TOAC");
            msGetGid = objcmnfunctions.GetMasterGID("MTUG");
            msSQL = " insert into ocs_mst_tturnover(" +
                   " turnover_gid," +
                   " turnover_name," +
                   " api_code," +
                   " lms_code," +
                   " bureau_code," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.turnover_name.Replace("'", "") + "'," +
                   "'" + msGetAPICode + "'," +
                   "'" + lslms_code + "'," +
                   "'" + lsbureau_code + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Turnover Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditTurnover(string turnover_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  turnover_gid, turnover_name,lms_code, bureau_code, status as Status FROM ocs_mst_tturnover " +
                        " where turnover_gid='" + turnover_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.turnover_gid = objODBCDatareader["turnover_gid"].ToString();
                    values.turnover_name = objODBCDatareader["turnover_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateTurnover(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tturnover set " +
                 " turnover_name='" + values.turnover_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where turnover_gid='" + values.turnover_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("TULG");

                msSQL = " insert into ocs_mst_tturnoverlog (" +
                       " turnover_LOGgid, " +
                       " turnover_gid, " +
                       " turnover_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.turnover_gid + "'," +
                       " '" + values.turnover_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Turnover Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveTurnover(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tturnover set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  turnover_gid='" + values.turnover_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("TUIL");

                msSQL = " insert into ocs_mst_tturnoverinactivelog (" +
                      " turnoverinactivelog_gid, " +
                      " turnover_gid," +
                      " turnover_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.turnover_gid + "'," +
                      " '" + values.turnover_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Turnover Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Turnover Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaTurnoverInactiveLogview(string turnover_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  turnover_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tturnoverinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  turnover_gid ='" + turnover_gid + "' order by a.turnoverinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            turnover_gid = (dr_datarow["turnover_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteTurnover(string turnover_gid, string employee_gid, result values)
        {
            msSQL = " select turnover_name from ocs_mst_tturnover where turnover_gid='" + turnover_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tturnover where turnover_gid='" + turnover_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Turnover Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Turnover'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }
        // Msme

        public void DaGetMsme(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT msme_gid,msme_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tmsme a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.msme_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            msme_gid = (dr_datarow["msme_gid"].ToString()),
                            msme_name = (dr_datarow["msme_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateMsme(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("MSMA");
            msGetGid = objcmnfunctions.GetMasterGID("MMSG");
            msSQL = " insert into ocs_mst_tmsme(" +
                   " msme_gid," +
                   " msme_name," +
                   " api_code," +
                   " lms_code," +
                   " bureau_code," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.msme_name.Replace("'", "") + "'," +
                   "'" + msGetAPICode + "'," +
                   "'" + lslms_code + "'," +
                   "'" + lsbureau_code + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "MSME Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditMsme(string msme_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  msme_gid, msme_name,lms_code, bureau_code, status as Status FROM ocs_mst_tmsme " +
                        " where msme_gid='" + msme_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.msme_gid = objODBCDatareader["msme_gid"].ToString();
                    values.msme_name = objODBCDatareader["msme_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateMsme(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tmsme set " +
                 " msme_name='" + values.msme_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where msme_gid='" + values.msme_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSLG");

                msSQL = " insert into ocs_mst_tmsmelog (" +
                       " msme_LOGgid, " +
                       " msme_gid, " +
                       " msme_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.msme_gid + "'," +
                       " '" + values.msme_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "MSME Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveMsme(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tmsme set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  msme_gid='" + values.msme_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSIL");

                msSQL = " insert into ocs_mst_tmsmeinactivelog (" +
                      " msmeinactivelog_gid, " +
                      " msme_gid," +
                      " msme_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.msme_gid + "'," +
                      " '" + values.msme_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "MSME Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "MSME Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred ";
            }
        }

        public void DaMsmeInactiveLogview(string msme_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  msme_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tmsmeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  msme_gid ='" + msme_gid + "' order by a.msmeinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            msme_gid = (dr_datarow["msme_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteMsme(string msme_gid, string employee_gid, result values)
        {
            msSQL = " select msme_name from ocs_mst_tmsme where msme_gid='" + msme_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tmsme where msme_gid='" + msme_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "MSME Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'MSME'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }
        // Purpose Column

        public void DaGetPurposecolumn(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT purposecolumn_gid,purposecolumn_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tpurposecolumn a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.purposecolumn_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            purposecolumn_gid = (dr_datarow["purposecolumn_gid"].ToString()),
                            purposecolumn_name = (dr_datarow["purposecolumn_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePurposecolumn(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PCAK");
            msGetGid = objcmnfunctions.GetMasterGID("MPUG");
            msSQL = " insert into ocs_mst_tpurposecolumn(" +
                   " purposecolumn_gid," +
                   " purposecolumn_name," +
                   " api_code," +
                   " lms_code," +
                   " bureau_code," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.purposecolumn_name.Replace("'", "") + "'," +
                   "'" + msGetAPICode + "'," +
                   "'" + lslms_code + "'," +
                   "'" + lsbureau_code + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Purpose Column Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditPurposecolumn(string purposecolumn_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  purposecolumn_gid, purposecolumn_name,lms_code, bureau_code, status as Status FROM ocs_mst_tpurposecolumn " +
                        " where purposecolumn_gid='" + purposecolumn_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.purposecolumn_gid = objODBCDatareader["purposecolumn_gid"].ToString();
                    values.purposecolumn_name = objODBCDatareader["purposecolumn_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePurposecolumn(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tpurposecolumn set " +
                 " purposecolumn_name='" + values.purposecolumn_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where purposecolumn_gid='" + values.purposecolumn_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSLG");

                msSQL = " insert into ocs_mst_tpurposecolumnlog (" +
                       " purposecolumn_LOGgid, " +
                       " purposecolumn_gid, " +
                       " purposecolumn_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.purposecolumn_gid + "'," +
                       " '" + values.purposecolumn_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Purpose Column Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactivePurposecolumn(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tpurposecolumn set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  purposecolumn_gid='" + values.purposecolumn_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MSIL");

                msSQL = " insert into ocs_mst_tpurposecolumninactivelog (" +
                      " purposecolumninactivelog_gid, " +
                      " purposecolumn_gid," +
                      " purposecolumn_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.purposecolumn_gid + "'," +
                      " '" + values.purposecolumn_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Purpose Column Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Purpose Column Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaPurposecolumnInactiveLogview(string purposecolumn_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  purposecolumn_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tpurposecolumninactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  purposecolumn_gid ='" + purposecolumn_gid + "' order by a.purposecolumninactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            purposecolumn_gid = (dr_datarow["purposecolumn_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeletePurposecolumn(string purposecolumn_gid, string employee_gid, result values)
        {
            msSQL = " select purposecolumn_name from ocs_mst_tpurposecolumn where purposecolumn_gid='" + purposecolumn_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tpurposecolumn where purposecolumn_gid='" + purposecolumn_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Purpose Column Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Purpose Column'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Investment

        public void DaGetInvestment(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT investment_gid,investment_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tinvestment a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.investment_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            investment_gid = (dr_datarow["investment_gid"].ToString()),
                            investment_name = (dr_datarow["investment_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateInvestment(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("ITAC");
            msGetGid = objcmnfunctions.GetMasterGID("MING");
            msSQL = " insert into ocs_mst_tinvestment(" +
                   " investment_gid," +
                   " investment_name," +
                   " api_code," +
                   " lms_code," +
                   " bureau_code," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.investment_name.Replace("'", "") + "'," +
                   "'" + msGetAPICode + "'," +
                   "'" + lslms_code + "'," +
                   "'" + lsbureau_code + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Investment Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditInvestment(string investment_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  investment_gid, investment_name,lms_code, bureau_code, status as Status FROM ocs_mst_tinvestment " +
                        " where investment_gid='" + investment_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.investment_gid = objODBCDatareader["investment_gid"].ToString();
                    values.investment_name = objODBCDatareader["investment_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateInvestment(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tinvestment set " +
                 " investment_name='" + values.investment_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where investment_gid='" + values.investment_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("INLG");

                msSQL = " insert into ocs_mst_tinvestmentlog (" +
                       " investment_LOGgid, " +
                       " investment_gid, " +
                       " investment_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.investment_gid + "'," +
                       " '" + values.investment_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Investment Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveInvestment(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tinvestment set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  investment_gid='" + values.investment_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("INIL");

                msSQL = " insert into ocs_mst_tinvestmentinactivelog (" +
                      " investmentinactivelog_gid, " +
                      " investment_gid," +
                      " investment_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.investment_gid + "'," +
                      " '" + values.investment_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Investment Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Investment Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInvestmentInactiveLogview(string investment_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  investment_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tinvestmentinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  investment_gid ='" + investment_gid + "' order by a.investmentinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            investment_gid = (dr_datarow["investment_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteInvestment(string investment_gid, string employee_gid, result values)
        {
            msSQL = " select investment_name from ocs_mst_tinvestment where investment_gid='" + investment_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tinvestment where investment_gid='" + investment_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Investment Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Investment'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }




        //Nature of Entity

        public void DaGetNatureofEntity(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT natureofentity_gid,natureofentity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tnatureofentity a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.natureofentity_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            natureofentity_gid = (dr_datarow["natureofentity_gid"].ToString()),
                            natureofentity_name = (dr_datarow["natureofentity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateNatureofEntity(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("NEAC");
            msGetGid = objcmnfunctions.GetMasterGID("MNAG");
            msSQL = " insert into ocs_mst_tnatureofentity(" +
                   " natureofentity_gid," +
                   " natureofentity_name," +
                   " api_code," +
                   " lms_code," +
                   " bureau_code," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.natureofentity_name.Replace("'", "") + "'," +
                   "'" + msGetAPICode + "'," +
                   "'" + lslms_code + "'," +
                   "'" + lsbureau_code + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Nature of Entity Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditNatureofEntity(string natureofentity_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT  natureofentity_gid, natureofentity_name,lms_code, bureau_code, status as Status FROM ocs_mst_tnatureofentity " +
                        " where natureofentity_gid='" + natureofentity_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.natureofentity_gid = objODBCDatareader["natureofentity_gid"].ToString();
                    values.natureofentity_name = objODBCDatareader["natureofentity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateNatureofEntity(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tnatureofentity set " +
                 " natureofentity_name='" + values.natureofentity_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where natureofentity_gid='" + values.natureofentity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("NALG");

                msSQL = " insert into ocs_mst_tnatureofentitylog (" +
                       " natureofentity_LOGgid, " +
                       " natureofentity_gid, " +
                       " natureofentity_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.natureofentity_gid + "'," +
                       " '" + values.natureofentity_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Nature of Entity Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveNatureofEntity(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tnatureofentity set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where  natureofentity_gid='" + values.natureofentity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("NAIL");

                msSQL = " insert into ocs_mst_tnatureofentityinactivelog (" +
                      " natureofentityinactivelog_gid, " +
                      " natureofentity_gid," +
                      " natureofentity_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.natureofentity_gid + "'," +
                      " '" + values.natureofentity_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Nature of Entity Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Nature of Entity Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaNatureofEntityInactiveLogview(string natureofentity_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT  natureofentity_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tnatureofentityinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where  natureofentity_gid ='" + natureofentity_gid + "' order by a.natureofentityinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            natureofentity_gid = (dr_datarow["natureofentity_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaDeleteNatureofEntity(string natureofentity_gid, string employee_gid, result values)
        {
            msSQL = " select natureofentity_name from ocs_mst_tnatureofentity where natureofentity_gid='" + natureofentity_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tnatureofentity where natureofentity_gid='" + natureofentity_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Nature of Entity Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Nature of Entity'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }
        //Bank Account Type

        public void DaGetBankAccountType(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT bankaccounttype_gid,api_code,bankaccounttype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbankaccounttype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.bankaccounttype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bankaccounttype_gid = (dr_datarow["bankaccounttype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            bankaccounttype_name = (dr_datarow["bankaccounttype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBankAccountType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("BATG");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BANT");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select bankaccounttype_name from ocs_mst_tbankaccounttype where bankaccounttype_name = '" + values.bankaccounttype_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Bank Account Type Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tbankaccounttype(" +
                    " bankaccounttype_gid," +
                     " api_code," +
                    " bankaccounttype_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.bankaccounttype_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Bank Account Type Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditBankAccountType(string bankaccounttype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT bankaccounttype_gid,bankaccounttype_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbankaccounttype where bankaccounttype_gid='" + bankaccounttype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.bankaccounttype_gid = objODBCDatareader["bankaccounttype_gid"].ToString();
                    values.bankaccounttype_name = objODBCDatareader["bankaccounttype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBankAccountType(string employee_gid, application360 values)
        {
            msSQL = "select bankaccounttype_gid from ocs_mst_tbankaccounttype where bankaccounttype_name = '" + values.bankaccounttype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.bankaccounttype_gid)
                {
                    values.message = "Bank Account Type Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbankaccounttype set " +
                 " bankaccounttype_name='" + values.bankaccounttype_name + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where bankaccounttype_gid='" + values.bankaccounttype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BATL");

                msSQL = " insert into ocs_mst_tbankaccounttypelog (" +
                       " bankaccounttype_loggid, " +
                       " bankaccounttype_gid, " +
                       " bankaccounttype_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.bankaccounttype_gid + "'," +
                       " '" + values.bankaccounttype_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Bank Account Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Bank Account Type";
            }
        }

        public void DaInactiveBankAccountType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbankaccounttype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where bankaccounttype_gid='" + values.bankaccounttype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BATI");

                msSQL = " insert into ocs_mst_tbankaccounttypeinactivelog (" +
                      " bankaccounttypeinactivelog_gid, " +
                      " bankaccounttype_gid," +
                      " bankaccounttype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.bankaccounttype_gid + "'," +
                      " '" + values.bankaccounttype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Bank Account Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Bank Account Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteBankAccountType(string bankaccounttype_gid, string employee_gid, result values)
        {
            msSQL = " select bankaccounttype_name from ocs_mst_tbankaccounttype where bankaccounttype_gid='" + bankaccounttype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tbankaccounttype where bankaccounttype_gid='" + bankaccounttype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Bank Account Type Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Bank Account Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveBankAccountTypeHistory(ApplicationInactiveHistory objapplicationhistory, string bankaccounttype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tbankaccounttypeinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.bankaccounttype_gid='" + bankaccounttype_gid + "' order by a.bankaccounttypeinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }
        //Bank Name
        public void DaGetBankName(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT bankname_gid,api_code,bankname_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tbankname a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.bankname_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            bankname_gid = (dr_datarow["bankname_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            bankname_name = (dr_datarow["bankname_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateBankName(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("BNGD");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("BANK");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select bankname_name from ocs_mst_tbankname where bankname_name = '" + values.bankname_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Bank Name Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tbankname(" +
                    " bankname_gid," +
                    " api_code," +
                    " bankname_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.bankname_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Bank Name Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditBankName(string bankname_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT bankname_gid,bankname_name,lms_code, bureau_code, status as Status FROM ocs_mst_tbankname where bankname_gid='" + bankname_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.bankname_gid = objODBCDatareader["bankname_gid"].ToString();
                    values.bankname_name = objODBCDatareader["bankname_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateBankName(string employee_gid, application360 values)
        {
            msSQL = "select bankname_gid from ocs_mst_tbankname where bankname_name = '" + values.bankname_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.bankname_gid)
                {
                    values.message = "Bank Name Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tbankname set " +
                 " bankname_name='" + values.bankname_name + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where bankname_gid='" + values.bankname_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BNLG");

                msSQL = " insert into ocs_mst_tbanknamelog (" +
                       " bankname_loggid, " +
                       " bankname_gid, " +
                       " bankname_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.bankname_gid + "'," +
                       " '" + values.bankname_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Bank Name Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Bank Name";
            }
        }

        public void DaInactiveBankName(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tbankname set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where bankname_gid='" + values.bankname_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("BNLL");

                msSQL = " insert into ocs_mst_tbanknameinactivelog (" +
                      " banknameinactivelog_gid, " +
                      " bankname_gid," +
                      " bankname_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.bankname_gid + "'," +
                      " '" + values.bankname_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Bank Name Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Bank Name Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteBankName(string bankname_gid, string employee_gid, result values)
        {
            msSQL = " select bankname_name from ocs_mst_tbankname where bankname_gid='" + bankname_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tbankname where bankname_gid='" + bankname_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Bank Name Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Bank Name'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveBankNameHistory(ApplicationInactiveHistory objapplicationhistory, string bankname_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tbanknameinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.bankname_gid='" + bankname_gid + "' order by a.banknameinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }
        //Property
        public void DaGetProperty(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT property_gid,api_code,property_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tproperty a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.property_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            property_gid = (dr_datarow["property_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            property_name = (dr_datarow["property_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateProperty(application360 values, string employee_gid)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("PRYG");
                    msGetAPICode = objcmnfunctions.GetApiMasterGID("PROT");
                    if (values.lms_code == null || values.lms_code == "")
                    {
                        lslms_code = "";
                    }
                    else
                    {
                        lslms_code = values.lms_code.Replace("'", "");
                    }
                    if (values.bureau_code == null || values.bureau_code == "")
                    {
                        lsbureau_code = "";
                    }
                    else
                    {
                        lsbureau_code = values.bureau_code.Replace("'", "");
                    }
                    msSQL = "select property_name from ocs_mst_tproperty where property_name = '" + values.property_name.Replace("'", "\\'") + "' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.status = false;
                        values.message = "Property Already Exist";
                    }
                    else
                    {
                        msSQL = " insert into ocs_mst_tproperty(" +
                    " property_gid," +
                     " api_code," +
                    " property_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.property_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult != 0)
                        {
                            values.status = true;
                            values.message = "Property Added Successfully";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occurred While Adding";
                        }
                    }
                }
        public void DaEditProperty(string property_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT property_gid,property_name,lms_code, bureau_code, status as Status FROM ocs_mst_tproperty where property_gid='" + property_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.property_gid = objODBCDatareader["property_gid"].ToString();
                    values.property_name = objODBCDatareader["property_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateProperty(string employee_gid, application360 values)
        {
                    msSQL = "select property_gid from ocs_mst_tproperty where property_name = '" + values.property_name.Replace("'", "\\'") + "'";
                    lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentgid != "")
                    {
                        if (lsdocumentgid != values.property_gid)
                        {
                            values.message = "Property Already Exist";
                            values.status = false;
                            return;
                        }
                    }

                    if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tproperty set " +
                 " property_name='" + values.property_name + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where property_gid='" + values.property_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PRYL");

                msSQL = " insert into ocs_mst_tpropertylog (" +
                       " property_loggid, " +
                       " property_gid, " +
                       " property_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.property_gid + "'," +
                       " '" + values.property_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Property Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Property";
            }
        }

        public void DaInactiveProperty(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tproperty set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where property_gid='" + values.property_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PRLG");

                msSQL = " insert into ocs_mst_tpropertyinactivelog (" +
                      " propertyinactivelog_gid, " +
                      " property_gid," +
                      " property_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.property_gid + "'," +
                      " '" + values.property_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Property Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Property Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteProperty(string property_gid, string employee_gid, result values)
        {
            msSQL = " select property_name from ocs_mst_tproperty where property_gid='" + property_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tproperty where property_gid='" + property_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Property Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Property'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactivePropertyHistory(ApplicationInactiveHistory objapplicationhistory, string property_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tpropertyinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.property_gid='" + property_gid + "' order by a.propertyinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }
        //clientdetails
        public void DaGetClientDetails(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT clientdetails_gid,clientdetails_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tclientdetails a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.clientdetails_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            clientdetails_gid = (dr_datarow["clientdetails_gid"].ToString()),
                            clientdetails_name = (dr_datarow["clientdetails_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateClientDetails(application360 values, string employee_gid)
        {
            msGetAPICode = objcmnfunctions.GetApiMasterGID("CDAC");
            msGetGid = objcmnfunctions.GetMasterGID("CLDG");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tclientdetails(" +
                    " clientdetails_gid," +
                    " clientdetails_name," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.clientdetails_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Client Details Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditClientDetails(string clientdetails_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT clientdetails_gid,clientdetails_name,lms_code, bureau_code, status as Status FROM ocs_mst_tclientdetails where clientdetails_gid='" + clientdetails_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.clientdetails_gid = objODBCDatareader["clientdetails_gid"].ToString();
                    values.clientdetails_name = objODBCDatareader["clientdetails_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateClientDetails(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tclientdetails set " +
                 " clientdetails_name='" + values.clientdetails_name + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where clientdetails_gid='" + values.clientdetails_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CLDL");

                msSQL = " insert into ocs_mst_tclientdetailslog (" +
                       " clientdetails_loggid, " +
                       " clientdetails_gid, " +
                       " clientdetails_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.clientdetails_gid + "'," +
                       " '" + values.clientdetails_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Client Details Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating clientdetails";
            }
        }

        public void DaInactiveClientDetails(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tclientdetails set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where clientdetails_gid='" + values.clientdetails_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CLDI");

                msSQL = " insert into ocs_mst_tclientdetailsinactivelog (" +
                      " clientdetailsinactivelog_gid, " +
                      " clientdetails_gid," +
                      " clientdetails_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.clientdetails_gid + "'," +
                      " '" + values.clientdetails_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Client Details Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Client Details Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteClientDetails(string clientdetails_gid, string employee_gid, result values)
        {
            msSQL = " select clientdetails_name from ocs_mst_tclientdetails where clientdetails_gid='" + clientdetails_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tclientdetails where clientdetails_gid='" + clientdetails_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Client Details Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Client Details'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactiveClientDetailsHistory(ApplicationInactiveHistory objapplicationhistory, string clientdetails_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tclientdetailsinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.clientdetails_gid='" + clientdetails_gid + "' order by a.clientdetailsinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Supplier

        public void DaGetSupplier(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT supplier_gid,supplier_name,supplier_ref_no ,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsupplier a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.supplier_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            supplier_gid = (dr_datarow["supplier_gid"].ToString()),
                            supplier_name = (dr_datarow["supplier_name"].ToString()),
                            supplier_ref_no = (dr_datarow["supplier_ref_no"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSupplier(MdlSupplier2BankAcc values, string employee_gid)
        {


            msSQL = " select supplier2bank_gid from ocs_mst_tsupplier2bank where supplier_gid ='" + employee_gid + "'";
            string supplier2bank_gid = objdbconn.GetExecuteScalar(msSQL);
            if (string.IsNullOrEmpty(supplier2bank_gid))
            {
                values.status = false;
                values.message = "Add Atleast one bank account";
                return;
            }
                msGetGidREF = objcmnfunctions.GetMasterGID("SUP");
            msGetGid = objcmnfunctions.GetMasterGID("SUPT");
            msSQL = " insert into ocs_mst_tsupplier(" +
                    " supplier_gid," +
                    " supplier_ref_no ," +
                    " supplier_name," +
                    " pan_no, " +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "',"+
            //if (values.supplier_ref_no == "" || values.supplier_ref_no == null)
            //{
            //    msSQL += "'',";
            //}
            //else
            //{
            //    msSQL += "'" + values.supplier_ref_no.Replace("'", "") + "',";
            //}

            //msSQL +=
             "'" + msGetGidREF + "'," +
                "'" + values.supplier_name.Replace("'", "") + "'," +
                "'" + values.pan_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                msSQL = " update ocs_mst_tsupplier2bank set supplier_gid = '" + msGetGid + "' where supplier_gid = '" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Supplier Added Successfully";
            }
            else
            {
                values.message = "Error Occured While Adding";
                values.status = false;
            }
        }
        public void DaEditSupplier(string supplier_gid, string employee_gid, MdlSupplier2BankAcc values)
        {
            try
            {
                msSQL = " SELECT supplier_gid,supplier_name,supplier_ref_no, pan_no, status as Status FROM ocs_mst_tsupplier " +
                        " where supplier_gid='" + supplier_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.supplier_gid = objODBCDatareader["supplier_gid"].ToString();
                    values.supplier_name = objODBCDatareader["supplier_name"].ToString();
                    values.supplier_ref_no = objODBCDatareader["supplier_ref_no"].ToString();
                    //values.Status = objODBCDatareader["Status"].ToString();
                    values.pan_no = objODBCDatareader["pan_no"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,ifsc_code,bankaccount_number," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                         " from ocs_mst_tsupplier2bank a " +
                            " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                         "where supplier_gid ='" + values.supplier_gid + "' or supplier_gid ='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditbankacc_list = new List<supplierbankacc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditbankacc_list.Add(new supplierbankacc_list
                        {
                            bank_name = dt["bank_name"].ToString(),
                            branch_name = dt["branch_name"].ToString(),
                            ifsc_code = dt["ifsc_code"].ToString(),
                            bankaccount_number = dt["bankaccount_number"].ToString(),
                            supplier2bank_gid = dt["supplier2bank_gid"].ToString(),
                            supplier_gid = dt["supplier_gid"].ToString(),
                            created_date = dt["created_date"].ToString(),
                            created_by = dt["created_by"].ToString(),
                            updated_date = dt["updated_date"].ToString(),
                            updated_by = dt["updated_by"].ToString(),
                        });
                        values.supplierbankacc_list = getcreditbankacc_list;
                    }
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSupplier(string employee_gid, MdlSupplier2BankAcc values)
        {

            msSQL = " select supplier2bank_gid from ocs_mst_tsupplier2bank where supplier_gid ='" + employee_gid + "' or supplier_gid='" + values.supplier_gid + "'";
            string supplier2bank_gid = objdbconn.GetExecuteScalar(msSQL);
            if (string.IsNullOrEmpty(supplier2bank_gid))
            {
                values.status = false;
                values.message = "Add Atleast one bank account";
                return;
            }

            msSQL = "select updated_by, updated_date,supplier_name, supplier_ref_no, pan_no from ocs_mst_tsupplier where supplier_gid='" + values.supplier_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SUPL");
                    msSQL = " insert into ocs_mst_tsupplierlog(" +
                              " supplier_LOGgid ," +
                              " supplier_gid," +
                              " supplier_name, " +
                               " supplier_ref_no, " +
                                " pan_no, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.supplier_gid + "'," +
                              "'" + objODBCDatareader["supplier_name"].ToString() + "'," +
                              "'" + objODBCDatareader["supplier_ref_no"].ToString() + "'," +
                              "'" + objODBCDatareader["pan_no"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tsupplier set " +
            //if (values.supplier_ref_no == "" || values.supplier_ref_no == null)
            //{
            //    msSQL += " supplier_ref_no='',";
            //}
            //else
            //{
            //    msSQL += " supplier_ref_no='" + values.supplier_ref_no + "',";
            //}

            //msSQL += 
                
                " supplier_name='" + values.supplier_name + "'," +
                " pan_no = '" + values.pan_no + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where supplier_gid='" + values.supplier_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Supplier Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
            }
        }

        public void DaInactiveSupplier(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsupplier set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where supplier_gid='" + values.supplier_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SUPI");

                msSQL = " insert into ocs_mst_tsupplierinactivelog (" +
                      " supplierinactivelog_gid , " +
                      " supplier_gid," +
                      " supplier_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.supplier_gid + "'," +
                      " '" + values.supplier_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Supplier Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Supplier Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteSupplier(string supplier_gid, string employee_gid, result values)
        {
            msSQL = " select supplier_name from ocs_mst_tsupplier where supplier_gid ='" + supplier_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsupplier where supplier_gid='" + supplier_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Supplier Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Supplier'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaSupplierInactiveLogview(string supplier_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT supplier_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tsupplierinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where supplier_gid ='" + supplier_gid + "' order by a.supplierinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            supplier_gid = (dr_datarow["supplier_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        //Source of Contact

        // Add 

        public void DaGetSourceofContact(MdlMstApplication360 objapplication360)

        {
            try
            {
                msSQL = " SELECT sourceofcontact_gid,api_code,sourceofcontact_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsourceofcontact a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.sourceofcontact_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            sourceofcontact_gid = (dr_datarow["sourceofcontact_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            sourceofcontact_name = (dr_datarow["sourceofcontact_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateSourceofContact(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("OMSC");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("SOUC");
            msSQL = " insert into ocs_mst_tsourceofcontact(" +
                    " sourceofcontact_gid ," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " sourceofcontact_name ," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                     "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.sourceofcontact_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Source of Contact Added Successfully";
            }
            else
            {
                values.message = "Error Occured While Adding";
                values.status = false;
            }
        }

        // Edit 

        public void DaEditSourceofContact(string sourceofcontact_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT sourceofcontact_gid,sourceofcontact_name,lms_code, bureau_code, status as status FROM ocs_mst_tsourceofcontact " +
                        " where sourceofcontact_gid='" + sourceofcontact_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.sourceofcontact_gid = objODBCDatareader["sourceofcontact_gid"].ToString();
                    values.sourceofcontact_name = objODBCDatareader["sourceofcontact_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateSourceofContact(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,sourceofcontact_name from ocs_mst_tsourceofcontact where sourceofcontact_gid ='" + values.sourceofcontact_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SCLO");
                    msSQL = " insert into ocs_mst_tsourceofcontactlog(" +
                              " sourceofcontactlog_gid  ," +
                              " sourceofcontact_gid," +
                              " sourceofcontact_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.sourceofcontact_gid + "'," +
                              "'" + objODBCDatareader["sourceofcontact_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tsourceofcontact set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " sourceofcontact_name='" + values.sourceofcontact_name + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where sourceofcontact_gid='" + values.sourceofcontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Source of Contact Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
            }
        }

        //Status 

        public void DaInactiveSourceofContact(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsourceofcontact set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where sourceofcontact_gid='" + values.sourceofcontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("OMSI");

                msSQL = " insert into ocs_mst_tsourceofcontactinactivelog (" +
                      " sourceofcontactinactivelog_gid, " +
                      " sourceofcontact_gid," +
                      " sourceofcontact_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.sourceofcontact_gid + "'," +
                      " '" + values.sourceofcontact_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Source of Contact Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Source of Contact Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveSourceofContactHistory(ApplicationInactiveHistory objapplicationhistory, string sourceofcontact_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tsourceofcontactinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.sourceofcontact_gid='" + sourceofcontact_gid + "' order by a.sourceofcontactinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Delete

        public void DaDeleteSourceofContact(string sourceofcontact_gid, string employee_gid, result values)
        {
            msSQL = " select sourceofcontact_name from ocs_mst_tsourceofcontact where sourceofcontact_gid='" + sourceofcontact_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsourceofcontact where sourceofcontact_gid ='" + sourceofcontact_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Source of Contact'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Source of Contact Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Call Type

        // Add 

        public void DaGetCallType(MdlMstApplication360 objapplication360)

        {
            try
            {
                msSQL = " SELECT calltype_gid,api_code,calltype_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcalltype a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.calltype_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            calltype_gid = (dr_datarow["calltype_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            calltype_name = (dr_datarow["calltype_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCallType(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SCCT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TECT");
            msSQL = " insert into ocs_mst_tcalltype(" +
                    " calltype_gid ," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " calltype_name ," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
            "'" + msGetAPICode + "',"; 
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.calltype_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Call Type Added Successfully";
            }
            else
            {
                values.message = "Error Occured While Adding";
                values.status = false;
            }
        }

        // Edit 

        public void DaEditCallType(string calltype_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT calltype_gid,calltype_name,lms_code, bureau_code, status as status FROM ocs_mst_tcalltype " +
                        " where calltype_gid='" + calltype_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.calltype_gid = objODBCDatareader["calltype_gid"].ToString();
                    values.calltype_name = objODBCDatareader["calltype_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCallType(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,calltype_name from ocs_mst_tcalltype where calltype_gid ='" + values.calltype_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CTLG");
                    msSQL = " insert into ocs_mst_tcalltypelog(" +
                              " calltypelog_gid  ," +
                              " calltype_gid," +
                              " calltype_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.calltype_gid + "'," +
                              "'" + objODBCDatareader["calltype_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tcalltype set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " calltype_name='" + values.calltype_name + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where calltype_gid='" + values.calltype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Call Type Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
            }
        }

        // Status

        public void DaInactiveCallType(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcalltype set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where calltype_gid='" + values.calltype_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CTLI");

                msSQL = " insert into ocs_mst_tcalltypeinactivelog (" +
                      " calltypeinactivelog_gid, " +
                      " calltype_gid," +
                      " calltype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.calltype_gid + "'," +
                      " '" + values.calltype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Call Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Call Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveCallTypeHistory(ApplicationInactiveHistory objapplicationhistory, string calltype_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tcalltypeinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.calltype_gid='" + calltype_gid + "' order by a.calltypeinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Delete

        public void DaDeleteCallType(string calltype_gid, string employee_gid, result values)
        {
            msSQL = " select calltype_name from ocs_mst_tcalltype where calltype_gid='" + calltype_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcalltype where calltype_gid ='" + calltype_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Call Type'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Call Type Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Tele calling - Function

        // Add

        public void DaGetTelecallingFunction(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT telecallingfunction_gid,api_code,telecallingfunction_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_ttelecallingfunction a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.telecallingfunction_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            telecallingfunction_gid = (dr_datarow["telecallingfunction_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            telecallingfunction_name = (dr_datarow["telecallingfunction_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        public void DaCreateTelecallingFunction(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SCTF");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TEAT");
            msSQL = " insert into ocs_mst_ttelecallingfunction(" +
                    " telecallingfunction_gid ," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " telecallingfunction_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.telecallingfunction_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Tele calling - Function Added Successfully";
            }
            else
            {
                values.message = "Error Occured While Adding";
                values.status = false;
            }
        }

        // Edit 

        public void DaEditTelecallingFunction(string telecallingfunction_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT telecallingfunction_gid,telecallingfunction_name,lms_code, bureau_code, status as status FROM ocs_mst_ttelecallingfunction " +
                        " where telecallingfunction_gid='" + telecallingfunction_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.telecallingfunction_gid = objODBCDatareader["telecallingfunction_gid"].ToString();
                    values.telecallingfunction_name = objODBCDatareader["telecallingfunction_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateTelecallingFunction(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,telecallingfunction_name from ocs_mst_ttelecallingfunction where telecallingfunction_gid ='" + values.telecallingfunction_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("TFLG");
                    msSQL = " insert into ocs_mst_ttelecallingfunctionlog(" +
                              " telecallingfunctionlog_gid  ," +
                              " telecallingfunction_gid," +
                              " telecallingfunction_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.telecallingfunction_gid + "'," +
                              "'" + objODBCDatareader["telecallingfunction_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_ttelecallingfunction set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " telecallingfunction_name='" + values.telecallingfunction_name + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where telecallingfunction_gid='" + values.telecallingfunction_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Tele calling - Function Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
            }
        }
        // Status

        public void DaInactiveTelecallingFunction(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_ttelecallingfunction set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where telecallingfunction_gid='" + values.telecallingfunction_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("TFLI");

                msSQL = " insert into ocs_mst_ttelecallingfunctioninactivelog (" +
                      " telecallingfunctioninactivelog_gid, " +
                      " telecallingfunction_gid," +
                      " telecallingfunction_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.telecallingfunction_gid + "'," +
                      " '" + values.telecallingfunction_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Tele calling - Function Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Tele calling - Function Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveTelecallingFunctionHistory(ApplicationInactiveHistory objapplicationhistory, string telecallingfunction_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_ttelecallingfunctioninactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.telecallingfunction_gid='" + telecallingfunction_gid + "' order by a.telecallingfunctioninactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Delete

        public void DaDeleteTelecallingFunction(string telecallingfunction_gid, string employee_gid, result values)
        {
            msSQL = " select telecallingfunction_name from ocs_mst_ttelecallingfunction where telecallingfunction_gid='" + telecallingfunction_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_ttelecallingfunction where telecallingfunction_gid='" + telecallingfunction_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Tele calling - Function'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Tele calling - Function Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Call Received Number

        // Add

        public void DaGetCallReceivedNumber(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT callreceivednumber_gid,api_code,callreceivednumber_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcallreceivednumber a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.callreceivednumber_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            callreceivednumber_gid = (dr_datarow["callreceivednumber_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            callreceivednumber_name = (dr_datarow["callreceivednumber_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCallReceivedNumber(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SCCN");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("TECR");
            msSQL = " insert into ocs_mst_tcallreceivednumber(" +
                    " callreceivednumber_gid ," +
                    " api_code," +
                    " lms_code," +
                    " bureau_code," +
                    " callreceivednumber_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                   "'" + msGetAPICode + "',";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.lms_code.Replace("'", "") + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
            }

            msSQL += "'" + values.callreceivednumber_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Call Received Number Added Successfully";
            }
            else
            {
                values.message = "Error Occured While Adding";
                values.status = false;
            }
        }

        // Edit 

        public void DaEditCallReceivedNumber(string callreceivednumber_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT callreceivednumber_gid,callreceivednumber_name,lms_code, bureau_code, status as status FROM ocs_mst_tcallreceivednumber " +
                        " where callreceivednumber_gid='" + callreceivednumber_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.callreceivednumber_gid = objODBCDatareader["callreceivednumber_gid"].ToString();
                    values.callreceivednumber_name = objODBCDatareader["callreceivednumber_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCallReceivedNumber(string employee_gid, application360 values)
        {
            msSQL = "select updated_by, updated_date,callreceivednumber_name from ocs_mst_tcallreceivednumber where callreceivednumber_gid ='" + values.callreceivednumber_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CNLG");
                    msSQL = " insert into ocs_mst_tcallreceivednumberlog(" +
                              " callreceivednumberlog_gid  ," +
                              " callreceivednumber_gid," +
                              " callreceivednumber_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.callreceivednumber_gid + "'," +
                              "'" + objODBCDatareader["callreceivednumber_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tcallreceivednumber set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " callreceivednumber_name='" + values.callreceivednumber_name + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where callreceivednumber_gid='" + values.callreceivednumber_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Call Received Number Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
            }
        }

        // Status

        public void DaInactiveCallReceivedNumber(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcallreceivednumber set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where callreceivednumber_gid='" + values.callreceivednumber_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CNLI");

                msSQL = " insert into ocs_mst_tcallreceivednumberinactivelog (" +
                      " callreceivednumberinactivelog_gid, " +
                      " callreceivednumber_gid," +
                      " callreceivednumber_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.callreceivednumber_gid + "'," +
                      " '" + values.callreceivednumber_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Call Received Number Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Call Received Number Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveCallReceivedNumberHistory(ApplicationInactiveHistory objapplicationhistory, string callreceivednumber_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tcallreceivednumberinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.callreceivednumber_gid='" + callreceivednumber_gid + "' order by a.callreceivednumberinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Delete

        public void DaDeleteCallReceivedNumber(string callreceivednumber_gid, string employee_gid, result values)
        {
            msSQL = " select callreceivednumber_name from ocs_mst_tcallreceivednumber where callreceivednumber_gid='" + callreceivednumber_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcallreceivednumber where callreceivednumber_gid='" + callreceivednumber_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Call Received Number'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Call Received Number Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Product

        //ADD Product

        public void DaGetProducts(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT a.product_gid ,a.api_code,a.product_code,a.product_name,a.businessunit_gid, a.businessunit_name,a.valuechain_gid, a.valuechain_name, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tproducts a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid  order by a.product_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            product_gid = (dr_datarow["product_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            product_code = (dr_datarow["product_code"].ToString()),
                            product_name = (dr_datarow["product_name"].ToString()),
                            businessunit_gid = (dr_datarow["businessunit_gid"].ToString()),
                            businessunit_name = (dr_datarow["businessunit_name"].ToString()),
                            valuechain_gid = (dr_datarow["valuechain_gid"].ToString()),
                            valuechain_name = (dr_datarow["valuechain_name"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateProducts(application360 values, string employee_gid)
        {

            msSQL = "select product_gid from ocs_mst_tproducts where product_name = '" + values.product_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.product_gid)
                //{
                    values.message = "This Product Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("PRCT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("PROD");
            msSQL = " insert into ocs_mst_tproducts(" +
                    " product_gid," +
                    " api_code," +
                    " product_code," +
                    " product_name," +
                    " businessunit_gid," +
                    " businessunit_name," +
                    " valuechain_gid," +
                    " valuechain_name," +
                    " category_gid," +
                    " category_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.product_code.Replace("'", "") + "'," +
                    "'" + values.product_name.Replace("'", "") + "'," +
                    "'" + values.businessunit_gid + "'," +
                    "'" + values.businessunit_name.Replace("'", "") + "'," +
                    "'" + values.valuechain_gid + "'," +
                    "'" + values.valuechain_name.Replace("'", "") + "'," +
                    "'" + values.category_gid + "'," +
                    "'" + values.category_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Product Added Successfully";


                msSQL = "update ocs_mst_tvariety set product_gid ='" + msGetGid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditygststatus set product_gid ='" + msGetGid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditytradeproductdtl set mstproduct_gid ='" + msGetGid + "' where mstproduct_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditydocument set product_gid ='" + msGetGid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        // Edit Product

        public void DaEditProduct(string product_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT product_gid,product_code,product_name,businessunit_gid,status as Status, businessunit_name,valuechain_gid, valuechain_name," +
                        " category_gid, category_name FROM ocs_mst_tproducts" +
                        " where product_gid='" + product_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_code = objODBCDatareader["product_code"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.businessunit_gid = objODBCDatareader["businessunit_gid"].ToString();
                    values.businessunit_name = objODBCDatareader["businessunit_name"].ToString();
                    values.valuechain_gid = objODBCDatareader["valuechain_gid"].ToString();
                    values.valuechain_name = objODBCDatareader["valuechain_name"].ToString();
                    values.category_gid = objODBCDatareader["category_gid"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateProduct(string employee_gid, application360 values)
        {

            msSQL = "select product_gid from ocs_mst_tproducts where product_name = '" + values.product_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.product_gid)
                {
                    values.message = "This Product Already Exists";
                    values.status = false;
                    return ;
                }
            }
            
            msSQL = " select updated_by, updated_date,product_code, product_name, product_gid, businessunit_gid, businessunit_name,valuechain_gid, valuechain_name," +
                    " category_gid, category_name" +
                    " from ocs_mst_tproducts where product_gid='" + values.product_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();


                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("PRCL");
                    msSQL = " insert into ocs_mst_tproductlog(" +
                            " productlog_gid," +
                            " product_gid," +
                            " product_code," +
                            " product_name," +
                            " businessunit_gid," +
                            " businessunit_name," +
                            " valuechain_gid," +
                            " valuechain_name," +
                            " category_gid," +
                            " category_name," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + values.product_gid + "'," +
                            "'" + objODBCDatareader["product_code"].ToString() + "'," +
                            "'" + objODBCDatareader["product_name"].ToString() + "'," +
                            "'" + objODBCDatareader["businessunit_gid"].ToString() + "'," +
                            "'" + objODBCDatareader["businessunit_name"].ToString() + "'," +
                            "'" + objODBCDatareader["valuechain_gid"].ToString() + "'," +
                            "'" + objODBCDatareader["valuechain_name"].ToString() + "'," +
                            "'" + objODBCDatareader["category_gid"].ToString() + "'," +
                            "'" + objODBCDatareader["category_name"].ToString() + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tproducts set " +
                     " product_code='" + values.product_code.Replace("'", "\\'") + "'," +
                     " product_name='" + values.product_name.Replace("'", "\\'") + "'," +
                     " businessunit_gid='" + values.businessunit_gid + "'," +
                     " businessunit_name='" + values.businessunit_name.Replace("'", "\\'") + "'," +
                     " valuechain_gid='" + values.valuechain_gid + "'," +
                     " valuechain_name='" + values.valuechain_name.Replace("'", "\\'") + "'," +
                     " category_gid='" + values.category_gid + "'," +
                     " category_name='" + values.category_name.Replace("'", "\\'") + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where product_gid='" + values.product_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Product Updated Successfully";

                msSQL = "update ocs_mst_tvariety set product_gid ='" + values.product_gid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditygststatus set product_gid ='" + values.product_gid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditytradeproductdtl set mstproduct_gid ='" + values.product_gid + "' where mstproduct_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update agr_mst_tcommoditydocument set product_gid ='" + values.product_gid + "' where product_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        // Add Variety

        public void DaGetVariety(string employee_gid, MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " select variety_gid,api_code,variety_name,botanical_name,alternative_name,hsn_code, " +
                        " typeofsupplynature_name,sectorclassification_name, varietysector_name,varietycategory_name,headingdesc_product " +
                        " from ocs_mst_tvariety where product_gid ='" + employee_gid + "'" + "order by product_gid desc"; 
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            variety_gid = (dr_datarow["variety_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            variety_name = (dr_datarow["variety_name"].ToString()),
                            botanical_name = (dr_datarow["botanical_name"].ToString()),
                            alternative_name = (dr_datarow["alternative_name"].ToString()),
                            hsn_code = (dr_datarow["hsn_code"].ToString()),
                            typeofsupplynature_name = (dr_datarow["typeofsupplynature_name"].ToString()),
                            sectorclassification_name = (dr_datarow["sectorclassification_name"].ToString()),
                            varietysector_name = dr_datarow["varietysector_name"].ToString(),
                            varietycategory_name = dr_datarow["varietycategory_name"].ToString(),
                            headingdesc_product = dr_datarow["headingdesc_product"].ToString(),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateVariety(variety values, string employee_gid)
        {
            //msSQL = "select variety_name from ocs_mst_tvariety where variety_name = '" + values.variety_name.Replace("'", "\\'") + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    values.status = false;
            //    values.message = "Variety Name Already Exist";
            //}
            //else { 
            if (values.variety_name == null || values.variety_name == "")
            {
                lsvariety_name = "";
            }
            else
            {
                lsvariety_name = values.variety_name.Replace("'", "");
            }
            if (values.botanical_name == null || values.botanical_name == "")
            {
                lsbotanical_name = "";
            }
            else
            {
                lsbotanical_name = values.botanical_name.Replace("'", "");
            }

            if (values.alternative_name == null || values.alternative_name == "")
            {
                lsalternative_name = "";
            }
            else
            {
                lsalternative_name = values.alternative_name.Replace("'", "");
            }
            if (values.hsn_code == null || values.hsn_code == "")
                values.hsn_code = "";
            else
                values.hsn_code = values.hsn_code.Replace("'", "");
            if (values.headingdesc_product == null || values.headingdesc_product == "")
            {
                values.headingdesc_product = "";
            }
            else
            {
                values.headingdesc_product = values.headingdesc_product.Replace("'", "");
            }

            msGetGid = objcmnfunctions.GetMasterGID("VACT");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("VART");
            msSQL = " insert into ocs_mst_tvariety(" +
                    " variety_gid," +
                    " api_code," +
                    " product_gid," +
                    " variety_name," +
                    " botanical_name," +
                    " alternative_name," +
                    " hsn_code, " +
                    " typeofsupplynature_gid, " +
                    " typeofsupplynature_name, " +
                    " sectorclassification_gid, " +
                    " sectorclassification_name, " +
                    " varietysector_gid," +
                    " varietysector_name," +
                    " varietycategory_gid," +
                    " varietycategory_name," +
                    " headingdesc_product," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                      "'" + msGetAPICode + "'," +
                    "'" + employee_gid + "'," +
                    "'" + lsvariety_name + "'," +
                    "'" + lsbotanical_name + "'," +
                    "'" + lsalternative_name + "'," +
                    "'" + values.hsn_code + "'," +
                    "'" + values.typeofsupplynature_gid + "'," +
                    "'" + values.typeofsupplynature_name + "'," +
                    "'" + values.sectorclassification_gid + "'," +
                    "'" + values.sectorclassification_name + "'," +
                    "'" + values.varietysector_gid + "'," +
                    "'" + values.varietysector_name + "'," +
                    "'" + values.varietycategory_gid + "'," +
                    "'" + values.varietycategory_name + "'," +
                    "'" + values.headingdesc_product.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Variety Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
            //}
        }

        // Edit Variety

        public void DaGetVarietyEditList(string product_gid, MdlMstApplication360 values)
        {
            msSQL = " select variety_gid ,api_code,variety_name,botanical_name,alternative_name, product_gid,hsn_code, " +
                    " typeofsupplynature_name,sectorclassification_name,varietysector_name,varietycategory_name,headingdesc_product " +
                    " from ocs_mst_tvariety " +
                    " where product_gid ='" + product_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getvariety_list = new List<variety_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getvariety_list.Add(new variety_list
                    {
                        variety_gid = dt["variety_gid"].ToString(),
                        api_code = dt["api_code"].ToString(),
                        product_gid = dt["product_gid"].ToString(),
                        variety_name = dt["variety_name"].ToString(),
                        botanical_name = dt["botanical_name"].ToString(),
                        alternative_name = dt["alternative_name"].ToString(),
                        hsn_code = dt["hsn_code"].ToString(),
                        typeofsupplynature_name = dt["typeofsupplynature_name"].ToString(),
                        sectorclassification_name = dt["sectorclassification_name"].ToString(),
                        varietysector_name = dt["varietysector_name"].ToString(),
                        varietycategory_name = dt["varietycategory_name"].ToString(),
                        headingdesc_product = dt["headingdesc_product"].ToString(),
                    });
                    values.variety_list = getvariety_list;
                }
            }
            dt_datatable.Dispose();
        }

        //public void DaUpdateVariety(string employee_gid, variety values)
        //{


        //    msSQL = " update ocs_mst_tvariety set ";
        //    if (values.variety_name == null || values.variety_name == "")
        //    {
        //        msSQL += " variety_name='',";
        //    }
        //    else
        //    {
        //        msSQL += " variety_name='" + values.variety_name.Replace("'", "") + "',";

        //    }
        //    if (values.botanical_name == null || values.botanical_name == "")
        //    {
        //        msSQL += " botanical_name='',";
        //    }
        //    else
        //    {
        //        msSQL += " botanical_name='" + values.botanical_name.Replace("'", "") + "',";

        //    }
        //    if (values.alternative_name == null || values.alternative_name == "")
        //    {
        //        msSQL += " alternative_name='',";
        //    }
        //    else
        //    {
        //        msSQL += " alternative_name='" + values.alternative_name.Replace("'", "") + "',";

        //    }

        //    msSQL += " updated_by='" + employee_gid + "'," +
        //               " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
        //               " where variety_gid='" + values.variety_gid + "' ";

        //    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        //    if (mnResult != 0)
        //    {
        //        values.status = true;
        //        values.message = " Variety Updated Successfully..!";
        //    }
        //    else
        //    {
        //        values.status = false;
        //        values.message = "Error Occured While Updating Variety Details..!";
        //    }
        //}

        public void DaGetVarietyTempEditList(string product_gid, string employee_gid, MdlMstApplication360 values)
        {
            msSQL = " select variety_gid ,api_code,variety_name,botanical_name,alternative_name, product_gid,hsn_code, " +
                    " varietysector_name,varietycategory_name,headingdesc_product,typeofsupplynature_name,sectorclassification_name " + 
                    " from ocs_mst_tvariety " +
                    " where product_gid = '" + employee_gid + "' or product_gid ='" + product_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getapplication_list.Add(new application_list
                    {
                        variety_gid = dt["variety_gid"].ToString(),
                        api_code = dt["api_code"].ToString(),
                        product_gid = dt["product_gid"].ToString(),
                        variety_name = dt["variety_name"].ToString(),
                        botanical_name = dt["botanical_name"].ToString(),
                        alternative_name = dt["alternative_name"].ToString(),
                        hsn_code = dt["hsn_code"].ToString(),
                        typeofsupplynature_name = dt["typeofsupplynature_name"].ToString(),
                        sectorclassification_name = dt["sectorclassification_name"].ToString(),
                        varietysector_name = dt["varietysector_name"].ToString(),
                        varietycategory_name = dt["varietycategory_name"].ToString(),
                        headingdesc_product = dt["headingdesc_product"].ToString(),
                    });
                    values.application_list = getapplication_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tvariety where product_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditygststatus where product_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditytradeproductdtl where mstproduct_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditydocument where product_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        public void DaDeleteVariety(string variety_gid, variety values)
        {
            msSQL = "delete from ocs_mst_tvariety where variety_gid='" + variety_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditygststatus where variety_gid='" + variety_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditytradeproductdtl where variety_gid='" + variety_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from agr_mst_tcommoditydocument where variety_gid='" + variety_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Variety Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }

        }

        // DropDown

        public void DaGetDropDown(string employee_gid, MdlMstApplication360 values)
        {
            // Sector

            msSQL = " SELECT a.businessunit_gid,a.businessunit_name " +
                    " FROM ocs_mst_tbusinessunit a  where status_log='Y' order by a.businessunit_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment = new List<sector_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new sector_list
                    {
                        businessunit_gid = (dr_datarow["businessunit_gid"].ToString()),
                        businessunit_name = (dr_datarow["businessunit_name"].ToString()),

                    });
                }
                values.sector_list = getSegment;
            }
            dt_datatable.Dispose();

            // Category
            msSQL = " SELECT a.valuechain_gid,a.valuechain_name " +
                   " FROM ocs_mst_tvaluechain a  where status_log='Y' order by a.valuechain_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getCategory = new List<category_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getCategory.Add(new category_list
                    {
                        valuechain_gid = (dr_datarow["valuechain_gid"].ToString()),
                        valuechain_name = (dr_datarow["valuechain_name"].ToString()),

                    });
                }
                values.category_list = getCategory;
            }
            dt_datatable.Dispose();

            //colending program
            msSQL = " SELECT a.colendingcategory_gid,a.colendingcategory_name " +
                   " FROM ocs_mst_tcolendingcategory a  where status='Y' order by a.colendingcategory_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getColending = new List<colending_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getColending.Add(new colending_list
                    {
                        colendingcategory_gid = (dr_datarow["colendingcategory_gid"].ToString()),
                        colendingcategory_name = (dr_datarow["colendingcategory_name"].ToString()),

                    });
                }
                values.colending_list = getColending;
            }
            dt_datatable.Dispose();

            //CSA Category
            msSQL = " SELECT a.category_gid,a.category_name " +
                   " FROM ocs_mst_tcategory a  where status='Y' order by a.category_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getCSACategory = new List<csacategory_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getCSACategory.Add(new csacategory_list
                    {
                        category_gid = (dr_datarow["category_gid"].ToString()),
                        category_name = (dr_datarow["category_name"].ToString()),

                    });
                }
                values.csacategory_list = getCSACategory;
            }
            dt_datatable.Dispose();

        }

       
    

    // Status

    public void DaInactiveProduct(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tproducts set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where product_gid='" + values.product_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PRAL");

                msSQL = " insert into ocs_mst_tproductsinactivelog (" +
                      " productinactivelog_gid, " +
                      " product_gid," +
                       " product_code," +
                      " product_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.product_gid + "'," +
                      " '" + values.product_code + "'," +
                       " '" + values.product_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Product Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Product Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveProductHistory(ApplicationInactiveHistory objapplicationhistory, string product_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tproductsinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.product_gid='" + product_gid + "' order by a.productinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Delete

        public void DaDeleteProduct(string product_gid, string employee_gid, result values)
        {
            msSQL = " select product_name from ocs_mst_tproducts where product_gid='" + product_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tproducts where product_gid='" + product_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Product'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Product Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        // Document Type 

        //Add

        public void DaPostDocumentType(MdlDocumentType values, string employee_gid)
        {
            msSQL = "select documenttype_name from ocs_mst_tdocumenttypes where documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Document Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("DOCT");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("DCTM");
                msGetGidREF = objcmnfunctions.GetMasterGID("DOC");

                msSQL = " insert into ocs_mst_tdocumenttypes(" +
                        " documenttypes_gid ," +
                        " api_code," +
                        " documenttype_code ," +
                        " documenttype_name," +
                        " description," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + msGetGidREF + "'," +
                        "'" + values.documenttype_name.Replace("'", "") + "',";
                if (values.description == null || values.description == "")
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.description.Replace("'", "") + "',";
                }

                msSQL += "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Document Type Added Successfully";
                }
                else
                {
                    values.message = "Error Occured While Adding";
                    values.status = false;
                }
            }
        }

        public void DaGetDocumentType(MdlDocumentType objmaster)
        {
            try
            {
                msSQL = " SELECT a.documenttypes_gid ,a.api_code,a.documenttype_code,a.documenttype_name,a.description, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status" +
                        " FROM ocs_mst_tdocumenttypes a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.created_date desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumenttype_list = new List<documenttype>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getdocumenttype_list.Add(new documenttype
                        {
                            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            documenttype_code = (dr_datarow["documenttype_code"].ToString()),
                            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                            description = (dr_datarow["description"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            Status = (dr_datarow["Status"].ToString()),
                        });
                    }
                    objmaster.documenttype = getdocumenttype_list;
                }
                dt_datatable.Dispose();
                objmaster.status = true;
            }
            catch (Exception ex)
            {
                objmaster.status = false;
            }
        }

        //Edit

        public void DaGetDocumentEdit(string documenttypes_gid, MdlDocumentType objmaster)
        {
            msSQL = " select documenttypes_gid,documenttype_name,documenttype_code,description,status as Status  from ocs_mst_tdocumenttypes " +
                    " where documenttypes_gid='" + documenttypes_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objmaster.documenttypes_gid = objODBCDatareader["documenttypes_gid"].ToString();
                objmaster.documenttype_code = objODBCDatareader["documenttype_code"].ToString();
                objmaster.documenttype_name = objODBCDatareader["documenttype_name"].ToString();
                objmaster.description = objODBCDatareader["description"].ToString();
                objmaster.Status = objODBCDatareader["Status"].ToString();
            }
            objODBCDatareader.Close();

        }

        public bool DaDocumentUpdate(string employee_gid, MdlDocumentType values)
        {
            msSQL = "select documenttypes_gid from ocs_mst_tdocumenttypes where documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.documenttypes_gid)
                {
                    values.message = "Document Name Already Exist";
                    values.status = false;
                    return false;
                }
            }

            msSQL = "select updated_by, updated_date,documenttype_name,documenttype_code from ocs_mst_tdocumenttypes where documenttypes_gid ='" + values.documenttypes_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("DOCL");
                    msSQL = " insert into ocs_mst_tdocumenttypeslog(" +
                            " documenttypeslog_gid," +
                            " documenttypes_gid," +
                            " documenttype_code , " +
                            " documenttype_name," +
                            " updated_by, " +
                            " updated_date) " +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + values.documenttypes_gid + "'," +
                            "'" + objODBCDatareader["documenttype_code"].ToString().Replace("'", "") + "'," +
                            "'" + objODBCDatareader["documenttype_name"].ToString().Replace("'", "") + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = "update ocs_mst_tdocumenttypes set documenttype_name='" + values.documenttype_name.Replace("'", "") + "'," +
                    " documenttype_code='" + values.documenttype_code.Replace("'", "") + "',";
            if (values.description == null || values.description == "")
            {
                msSQL += "description='',";
            }
            else
            {
                msSQL += "description='" + values.description.Replace("'", "") + "',";

            }
            msSQL += " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where documenttypes_gid='" + values.documenttypes_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Document Type Updated Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating Document Type";
                return false;
            }

        }

        // Status

        public void DaInactiveDocumentType(MdlDocumentType values, string employee_gid)
        {
            msSQL = " update ocs_mst_tdocumenttypes set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where documenttypes_gid='" + values.documenttypes_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("DOIL");

                msSQL = " insert into ocs_mst_tdocumenttypesinactivelog (" +
                      " documenttypesinactivelog_gid, " +
                      " documenttypes_gid," +
                      " documenttype_code," +
                      " documenttype_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.documenttypes_gid + "'," +
                      " '" + values.documenttype_code + "'," +
                       " '" + values.documenttype_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Document Type Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Document Type Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveDocumentTypeHistory(ApplicationInactiveHistory objapplicationhistory, string documenttypes_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tdocumenttypesinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.documenttypes_gid='" + documenttypes_gid + "' order by a.documenttypesinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        //Delete

        public void DaDeleteDocumentType(string documenttypes_gid, string employee_gid, result values)
        {
            msSQL = " select groupdocument_gid from ocs_mst_tgroupdocument where documenttypes_gid = '" + documenttypes_gid + "' and delete_flag = 'N'";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.message = "Document Type has Assigned for Group Document, You Cannot Delete";
                values.status = false;
            }
            else
            {
                msSQL = " select documenttype_name from ocs_mst_tdocumenttypes where documenttypes_gid='" + documenttypes_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tdocumenttypes where documenttypes_gid='" + documenttypes_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {

                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Document Type'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Document Type Deleted Successfully..!";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }

            }
        }


        public void DaInactiveGroupDocument(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tgroupdocument set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where groupdocument_gid='" + values.groupdocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("GRDI");

                msSQL = " insert into ocs_mst_tgroupdocumentinactivelog (" +
                      " groupdocumentinactivelog_gid," +
                      " groupdocument_gid," +
                      " groupdocument_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.groupdocument_gid + "'," +
                      " '" + values.groupdocument_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Group Document Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Group Document Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteGroupDocument(string groupdocument_gid, string employee_gid, result values)
        {
            msSQL = " update ocs_mst_tgroupdocument set delete_flag='Y'," +
                    " deleted_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " deleted_by='" + employee_gid + "'" +
                   " where groupdocument_gid='" + groupdocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Group Document Deleted Successfully";

            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }

        }



        public void DaGroupDocumentInactiveLogview(string groupdocument_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT groupdocument_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tgroupdocumentinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where groupdocument_gid ='" + groupdocument_gid + "' order by a.groupdocumentinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            groupdocument_gid = (dr_datarow["groupdocument_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        //Program

        public void DaPostProgramAdd(MdlProgram values, string employee_gid)
        {
            
            msSQL = "select program from ocs_mst_tprogram where program = '" + values.program_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Program Already Exist";
            }
            else
            {
                msSQL = " select tmpprogramdocument_gid ,document_name,document_path from ocs_tmp_tprogramdocument " +
                               " where created_by='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumentdtlList = new List<upload_list>();
                if (dt_datatable.Rows.Count == 0)
                {
                    values.status = false;
                    values.message = "Kindly Upload Document";
                }
                else
                {
                    msGetGid = objcmnfunctions.GetMasterGID("PMST");
                    msGetProgramRefno = objcmnfunctions.GetMasterGID("PREF");
                    msGetAPICode = objcmnfunctions.GetApiMasterGID("PROG");
                    msSQL = " insert into ocs_mst_tprogram(" +
                            " program_gid ," +                         
                            " program_refno ," +
                             " api_code," +
                            " lms_code," +
                            " bureau_code," +
                            " program_description," +
                            " program ," +
                            " entity_gid ," +
                            " entity_name ," +
                            " program_limit," +
                            " maximum_limit," +
                            " approved_date ," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + msGetProgramRefno + "'," +
                    "'" + msGetAPICode + "',";
                    if (values.lms_code == "" || values.lms_code == null)
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + values.lms_code.Replace("'", "") + "',";
                    }
                    if (values.bureau_code == "" || values.bureau_code == null)
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
                    }
                    if (values.program_description == "" || values.program_description == null)
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + values.program_description.Replace("'", "") + "',";
                    }
                    msSQL += "'" + values.program_name.Replace("'", "") + "'," +
                            "'" + values.entity_gid + "'," +
                            "'" + values.entity_name + "'," +
                            "'" + values.program_limit + "'," +
                            "'" + values.maximum_limit + "'," +
                            "'" + Convert.ToDateTime(values.approved_date).ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    for (var i = 0; i < values.verticalpro.Count; i++)
                    {
                        msGetprogram2vertical_gid = objcmnfunctions.GetMasterGID("PM2V");
                        msSQL = "Insert into ocs_mst_tprogram2vertical( " +
                               " program2vertical_gid, " +
                               " program_gid," +
                               " vertical_gid," +
                               " vertical_name," +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetprogram2vertical_gid + "'," +
                               "'" + msGetGid + "'," +
                               "'" + values.verticalpro[i].vertical_gid + "'," +
                               "'" + values.verticalpro[i].vertical_name + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                    for (var i = 0; i < values.approvedby.Count; i++)
                    {
                        msGetprogram2approval_gid = objcmnfunctions.GetMasterGID("PM2A");
                        msSQL = "Insert into ocs_mst_tprogram2approval( " +
                               " program2approval_gid, " +
                               " program_gid," +
                               " employee_gid," +
                               " employee_name," +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetprogram2approval_gid + "'," +
                               "'" + msGetGid + "'," +
                               "'" + values.approvedby[i].employee_gid + "'," +
                               "'" + values.approvedby[i].employee_name + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }


                    if (mnResult != 0)
                    {
                        // Document Attachments
                        msSQL = "select document_name, document_path from ocs_tmp_tprogramdocument where created_by='" + employee_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                lsdocumentgid = objcmnfunctions.GetMasterGID("PMUD");
                                msSQL = " INSERT into ocs_mst_tprogramdocument (" +
                                        " programdocument_gid," +
                                        " program_gid," +
                                        " document_name," +
                                        " document_path," +
                                        " created_by," +
                                        " created_date" +
                                        " ) VALUES (" +
                                        " '" + lsdocumentgid + "'," +
                                        " '" + msGetGid + "'," +
                                        " '" + dt["document_name"].ToString() + "'," +
                                        " '" + dt["document_path"].ToString() + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                        }

                        dt_datatable.Dispose();

                        msSQL = "delete from ocs_tmp_tprogramdocument where created_by='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        msSQL = "update ocs_mst_tprogram2loanproduct set program_gid ='" + msGetGid + "' where program_gid ='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        values.status = true;
                        values.message = "Program Added Successfully";
                    }
                    else
                    {
                        values.message = "Error Occured While Adding";
                        values.status = false;
                    }
                }
                objODBCDatareader.Close();
            }
        }

        public void DaGetProgram(MdlMstApplication360 objapplication360)
        {
            try
            {
                
                    msSQL = " SELECT program_gid,api_code,program,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                        " (select group_concat(distinct vertical_name SEPARATOR ' | ') from ocs_mst_tprogram2vertical where program_gid = a.program_gid) as 'Vertical', " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.entity_name," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tprogram a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.program_gid desc ";
                
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            program_gid = (dr_datarow["program_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            program = (dr_datarow["program"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            entity_name = (dr_datarow["entity_name"].ToString()),
                            vertical_Name = (dr_datarow["Vertical"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetProgramActive(MdlMstApplication360 objapplication360)
        {
            try
            {

                msSQL = " SELECT program_gid,program FROM ocs_mst_tprogram where status='Y' order by program_gid desc"; 
                                            
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<applicationprogram_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new applicationprogram_list
                        {
                            program_gid = (dr_datarow["program_gid"].ToString()),
                            program = (dr_datarow["program"].ToString()),
                        });
                    }
                    objapplication360.applicationprogram_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetLoanSubProductDropdown(MdlMstApplication360 objapplication360, string loanproduct_gid, string employee_gid)
        {
            try
            {
                msSQL = " SELECT loansubproduct_gid,loansubproduct_name,a.loanproduct_gid,a.loanproduct_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tloansubproduct a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where loanproduct_gid = '" + loanproduct_gid + "' and loansubproduct_gid not in (select loansubproduct_gid from ocs_mst_tprogram2loanproduct where program_gid = '" + employee_gid + "' ) " +
                        " order by a.loansubproduct_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loansubproduct_gid = (dr_datarow["loansubproduct_gid"].ToString()),
                            loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString()),
                            loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                            loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        public bool DaPostProductDetails(string employee_gid, application360 values)
        {
           
            msGetGid = objcmnfunctions.GetMasterGID("P2LP");
            msSQL = " insert into ocs_mst_tprogram2loanproduct(" +
                    " program2loanproduct_gid," +
                    " program_gid," +
                    " loanproduct_gid," +
                    " loanproduct_name," +
                    " loansubproduct_gid," +
                    " loansubproduct_name," +
                    " entity_name ," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.loanproduct_gid + "'," +
                    "'" + values.loanproduct_name + "'," +
                    "'" + values.loansubproduct_gid + "'," +
                    "'" + values.loansubproduct_name + "'," +
                    "'" + values.entity_name + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Product details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Product Details";
                return false;
            }

        }
        public void DaGetProgram2ProductList(string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct where " +
                    " program_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetProgram2ProductEditList(string program_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct where " +
                    " program_gid='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetProgram2ProductEditTempList(string program_gid, string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct  " +
            " where program_gid = '" + employee_gid + "' or program_gid ='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaDeleteProgram2Product(string program2loanproduct_gid, application360 values)
        {
            msSQL = "delete from ocs_mst_tprogram2loanproduct where program2loanproduct_gid='" + program2loanproduct_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Product Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Product Details";
                values.status = false;
            }
        }

        public bool DaProgramDocumentUpload(HttpRequest httpRequest, uploaddocument values, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();
            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        // Check Document validation;
                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            values.message = "File format is not supported";
                            return false;
                        }
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msSQL = " insert into ocs_tmp_tprogramdocument( " +
                                    " document_name ," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +                                 
                                    "'" + httpPostedFile.FileName.Replace("'", " ") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", " ") + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            values.status = true;
                            values.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occured..!";
                        }

                        msSQL = " select tmpprogramdocument_gid,document_name,document_path from ocs_tmp_tprogramdocument " +
                                " where created_by='" + employee_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getdocumentdtlList = new List<upload_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getdocumentdtlList.Add(new upload_list
                                {
                                    document_name = dt["document_name"].ToString(),
                                    document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                                    tmp_documentGid = dt["tmpprogramdocument_gid"].ToString(),
                                });
                                values.upload_list = getdocumentdtlList;
                            }
                        }
                        dt_datatable.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                values.message = ex.ToString();
            }
            return true;
        }


        public bool DaPrograEditDocumentUpload(HttpRequest httpRequest, uploaddocument values, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();
            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        // Check Document validation;                       
                          byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            values.message = "File format is not supported";
                            return false;
                        }
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/ProgramMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("PMUD");
                        msSQL = " insert into ocs_mst_tprogramdocument( " +
                                " programdocument_gid ," +
                                " program_gid," +
                                    " document_name ," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                      "'" + msGetGid + "'," +
                                       "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", " ") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", " ") + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            values.status = true;
                            values.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occured..!";
                        }


                    }
                }
            }
            catch (Exception ex)
            {
                values.message = ex.ToString();
            }
            return true;
        }

        public void DaTmpDocumentDelete(string tmp_documentGid, uploaddocument objfilename, string employee_gid)
        {
            msSQL = " delete from ocs_tmp_tprogramdocument where tmpprogramdocument_gid='" + tmp_documentGid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            msSQL = " select tmpprogramdocument_gid,document_name,document_path from ocs_tmp_tprogramdocument " +
                    " where created_by='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<upload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new upload_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        tmp_documentGid = dt["tmpprogramdocument_gid"].ToString(),
                    });
                    objfilename.upload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();

            if (mnResult != 0)
            {
                objfilename.status = true;
                objfilename.message = "Document Deleted Successfully..!";
            }
            else
            {
                objfilename.status = false;
                objfilename.message = "Error Occured..!";
            }
        }

        public void DaGetProgramDocumentDelete(string programdocument_gid, uploaddocument values, string employee_gid, string program_gid)
        {
            msSQL = " delete from ocs_mst_tprogramdocument where programdocument_gid ='" + programdocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Document Deleted Successfully..!";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }



        public void DaProgramTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tprogram2loanproduct where program_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_tmp_tprogramdocument where created_by='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }
        //Edit

        public bool DaUpdateProgram(string employee_gid, MdlProgram values)
        {
            msSQL = "select program_gid from ocs_mst_tprogram where program = '" + values.program.Replace("'", "\\'") + "'";
            lsprogram_gid = objdbconn.GetExecuteScalar(msSQL);
            if (lsprogram_gid != "")
            {
                if (lsprogram_gid != values.program_gid)
                {
                    values.message = "Program Name Already Exist";
                    values.status = false;
                    return false;
                }
            }

            msSQL = "select updated_by, updated_date,program " +
                    " from ocs_mst_tprogram where program_gid='" + values.program_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("PMSL");
                    msSQL = " insert into ocs_mst_tprogramlog(" +
                              " program_loggid  ," +
                              " program_gid," +
                              " program, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.program_gid + "'," +
                              "'" + objODBCDatareader["program"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = " select date_format(approved_date,'%d-%m-%Y') as approved_date from ocs_mst_tprogram " +
                  "  where program_gid='" + values.program_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapproved_date = objODBCDatareader["approved_date"].ToString();

            }
            msSQL = " update ocs_mst_tprogram set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }
            if (lsapproved_date == values.approved_date)
            {
            }
            else
            {
                msSQL += " approved_date='" + Convert.ToDateTime(values.approved_date).ToString("yyyy-MM-dd") + "',";
            }

            msSQL += " program='" + values.program + "'," +
                 " program_description='" + values.program_description + "'," +
                            " entity_gid='" + values.entity_gid + "'," +
                            " entity_name='" + values.entity_name + "'," +
                            " program_limit='" + values.program_limit + "'," +
                            " maximum_limit='" + values.maximum_limit + "'," +

                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where program_gid='" + values.program_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " delete from ocs_mst_tprogram2approval where program_gid = '" + values.program_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                for (var i = 0; i < values.approvedby.Count; i++)
                {
                    msGetprogram2approval_gid = objcmnfunctions.GetMasterGID("PM2A");
                    msSQL = "Insert into ocs_mst_tprogram2approval( " +
                           " program2approval_gid, " +
                           " program_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetprogram2approval_gid + "'," +
                           "'" + values.program_gid + "'," +
                           "'" + values.approvedby[i].employee_gid + "'," +
                           "'" + values.approvedby[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            msSQL = " delete from ocs_mst_tprogram2vertical where program_gid = '" + values.program_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                for (var i = 0; i < values.verticalpro.Count; i++)
                {
                    msGetprogram2vertical_gid = objcmnfunctions.GetMasterGID("PM2V");
                    msSQL = "Insert into ocs_mst_tprogram2vertical( " +
                           " program2vertical_gid, " +
                           " program_gid," +
                           " vertical_gid," +
                           " vertical_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetprogram2vertical_gid + "'," +
                           "'" + values.program_gid + "'," +
                           "'" + values.verticalpro[i].vertical_gid + "'," +
                           "'" + values.verticalpro[i].vertical_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tprogramdocument set program_gid ='" + values.program_gid + "' where program_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tprogram2loanproduct set program_gid ='" + values.program_gid + "' where program_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Program Updated Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
                return false;
            }
        }

        public void DaGetProgramDocumentEditList(string program_gid, MdlProgram values)
        {
            msSQL = " select programdocument_gid ,document_name,document_path,date_format(created_date,'%d-%m-%Y %h:%i %p') as created_date, program_gid from ocs_mst_tprogramdocument " +
                    " where program_gid ='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getuploadprogramdocumentlist = new List<uploadprogramdocumentlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getuploadprogramdocumentlist.Add(new uploadprogramdocumentlist
                    {

                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        programdocument_gid = dt["programdocument_gid"].ToString(),
                        created_date = dt["created_date"].ToString(),
                        program_gid = dt["program_gid"].ToString(),
                    });
                    values.uploadprogramdocumentlist = getuploadprogramdocumentlist;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetProgramDocumentTempEditList(string program_gid, string employee_gid, MdlProgram values)
        {
            msSQL = " select programdocument_gid ,document_name,document_path, program_gid from ocs_mst_tprogramdocument " +
                    " where program_gid = '" + employee_gid + "' or program_gid ='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getuploadprogramdocumentlist = new List<uploadprogramdocumentlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getuploadprogramdocumentlist.Add(new uploadprogramdocumentlist
                    {

                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        programdocument_gid = dt["programdocument_gid"].ToString(),
                        program_gid = dt["program_gid"].ToString(),
                    });
                    values.uploadprogramdocumentlist = getuploadprogramdocumentlist;
                }
            }
            dt_datatable.Dispose();
        }



        public void DaGetProgramMultiselectList(string program_gid, MdlProgram values)
        {
            msSQL = " select a.program_gid, GROUP_CONCAT(distinct(b.employee_name) SEPARATOR ', ') as employee_name,  " +
                       " GROUP_CONCAT(distinct(c.vertical_name) SEPARATOR ', ') as vertical_name " +
                       " from ocs_mst_tprogram a" +
                       " left join ocs_mst_tprogram2approval b on b.program_gid = a.program_gid " +
                       " left join ocs_mst_tprogram2vertical c on c.program_gid = a.program_gid " +
                       " where a.program_gid='" + program_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {

                values.employee_name = objODBCDatareader["employee_name"].ToString();
                values.vertical_name = objODBCDatareader["vertical_name"].ToString();

            }
            objODBCDatareader.Close();
        }

        //Status

        public void DaInactiveProgram(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tprogram set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where program_gid='" + values.program_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PMSI");

                msSQL = " insert into ocs_mst_tprograminactivelog (" +
                      " programinactivelog_gid  , " +
                      " program_gid," +
                      " program," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.program_gid + "'," +
                      " '" + values.program + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Program Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Program Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }



        public void DaProgramInactiveLogview(string program_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT program_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tprograminactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where program_gid ='" + program_gid + "' order by a.programinactivelog_gid   desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            program_gid = (dr_datarow["program_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        //Delete

        public void DaDeleteProgram(string program_gid, string employee_gid, result values)
        {
            msSQL = " select program from ocs_mst_tprogram where program_gid='" + program_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tprogram where program_gid ='" + program_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Program Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Program'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaGetEmployeeList(MstDigitalSignature values)
        {

            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name, " +
                   " b.employee_gid from adm_mst_tuser a " +
                   " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
                   " where user_status<>'N' AND b.employee_gid NOT IN (SELECT employee_gid FROM ocs_mst_tdigitalsignature) order by a.user_firstname asc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getemployeeList = new List<employeelist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getemployeeList.Add(new employeelist
                    {
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                    values.employeelist = getemployeeList;
                }
            }
            dt_datatable.Dispose();
        }

        public bool SignatureUpload(HttpRequest httpRequest, uploadSignature objfilename, string user_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string lsemployee_gid = httpRequest.Form["employee_gid"];
            string lsemployee_name = httpRequest.Form["employee_name"];
            string project_flag = httpRequest.Form["project_flag"].ToString();
            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = HttpContext.Current.Server.MapPath("../../../erpdocument" + "/" + lscompany_code + "/" + "Master/DigitalSignature/" + DateTime.Now.Year + "/" + DateTime.Now.Month);
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/DigitalSignature/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/DigitalSignature/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetAPICode = objcmnfunctions.GetApiMasterGID("DDSC");
                        msGetGid = objcmnfunctions.GetMasterGID("MDSG");

                        msSQL = " insert into ocs_mst_tdigitalsignature( " +
                                    " digitalsignature_gid ," +
                                    " api_code ," +
                                    " employee_gid ," +
                                    " employee_name," +
                                    " document_name ," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + msGetAPICode + "'," +
                                    "'" + lsemployee_gid + "'," +
                                    "'" + lsemployee_name + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", " ") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", " ") + "'," +
                                    "'" + user_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Digital Signature Uploaded Successfully";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured";
                        }
                    }
                }
                else
                {
                    objfilename.status = false;
                    objfilename.message = "Kindly Upload Signature";
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetDigitalSignatureList(MstDigitalSignature values)
        {
            msSQL = " select digitalsignature_gid, employee_gid, employee_name, document_name, document_path, date_format(a.created_date,'%d-%m-%Y') as created_date," +
                    " concat(b.user_firstname, b.user_lastname, '/', b.user_code) as created_by, api_code" +
                    " from ocs_mst_tdigitalsignature a " +
                    " left join adm_mst_tuser b on b.user_gid=a.created_by order by created_date desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdigitalsignaturelist = new List<digitalsignaturelist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdigitalsignaturelist.Add(new digitalsignaturelist
                    {
                        digitalsignature_gid = dt["digitalsignature_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        created_date = dt["created_date"].ToString(),
                        created_by = dt["created_by"].ToString(),
                        api_code = dt["api_code"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                    });
                    values.digitalsignaturelist = getdigitalsignaturelist;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaDeleteSignature(string digitalsignature_gid, MstDigitalSignature values)
        {
            msSQL = " delete from ocs_mst_tdigitalsignature where digitalsignature_gid='" + digitalsignature_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult == 1)
            {
                values.status = true;
                values.message = "Digital Signature Deleted Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Deleting";
            }
        }

        //Document Severity

        public void DaGetDocumentSeverity(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT documentseverity_gid,api_code,documentseverity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tdocumentseverity a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.documentseverity_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }


        public void DaCreateDocumentSeverity(application360 values, string employee_gid)
        {
            msSQL = "select documentseverity_name from ocs_mst_tdocumentseverity where documentseverity_name = '" + values.documentseverity_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Document Severity Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("DOST");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("DCSM");
                msSQL = " insert into ocs_mst_tdocumentseverity(" +
                        " documentseverity_gid," +
                         " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " documentseverity_name," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.bureau_code.Replace("'", "") + "',";
                }

                msSQL += "'" + values.documentseverity_name.Replace("'", "") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Document Severity Added Successfully";
                }
                else
                {
                    values.message = "Error Occured While Adding";
                    values.status = false;
                }
            }
        }
        public void DaEditDocumentSeverity(string documentseverity_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT documentseverity_gid,documentseverity_name,lms_code, bureau_code, status as Status FROM ocs_mst_tdocumentseverity " +
                        " where documentseverity_gid ='" + documentseverity_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.documentseverity_gid = objODBCDatareader["documentseverity_gid"].ToString();
                    values.documentseverity_name = objODBCDatareader["documentseverity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public bool DaUpdateDocumentSeverity(string employee_gid, application360 values)
        {
            msSQL = "select documentseverity_gid from ocs_mst_tdocumentseverity  where documentseverity_name = '" + values.documentseverity_name.Replace("'", "\\'") + "' ";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.documentseverity_gid)
                {
                    values.message = "Document Severity Name Already Exist";
                    values.status = false;
                    return false;
                }
            }
            msSQL = "select updated_by, updated_date,documentseverity_name from ocs_mst_tdocumentseverity where documentseverity_gid  ='" + values.documentseverity_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("DOSL");
                    msSQL = " insert into ocs_mst_tdocumentseveritylog(" +
                              " documentseverity_loggid," +
                              " documentseverity_gid," +
                              " documentseverity_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.documentseverity_gid + "'," +
                              "'" + objODBCDatareader["documentseverity_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
            msSQL = " update ocs_mst_tdocumentseverity set ";
            if (values.lms_code == "" || values.lms_code == null)
            {
                msSQL += " lms_code='',";
            }
            else
            {
                msSQL += " lms_code='" + values.lms_code + "',";
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                msSQL += " bureau_code='',";
            }
            else
            {
                msSQL += " bureau_code='" + values.bureau_code + "',";
            }

            msSQL += " documentseverity_name='" + values.documentseverity_name + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where documentseverity_gid='" + values.documentseverity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Document Severity Updated Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
                return false;
            }
        }

        public void DaInactiveDocumentSeverity(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tdocumentseverity set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where documentseverity_gid='" + values.documentseverity_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("DOSI");

                msSQL = " insert into ocs_mst_tdocumentseverityinactivelog (" +
                      " documentseverityinactivelog_gid , " +
                      " documentseverity_gid," +
                      " documentseverity_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.documentseverity_gid + "'," +
                      " '" + values.documentseverity_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Document Severity Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Document Severity Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteDocumentSeverity(string documentseverity_gid, string employee_gid, result values)
        {
            msSQL = " select documentseverity_name from ocs_mst_tdocumentseverity where documentseverity_gid ='" + documentseverity_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tdocumentseverity where documentseverity_gid  ='" + documentseverity_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Document Severity Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'documentseverity_name'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaDocumentSeverityInactiveLogview(string documentseverity_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT documentseverity_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tdocumentseverityinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where documentseverity_gid  ='" + documentseverity_gid + "' order by a.documentseverityinactivelog_gid    desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Individual Document

        public void DaGetIndividualDocument(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT individualdocument_gid,api_code,individualdocument_name,documenttypes_gid,documenttype_name,documentseverity_gid,documentseverity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,covenant_type," +
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, concat(e.user_firstname,' ',e.user_lastname,' / ',e.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status," +
                        " (select count(f.individualdocument_gid) from ocs_mst_tindividualchecklist f where f.individualdocument_gid = a.individualdocument_gid) as check_list " +
                        " FROM ocs_mst_tindividualdocument a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid "+
                        " left join hrm_mst_temployee d on a.updated_by = d.employee_gid" +
                        " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                        " order by a.individualdocument_name asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            individualdocument_gid = (dr_datarow["individualdocument_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            individualdocument_name = (dr_datarow["individualdocument_name"].ToString()),
                            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                            documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                            documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            covenant_type = (dr_datarow["covenant_type"].ToString()),
                            check_list = (dr_datarow["check_list"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateIndividualDocument(individualdocument values, string employee_gid)
        {
            msSQL = "select individualdocument_name from ocs_mst_tindividualdocument where individualdocument_name = '" + values.individualdocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();

                values.status = false;
                values.message = "Individual Document Name Already Exist";
            }
            else
            {
                objODBCDatareader.Close();

                string lsprogram_gid = string.Empty;
                string lsprogram_name = string.Empty;
                string lstprogram_gid = string.Empty;
                string lstprogram_name = string.Empty;
                if (values.CboProgram_list != null)
                {
                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                        lsprogram_name += values.CboProgram_list[i].program + ",";

                    }
                    lsprogram_gid = lsprogram_gid.TrimEnd(',');
                    lsprogram_name = lsprogram_name.TrimEnd(',');
                }
                msGetGid = objcmnfunctions.GetMasterGID("IDDT");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("INDD");
                msSQL = " insert into ocs_mst_tindividualdocument(" +
                        " individualdocument_gid," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " individualdocument_name," +
                        " created_by," +
                        " documenttypes_gid," +
                        " documenttype_name," +
                        " documentseverity_gid," +
                        " documentseverity_name," +
                        " program_gid," +
                        " program_name," +
                        " covenant_type, " +
						" document_code, " +
                        " display_order, " +
                        " document_remarks, " +
                        " created_date)" +
                        " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "\\'") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.bureau_code.Replace("'", "\\'") + "',";
                }

                msSQL += "'" + values.individualdocument_name.Replace("'", "\\'") + "'," +
                         "'" + employee_gid + "'," +
                        "'" + values.documenttypes_gid.Replace("'", "\\'") + "'," +
                         "'" + values.documenttype_name.Replace("'", "\\'") + "'," +
                         "'" + values.documentseverity_gid.Replace("'", "") + "'," +
                         "'" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_gid.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                         "'" + values.covenant_type + "'," +
                         "'" + values.document_code.Replace("'", @"\'") + "',";
                if (values.display_order == "" || values.display_order == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.display_order.Replace("'", @"\'") + "',";
                }
                if (values.document_remarks == "" || values.document_remarks == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.document_remarks.Replace("'", @"\'") + "',";
                }
                  msSQL += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                int mnResult1 = 0;
                if (values.CboProgram_list != null)
                {

                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lstprogram_gid = values.CboProgram_list[i].program_gid;
                        lstprogram_name = values.CboProgram_list[i].program;

                        string msGetGid1 = objcmnfunctions.GetMasterGID("INPL");
                        msSQL = " insert into ocs_mst_tindividualdocumentprogram (" +
                                  " individualdocumentprogram_gid," +
                                  " individualdocument_gid," +
                                  " individualdocument_name," +
                                  " program_gid, " +
                                  " program_name, " +
                                  " created_by," +
                                  " created_date) " +
                                  " values(" +
                                  "'" + msGetGid1 + "'," +
                                  "'" + msGetGid + "'," +
                                  "'" + values.individualdocument_name.Replace("'", "\\'") + "'," +
                                  "'" + lstprogram_gid + "'," +
                                  "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                                  "'" + employee_gid + "'," +
                                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                }

                if (mnResult != 0 && mnResult1 != 0)
                {
                    values.status = true;
                    values.message = "Individual Document Added Successfully";

                    msSQL = "update ocs_mst_tindividualchecklist set individualdocument_gid  ='" + msGetGid + "' where individualdocument_gid ='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaGetIndividualDropDown(string employee_gid, MdlMstApplication360 values)
        {

            //individual document

            msSQL = " SELECT documenttypes_gid, documenttype_name " +
                    " FROM ocs_mst_tdocumenttypes  where status='Y' order by documenttypes_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocument = new List<document_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdocument.Add(new document_list
                    {
                        documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                        documenttype_name = (dr_datarow["documenttype_name"].ToString()),

                    });
                }
                values.document_list = getdocument;
            }
            dt_datatable.Dispose();

        }

        public void DaGetSeverityDropDown(string employee_gid, MdlMstApplication360 values)
        {

            // document Severity

            msSQL = " SELECT documentseverity_gid, documentseverity_name  " +
                    " FROM ocs_mst_tdocumentseverity  where status='Y' order by documentseverity_gid  desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getseverity = new List<severity_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getseverity.Add(new severity_list
                    {
                        documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                        documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),

                    });
                }
                values.severity_list = getseverity;
            }
            dt_datatable.Dispose();

        }
        //check list


        public void DaGetCheckList(string employee_gid, MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = "select individualchecklist_gid,checklist_name from ocs_mst_tindividualchecklist where " +
                " individualdocument_gid ='" + employee_gid + "'" + "order by individualdocument_gid  desc";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            individualchecklist_gid = (dr_datarow["individualchecklist_gid"].ToString()),
                            checklist_name = (dr_datarow["checklist_name"].ToString()),

                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }



        public void DaCreateCheckList(checklist values, string employee_gid)
        {
            if (values.checklist_name == null || values.checklist_name == "")
            {
                lschecklist_name = "";
            }
            else
            {
                lschecklist_name = values.checklist_name.Replace("'", "");
            }

            msGetGid = objcmnfunctions.GetMasterGID("IDCL");
            msSQL = " insert into ocs_mst_tindividualchecklist(" +
            " individualchecklist_gid," +
            " individualdocument_gid," +
            " checklist_name," +
            " created_by," +
            " created_date)" +
            " values(" +
            "'" + msGetGid + "'," +
            "'" + employee_gid + "'," +
            "'" + lschecklist_name + "'," +
            "'" + employee_gid + "'," +
            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Check List Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaDeleteCheckList(string individualchecklist_gid, checklist values)
        {
            msSQL = "delete from ocs_mst_tindividualchecklist where individualchecklist_gid='" + individualchecklist_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Check List Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }

        }

        public void DaCheckListTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tindividualchecklist where individualdocument_gid ='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        public void DaEditIndividualDocument(string individualdocument_gid, individualdocument values)
        {
            try
            {
                msSQL = " SELECT individualdocument_gid,individualdocument_name,documenttypes_gid,documenttype_name, program_gid, program_name, " +
                        //" GROUP_CONCAT((a.program_name) SEPARATOR ', ') as 'program_name_lbl' , " +
                        " documentseverity_gid,documentseverity_name,lms_code, bureau_code, status as Status,covenant_type, " +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " document_code, display_order, document_remarks, " +
                        " (select count(individualchecklist_gid) from ocs_mst_tindividualchecklist where individualdocument_gid ='"+ individualdocument_gid + "') as check_list" +
                        " FROM ocs_mst_tindividualdocument a " +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where individualdocument_gid='" + individualdocument_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.individualdocument_gid = objODBCDatareader["individualdocument_gid"].ToString();
                    values.individualdocument_name = objODBCDatareader["individualdocument_name"].ToString();
                    values.documenttypes_gid = objODBCDatareader["documenttypes_gid"].ToString();
                    values.documenttype_name = objODBCDatareader["documenttype_name"].ToString();
                    values.documentseverity_gid = objODBCDatareader["documentseverity_gid"].ToString();
                    values.documentseverity_name = objODBCDatareader["documentseverity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                    values.covenant_type = objODBCDatareader["covenant_type"].ToString();
					values.document_code = objODBCDatareader["document_code"].ToString();
                    values.display_order = objODBCDatareader["display_order"].ToString();
                    values.document_remarks = objODBCDatareader["document_remarks"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                    values.check_list = objODBCDatareader["check_list"].ToString();
                    //values.program_gid_edit = objODBCDatareader["program_gid"].ToString();
                    //values.program_name_edit = objODBCDatareader["program_name_lbl"].ToString();
                    String[] program_gid_list = objODBCDatareader["program_gid"].ToString().Split(',');
                    String[] program_name_list = objODBCDatareader["program_name"].ToString().Split(',');

                    var getvernacularLanguageList = new List<CboProgram_list>();

                    for (var i = 0; i < program_gid_list.Length; i++)
                    {
                        getvernacularLanguageList.Add(new CboProgram_list
                        {
                            program_gid = program_gid_list[i],
                            program = program_name_list[i],
                        });

                    }
                    values.CboProgram_list = getvernacularLanguageList;
                }
                objODBCDatareader.Close();
                //msSQL = " SELECT documenttypes_gid ,documenttype_name FROM ocs_mst_tdocumenttypes";
                //dt_datatable = objdbconn.GetDataTable(msSQL);
                //var getdocumenttype_list = new List<documenttype_list>();
                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {
                //        getdocumenttype_list.Add(new documenttype_list
                //        {
                //            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                //            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                //        });
                //    }
                //    values.documenttype_list = getdocumenttype_list;
                //}
                //dt_datatable.Dispose();
                //values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetCheckEditList(string individualdocument_gid, checklist values)
        {
            msSQL = " select individualchecklist_gid,checklist_name, individualdocument_gid  from ocs_mst_tindividualchecklist " +
                    " where individualdocument_gid  ='" + individualdocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getchecklist_list = new List<checklist_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getchecklist_list.Add(new checklist_list
                    {
                        individualchecklist_gid = dt["individualchecklist_gid"].ToString(),
                        individualdocument_gid = dt["individualdocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),

                    });
                    values.checklist_list = getchecklist_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCheckListTempEditList(string individualdocument_gid, string employee_gid, MdlMstApplication360 values)
        {
            msSQL = " select individualchecklist_gid,checklist_name,individualdocument_gid from ocs_mst_tindividualchecklist " +
                    " where individualdocument_gid = '" + employee_gid + "' or individualdocument_gid ='" + individualdocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getapplication_list.Add(new application_list
                    {
                        individualchecklist_gid = dt["individualchecklist_gid"].ToString(),
                        individualdocument_gid = dt["individualdocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),

                    });
                    values.application_list = getapplication_list;
                }
            }
            dt_datatable.Dispose();
        }

        public bool DaUpdateIndividualDocument(string employee_gid, individualdocument values)
        {
            msSQL = "select individualdocument_gid from ocs_mst_tindividualdocument where individualdocument_name = '" + values.individualdocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.individualdocument_gid)
                {
                    values.message = "Individual Document Name Already Exist";
                    values.status = false;
                    return false;
                }
            }

            string lslms_code, lsbureau_code;

            if (values.lms_code == "" || values.lms_code == null)
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            string lsprogram_gid = string.Empty;
            string lsprogram_name = string.Empty;
            string lstprogram_gid = string.Empty;
            string lstprogram_name = string.Empty;
            if (values.CboProgram_list != null)
            {
                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                    lsprogram_name += values.CboProgram_list[i].program + ",";

                }
                lsprogram_gid = lsprogram_gid.TrimEnd(',');
                lsprogram_name = lsprogram_name.TrimEnd(',');
            }

            msSQL = "select updated_by, updated_date  from ocs_mst_tindividualdocument where individualdocument_gid ='" + values.individualdocument_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IDTL");
                    msSQL = " insert into ocs_mst_tindividualdocumentlog (" +
                              " individualdocument_loggid," +
                              " individualdocument_gid," +
                              " individualdocument_name," +
                              " documenttypes_gid," +
                              " documenttype_name," +
                              " documentseverity_gid, " +
                              " documentseverity_name, " +
                              " program_gid, " +
                              " program_name, " +
                              " lms_code," +
                              " bureau_code," +
                              " Status," +
                              " covenant_type, " +
							  " document_code," +
                              " display_order," +
                              " document_remarks," +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.individualdocument_gid + "'," +
                              "'" + values.individualdocument_name.Replace("'", "\\'") + "'," +
                              "'" + values.documenttypes_gid + "'," +
                              "'" + values.documenttype_name + "'," +
                              "'" + values.documentseverity_gid + "'," +
                              "'" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                              "'" + lsprogram_gid + "'," +
                              "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                              "'" + lslms_code + "'," +
                              "'" + lsbureau_code + "'," +
                              "'" + values.Status + "'," +
                              "'" + values.covenant_type + "'," +
							  "'" + values.document_code.Replace("'", @"\'") + "'," +
                              "'" + values.display_order.Replace("'", @"\'") + "'," +
                              "'" + values.document_remarks.Replace("'", @"\'") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tindividualdocument set " +
                     " individualdocument_gid='" + values.individualdocument_gid.Replace("'", "\\'") + "'," +
                     " individualdocument_name='" + values.individualdocument_name.Replace("'", "\\'") + "'," +
                     " documenttypes_gid='" + values.documenttypes_gid + "'," +
                     " documenttype_name='" + values.documenttype_name.Replace("'", "\\'") + "'," +
                      " documentseverity_gid='" + values.documentseverity_gid + "'," +
                     " documentseverity_name='" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                     " program_gid='" + lsprogram_gid + "'," +
                     " program_name='" + lsprogram_name.Replace("'", "\\'") + "'," +
                     " lms_code='" + lslms_code + "'," +
                     " bureau_code='" + lsbureau_code + "'," +
                     " lms_code='" + values.lms_code.Replace("'", "\\'") + "'," +
                     " covenant_type='" + values.covenant_type + "'," +
					 " document_code='" + values.document_code.Replace("'", @"\'") + "'," +
                     " display_order='" + values.display_order.Replace("'", @"\'") + "'," +
                     " document_remarks='" + values.document_remarks.Replace("'", @"\'") + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where individualdocument_gid='" + values.individualdocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_mst_tindividualdocumentprogram where individualdocument_gid='" + values.individualdocument_gid + "'";
            int mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

            int mnResult2 = 0;
            if (mnResult1 != 0)
            {
                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lstprogram_gid = values.CboProgram_list[i].program_gid;
                    lstprogram_name = values.CboProgram_list[i].program;

                    msGetGid = objcmnfunctions.GetMasterGID("INPL");
                    msSQL = " insert into ocs_mst_tindividualdocumentprogram (" +
                              " individualdocumentprogram_gid," +
                              " individualdocument_gid," +
                              " individualdocument_name," +
                              " program_gid, " +
                              " program_name, " +
                              " created_by," +
                              " created_date, " +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.individualdocument_gid + "'," +
                              "'" + values.individualdocument_name.Replace("'", "\\'") + "'," +
                              "'" + lstprogram_gid + "'," +
                              "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult2 = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
            }


            if (mnResult != 0 && mnResult2 != 0)
            {
                values.status = true;
                values.message = "Individual Document Updated Successfully";

                msSQL = "update ocs_mst_tindividualchecklist set individualdocument_gid   ='" + values.individualdocument_gid + "' where individualdocument_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
                return false;
            }
        }

        public void DaInactiveIndividualDocument(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tindividualdocument set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where individualdocument_gid='" + values.individualdocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("IDDI");

                msSQL = " insert into ocs_mst_tindividualdocumentinactivelog (" +
                      " individualdocumentinactiveLOG_gid, " +
                      " individualdocument_gid," +
                      " individualdocument_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.individualdocument_gid + "'," +
                      " '" + values.individualdocument_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Individual Document Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Individual Document Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaInactiveIndividualDocumentHistory(ApplicationInactiveHistory objapplicationhistory, string individualdocument_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tindividualdocumentinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.individualdocument_gid='" + individualdocument_gid + "' order by a.individualdocumentinactivelog_gid  desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        public void DaDeleteIndividualDocument(string individualdocument_gid, string employee_gid, result values)
        {
            msSQL = " select contact2document_gid from ocs_mst_tcontact2document where document_gid='" + individualdocument_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Individual Document, Because it is tagged to Application Creation";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select individualdocument_name from ocs_mst_tindividualdocument where individualdocument_gid='" + individualdocument_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                msSQL = " delete from ocs_mst_tindividualdocument where individualdocument_gid='" + individualdocument_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Individual Document Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Individual Document'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }

        //Company Document
        public void DaGetCompanyDocument(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT companydocument_gid,api_code,companydocument_name,documenttypes_gid,documenttype_name,documentseverity_gid,documentseverity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, concat(e.user_firstname,' ',e.user_lastname,' / ',e.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status, a.covenant_type," +
                        " (select count(f.companydocument_gid) from ocs_mst_tcompanychecklist f where f.companydocument_gid = a.companydocument_gid) as check_list " +
                        " FROM ocs_mst_tcompanydocument a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " left join hrm_mst_temployee d on a.updated_by = d.employee_gid" +
                        " left join adm_mst_tuser e on d.user_gid = e.user_gid " +
                        " order by a.companydocument_name asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            companydocument_gid = (dr_datarow["companydocument_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            companydocument_name = (dr_datarow["companydocument_name"].ToString()),
                            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                            documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                            documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            covenant_type = (dr_datarow["covenant_type"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            check_list = (dr_datarow["check_list"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCompanyDocument(companydocument values, string employee_gid)
        {
            
            msSQL = "select companydocument_name, documenttype_name from ocs_mst_tcompanydocument where companydocument_name = '" + values.companydocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Company Document Name Already Exist";
            }
            else
            {
                objODBCDatareader.Close();
                string lsprogram_gid = string.Empty;
                string lsprogram_name = string.Empty;
                string lstprogram_gid = string.Empty;
                string lstprogram_name = string.Empty;
                if (values.CboProgram_list != null)
                {
                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                        lsprogram_name += values.CboProgram_list[i].program + ",";

                    }
                    lsprogram_gid = lsprogram_gid.TrimEnd(',');
                    lsprogram_name = lsprogram_name.TrimEnd(',');
                }

                msGetGid = objcmnfunctions.GetMasterGID("CMDT");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CMPD");

                msSQL = " insert into ocs_mst_tcompanydocument(" +
                        " companydocument_gid," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " companydocument_name," +
                        " created_by," +
                        " documenttypes_gid," +
                        " documenttype_name," +
                        " documentseverity_name," +
                        " documentseverity_gid," +
                        " program_gid," +
                        " program_name," +
                        " covenant_type, " +
                        " document_code, " +
                        " display_order, " +
                        " document_remarks, " +
                        " created_date)" +
                        " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "\\'") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                   msSQL += "'" + values.bureau_code.Replace("'", "\\'") + "',";
                }

                msSQL += "'" + values.companydocument_name.Replace("'", "\\'") + "'," +
                         "'" + employee_gid + "'," +
                        "'" + values.documenttypes_gid.Replace("'", "\\'") + "'," +
                         "'" + values.documenttype_name.Replace("'", "\\'") + "'," +
                          "'" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                         "'" + values.documentseverity_gid.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_gid.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                         "'" + values.covenant_type + "'," +
                         "'" + values.document_code.Replace("'", @"\'") + "',";
                if (values.display_order == "" || values.display_order == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.display_order.Replace("'", @"\'") + "',";
                }
                if (values.document_remarks == "" || values.document_remarks == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.document_remarks.Replace("'", @"\'") + "',";
                }
                msSQL += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                int mnResult1 = 0;
                if (values.CboProgram_list != null)
                {
                    
                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lstprogram_gid = values.CboProgram_list[i].program_gid;
                        lstprogram_name = values.CboProgram_list[i].program;

                       string msGetGid1 = objcmnfunctions.GetMasterGID("CMPL");
                        msSQL = " insert into ocs_mst_tcompanydocumentprogram (" +
                                  " companydocumentprogram_gid," +
                                  " companydocument_gid," +
                                  " companydocument_name," +
                                  " program_gid, " +
                                  " program_name, " +
                                  " created_by," +
                                  " created_date) " +
                                  " values(" +
                                  "'" + msGetGid1 + "'," +
                                  "'" + msGetGid + "'," +
                                  "'" + values.companydocument_name.Replace("'", "\\'") + "'," +
                                  "'" + lstprogram_gid + "'," +
                                  "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                                  "'" + employee_gid + "'," +
                                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                       mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                }

                if (mnResult != 0 && mnResult1 != 0)
                {
                    values.status = true;
                    values.message = "Company Document Added Successfully";

                    msSQL = "update ocs_mst_tcompanychecklist set companydocument_gid ='" + msGetGid + "' where companydocument_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }

        public void DaGetCompanyDropDown(string employee_gid, MdlMstApplication360 values)
        {

            //Company document

            msSQL = " SELECT documenttypes_gid, documenttype_name " +
                    " FROM ocs_mst_tdocumenttypes  where status='Y' order by documenttypes_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocument = new List<document_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdocument.Add(new document_list
                    {
                        documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                        documenttype_name = (dr_datarow["documenttype_name"].ToString()),

                    });
                }
                values.document_list = getdocument;
            }
            dt_datatable.Dispose();

            msSQL = " SELECT documentseverity_gid, documentseverity_name " +
                  " FROM ocs_mst_tdocumentseverity  where status='Y' order by documentseverity_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentseverity = new List<documentseverity_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdocumentseverity.Add(new documentseverity_list
                    {
                        documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                        documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),

                    });
                }
                values.documentseverity_list = getdocumentseverity;
            }
            dt_datatable.Dispose();

        }


        public void DaEditCompanyDocument(string companydocument_gid, companydocument values)
        {
            try
            {
                msSQL = " SELECT companydocument_gid,companydocument_name,documenttypes_gid,documenttype_name, program_gid, program_name, " +
                         //" GROUP_CONCAT((a.program_name) SEPARATOR ', ') as 'program_name_lbl' , " +
                    " documentseverity_gid,documentseverity_name,lms_code, bureau_code,covenant_type," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " document_code, display_order, document_remarks, status as Status, " +
                        " (select count(companychecklist_gid) from ocs_mst_tcompanychecklist where companydocument_gid ='"+ companydocument_gid + "') as check_list" +
                        " FROM ocs_mst_tcompanydocument a "+
                         " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where companydocument_gid='" + companydocument_gid + "' "; 
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.companydocument_gid = objODBCDatareader["companydocument_gid"].ToString();
                    values.companydocument_name = objODBCDatareader["companydocument_name"].ToString();
                    values.documenttypes_gid = objODBCDatareader["documenttypes_gid"].ToString();
                    values.documenttype_name = objODBCDatareader["documenttype_name"].ToString();
                    values.documentseverity_gid = objODBCDatareader["documentseverity_gid"].ToString();
                    values.documentseverity_name = objODBCDatareader["documentseverity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                    values.covenant_type = objODBCDatareader["covenant_type"].ToString();
					values.document_code = objODBCDatareader["document_code"].ToString();
                    values.display_order = objODBCDatareader["display_order"].ToString();
                    values.document_remarks = objODBCDatareader["document_remarks"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                    values.check_list = objODBCDatareader["check_list"].ToString();
                    //values.program_gid_edit = objODBCDatareader["program_gid"].ToString();
                    //values.program_name_edit = objODBCDatareader["program_name_lbl"].ToString();
                    String[] program_gid_list = objODBCDatareader["program_gid"].ToString().Split(',');
                    String[] program_name_list = objODBCDatareader["program_name"].ToString().Split(',');

                    var getvernacularLanguageList = new List<CboProgram_list>();

                    for (var i = 0; i < program_gid_list.Length; i++)
                    {
                        getvernacularLanguageList.Add(new CboProgram_list
                        {
                            program_gid = program_gid_list[i],
                            program = program_name_list[i],
                        });

                    }
                    values.CboProgram_list = getvernacularLanguageList;
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public bool DaUpdateCompanyDocument(string employee_gid, companydocument values)
        {
            msSQL = "select companydocument_gid from ocs_mst_tcompanydocument where companydocument_name = '" + values.companydocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.companydocument_gid)
                {
                    values.message = "Company Document Name Already Exist";
                    values.status = false;
                    return false;
                }
            }
            string lslms_code, lsbureau_code;

            if (values.lms_code == "" || values.lms_code == null)
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            string lsprogram_gid = string.Empty;
            string lsprogram_name = string.Empty;
            string lstprogram_gid = string.Empty;
            string lstprogram_name = string.Empty;

            if (values.CboProgram_list != null)
            {

                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                    lsprogram_name += values.CboProgram_list[i].program + ",";
                }
                lsprogram_gid = lsprogram_gid.TrimEnd(',');
                lsprogram_name = lsprogram_name.TrimEnd(',');
            }

            msSQL = "select updated_by, updated_date,companydocument_name,documenttypes_gid,documenttype_name,lms_code, bureau_code,covenant_type, status as Status from ocs_mst_tcompanydocument where companydocument_gid ='" + values.companydocument_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CPDL");
                    msSQL = " insert into ocs_mst_tcompanydocumentlog (" +
                              " companydocument_LOGgid," +
                              " companydocument_gid," +
                              " companydocument_name," +
                              " documenttypes_gid," +
                              " documenttype_name," +
                              " documentseverity_gid, " +
                              " documentseverity_name, " +
                              " program_gid, " +
                              " program_name, " +
                              " lms_code," +
                              " bureau_code," + 
							  " document_code," +
                              " display_order," +
                              " document_remarks," +
                              " Status," +
                              " covenant_type, " +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.companydocument_gid + "'," +
                              "'" + objODBCDatareader["companydocument_name"].ToString() + "'," +
                              "'" + values.documenttypes_gid + "'," +
                              "'" + values.documenttype_name + "'," +
                              "'" + values.documentseverity_gid + "'," +
                              "'" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                              "'" + lsprogram_gid + "'," +
                              "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                              "'" + lslms_code + "'," +
                              "'" + lsbureau_code + "'," +
							  "'" + values.document_code.Replace("'", @"\'") + "'," +
                              "'" + values.display_order.Replace("'", @"\'") + "'," +
                              "'" + values.document_remarks.Replace("'", @"\'") + "'," +
                              "'" + values.Status + "'," +
                              "'" + values.covenant_type + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tcompanydocument set " +
                     " companydocument_gid='" + values.companydocument_gid + "'," +
                     " companydocument_name='" + values.companydocument_name.Replace("'", "\\'") + "'," +
                     " documenttypes_gid='" + values.documenttypes_gid + "'," +
                     " documenttype_name='" + values.documenttype_name.Replace("'", "\\'") + "'," +
                     " documentseverity_gid='" + values.documentseverity_gid + "'," +
                     " documentseverity_name='" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                     " program_gid='" + lsprogram_gid + "'," +
                     " program_name='" + lsprogram_name.Replace("'", "\\'") + "'," +
                     " lms_code='" + lslms_code + "'," +
                     " bureau_code='" + lsbureau_code + "'," +
                     " covenant_type='" + values.covenant_type + "'," +
					 " document_code='" + values.document_code.Replace("'", @"\'") + "'," +
                     " display_order='" + values.display_order.Replace("'", @"\'") + "'," +
                     " document_remarks='" + values.document_remarks.Replace("'", @"\'") + "'," +
                     " Status='" + values.Status + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where companydocument_gid='" + values.companydocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            msSQL = "delete from ocs_mst_tcompanydocumentprogram where companydocument_gid='" + values.companydocument_gid + "'";
            int mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

            int mnResult2 = 0;
            if (mnResult1 != 0)
            {
                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lstprogram_gid = values.CboProgram_list[i].program_gid;
                    lstprogram_name = values.CboProgram_list[i].program;

                    msGetGid = objcmnfunctions.GetMasterGID("CMPL");
                    msSQL = " insert into ocs_mst_tcompanydocumentprogram (" +
                              " companydocumentprogram_gid," +
                              " companydocument_gid," +
                              " companydocument_name," +
                              " program_gid, " +
                              " program_name, " +
                              " created_by," +
                              " created_date, " +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.companydocument_gid + "'," +
                              "'" + values.companydocument_name.Replace("'", "\\'") + "'," +
                              "'" + lstprogram_gid + "'," +
                              "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult2 = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
            }


            if (mnResult != 0 && mnResult2 != 0)
            {

                msSQL = "update ocs_mst_tcompanychecklist set companydocument_gid ='" + values.companydocument_gid + "' where companydocument_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Company Document Updated Successfully";
                return true;


            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
                return false;
            }
        }

        // Add Check List

        public void DaGetCompanyCheckList(string employee_gid, MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = "select companychecklist_gid,checklist_name from ocs_mst_tcompanychecklist where " +
                   " companydocument_gid ='" + employee_gid + "'" + "order by companydocument_gid desc";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            companychecklist_gid = (dr_datarow["companychecklist_gid"].ToString()),
                            checklist_name = (dr_datarow["checklist_name"].ToString()),

                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCompanyCheckList(checklist values, string employee_gid)
        {
            if (values.checklist_name == null || values.checklist_name == "")
            {
                lschecklist_name = "";
            }
            else
            {
                lschecklist_name = values.checklist_name.Replace("'", "");
            }

            msGetGid = objcmnfunctions.GetMasterGID("CCLT");
            msSQL = " insert into ocs_mst_tcompanychecklist(" +
                    " companychecklist_gid," +
                    " companydocument_gid," +
                    " checklist_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + lschecklist_name + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Check List Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        // EditCheckList

        public void DaGetCompanyCheckListEditList(string companydocument_gid, MdlMstApplication360 values)
        {
            msSQL = " select companychecklist_gid ,checklist_name,companydocument_gid from  ocs_mst_tcompanychecklist " +
                    " where companydocument_gid ='" + companydocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getchecklist_list = new List<checklist_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getchecklist_list.Add(new checklist_list
                    {
                        companychecklist_gid = dt["companychecklist_gid"].ToString(),
                        companydocument_gid = dt["companydocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),
                    });
                    values.checklist_list = getchecklist_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCompanyCheckListTempEditList(string companydocument_gid, string employee_gid, MdlMstApplication360 values)
        {
            msSQL = " select companychecklist_gid ,checklist_name,companydocument_gid from ocs_mst_tcompanychecklist " +
                    " where companydocument_gid = '" + employee_gid + "' or companydocument_gid ='" + companydocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getapplication_list.Add(new application_list
                    {
                        companychecklist_gid = dt["companychecklist_gid"].ToString(),
                        companydocument_gid = dt["companydocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),

                    });
                    values.application_list = getapplication_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaCompanyCheckListTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tcompanychecklist where companydocument_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        public void DaDeleteCompanyCheckList(string companychecklist_gid, variety values)
        {
            msSQL = "delete from ocs_mst_tcompanychecklist where companychecklist_gid='" + companychecklist_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Check List_gid Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }

        }





        //Group Document

        public void DaGetGroupDocument(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT groupdocument_gid,api_code,groupdocument_name,documenttypes_gid,documenttype_name,documentseverity_gid,documentseverity_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,covenant_type," +
                        "  date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date,concat(e.user_firstname,' ',e.user_lastname,' / ',e.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status," +
                        " (select count(f.groupdocument_gid) from ocs_mst_tgroupchecklist f where f.groupdocument_gid = a.groupdocument_gid) as check_list" +
                        " FROM ocs_mst_tgroupdocument a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid "+
                        " left join hrm_mst_temployee d on a.updated_by = d.employee_gid" +
                        " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                        " where a.delete_flag='N' " +
                        " order by a.groupdocument_name asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            groupdocument_gid = (dr_datarow["groupdocument_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            groupdocument_name = (dr_datarow["groupdocument_name"].ToString()),
                            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                            documentseverity_gid = (dr_datarow["documentseverity_gid"].ToString()),
                            documentseverity_name = (dr_datarow["documentseverity_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            covenant_type = (dr_datarow["covenant_type"].ToString()),
                            check_list = (dr_datarow["check_list"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGroupDocument(groupdocument values, string employee_gid)
        {
            msSQL = "select groupdocument_name from ocs_mst_tgroupdocument where groupdocument_name = '" + values.groupdocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();

                values.status = false;
                values.message = "Group Document Name Already Exist";
            }
            else
            {
                objODBCDatareader.Close();

                string lsprogram_gid = string.Empty;
                string lsprogram_name = string.Empty;
                string lstprogram_gid = string.Empty;
                string lstprogram_name = string.Empty;
                if (values.CboProgram_list != null)
                {
                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                        lsprogram_name += values.CboProgram_list[i].program + ",";

                    }
                    lsprogram_gid = lsprogram_gid.TrimEnd(',');
                    lsprogram_name = lsprogram_name.TrimEnd(',');
                }
                msGetGid = objcmnfunctions.GetMasterGID("GRDT");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("GROD");
                msSQL = " insert into ocs_mst_tgroupdocument(" +
                        " groupdocument_gid," +
                         " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " groupdocument_name," +
                        " created_by," +
                        " documenttypes_gid," +
                        " documenttype_name," +
                         " documentseverity_gid," +
                        " documentseverity_name," +
                        " program_gid," +
                        " program_name," +
                        " covenant_type, " +
						" document_code, " +
                        " display_order, " +
                        " document_remarks, " +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "',";
                if (values.lms_code == "" || values.lms_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.lms_code.Replace("'", "\\'") + "',";
                }
                if (values.bureau_code == "" || values.bureau_code == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.bureau_code.Replace("'", "\\'") + "',";
                }

                msSQL += "'" + values.groupdocument_name.Replace("'", "\\'") + "'," +
                              "'" + employee_gid + "'," +
                         "'" + values.documenttypes_gid.Replace("'", "\\'") + "'," +
                         "'" + values.documenttype_name.Replace("'", "\\'") + "'," +
                         "'" + values.documentseverity_gid.Replace("'", "\\'") + "'," +
                         "'" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_gid.Replace("'", "\\'") + "'," +
                         "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                         "'" + values.covenant_type + "'," +
                         "'" + values.document_code.Replace("'", @"\'") + "',";
                if (values.display_order == "" || values.display_order == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.display_order.Replace("'", @"\'") + "',";
                }
                if (values.document_remarks == "" || values.document_remarks == null)
                {
                    msSQL += "'',";
                }
                else
                {
                    msSQL += "'" + values.document_remarks.Replace("'", @"\'") + "',";
                }
                msSQL +="'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                int mnResult1 = 0;
                if (values.CboProgram_list != null)
                {

                    for (var i = 0; i < values.CboProgram_list.Count; i++)
                    {
                        lstprogram_gid = values.CboProgram_list[i].program_gid;
                        lstprogram_name = values.CboProgram_list[i].program;

                        string msGetGid1 = objcmnfunctions.GetMasterGID("GRPL");
                        msSQL = " insert into ocs_mst_tgroupdocumentprogram (" +
                                  " groupdocumentprogram_gid," +
                                  " groupdocument_gid," +
                                  " groupdocument_name," +
                                  " program_gid, " +
                                  " program_name, " +
                                  " created_by," +
                                  " created_date) " +
                                  " values(" +
                                  "'" + msGetGid1 + "'," +
                                  "'" + msGetGid + "'," +
                                  "'" + values.groupdocument_name.Replace("'", "\\'") + "'," +
                                  "'" + lstprogram_gid + "'," +
                                  "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                                  "'" + employee_gid + "'," +
                                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                }

                if (mnResult != 0 && mnResult1 != 0)
                {

                    msSQL = "update ocs_mst_tgroupchecklist set groupdocument_gid ='" + msGetGid + "' where groupdocument_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Group Document Added Successfully";
                }
                else
                {
                    values.message = "Error Occured While Adding";
                    values.status = false;
                }
            }

        }

        public void DaGetDocumentDropDown(string employee_gid, MdlMstApplication360 values)
        {

            //Document type

            msSQL = " SELECT documenttypes_gid, documenttype_name " +
                    " FROM ocs_mst_tdocumenttypes  where status='Y' order by documenttypes_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocument = new List<document_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdocument.Add(new document_list
                    {
                        documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                        documenttype_name = (dr_datarow["documenttype_name"].ToString()),

                    });
                }
                values.document_list = getdocument;
            }
            dt_datatable.Dispose();

        }


        public void DaEditGroupDocument(string groupdocument_gid, groupdocument values)
        {
            try
            {
                msSQL = " SELECT groupdocument_gid,groupdocument_name,documenttypes_gid,documenttype_name,program_gid, program_name, " +
                         ////" GROUP_CONCAT((a.program_name) SEPARATOR ', ') as 'program_name_lbl' , " +   
                    " documentseverity_gid,documentseverity_name,lms_code, bureau_code, status as Status, " +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " document_code, display_order, document_remarks, covenant_type, " +
                        " (select count(groupchecklist_gid) from ocs_mst_tgroupchecklist where groupdocument_gid ='"+ groupdocument_gid + "') as check_list" +
                        " FROM ocs_mst_tgroupdocument a " +
                         " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where groupdocument_gid='" + groupdocument_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.groupdocument_gid = objODBCDatareader["groupdocument_gid"].ToString();
                    values.groupdocument_name = objODBCDatareader["groupdocument_name"].ToString();
                    values.documenttypes_gid = objODBCDatareader["documenttypes_gid"].ToString();
                    values.documenttype_name = objODBCDatareader["documenttype_name"].ToString();
                    values.documentseverity_gid = objODBCDatareader["documentseverity_gid"].ToString();
                    values.documentseverity_name = objODBCDatareader["documentseverity_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                    values.covenant_type = objODBCDatareader["covenant_type"].ToString();
					values.document_code = objODBCDatareader["document_code"].ToString();
                    values.display_order = objODBCDatareader["display_order"].ToString();
                    values.document_remarks = objODBCDatareader["document_remarks"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                    values.check_list = objODBCDatareader["check_list"].ToString();
                    //values.program_gid_edit = objODBCDatareader["program_gid"].ToString();
                    //values.program_name_edit = objODBCDatareader["program_name_lbl"].ToString();
                    String[] program_gid_list = objODBCDatareader["program_gid"].ToString().Split(',');
                    String[] program_name_list = objODBCDatareader["program_name"].ToString().Split(',');

                    var getvernacularLanguageList = new List<CboProgram_list>();

                    for (var i = 0; i < program_gid_list.Length; i++)
                    {
                        getvernacularLanguageList.Add(new CboProgram_list
                        {
                            program_gid = program_gid_list[i],
                            program = program_name_list[i],
                        });

                    }
                    values.CboProgram_list = getvernacularLanguageList;
                }
                objODBCDatareader.Close();
                //msSQL = " SELECT documenttypes_gid ,documenttype_name FROM ocs_mst_tdocumenttypes";
                //dt_datatable = objdbconn.GetDataTable(msSQL);
                //var getdocumenttype_list = new List<documenttype_list>();
                //if (dt_datatable.Rows.Count != 0)
                //{
                //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                //    {
                //        getdocumenttype_list.Add(new documenttype_list
                //        {
                //            documenttypes_gid = (dr_datarow["documenttypes_gid"].ToString()),
                //            documenttype_name = (dr_datarow["documenttype_name"].ToString()),
                //        });
                //    }
                //    values.documenttype_list = getdocumenttype_list;
                //}
                //dt_datatable.Dispose();
                //values.status = true; 
            }
            catch
            {
                values.status = false;
            }
        }

        public bool DaUpdateGroupDocument(string employee_gid, groupdocument values)
        {
            msSQL = "select groupdocument_gid from ocs_mst_tgroupdocument where groupdocument_name = '" + values.groupdocument_name.Replace("'", "\\'") + "' and documenttype_name = '" + values.documenttype_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.groupdocument_gid)
                {
                    values.message = "Group Document Name Already Exist";
                    values.status = false;
                    return false;
                }
            }
            string lslms_code, lsbureau_code;

            if (values.lms_code == "" || values.lms_code == null)
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == "" || values.bureau_code == null)
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }

            string lsprogram_gid = string.Empty;
            string lsprogram_name = string.Empty;
            string lstprogram_gid = string.Empty;
            string lstprogram_name = string.Empty;
            if (values.CboProgram_list != null)
            {
                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lsprogram_gid += values.CboProgram_list[i].program_gid + ",";
                    lsprogram_name += values.CboProgram_list[i].program + ",";

                }
                lsprogram_gid = lsprogram_gid.TrimEnd(',');
                lsprogram_name = lsprogram_name.TrimEnd(',');
            }

            msSQL = "select updated_by, updated_date,groupdocument_name,documenttypes_gid,documenttype_name,documentseverity_gid,documentseverity_name,lms_code, bureau_code, status as Status from ocs_mst_tgroupdocument where groupdocument_gid ='" + values.groupdocument_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("GRDL");
                    msSQL = " insert into ocs_mst_tgroupdocumentlog(" +
                              " groupdocumentlog_gid," +
                              " groupdocument_gid," +
                              " groupdocument_name," +
                              " documenttypes_gid," +
                              " documenttype_name," +
                              " documentseverity_gid," +
                              " documentseverity_name," +
                              " program_gid, " +
                              " program_name, " +
                              " lms_code," +
                              " bureau_code," +
                              " Status," +
                              " covenant_type, " +
							  " document_code," +
                              " display_order," +
                              " document_remarks," +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.groupdocument_gid + "'," +
                              "'" + objODBCDatareader["groupdocument_name"].ToString() + "'," +
                              "'" + values.documenttypes_gid + "'," +
                              "'" + values.documenttype_name + "'," +
                              "'" + values.documentseverity_gid + "'," +
                              "'" + values.documentseverity_name + "'," +
                              "'" + lsprogram_gid + "'," +
                              "'" + lsprogram_name.Replace("'", "\\'") + "'," +
                              "'" + lslms_code + "'," +
                              "'" + lsbureau_code + "'," +
                              "'" + values.Status + "'," +
                              "'" + values.covenant_type + "'," +
							  "'" + values.document_code.Replace("'", @"\'") + "'," +
                              "'" + values.display_order.Replace("'", @"\'") + "'," +
                              "'" + values.document_remarks.Replace("'", @"\'") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tgroupdocument set " +
                     " groupdocument_gid='" + values.groupdocument_gid.Replace("'", "\\'") + "'," +
                     " groupdocument_name='" + values.groupdocument_name.Replace("'", "\\'") + "'," +
                     " documenttypes_gid='" + values.documenttypes_gid + "'," +
                     " documenttype_name='" + values.documenttype_name.Replace("'", "\\'") + "'," +
                     " documentseverity_gid='" + values.documentseverity_gid + "'," +
                     " documentseverity_name='" + values.documentseverity_name.Replace("'", "\\'") + "'," +
                     " program_gid='" + lsprogram_gid + "'," +
                     " program_name='" + lsprogram_name.Replace("'", "\\'") + "'," +
                     " lms_code='" + lslms_code + "'," +
                     " bureau_code='" + lsbureau_code + "'," +
                     " covenant_type='" + values.covenant_type + "'," +
					 " document_code='" + values.document_code.Replace("'", @"\'") + "'," +
                     " display_order='" + values.display_order.Replace("'", @"\'") + "'," +
                     " document_remarks='" + values.document_remarks.Replace("'", @"\'") + "'," +
                     " Status='" + values.Status + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where groupdocument_gid='" + values.groupdocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_mst_tgroupdocumentprogram where groupdocument_gid='" + values.groupdocument_gid + "'";
            int mnResult1 = objdbconn.ExecuteNonQuerySQL(msSQL);

            int mnResult2 = 0;
            if (mnResult1 != 0)
            {
                for (var i = 0; i < values.CboProgram_list.Count; i++)
                {
                    lstprogram_gid = values.CboProgram_list[i].program_gid;
                    lstprogram_name = values.CboProgram_list[i].program;

                    msGetGid = objcmnfunctions.GetMasterGID("GRPL");
                    msSQL = " insert into ocs_mst_tgroupdocumentprogram (" +
                              " groupdocumentprogram_gid," +
                              " groupdocument_gid," +
                              " groupdocument_name," +
                              " program_gid, " +
                              " program_name, " +
                              " created_by," +
                              " created_date, " +
                              " updated_by," +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.groupdocument_gid + "'," +
                              "'" + values.groupdocument_name.Replace("'", "\\'") + "'," +
                              "'" + lstprogram_gid + "'," +
                              "'" + lstprogram_name.Replace("'", "\\'") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult2 = objdbconn.ExecuteNonQuerySQL(msSQL);

                }
            }

            if (mnResult != 0 && mnResult2 != 0)
            {

                msSQL = "update ocs_mst_tgroupchecklist set groupdocument_gid ='" + values.groupdocument_gid + "' where groupdocument_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Group Document Updated Successfully";
                return true;

            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
                return false;
            }
        }



        public void DaGetProgramDropDown(string employee_gid, MdlMstApplication360 values)
        {

            //ENTITY

            msSQL = " SELECT entity_gid, entity_name " +
                    " FROM adm_mst_tentity  where status='Y' order by entity_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getentity = new List<entity_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getentity.Add(new entity_list
                    {
                        entity_gid = (dr_datarow["entity_gid"].ToString()),
                        entity_name = (dr_datarow["entity_name"].ToString()),

                    });
                }
                values.entity_list = getentity;
            }
            dt_datatable.Dispose();



            //Vertical

            msSQL = " SELECT a.vertical_gid,a.vertical_name,vertical_code " +
                   " FROM ocs_mst_tvertical a  where status_log='Y' order by a.vertical_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment = new List<vertical_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new vertical_list
                    {
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.vertical_list = getSegment;
            }
            dt_datatable.Dispose();

        }

        public void DaGetEntityDropDown(string employee_gid, MdlMstApplication360 values)
        {

            //ENTITY

            msSQL = " SELECT entity_gid, entity_name " +
                    " FROM adm_mst_tentity  where status='Y' order by entity_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getentity = new List<entity_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getentity.Add(new entity_list
                    {
                        entity_gid = (dr_datarow["entity_gid"].ToString()),
                        entity_name = (dr_datarow["entity_name"].ToString()),

                    });
                }
                values.entity_list = getentity;
            }
            dt_datatable.Dispose();
        }

        //Edit

        public void DaEditProgram(string program_gid, MdlProgram objmaster)
        {

            msSQL = " SELECT program_gid,program,lms_code, bureau_code,program_refno,date_format(approved_date,'%d-%m-%Y') as approved_date,maximum_limit,entity_gid,entity_name,program_limit,program_description, status as Status FROM ocs_mst_tprogram " +
                    " where program_gid='" + program_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objmaster.program_gid = objODBCDatareader["program_gid"].ToString();
                objmaster.program = objODBCDatareader["program"].ToString();
                objmaster.program_refno = objODBCDatareader["program_refno"].ToString();
                objmaster.approved_date = objODBCDatareader["approved_date"].ToString();
                objmaster.entity_gid = objODBCDatareader["entity_gid"].ToString();
                objmaster.maximum_limit = objODBCDatareader["maximum_limit"].ToString();
                objmaster.program_limit = objODBCDatareader["program_limit"].ToString();
                objmaster.program_description = objODBCDatareader["program_description"].ToString();
                objmaster.entity_name = objODBCDatareader["entity_name"].ToString();
                objmaster.lms_code = objODBCDatareader["lms_code"].ToString();
                objmaster.bureau_code = objODBCDatareader["bureau_code"].ToString();
                objmaster.Status = objODBCDatareader["Status"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select program2vertical_gid,vertical_gid,vertical_name from ocs_mst_tprogram2vertical " +
                    " where program_gid='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getverticalproList = new List<verticalpro>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getverticalproList.Add(new verticalpro
                    {
                        program2vertical_gid = dt["program2vertical_gid"].ToString(),
                        vertical_gid = dt["vertical_gid"].ToString(),
                        vertical_name = dt["vertical_name"].ToString(),
                    });
                    objmaster.verticalpro = getverticalproList;
                }
            }

            msSQL = " select program2approval_gid,employee_gid,employee_name from ocs_mst_tprogram2approval " +
          " where program_gid='" + program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapprovedbyList = new List<approvedby>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getapprovedbyList.Add(new approvedby
                    {
                        program2approval_gid = dt["program2approval_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                    objmaster.approvedby = getapprovedbyList;
                }
            }

            msSQL = "select a.vertical_gid,a.vertical_name from ocs_mst_tvertical  a" +
                     " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid where status_log='Y' order by a.vertical_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);


            var get_programverticalemployee = new List<programvertical_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.programvertical_list = dt_datatable.AsEnumerable().Select(row =>
                  new programvertical_list
                  {
                      vertical_gid = row["vertical_gid"].ToString(),
                      vertical_name = row["vertical_name"].ToString()
                  }
                ).ToList();
            }
            dt_datatable.Dispose();

            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name,b.employee_gid from adm_mst_tuser a " +
              " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
              " where user_status<>'N' order by a.user_firstname asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_approvedbyemployee = new List<approvedby_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.approvedby_list = dt_datatable.AsEnumerable().Select(row =>
                  new approvedby_list
                  {
                      employee_gid = row["employee_gid"].ToString(),
                      employee_name = row["employee_name"].ToString()
                  }
                ).ToList();
            }
            dt_datatable.Dispose();

        }

        //Group dodument check list

        // Add Check List

        public void DaGetGroupCheckList(string employee_gid, MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = "select groupchecklist_gid,checklist_name from ocs_mst_tgroupchecklist where " +
                   " groupdocument_gid ='" + employee_gid + "'" + "order by groupdocument_gid desc";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            groupchecklist_gid = (dr_datarow["groupchecklist_gid"].ToString()),
                            checklist_name = (dr_datarow["checklist_name"].ToString()),

                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGroupCheckList(checklist values, string employee_gid)
        {
            if (values.checklist_name == null || values.checklist_name == "")
            {
                lschecklist_name = "";
            }
            else
            {
                lschecklist_name = values.checklist_name.Replace("'", "");
            }

            msGetGid = objcmnfunctions.GetMasterGID("GRCL");
            msSQL = " insert into ocs_mst_tgroupchecklist(" +
                    " groupchecklist_gid," +
                    " groupdocument_gid," +
                    " checklist_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + lschecklist_name + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Check List Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        // EditCheckList

        public void DaGetGroupCheckListEditList(string groupdocument_gid, MdlMstApplication360 values)
        {
            msSQL = " select groupchecklist_gid ,checklist_name,groupdocument_gid from  ocs_mst_tgroupchecklist " +
                    " where groupdocument_gid ='" + groupdocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getchecklist_list = new List<checklist_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getchecklist_list.Add(new checklist_list
                    {
                        groupchecklist_gid = dt["groupchecklist_gid"].ToString(),
                        groupdocument_gid = dt["groupdocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),
                    });
                    values.checklist_list = getchecklist_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetGroupCheckListTempEditList(string groupdocument_gid, string employee_gid, MdlMstApplication360 values)
        {
            msSQL = " select groupchecklist_gid ,checklist_name,groupdocument_gid from ocs_mst_tgroupchecklist " +
                    " where groupdocument_gid = '" + employee_gid + "' or groupdocument_gid ='" + groupdocument_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getapplication_list.Add(new application_list
                    {
                        groupchecklist_gid = dt["groupchecklist_gid"].ToString(),
                        groupdocument_gid = dt["groupdocument_gid"].ToString(),
                        checklist_name = dt["checklist_name"].ToString(),

                    });
                    values.application_list = getapplication_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGroupCheckListTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tgroupchecklist where groupdocument_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        public void DaDeleteGroupCheckList(string groupchecklist_gid, variety values)
        {
            msSQL = "delete from ocs_mst_tgroupchecklist where groupchecklist_gid='" + groupchecklist_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Check List_gid Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }

        }

        // Group Document List

        public void DaGroupDocumentList(MdlMstApplication360 values)
        {
            msSQL = " SELECT groupdocument_gid,groupdocument_name FROM ocs_mst_tgroupdocument where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_groupdocument = new List<groupdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                values.groupdoc_list = dt_datatable.AsEnumerable().Select(row => new groupdoc_list
                {
                    groupdocument_gid = row["groupdocument_gid"].ToString(),
                    groupdocument_name = row["groupdocument_name"].ToString()
                }
                ).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaPostCreditGroupAdd(MdlCreditOpsGroupAdd values, string employee_gid)
        {
            msSQL = "select creditopsgroup_name from ocs_mst_tcreditopsgroupmapping where creditopsgroup_name = '" + values.creditopsgroup_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Credit Ops Group Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("COGM");
                lsopsgroupid = objcmnfunctions.GetMasterGID("COGI");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CREO");
                msSQL = " insert into ocs_mst_tcreditopsgroupmapping(" +
                        " creditopsgroupmapping_gid ," +
                        " creditopsgroup_id," +
                        " api_code," +
                        " creditopsgroup_name," +
                        " vertical_gid," +
                        " vertical_name," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + lsopsgroupid + "'," +
                         "'" + msGetAPICode + "'," +
                        "'" + values.creditopsgroup_name.Replace("'", "") + "'," +
                        "'" + values.vertical_gid + "'," +
                        "'" + values.vertical_name + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                for (var i = 0; i < values.creditopsmaker.Count; i++)
                {
                    msGetcreditops2maker_gid = objcmnfunctions.GetMasterGID("COMM");

                    msSQL = "Insert into ocs_mst_tcreditops2maker( " +
                           " creditops2maker_gid, " +
                           " creditopsgroupmapping_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetcreditops2maker_gid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + values.creditopsmaker[i].employee_gid + "'," +
                           "'" + values.creditopsmaker[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                
                for (var i = 0; i < values.creditopschecker.Count; i++)
                {
                    msGetcreditops2checker_gid = objcmnfunctions.GetMasterGID("COCM");

                    msSQL = "Insert into ocs_mst_tcreditops2checker( " +
                           " creditops2checker_gid, " +
                           " creditopsgroupmapping_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetcreditops2checker_gid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + values.creditopschecker[i].employee_gid + "'," +
                           "'" + values.creditopschecker[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Credit Ops Group Added successfully";
                }
                else
                {
                    values.message = "Error Occured while Adding";
                    values.status = false;
                }
            }
            objODBCDatareader.Close();
        }

        public void DaGetCreditOpsGroupSummary(MdlCreditOpsGroup objmaster)
        {
            try
            {
                msSQL = " SELECT a.creditopsgroup_id,a.api_code,a.creditopsgroupmapping_gid ,a.creditopsgroup_name,a.vertical_name, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcreditopsgroupmapping a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.created_date desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditopsgroup_list = new List<creditopsgroup_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcreditopsgroup_list.Add(new creditopsgroup_list
                        {
                            creditopsgroup_id = (dr_datarow["creditopsgroup_id"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            creditopsgroupmapping_gid = (dr_datarow["creditopsgroupmapping_gid"].ToString()),
                            creditopsgroup_name = (dr_datarow["creditopsgroup_name"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            creditopsgroup_status = (dr_datarow["status"].ToString()),
                            vertical_name = (dr_datarow["vertical_name"].ToString())
                        });
                    }
                    objmaster.creditopsgroup_list = getcreditopsgroup_list;
                }
                dt_datatable.Dispose();
                objmaster.status = true;
            }
            catch (Exception ex)
            {
                objmaster.status = false;
            }
        }

        public void DaGetCreditopsgroupHeads(string creditopsgroupmapping_gid, creditopsheads values)
        {           
            msSQL = " select group_concat(employee_name) as employee_name  from ocs_mst_tcreditops2maker " +
                " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.creditopsmaker_name = objODBCDatareader["employee_name"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select group_concat(employee_name) as employee_name  from ocs_mst_tcreditops2checker " +
                " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.creditopschecker_name = objODBCDatareader["employee_name"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select creditopsgroup_name  from ocs_mst_tcreditopsgroupmapping " +
                " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.creditopsgroup_name = objODBCDatareader["creditopsgroup_name"].ToString();
            }
            objODBCDatareader.Close();
        }

        public void DaGetCreditOpsGroupEdit(string creditopsgroupmapping_gid, MdlCreditOpsGroup objmaster)
        {
            msSQL = " select creditopsgroupmapping_gid,creditopsgroup_name,creditopsgroup_id,vertical_gid,vertical_name, status as creditopsgroup_status from ocs_mst_tcreditopsgroupmapping " +
                    " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objmaster.creditopsgroupmapping_gid = objODBCDatareader["creditopsgroupmapping_gid"].ToString();
                objmaster.creditopsgroup_name = objODBCDatareader["creditopsgroup_name"].ToString();
                objmaster.creditopsgroup_status = objODBCDatareader["creditopsgroup_status"].ToString();
                objmaster.vertical_name = objODBCDatareader["vertical_name"].ToString();
                objmaster.vertical_gid = objODBCDatareader["vertical_gid"].ToString();
            }
            objODBCDatareader.Close();
                       
            msSQL = " select creditops2maker_gid,employee_gid,employee_name from ocs_mst_tcreditops2maker " +
                " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getCreditOpsMakerList = new List<CreditOpsMakerList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getCreditOpsMakerList.Add(new CreditOpsMakerList
                    {
                        creditops2maker_gid = dt["creditops2maker_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                    objmaster.CreditOpsMakerList = getCreditOpsMakerList;
                }
            }
            dt_datatable.Dispose();
            msSQL = " select creditops2checker_gid,employee_gid,employee_name from ocs_mst_tcreditops2checker " +
                " where creditopsgroupmapping_gid='" + creditopsgroupmapping_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getCreditOpsCheckerList = new List<CreditOpsCheckerList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getCreditOpsCheckerList.Add(new CreditOpsCheckerList
                    {
                        creditops2checker_gid = dt["creditops2checker_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                    objmaster.CreditOpsCheckerList = getCreditOpsCheckerList;
                }
            }
            dt_datatable.Dispose();
            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name,b.employee_gid from adm_mst_tuser a " +
               " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
               " where user_status<>'N' order by a.user_firstname asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_creditmakeremployee = new List<Creditmaker_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.Creditmaker_list = dt_datatable.AsEnumerable().Select(row =>
                  new Creditmaker_list
                  {
                      employee_gid = row["employee_gid"].ToString(),
                      employee_name = row["employee_name"].ToString()
                  }
                ).ToList();
            }
            dt_datatable.Dispose();

            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name,b.employee_gid from adm_mst_tuser a " +
               " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
               " where user_status<>'N' order by a.user_firstname asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_creditcheckeremployee = new List<Creditchecker_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.Creditchecker_list = dt_datatable.AsEnumerable().Select(row =>
                  new Creditchecker_list
                  {
                      employee_gid = row["employee_gid"].ToString(),
                      employee_name = row["employee_name"].ToString()
                  }
                ).ToList();
            }
        }

        public bool DaPostCreditOpsGroupUpdate(string employee_gid, MdlCreditOpsGroup values)
        {
            msSQL = "select creditopsgroupmapping_gid from ocs_mst_tcreditopsgroupmapping where creditopsgroup_name = '" + values.creditopsgroup_name.Replace("'", "\\'") + "'";
            lsopsmappinggid = objdbconn.GetExecuteScalar(msSQL);
            if (lsopsmappinggid != "")
            {
                if (lsopsmappinggid != values.creditopsgroupmapping_gid)
                {
                    values.status = false;
                    values.message = "Credit Group Name Already Exist";
                    return false;
                }
            }

            msSQL = "select updated_by, updated_date,creditopsgroup_name from ocs_mst_tcreditopsgroupmapping where creditopsgroupmapping_gid ='" + values.creditopsgroupmapping_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("COML");
                    msSQL = " insert into ocs_mst_tcreditopsgroupmappinglog(" +
                              " creditopsgroupmappinglog_gid," +
                              " creditopsgroupmapping_gid," +
                              " creditopsgroup_name , " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.creditopsgroupmapping_gid + "'," +
                              "'" + objODBCDatareader["creditopsgroup_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = "update ocs_mst_tcreditopsgroupmapping set creditopsgroup_name='" + values.creditopsgroup_name.Replace("'", "") + "'," +
                    " vertical_gid = '" + values.vertical_gid + "'," +
                    " vertical_name = '" + values.vertical_name + "'," +
                    " updated_by = '" + employee_gid + "'," +
                    " updated_date = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                    " where creditopsgroupmapping_gid ='" + values.creditopsgroupmapping_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
          
            msSQL = " delete from ocs_mst_tcreditops2maker where creditopsgroupmapping_gid ='" + values.creditopsgroupmapping_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                for (var i = 0; i < values.creditopsmaker.Count; i++)
                {
                    msGetcreditops2maker_gid = objcmnfunctions.GetMasterGID("COMM");

                    msSQL = "Insert into ocs_mst_tcreditops2maker( " +
                           " creditops2maker_gid, " +
                           " creditopsgroupmapping_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetcreditops2maker_gid + "'," +
                           "'" + values.creditopsgroupmapping_gid + "'," +                          
                           "'" + values.creditopsmaker[i].employee_gid + "'," +
                           "'" + values.creditopsmaker[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }                
            }
            
            msSQL = " delete from ocs_mst_tcreditops2checker where creditopsgroupmapping_gid ='" + values.creditopsgroupmapping_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                for (var i = 0; i < values.creditopschecker.Count; i++)
                {
                    msGetcreditops2checker_gid = objcmnfunctions.GetMasterGID("COCM");

                    msSQL = "Insert into ocs_mst_tcreditops2checker( " +
                           " creditops2checker_gid, " +
                           " creditopsgroupmapping_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetcreditops2checker_gid + "'," +
                           "'" + values.creditopsgroupmapping_gid + "'," +
                           "'" + values.creditopschecker[i].employee_gid + "'," +
                           "'" + values.creditopschecker[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Credit Ops Group updated successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating Credit Group";
                return false;
            }
        }

        public void DaPostCreditOpsgroupInactive(MdlCreditOpsGroup values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcreditopsgroupmapping set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where creditopsgroupmapping_gid='" + values.creditopsgroupmapping_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("COIL");

                msSQL = " insert into ocs_mst_tcreditopsmappinginactivelog (" +
                      " creditopsmappinginactivelog_gid , " +
                      " creditopsgroupmapping_gid," +
                      " creditopsgroup_name ," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.creditopsgroupmapping_gid + "'," +
                      " '" + values.creditopsgroup_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Credit Group Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Credit Group Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaGetCreditOpsgroupInactiveLogview(string creditopsgroupmapping_gid, MdlCreditOpsGroup values)
        {
            try
            {
                msSQL = " SELECT creditopsgroupmapping_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcreditopsmappinginactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where creditopsgroupmapping_gid ='" + creditopsgroupmapping_gid + "' order by a.creditopsmappinginactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getCreditOpsStatuslog = new List<CreditOpsStatuslog>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getCreditOpsStatuslog.Add(new CreditOpsStatuslog
                        {
                            creditopsgroupmapping_gid = (dr_datarow["creditopsgroupmapping_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.CreditOpsStatuslog = getCreditOpsStatuslog;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }


        // Physical Status

        public void GetPhysicalStatus(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT physicalstatus_gid,api_code,physicalstatus_name, lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tphysicalstatus a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.physicalstatus_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            physicalstatus_gid = (dr_datarow["physicalstatus_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            physicalstatus_name = (dr_datarow["physicalstatus_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatePhysicalStatus(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select physicalstatus_name from ocs_mst_tphysicalstatus where physicalstatus_name = '" + values.physicalstatus_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Physics Status Name Already Exist";
            }
            else
            {
                msGetGid = objcmnfunctions.GetMasterGID("PHYS");
                msGetAPICode = objcmnfunctions.GetApiMasterGID("PHSM");
                msSQL = " insert into ocs_mst_tphysicalstatus(" +
                        " physicalstatus_gid," +
                        " api_code," +
                        " physicalstatus_name," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.physicalstatus_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Physical Status Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditPhysicalStatus(string physicalstatus_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT physicalstatus_gid,physicalstatus_name,lms_code, bureau_code, status as Status FROM ocs_mst_tphysicalstatus where physicalstatus_gid='" + physicalstatus_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.physicalstatus_gid = objODBCDatareader["physicalstatus_gid"].ToString();
                    values.physicalstatus_name = objODBCDatareader["physicalstatus_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatePhysicalStatus(string employee_gid, application360 values)
        {
            msSQL = "select physicalstatus_gid from ocs_mst_tphysicalstatus where physicalstatus_name = '" + values.physicalstatus_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.physicalstatus_gid)
                {
                    values.message = "Physical Status Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tphysicalstatus set " +
                 " physicalstatus_name='" + values.physicalstatus_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where physicalstatus_gid='" + values.physicalstatus_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PYSL");

                msSQL = " insert into ocs_mst_tphysicalstatuslog (" +
                       " physicalstatuslog_gid, " +
                       " physicalstatus_gid, " +
                       " physicalstatus_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.physicalstatus_gid + "'," +
                       " '" + values.physicalstatus_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Physical Status Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactivePhysicalStatus(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tphysicalstatus set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where physicalstatus_gid='" + values.physicalstatus_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("PYIN");

                msSQL = " insert into ocs_mst_tphysicalstatusinactivelog (" +
                      " physicalstatusinactivelog_gid, " +
                      " physicalstatus_gid," +
                      " physicalstatus_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.physicalstatus_gid + "'," +
                      " '" + values.physicalstatus_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Physical Status Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Physical Status Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DeletePhysicalStatus(string physicalstatus_gid, string employee_gid, result values)
        {
            //msSQL = " select institution_gid from ocs_mst_tinstitution where businesscategory_gid='" + businesscategory_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    objODBCDatareader.Close();
            //    values.message = "Can't able to delete Business Category, Because it is tagged to Application Creation";
            //    values.status = false;
            //    return;
            //}
            //else
            //{
            //    objODBCDatareader.Close();
            //    msSQL = " select institution_gid from ocs_mst_tinstitution where businesscategory_gid='" + businesscategory_gid + "'";
            //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //    if (objODBCDatareader.HasRows == true)
            //    {
            //        objODBCDatareader.Close();
            //        values.message = "Can't able to delete Business Category, Because it is tagged to Application Creation";
            //        values.status = false;
            //        return;
            //    }
            //    else
            //    {
            //objODBCDatareader.Close();
            msSQL = " select physicalstatus_name from ocs_mst_tphysicalstatus where physicalstatus_gid='" + physicalstatus_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tphysicalstatus where physicalstatus_gid='" + physicalstatus_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Physical Status Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Physical Status'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured..!";
                    }
            //    }
            //}
        }

        public void DaPhysicalStatusInactiveLogview(string physicalstatus_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT physicalstatus_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tphysicalstatusinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where physicalstatus_gid ='" + physicalstatus_gid + "' order by a.physicalstatusinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            physicalstatus_gid = (dr_datarow["physicalstatus_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Saluation

        public void DaGetsalutation(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT salutation_gid,api_code,salutation_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tsalutation a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.salutation_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            salutation_gid = (dr_datarow["salutation_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            salutation_name = (dr_datarow["salutation_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatesalutation(application360 values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("SLGI");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("SALT");

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select salutation_name from ocs_mst_tsalutation where salutation_name = '" + values.salutation_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Salutation Already Exist";
            }
            else
            {
                msSQL = " insert into ocs_mst_tsalutation(" +
                    " salutation_gid," +
                    " api_code," +
                    " salutation_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.salutation_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Salutation Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditsalutation(string salutation_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT salutation_gid,salutation_name,lms_code, bureau_code, status as Status FROM ocs_mst_tsalutation where salutation_gid='" + salutation_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.salutation_gid = objODBCDatareader["salutation_gid"].ToString();
                    values.salutation_name = objODBCDatareader["salutation_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatesalutation(string employee_gid, application360 values)
        {
            msSQL = "select salutation_gid from ocs_mst_tsalutation where salutation_name = '" + values.salutation_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.salutation_gid)
                {
                    values.message = "Salutation Already Exist";
                    values.status = false;
                    return;
                }
            }
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = " update ocs_mst_tsalutation set " +
                 " salutation_name='" + values.salutation_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where salutation_gid='" + values.salutation_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SLLG");

                msSQL = " insert into ocs_mst_tsalutationlog (" +
                       " salutationlog_gid, " +
                       " salutation_gid, " +
                       " salutation_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.salutation_gid + "'," +
                       " '" + values.salutation_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Salutation Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating salutation";
            }
        }

        public void DaInactivesalutation(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tsalutation set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where salutation_gid='" + values.salutation_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SLIN");

                msSQL = " insert into ocs_mst_tsalutationinactivelog (" +
                      " salutationinactivelog_gid, " +
                      " salutation_gid," +
                      " salutation_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.salutation_gid + "'," +
                      " '" + values.salutation_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Salutation Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Salutation Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeletesalutation(string salutation_gid, string employee_gid, result values)
        {

            msSQL = " select salutation_name from ocs_mst_tsalutation where salutation_gid='" + salutation_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tsalutation where salutation_gid='" + salutation_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Salutation Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Salutation'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaInactivesalutationHistory(ApplicationInactiveHistory objapplicationhistory, string salutation_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " from ocs_mst_tsalutationinactivelog a " +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                        " where a.salutation_gid='" + salutation_gid + "' order by a.salutationinactivelog_gid desc  ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }

        // Equipment

        public void DaGetEquipment(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT a.equipment_gid,api_code,a.equipment_name,a.lms_code, a.bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tequipment a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.equipment_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            equipment_name = (dr_datarow["equipment_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        public void DaCreateEquipment(application360 values, string employee_gid)
        {
            msSQL = "select equipment_gid from ocs_mst_tequipment where equipment_name = '" + values.equipment_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.equipment_gid)
                //{
                    values.message = " This Equipment Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msGetGid = objcmnfunctions.GetMasterGID("EQUI");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("EQUT");
            msSQL = " insert into ocs_mst_tequipment(" +
                    " equipment_gid," +
                    " api_code," +
                    " equipment_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.equipment_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Equipment Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditEquipment(string equipment_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT equipment_gid,equipment_name,lms_code, bureau_code, status as Status FROM ocs_mst_tequipment where equipment_gid='" + equipment_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.equipment_gid = objODBCDatareader["equipment_gid"].ToString();
                    values.equipment_name = objODBCDatareader["equipment_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }
        public void DaUpdateEquipment(string employee_gid, application360 values)
        {
            msSQL = "select equipment_gid from ocs_mst_tequipment where equipment_name = '" + values.equipment_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.equipment_gid)
                {
                    values.message = " This Equipment Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tequipment set " +
                 " equipment_name='" + values.equipment_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where equipment_gid='" + values.equipment_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("EQOG");

                msSQL = " insert into ocs_mst_tequipmentlog (" +
                       " equipmentlog_gid, " +
                       " equipment_gid, " +
                       " equipment_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.equipment_gid + "'," +
                       " '" + values.equipment_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Equipment Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveEquipment(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tequipment set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where equipment_gid='" + values.equipment_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("EQAC");

                msSQL = " insert into ocs_mst_tequipmentinactivelog (" +
                      " equipmentinactivelog_gid, " +
                      " equipment_gid," +
                      " equipment_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.equipment_gid + "'," +
                      " '" + values.equipment_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Equipment Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Equipment Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }
        public void DaDeleteEquipment(string equipment_gid, string employee_gid, result values)
        {

            //msSQL = " select equipment_gid from ocs_mst_tequipment where equipment_gid='" + equipment_gid + "'";
            //objODBCDatareader1 = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader1.HasRows == true)
            //{
            //    objODBCDatareader1.Close();
            //    values.message = "Can't able to delete Equipment, Because it is tagged to Equipment";
            //    values.status = false;
            //}
            //else
            //{
            //    objODBCDatareader1.Close();
            msSQL = " select equipment_name from ocs_mst_tequipment where equipment_gid='" + equipment_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tequipment where equipment_gid='" + equipment_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Equipment Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Equipment'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }

        }
        public void DaEquipmentInactiveLogview(string equipment_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT a.equipment_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tequipmentinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.equipment_gid ='" + equipment_gid + "' order by a.equipmentinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //LiveStock
        public void DaGetlivestock(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT a.livestock_gid,api_code,a.livestock_name,a.lms_code, a.bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tlivestock a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.livestock_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            livestock_name = (dr_datarow["livestock_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreatelivestock(application360 values, string employee_gid)
        {
            msSQL = "select livestock_gid from ocs_mst_tlivestock where livestock_name = '" + values.livestock_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.livestock_gid)
                //{
                    values.message = " This Live Stock Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("LSID");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("LIVS");
            msSQL = " insert into ocs_mst_tlivestock(" +
                    " livestock_gid," +
                     " api_code," +
                    " livestock_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.livestock_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Livestock Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditlivestock(string livestock_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT livestock_gid,livestock_name,lms_code, bureau_code, status as Status FROM ocs_mst_tlivestock where livestock_gid='" + livestock_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.livestock_gid = objODBCDatareader["livestock_gid"].ToString();
                    values.livestock_name = objODBCDatareader["livestock_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdatelivestock(string employee_gid, application360 values)
        {
            msSQL = "select livestock_gid from ocs_mst_tlivestock where livestock_name = '" + values.livestock_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.livestock_gid)
                {
                    values.message = " This Live Stock Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tlivestock set " +
                 " livestock_name='" + values.livestock_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where livestock_gid='" + values.livestock_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LLID");

                msSQL = " insert into ocs_mst_tlivestocklog (" +
                       " livestocklog_gid, " +
                       " livestock_gid, " +
                       " livestock_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.livestock_gid + "'," +
                       " '" + values.livestock_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Livestock Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactivelivestock(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tlivestock set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where livestock_gid='" + values.livestock_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("LIID");

                msSQL = " insert into ocs_mst_tlivestockinactivelog (" +
                      " livestockinactivelog_gid, " +
                      " livestock_gid," +
                      " livestock_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.livestock_gid + "'," +
                      " '" + values.livestock_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Livestock Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Livestock Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeletelivestock(string livestock_gid, string employee_gid, result values)
        {
            msSQL = " select livestock_name from ocs_mst_tLiveStock where livestock_gid='" + livestock_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tlivestock where livestock_gid='" + livestock_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "livestock Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'livestock'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DalivestockInactiveLogview(string livestock_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT a.livestock_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tlivestockinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.livestock_gid ='" + livestock_gid + "' order by a.livestockinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void InactiveLiveStockHistory(ApplicationInactiveHistory objapplicationhistory, string livestock_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tlivestockinactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.livestock_gid='" + livestock_gid + "' order by a.livestockinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }


        public void DalivestockList(MdlMstApplication360 values)
        {


            msSQL = " select livestock_gid, livestock_name from ocs_mst_tlivestock " +
                    " order by livestock_gid_gid desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_livestock = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_livestock.Add(new application_list
                    {

                        livestock_gid = dt[" livestock_gid"].ToString(),
                        livestock_name = dt["livestock_name"].ToString(),
                    });
                    values.application_list = get_livestock;
                }
            }
            dt_datatable.Dispose();
        }


        //internal rating
        public void DaGetinternalrating(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT a.internalrating_gid,a.api_code,a.internalrating_name,a.lms_code, a.bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tinternalrating a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.internalrating_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            internalrating_gid = (dr_datarow["internalrating_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            internalrating_name = (dr_datarow["internalrating_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        public void DaCreateinternalrating(application360 values, string employee_gid)
        {
            msSQL = "select internalrating_gid from ocs_mst_tinternalrating where internalrating_name = '" + values.internalrating_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.internalrating_gid)
                //{
                    values.message = " This Internal Rating Already Exists";
                    values.status = false;
                    return;
                //}
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("ILRG");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("INTR");
            msSQL = " insert into ocs_mst_tinternalrating(" +
                    " internalrating_gid," +
                    " api_code," +
                    " internalrating_name," +
                    " lms_code," +
                    " bureau_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.internalrating_name.Replace("'", "") + "'," +
                    "'" + lslms_code + "'," +
                    "'" + lsbureau_code + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Internal Rating Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        public void DaEditinternalrating(string internalrating_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT internalrating_gid,internalrating_name,lms_code, bureau_code, status as Status FROM ocs_mst_tinternalrating where internalrating_gid='" + internalrating_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateinternalrating(string employee_gid, application360 values)
        {
            msSQL = "select internalrating_gid from ocs_mst_tinternalrating where internalrating_name = '" + values.internalrating_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.internalrating_gid)
                {
                    values.message = " This Internal Rating Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = " update ocs_mst_tinternalrating set " +
                 " internalrating_name='" + values.internalrating_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where internalrating_gid='" + values.internalrating_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ILRL");

                msSQL = " insert into ocs_mst_tinternalratinglog (" +
                       " internalratinglog_gid, " +
                       " internalrating_gid, " +
                       " internalrating_name," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.internalrating_gid + "'," +
                       " '" + values.internalrating_name.Replace("'", "") + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Internal Rating Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveinternalrating(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tinternalrating set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where internalrating_gid='" + values.internalrating_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ILAL");

                msSQL = " insert into ocs_mst_tinternalratinginactivelog (" +
                      " internalratinginactivelog_gid, " +
                      " internalrating_gid," +
                      " internalrating_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.internalrating_gid + "'," +
                      " '" + values.internalrating_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Internal Rating Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Internal Rating Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteinternalrating(string internalrating_gid, string employee_gid, result values)
        {
            msSQL = " select internalrating_name from ocs_mst_tinternalrating where internalrating_gid='" + internalrating_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tinternalrating where internalrating_gid='" + internalrating_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "internalrating Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'internalrating'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DainternalratingInactiveLogview(string internalrating_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT a.internalrating_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tinternalratinginactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.internalrating_gid ='" + internalrating_gid + "' order by a.internalratinginactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            internalrating_gid = (dr_datarow["internalrating_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void InactiveinternalratingHistory(ApplicationInactiveHistory objapplicationhistory, string internalrating_gid)
        {
            try
            {
                msSQL = " select a.remarks, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                " from ocs_mst_tinternalratinginactivelog a " +
                " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid = c.user_gid " +
                " where a.internalrating_gid='" + internalrating_gid + "' order by a.internalratinginactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getinactivehistory_list = new List<inactivehistory_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getinactivehistory_list.Add(new inactivehistory_list
                        {
                            status = (dr_datarow["status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString())
                        });
                    }
                    objapplicationhistory.inactivehistory_list = getinactivehistory_list;
                }
                dt_datatable.Dispose();
                objapplicationhistory.status = true;
            }
            catch
            {
                objapplicationhistory.status = false;
            }
        }


        public void DainternalratingList(MdlMstApplication360 values)
        {


            msSQL = " select internalrating_gid, internalrating_name from ocs_mst_tinternalrating " +
                    " order by internalrating_gid_gid desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_internalrating = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_internalrating.Add(new application_list
                    {

                        internalrating_gid = dt[" internalrating_gid"].ToString(),
                        internalrating_name = dt["internalrating_name"].ToString(),
                    });
                    values.application_list = get_internalrating;
                }
            }
            dt_datatable.Dispose();
        }

        // Get Equipment Holding List
        public void DaGetEquipmentHoldingList(MdlEquipmentHolding objMdlEquipmentHolding)
        {
            msSQL = " SELECT equipment_gid,equipment_name FROM ocs_mst_tequipment where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getequipment_list = new List<equipment_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlEquipmentHolding.equipment_list = dt_datatable.AsEnumerable().Select(row => new equipment_list
                {
                    equipment_gid = row["equipment_gid"].ToString(),
                    equipment_name = row["equipment_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Get Livestock List
        public void DaGetLivestockList(MdlLivestock objMdlLivestock)
        {
            msSQL = " SELECT livestock_gid,livestock_name FROM ocs_mst_tlivestock where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getlivestock_list = new List<livestock_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlLivestock.livestock_list = dt_datatable.AsEnumerable().Select(row => new livestock_list
                {
                    livestock_gid = row["livestock_gid"].ToString(),
                    livestock_name = row["livestock_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Get Internal Rating List
        public void DaGetInternalRatingList(MdlInternalRating objMdlInternalRating)
        {
            msSQL = " SELECT internalrating_gid,internalrating_name FROM ocs_mst_tinternalrating where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinternalrating_list = new List<internalrating_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlInternalRating.internalrating_list = dt_datatable.AsEnumerable().Select(row => new internalrating_list
                {
                    internalrating_gid = row["internalrating_gid"].ToString(),
                    internalrating_name = row["internalrating_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Get Nearest Samunnati Branch List
        public void DaGetSamunnatiBranchList(MdlSamunnatiBranchList objMdlSamunnatiBranchList)
        {
            msSQL = " SELECT branch_gid,branch_name FROM hrm_mst_tbranch";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsamunnatibranch_list = new List<samunnatibranch_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlSamunnatiBranchList.samunnatibranch_list = dt_datatable.AsEnumerable().Select(row => new samunnatibranch_list
                {
                    branch_gid = row["branch_gid"].ToString(),
                    branch_name = row["branch_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }
        // Get Physical Status List
        public void DaGetPhysicalStatusList(MdlPhysicalStatusList objMdlPhysicalStatusList)
        {
            msSQL = " SELECT physicalstatus_gid,physicalstatus_name FROM ocs_mst_tphysicalstatus where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getphysicalstatus_list = new List<physicalstatus_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlPhysicalStatusList.physicalstatus_list = dt_datatable.AsEnumerable().Select(row => new physicalstatus_list
                {
                    physicalstatus_gid = row["physicalstatus_gid"].ToString(),
                    physicalstatus_name = row["physicalstatus_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Get City List
        public void DaGetCityList(MdlCityList objMdlCityList)
        {
            msSQL = " SELECT city_gid,city_name FROM ocs_mst_tcity ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcity_list = new List<city_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlCityList.city_list = dt_datatable.AsEnumerable().Select(row => new city_list
                {
                    city_gid = row["city_gid"].ToString(),
                    city_name = row["city_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        // Covenant  Period --- STARTING

        public void DaGetCovenantPeriod(Covenant_Period objapplication360)
        {
            try
            {
                msSQL = " SELECT a.covenantperiod_gid,a.api_code,a.covenantperiod_name,a.covenantperiod_code,a.lms_code, a.bureau_code,a.remarks, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcovenantperiod a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.covenantperiod_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcovenantperiod_list = new List<covenantperiod_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcovenantperiod_list.Add(new covenantperiod_list
                        {
                            covenantperiod_gid = (dr_datarow["covenantperiod_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            covenantperiod_name = (dr_datarow["covenantperiod_name"].ToString()),
                            covenantperiod_code = (dr_datarow["covenantperiod_code"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.covenantperiod_list = getcovenantperiod_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCovenantPeriod(CovenantPeriodResult values, string employee_gid)
        {
            msSQL = "select covenantperiod_gid from ocs_mst_tcovenantperiod where covenantperiod_name = '" + values.covenantperiod_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.covenantperiod_gid)
                //{
                    values.message = " This Covenant Period Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetGid = objcmnfunctions.GetMasterGID("CONP");
            msGetAPICode = objcmnfunctions.GetApiMasterGID("COVP");
            msGetGidCovenantperiodcode = objcmnfunctions.GetMasterGID("CPID");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");

            }
            if (values.remarks == null || values.remarks == "")
            {
                lsremarks = "";
            }
            else
            {
                lsremarks = values.remarks.Replace("'", "");
            }

            msSQL = " insert into ocs_mst_tcovenantperiod(" +
                       " covenantperiod_gid," +
                       " api_code," +
                        " covenantperiod_name," +
                        "covenantperiod_code," +
                        " lms_code," +
                        " bureau_code," +
                         "remarks," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                       "'" + msGetGid + "'," +
                       "'" + msGetAPICode + "'," +
                        "'" + values.covenantperiod_name.Replace("'", "") + "'," +
                        "'" + msGetGidCovenantperiodcode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + values.remarks.Replace("'", "") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Covenant Period Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }


        public void DaEditCovenantPeriod(string covenantperiod_gid, CovenantPeriodResult values)
        {
            try
            {
                msSQL = " SELECT covenantperiod_gid,covenantperiod_name, covenantperiod_code, lms_code, bureau_code, remarks, status FROM ocs_mst_tcovenantperiod " +
                        " where covenantperiod_gid='" + covenantperiod_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.covenantperiod_gid = objODBCDatareader["covenantperiod_gid"].ToString();
                    values.covenantperiod_name = objODBCDatareader["covenantperiod_name"].ToString();
                    values.covenantperiod_code = objODBCDatareader["covenantperiod_code"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.remarks = objODBCDatareader["remarks"].ToString();
                    values.Status = objODBCDatareader["status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCovenantPeriod(string employee_gid, CovenantPeriodResult values)
        {
            msSQL = "select covenantperiod_gid from ocs_mst_tcovenantperiod where covenantperiod_name = '" + values.covenantperiod_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.covenantperiod_gid)
                {
                    values.message = " This Covenant Period Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            if (values.remarks == null || values.remarks == "")
            {
                lsremarks = "";
            }
            else
            {
                lsremarks = values.remarks.Replace("'", "");
            }

            msSQL = " update ocs_mst_tcovenantperiod set " +
                 " covenantperiod_name='" + values.covenantperiod_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " remarks='" + lsremarks + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where covenantperiod_gid='" + values.covenantperiod_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPUL");

                msSQL = " insert into ocs_mst_tcovenantperiodlog (" +
                       " covenantperiodlog_gid, " +
                       " covenantperiod_gid, " +
                       " covenantperiod_name," +
                       " lms_code," +
                       " bureau_code," +
                       " remarks," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.covenantperiod_gid + "'," +
                       " '" + values.covenantperiod_name.Replace("'", "") + "'," +
                       " '" + values.lms_code + "'," +
                       " '" + values.bureau_code + "'," +
                       " '" + values.remarks + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Covenant Period Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveCovenantPeriod(CovenantPeriodResult values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcovenantperiod set status='" + values.Status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where covenantperiod_gid='" + values.covenantperiod_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CPIA");

                msSQL = " insert into ocs_mst_tcovenantperiodinactivelog (" +
                      " covenantperiodinactivelog_gid, " +
                      " covenantperiod_gid," +
                      " covenantperiod_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.covenantperiod_gid + "'," +
                      " '" + values.covenantperiod_name + "'," +
                      " '" + values.Status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.Status == "N")
                {
                    values.status = true;
                    values.message = "Covenant Period Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Covenant Period Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteCovenantPeriod(string covenantperiod_gid, string employee_gid, result values)
        {

            msSQL = " select covenantperiod_name from ocs_mst_tcovenantperiod where covenantperiod_gid='" + covenantperiod_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcovenantperiod where covenantperiod_gid='" + covenantperiod_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Covenanat Period Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into agr_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Covenanat Period'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }

        }

        public void DaCovenantPeriodInactiveLogview(string covenantperiod_gid, Covenant_Period values)
        {
            try
            {
                msSQL = " SELECT covenantperiod_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcovenantperiodinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where covenantperiod_gid ='" + covenantperiod_gid + "' order by a.covenantperiodinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<covenantperiod_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new covenantperiod_list
                        {
                            covenantperiod_gid = (dr_datarow["covenantperiod_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.covenantperiod_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        // Covenant  Period --- ENDING

        //CSA Category

        public void DaGetCsaCategory(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT category_gid,category_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcategory a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.category_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            category_gid = (dr_datarow["category_gid"].ToString()),
                            category_name = (dr_datarow["category_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCsaCategory(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select category_name from ocs_mst_tcategory where category_name = '" + values.category_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Category Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CACA");
                msGetGid = objcmnfunctions.GetMasterGID("CSCG");
                msSQL = " insert into ocs_mst_tcategory(" +
                        " category_gid," +
                        " category_name," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.category_name.Replace("'", "") + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "CSA Category Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditCsaCategory(string category_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT category_gid,category_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcategory " +
                        " where category_gid='" + category_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.category_gid = objODBCDatareader["category_gid"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCsaCategory(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }

            msSQL = "select category_name, category_gid from ocs_mst_tcategory where category_name = '" + values.category_name.Replace("'", "\\'") + "' and category_gid !='" + values.category_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Category Name Already Exist";
            }
            else
            {
                msSQL = " update ocs_mst_tcategory set " +
                 " category_name='" + values.category_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where category_gid='" + values.category_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CSLG");

                    msSQL = " insert into ocs_mst_tcategorylog (" +
                           " category_loggid, " +
                           " category_gid, " +
                           " category_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.category_gid + "'," +
                           " '" + values.category_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "CSA Category Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
            }
        }
        public void DaInactiveCsaCategory(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcategory set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where category_gid='" + values.category_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CSLI");

                msSQL = " insert into ocs_mst_tcategoryinactivelog (" +
                      " categoryinactivelog_gid, " +
                      " category_gid," +
                      " category_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.category_gid + "'," +
                      " '" + values.category_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "CSA Category Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "CSA Category Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteCsaCategory(string category_gid, string employee_gid, result values)
        {
            msSQL = " select category_gid from ocs_mst_tproducts where category_gid = '" + category_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            if (dt_datatable.Rows.Count != 0)
            {
                dt_datatable.Dispose();
                values.message = "CSA Category has been Assigned for Product, You Cannot Delete";
                values.status = false;
            }
            else { 
            msSQL = " select category_name from ocs_mst_tcategory where category_gid='" + category_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcategory where category_gid='" + category_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "CSA Category Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'CSA Category'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }
        }

        public void DaCsaCategoryInactiveLogview(string category_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT category_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcategoryinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where category_gid ='" + category_gid + "' order by a.categoryinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            category_gid = (dr_datarow["category_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //CSA Category Ending

        //CSA Sector

        public void DaGetCsaSector(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT sector_gid,sector_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcsasector a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.sector_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            sector_gid = (dr_datarow["sector_gid"].ToString()),
                            sector_name = (dr_datarow["sector_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCsaSector(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select sector_name from ocs_mst_tcsasector where sector_name = '" + values.sector_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "CSA Sector Classification Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CCAC");
                msGetGid = objcmnfunctions.GetMasterGID("SCAG");
                msSQL = " insert into ocs_mst_tcsasector(" +
                        " sector_gid," +
                        " sector_name," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.sector_name.Replace("'", "") + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "CSA Sector Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditCsaSector(string sector_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT sector_gid,sector_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcsasector " +
                        " where sector_gid='" + sector_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.sector_gid = objODBCDatareader["sector_gid"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCsaSector(string employee_gid, application360 values)
        {
            msSQL = "select sector_gid from ocs_mst_tcsasector where sector_name = '" + values.sector_name.Replace("'", "\\'") + "' ";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.sector_gid)
                {
                    values.message = "CSA Sector Classification Already Exists";
                    values.status = false;
                    return;
                }
            }

            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
           
                msSQL = " update ocs_mst_tcsasector set " +
                 " sector_name='" + values.sector_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where sector_gid='" + values.sector_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SLCG");

                    msSQL = " insert into ocs_mst_tcsasectorlog (" +
                           " sector_loggid, " +
                           " sector_gid, " +
                           " sector_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.sector_gid + "'," +
                           " '" + values.sector_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "CSA Sector Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
            
        }
        public void DaInactiveCsaSector(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcsasector set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where sector_gid='" + values.sector_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SCIL");

                msSQL = " insert into ocs_mst_tcsasectorinactivelog (" +
                      " sectorinactivelog_gid," +
                      " sector_gid," +
                      " sector_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.sector_gid + "'," +
                      " '" + values.sector_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "CSA Sector Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "CSA Sector Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteCsaSector(string sector_gid, string employee_gid, result values)
        {
            msSQL = " select sector_name from ocs_mst_tcsasector where sector_gid='" + sector_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcsasector where sector_gid='" + sector_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "CSA Sector Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'CSA Sector'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCsaSectorInactiveLogview(string sector_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT sector_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcsasectorinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where sector_gid ='" + sector_gid + "' order by a.sectorinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            sector_gid = (dr_datarow["sector_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //CSA Sector Ending

        //Guarantee

        public void DaGetGuarantee(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT guarantee_gid,guarantee_name,lms_code, bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tguaranteeprograms a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.guarantee_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            guarantee_gid = (dr_datarow["guarantee_gid"].ToString()),
                            guarantee_name = (dr_datarow["guarantee_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateGuarantee(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select guarantee_name from ocs_mst_tguaranteeprograms where guarantee_name = '" + values.guarantee_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Guarantee Program Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("GPAC");
                msGetGid = objcmnfunctions.GetMasterGID("SCAG");
                msSQL = " insert into ocs_mst_tguaranteeprograms(" +
                        " guarantee_gid," +
                        " guarantee_name," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.guarantee_name.Replace("'", "") + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Guarantee Program Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditGuarantee(string guarantee_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT guarantee_gid,guarantee_name,lms_code, bureau_code, status as Status FROM ocs_mst_tguaranteeprograms " +
                        " where guarantee_gid='" + guarantee_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.guarantee_gid = objODBCDatareader["guarantee_gid"].ToString();
                    values.guarantee_name = objODBCDatareader["guarantee_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateGuarantee(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            
            msSQL = "select guarantee_gid from ocs_mst_tguaranteeprograms where guarantee_name = '" + values.guarantee_name.Replace("'", "\\'") + "'";
            lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.companydocument_gid)
                {
                    values.message = " This Guarantee Program Already Exists";
                    values.status = false;
                    return;
                }
            }
            else
            {
                msSQL = " update ocs_mst_tguaranteeprograms set " +
                 " guarantee_name='" + values.guarantee_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where guarantee_gid='" + values.guarantee_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SLCG");

                    msSQL = " insert into ocs_mst_tguaranteelog (" +
                           " guarantee_loggid," +
                           " guarantee_gid," +
                           " guarantee_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.guarantee_gid + "'," +
                           " '" + values.guarantee_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Guarantee Program Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
            }
        }
        public void DaInactiveGuarantee(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tguaranteeprograms set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where guarantee_gid='" + values.guarantee_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("SCIL");

                msSQL = " insert into ocs_mst_tguaranteeinactivelog (" +
                      " guaranteeinactivelog_gid," +
                      " guarantee_gid," +
                      " guarantee_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.guarantee_gid + "'," +
                      " '" + values.guarantee_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Guarantee Program Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Guarantee Program Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteGuarantee(string guarantee_gid, string employee_gid, result values)
        {
            msSQL = "select creditguaranteedtl_gid from ocs_mst_tcreditguaranteedtl where guaranteeprogram_gid = '" + guarantee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.message = "Can't able to delete Guarantee Program, Because it is tagged to Credit";
                values.status = false;
                return;
            }
            else
            {
                objODBCDatareader.Close();
                msSQL = " select guarantee_name from ocs_mst_tguaranteeprograms where guarantee_gid='" + guarantee_gid + "'";
                lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " delete from ocs_mst_tguaranteeprograms where guarantee_gid='" + guarantee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Guarantee Program Deleted Successfully..!";
                    msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                    msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                             "master_gid, " +
                             "master_name, " +
                             "master_value, " +
                             "deleted_by, " +
                             "deleted_date) " +
                             " values(" +
                             "'" + msGetGid + "'," +
                             "'Guarantee Programs'," +
                             "'" + lsmaster_value + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occured..!";
                }
            }
        }
        public void DaGuaranteeInactiveLogview(string guarantee_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT guarantee_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tguaranteeinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where guarantee_gid ='" + guarantee_gid + "' order by a.guaranteeinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            guarantee_gid = (dr_datarow["guarantee_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Guarantee Ending

        //Colending Category

        public void DaGetColending(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT colendingcategory_gid,colendingcategory_name,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcolendingcategory a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.colendingcategory_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            colendingcategory_gid = (dr_datarow["colendingcategory_gid"].ToString()),
                            colendingcategory_name = (dr_datarow["colendingcategory_name"].ToString()),                          
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateColending(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            msSQL = "select colendingcategory_name from ocs_mst_tcolendingcategory where colendingcategory_name = '" + values.colendingcategory_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Colending Category Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("COCA");
                msGetGid = objcmnfunctions.GetMasterGID("CCMG");
                msSQL = " insert into ocs_mst_tcolendingcategory(" +
                        " colendingcategory_gid," +
                        " colendingcategory_name," +
                        " api_code," +
                        " lms_code," +
                        " bureau_code," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.colendingcategory_name.Replace("'", "") + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Colending Category Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditColending(string colendingcategory_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT colendingcategory_gid,colendingcategory_name,lms_code, bureau_code, status as Status FROM ocs_mst_tcolendingcategory " +
                        " where colendingcategory_gid='" + colendingcategory_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.colendingcategory_gid = objODBCDatareader["colendingcategory_gid"].ToString();
                    values.colendingcategory_name = objODBCDatareader["colendingcategory_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateColending(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            
            msSQL = "select colendingcategory_gid from ocs_mst_tcolendingcategory where colendingcategory_name = '" + values.colendingcategory_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                if (lsdocumentgid != values.colendingcategory_gid)
                {
                    values.message = "Colending Category Name Already Exists";
                    values.status = false;
                    return;
                }
            }
            
            else
            {
                msSQL = " update ocs_mst_tcolendingcategory set " +
                 " colendingcategory_name='" + values.colendingcategory_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where colendingcategory_gid='" + values.colendingcategory_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CCLG");

                    msSQL = " insert into ocs_mst_tcolendingcategorylog(" +
                           " colendingcategory_loggid," +
                           " colendingcategory_gid," +
                           " colendingcategory_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.colendingcategory_gid + "'," +
                           " '" + values.colendingcategory_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Colending Category Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
            }
        }
        public void DaInactiveColending(application360 values, string employee_gid)
        {
            msSQL = " update ocs_mst_tcolendingcategory set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where colendingcategory_gid='" + values.colendingcategory_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("CCIL");

                msSQL = " insert into ocs_mst_tcolendingcategoryinactivelog(" +
                      " colendingcategoryinactivelog_gid," +
                      " colendingcategory_gid," +
                      " colendingcategory_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.colendingcategory_gid + "'," +
                      " '" + values.colendingcategory_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Colending Category Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Colending Category Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteColending(string colendingcategory_gid, string employee_gid, result values)
        {
            msSQL = " select colendingcategory_name from ocs_mst_tcolendingcategory where colendingcategory_gid='" + colendingcategory_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " delete from ocs_mst_tcolendingcategory where colendingcategory_gid='" + colendingcategory_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Co-lending Category Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Co-lending Category'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaColendingInactiveLogview(string colendingcategory_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT colendingcategory_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcolendingcategoryinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where colendingcategory_gid ='" + colendingcategory_gid + "' order by a.colendingcategoryinactivelog_gid  desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            colendingcategory_gid = (dr_datarow["colendingcategory_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //Colending Category Ending

        //Colending Program summary 

        public void DaGetColendingProgram(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT colendingprogram_gid,colendar_name,category_gid,category_name, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcolendingprogram a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.colendingprogram_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<colending_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new colending_list
                        {
                            colendingprogram_gid = (dr_datarow["colendingprogram_gid"].ToString()),
                            colendar_name = (dr_datarow["colendar_name"].ToString()),
                            category_gid = (dr_datarow["category_gid"].ToString()),
                            category_name = (dr_datarow["category_name"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.colending_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        //  //Colending Program multiple add

        //  public void DaGetColendingProgram(string employee_gid, MdlMstApplication360 objapplication360)
        //  {
        //      try
        //      {
        //          msSQL = " select portfolio_gid,wef_date,percentage_name,remarks, " +
        //                  " from ocs_mst_tportfolio where portfolio_gid ='" + employee_gid + "'" + "order by portfolio_gid desc";
        //          dt_datatable = objdbconn.GetDataTable(msSQL);
        //          var getapplication_list = new List<application_list>();
        //          if (dt_datatable.Rows.Count != 0)
        //          {
        //              foreach (DataRow dr_datarow in dt_datatable.Rows)
        //              {
        //                  getapplication_list.Add(new application_list
        //                  {
        //                      portfolio_gid = (dr_datarow["portfolio_gid"].ToString()),
        //                      wef_date = (dr_datarow["wef_date"].ToString()),
        //                      percentage_name = (dr_datarow["percentage_name"].ToString()),
        //                      remarks = (dr_datarow["remarks"].ToString()),
        //                      //document_name = (dr_datarow["document_name"].ToString()),

        //                  });
        //              }
        //              objapplication360.application_list = getapplication_list;
        //          }
        //          dt_datatable.Dispose();
        //          objapplication360.status = true;
        //      }
        //      catch
        //      {
        //          objapplication360.status = false;
        //      }
        //  }
        public void DaCreateColendingProgram(application360 values, string employee_gid)
        {
            msSQL = "select colendingprogram_gid from ocs_mst_tcolendingprogram where colendar_name = '" + values.colendar_name.Replace("'", "\\'") + "'";
            string lsdocumentgid = objdbconn.GetExecuteScalar(msSQL);
            if (lsdocumentgid != "")
            {
                //if (lsdocumentgid != values.colendingprogram_gid)
                //{
                    values.message = " This Colending Program Already Exists";
                    values.status = false;
                    return;
                //}
            }

            msGetAPICode = objcmnfunctions.GetApiMasterGID("COPA");
            msGetGid = objcmnfunctions.GetMasterGID("CPMT");
            msSQL = " insert into ocs_mst_tcolendingprogram(" +
                    " colendingprogram_gid," +
                    " colendar_name," +
                    " api_code," +
                    " category_gid," +
                    " category_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.colendar_name.Replace("'", "") + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.category_gid + "'," +
                    "'" + values.category_name.Replace("'", "") + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                //Updates
                msSQL = "update ocs_mst_tportfolio set colendingprogram_gid ='" + msGetGid + "' where colendingprogram_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Colending Program Added Successfully";

            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }

        //  //multiple add
        public bool DaPostColendingAdd(MdlMstApplication360 values, string employee_gid)
        {

            msGetGid = objcmnfunctions.GetMasterGID("CPMG");
            msSQL = " insert into ocs_mst_tportfolio(" +
                   " portfolio_gid," +
                   " colendingprogram_gid," +
                   " wef_date," +
                   " percentage_name," +
                   " remarks," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "',";

            if (values.wef_date == null || values.wef_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.wef_date).ToString("yyyy-MM-dd") + "',";
            }

            msSQL += "'" + values.percentage_name.Replace("'", "") + "'," +
                      "'" + values.remarks.Replace("'", "") + "'," +
                      "'" + employee_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tcolendingprogramdocumentupload set portfolio_gid='" + msGetGid + "' where portfolio_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Portfolio added successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";
                return false;
            }

        }

        //  //multiple add end

        //  //multi add summary list start
        public void DaGetColendingTempList(string colendingprogram_gid ,string employee_gid,  MdlColendingProgram values)
        
        {
            msSQL = "select portfolio_gid,date_format(wef_date, '%d-%m-%Y') as wef_date,percentage_name,remarks  from ocs_mst_tportfolio where " +
              " colendingprogram_gid='" + employee_gid + "' or colendingprogram_gid='" + colendingprogram_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcolendingprogram_list = new List<colendingprogram_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcolendingprogram_list.Add(new colendingprogram_list
                    {
                        portfolio_gid = (dr_datarow["portfolio_gid"].ToString()),
                        wef_date = (dr_datarow["wef_date"].ToString()),
                        percentage_name = (dr_datarow["percentage_name"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                    });
                }
            }
            values.colendingprogram_list = getcolendingprogram_list;
            dt_datatable.Dispose();
        }


        //  //multi add summary list End

        //  //multi add summary list start
        public void DaGetColendingAddTempList(string employee_gid, MdlColendingProgram values)
        {
            msSQL = "select portfolio_gid,date_format(wef_date, '%d-%m-%Y') as wef_date,percentage_name,remarks  from ocs_mst_tportfolio where " +
              " colendingprogram_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcolendingprogram_list = new List<colendingprogram_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcolendingprogram_list.Add(new colendingprogram_list
                    {
                        portfolio_gid = (dr_datarow["portfolio_gid"].ToString()),
                        wef_date = (dr_datarow["wef_date"].ToString()),
                        percentage_name = (dr_datarow["percentage_name"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                    });
                }
            }
            values.colendingprogram_list = getcolendingprogram_list;
            dt_datatable.Dispose();
        }


        //  //multi add summary list End

        //  //multi add Edit summary list start
        public void DaGetColendingPortfolioList(string employee_gid, string portfolio_gid,MdlColendingProgram values)
        {
            try
            {
                msSQL = "select portfolio_gid,date_format(wef_date, '%d-%m-%Y') as wef_date,percentage_name,remarks  from ocs_mst_tportfolio where " +
              " portfolio_gid='" + portfolio_gid + "' or portfolio_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                values.portfolio_gid = objODBCDatareader["portfolio_gid"].ToString();
                values.wef_date = objODBCDatareader["wef_date"].ToString();
                values.percentage_name = objODBCDatareader["percentage_name"].ToString();
                values.remarks = objODBCDatareader["remarks"].ToString();
               
            }
            objODBCDatareader.Close();
            values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

       


        //  //multi add Edit summary list End

        //  //Upload Document Add
        public bool DaProgramAddDocumentUpload(HttpRequest httpRequest, colendinguploaddocument values, string employee_gid)
        {
            colendingupload_list objdocumentmodel = new colendingupload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();
            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/ColendingMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            values.message = "File format is not supported";
                            return false;
                        }
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/ColendingMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/ColendingMasterDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("CPDG");
                        msSQL = " insert into ocs_mst_tcolendingprogramdocumentupload( " +
                                " colendingprogramdocumentupload_gid," +
                                " portfolio_gid," +
                                    " document_name," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                      "'" + msGetGid + "'," +
                                       "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", " ") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", " ") + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            values.status = true;
                            values.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occured..!";
                        }

                        msSQL = " select colendingprogramdocumentupload_gid,document_name,document_path from ocs_mst_tcolendingprogramdocumentupload " +
                                                       " where colendingprogramdocumentupload_gid='" + employee_gid + "'";
                      
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getdocumentdtlList = new List<programdoc_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getdocumentdtlList.Add(new programdoc_list
                                {
                                    document_name = dt["document_name"].ToString(),
                                    document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                                    colendingprogramdocumentupload_gid = dt["colendingprogramdocumentupload_gid"].ToString(),
                                });
                                values.programdoc_list = getdocumentdtlList;
                            }
                        }
                        dt_datatable.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                values.message = ex.ToString();
            }
            return true;
        }


        //Upload Document End

        //Upload Document Summary List
        public void DaColendingUploadDocList(string portfolio_gid, string employee_gid, MdlColendingProgramList values)
        {
            msSQL = " select colendingprogramdocumentupload_gid,portfolio_gid,document_name,document_path from ocs_mst_tcolendingprogramdocumentupload " +
                                 " where portfolio_gid='" + portfolio_gid + "' or portfolio_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<programdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new programdoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        portfolio_gid = dt["portfolio_gid"].ToString(),
                        colendingprogramdocumentupload_gid = dt["colendingprogramdocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.programdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        //Upload Document Summary List

        //Document Delete Start 
        public void DaDeleteColendingDocuments(string colendingprogramdocumentupload_gid,string employee_gid, MdlColendingProgramList values)
        {
            msSQL = "delete from ocs_mst_tcolendingprogramdocumentupload where colendingprogramdocumentupload_gid='" + colendingprogramdocumentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.message = "document deleted successfully";
                values.status = true;
                msSQL = " select colendingprogramdocumentupload_gid,document_name,document_path from ocs_mst_tcolendingprogramdocumentupload " +
                                                      " where portfolio_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumentdtlList = new List<programdoc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getdocumentdtlList.Add(new programdoc_list
                        {
                            document_name = dt["document_name"].ToString(),
                            document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                            colendingprogramdocumentupload_gid = dt["colendingprogramdocumentupload_gid"].ToString(),
                        });
                        values.programdoc_list = getdocumentdtlList;
                    }
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.message = "Error occured";
                values.status = false;
            }
        }
        //Document Delete End

        //Document Delete Summary
        public void DaColendingSummaryDocList(string portfolio_gid, string employee_gid, MdlColendingProgramList values)
        {
            msSQL = " select colendingprogramdocumentupload_gid,portfolio_gid,document_name,document_path from ocs_mst_tcolendingprogramdocumentupload " +
                                 " where portfolio_gid='" + portfolio_gid + "' or portfolio_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<programdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {

                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new programdoc_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        portfolio_gid = dt["portfolio_gid"].ToString(),
                        colendingprogramdocumentupload_gid = dt["colendingprogramdocumentupload_gid"].ToString(),
                        //document_content = dt["document_content"].ToString(),
                    });
                    values.programdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }
        //  //Document Delete Summary End

        //  //Colending Temp Clear

        public void DaColendingTempClear(string employee_gid, result values)
        {

            msSQL = "delete from ocs_mst_tportfolio  where colendingprogram_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_mst_tcolendingprogramdocumentupload   where portfolio_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
            }
            else
            {
                values.status = false;
            }
        }

        //  //Edit Colending Program

       

        public void DaEditColendingProgram(string colendingprogram_gid, application360 objmaster)
        {

            msSQL = " SELECT colendar_name,category_gid,category_name FROM ocs_mst_tcolendingprogram " +
                    " where colendingprogram_gid='" + colendingprogram_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {

                objmaster.colendar_name = objODBCDatareader["colendar_name"].ToString();
                objmaster.colendingcategory_gid = objODBCDatareader["category_gid"].ToString();
                objmaster.colendingcategory_name = objODBCDatareader["category_name"].ToString();

            }
            objODBCDatareader.Close();


        }

        //Colending Program Remarks 

        public void DaGetPortfolioRemarksView(string portfolio_gid, PortfolioColending_List values)
        {
            try
            {
                msSQL = " select remarks,date_format(a.wef_date,'%d-%m-%Y') as wef_date,percentage_name from ocs_mst_tportfolio a where portfolio_gid='" + portfolio_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.remarks = objODBCDatareader["remarks"].ToString();
                    values.wef_date = objODBCDatareader["wef_date"].ToString();
                    values.percentage_name = objODBCDatareader["percentage_name"].ToString();

                }
                objODBCDatareader.Close();

                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        //status
        public void DaInactiveColendingProgram(application360 values, string employee_gid)
        {
            msSQL = " select a.colendingprogram_gid from ocs_mst_tcreditcolendingdtl a " +
                    " where colendingprogram_gid='" + values.colendingprogram_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = true;
            }
            else
            {
                values.message = "Co-lender is Tagged in Transaction page. So, You cannot Inactive it.";
                values.status = false;
                return;
            }

            msSQL = " update ocs_mst_tcolendingprogram set status ='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where colendingprogram_gid='" + values.colendingprogram_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MCIP");

                msSQL = " insert into ocs_mst_tcolenderinactivelog (" +
                      " colenderinactivelog_gid," +
                      " colendingprogram_gid," +
                      " colendar_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.colendingprogram_gid + "'," +
                      " '" + values.colendar_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Colendar Program Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Colendar Program Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        //status End

        //Colending Program Remarks End

        public void DaGetPortfolioDocDtl(string portfolio_gid, MdlColendingList values)
        {
            try
            {
                msSQL = " select colendingprogramdocumentupload_gid,portfolio_gid,colendingprogram_gid,date_format(a.created_date,'%d-%m-%Y %H:%i %p') as uploaded_date, " +
                        " document_path,document_name,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by " +
                        " from ocs_mst_tcolendingprogramdocumentupload a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                        " and b.user_gid = c.user_gid and portfolio_gid='" + portfolio_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<PortfolioDocumentView_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new PortfolioDocumentView_List
                        {
                            document_path = objcmnstorage.EncryptData(dr_datarow["document_path"].ToString()),
                            document_name = (dr_datarow["document_name"].ToString()),
                            colendingprogramdocumentupload_gid = (dr_datarow["colendingprogramdocumentupload_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString()
                        });
                    }
                    values.PortfolioDocumentView_List = get_filename;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        ////Edit Portfolio Summary

        public void DaEditPortfolioSummary(string colendingprogram_gid, MdlColendingList objmaster)
        {
            try
            {
                msSQL = " select portfolio_gid,colendingprogram_gid,date_format(a.wef_date,'%d-%m-%Y') as wef_date,percentage_name from ocs_mst_tportfolio a " +
                        " where colendingprogram_gid='" + colendingprogram_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<PortfolioColending_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new PortfolioColending_List
                        {
                            portfolio_gid = (dr_datarow["portfolio_gid"].ToString()),
                            colendingprogram_gid = (dr_datarow["colendingprogram_gid"].ToString()),
                            wef_date = (dr_datarow["wef_date"].ToString()),
                            percentage_name = dr_datarow["percentage_name"].ToString()
                        });
                    }
                    objmaster.PortfolioColending_List = get_filename;
                }
                dt_datatable.Dispose();
                objmaster.status = true;
                objmaster.message = "success";

            }
            catch
            {
                objmaster.status = false;
                objmaster.message = "failure";
            }

        }

        ////public void DaEditPortfolioEdit(string portfolio_gid, MdlColendingList objmaster)
        ////{
            
        ////        msSQL = " select portfolio_gid,colendingprogram_gid,date_format(a.wef_date,'%d-%m-%Y %H:%i %p') as wef_date,percentage_name from ocs_mst_tportfolio a " +
        ////                " where portfolio_gid='" + portfolio_gid + "'";

        ////        objODBCDatareader = objdbconn.GetDataReader(msSQL);
        ////        if (objODBCDatareader.HasRows)
        ////        {

        ////            objmaster.colendar_name = objODBCDatareader["colendar_name"].ToString();
        ////            objmaster.colendingcategory_gid = objODBCDatareader["category_gid"].ToString();
        ////            objmaster.colendingcategory_name = objODBCDatareader["category_name"].ToString();

        ////        }
        ////        objODBCDatareader.Close();

        ////    }
        //ref

        //Edit Overall update ref
        public bool Daupdatecolendingprogram(string employee_gid, MdlColendingList values)
        {
            msSQL = "select colendingprogram_gid from ocs_mst_tcolendingprogram where colendar_name = '" + values.colendar_name.Replace("'", "\\'") + "'";
            lscolendingprogram_gid = objdbconn.GetExecuteScalar(msSQL);
            if (lscolendingprogram_gid != "")
            {
                if (lscolendingprogram_gid != values.colendingprogram_gid)
                {
                    values.message = "Colendar Name Already Exist";
                    values.status = false;
                    return false;
                }
            }

            msSQL = "select updated_by, updated_date,colendar_name from ocs_mst_tcolendingprogram where colendingprogram_gid='" + values.colendingprogram_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CPML");
                    msSQL = " insert into ocs_mst_tcolendingprogramupdatelog(" +
                              " colendingprogram_loggid," +
                              " colendingprogram_gid," +
                              " colendar_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.colendingprogram_gid + "'," +
                              "'" + objODBCDatareader["colendar_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();
          
            msSQL = "update ocs_mst_tcolendingprogram set colendar_name='" + values.colendar_name + "'," +
                            " category_gid='" + values.category_gid + "'," +
                            " category_name='" + values.category_name + "'," +                          
                            " updated_by='" + employee_gid + "'," +
                            " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                            " where colendingprogram_gid='" + values.colendingprogram_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);        

            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tportfolio set colendingprogram_gid ='" + values.colendingprogram_gid + "' where colendingprogram_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);              

                values.status = true;
                values.message = "Colending Program Updated Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
                return false;
            }
        }

        //ref end

        //Edit summary Update
        public bool DaUpdatePortfolioSummary(string employee_gid, MdlColendingList values)
        {
           

            msSQL = "select updated_by, updated_date,colendar_name from ocs_mst_tcolendingprogram where colendingprogram_gid='" + values.colendingprogram_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CPML");
                    msSQL = " insert into ocs_mst_tcolendingprogramupdatelog(" +
                              " colendingprogram_loggid," +
                              " colendingprogram_gid," +
                              " colendar_name, " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.colendingprogram_gid + "'," +
                              "'" + objODBCDatareader["colendar_name"].ToString() + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = "update ocs_mst_tcolendingprogram set colendar_name='" + values.colendar_name + "'," +
                            " category_gid='" + values.category_gid + "'," +
                            " category_name='" + values.category_name + "'," +
                            " updated_by='" + employee_gid + "'," +
                            " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                            " where colendingprogram_gid='" + values.colendingprogram_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tportfolio set colendingprogram_gid ='" + values.colendingprogram_gid + "' where colendingprogram_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Colending Program Updated Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Updating";
                return false;
            }
        }

        //Summary End

        ////Portfolio Update 

        public void DaUpdatePortfolio(string employee_gid, MdlColendingList values)
        {

            if (values.percentage_name == null || values.percentage_name == "")
            {
                lspercentage_name = "";
            }
            else
            {
                lspercentage_name = values.percentage_name.Replace("'", "");
            }
            if (values.remarks == null || values.remarks == "")
            {
                lsremarks = "";
            }
            else
            {
                lsremarks = values.remarks.Replace("'", "");
            }

            msSQL = " select date_format(wef_date,'%d-%m-%Y') as wef_date from ocs_mst_tportfolio " +
                 "  where portfolio_gid='" + values.portfolio_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lswef_date = objODBCDatareader["wef_date"].ToString();

            }
            msSQL = " update ocs_mst_tportfolio set " +
                 " percentage_name='" + lspercentage_name + "'," +
                 " remarks='" + lsremarks + "',";

            //if (Convert.ToDateTime(values.wef_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            //{

            //}
            //else
            //{
            //    msSQL += " wef_date='" + Convert.ToDateTime(values.wef_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            //}

            if (lswef_date == values.wef_date)
            {
            }
            else
            {
                msSQL += " wef_date='" + Convert.ToDateTime(values.wef_date).ToString("yyyy-MM-dd") + "',";
            }

            msSQL += " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where portfolio_gid='" + values.portfolio_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "update ocs_mst_tcolendingprogramdocumentupload set portfolio_gid='" + values.portfolio_gid + "' where portfolio_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Portfolio Updated successfully";
                //return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured";

            }



        }
        ////multi add summary list start

        //Delete Summary

        public void DaDeleteColendingProgram(string colendingprogram_gid, string employee_gid, result values)
        {
            msSQL = " select a.colendingprogram_gid from ocs_mst_tcreditcolendingdtl a " +
                    " where colendingprogram_gid='" + colendingprogram_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = true;
            }
            else
            {
                values.message = "Co-lender is Tagged in Transaction page. So, You cannot delete it.";
                values.status = false;
                return;
            }
            objODBCDatareader.Close();

            msSQL = " select colendar_name from ocs_mst_tcolendingprogram where colendingprogram_gid='" + colendingprogram_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcolendingprogram where colendingprogram_gid ='" + colendingprogram_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Colending Program Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'colendar_name'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        //Delete Add Portfolio Summary

        public void DaDeletePortfolioSummary(string portfolio_gid, application360 values)
        {
            msSQL = "delete from ocs_mst_tportfolio where portfolio_gid='" + portfolio_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Portfolio Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Portfolio Details";
                values.status = false;
            }
        }
        //Delete Add Portfolio Summary

        //Delete Edit Portfolio Summary
        public void DaDeletePortfolioedit(string portfolio_gid, application360 values)
        {
            msSQL = "delete from ocs_mst_tportfolio where portfolio_gid='" + portfolio_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Portfolio Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Portfolio Details";
                values.status = false;
            }
        }

        //Delete Edit Portfolio Summary

        //Delete Edit Portfolio Temp list Summary
        public void DaGetPortfolioEditTempList(string colendingprogram_gid, string employee_gid, MdlColendingProgram values)
        {
            msSQL = "select portfolio_gid,wef_date,percentage_name,remarks,colendingprogram_gid from ocs_mst_tportfolio  " +
            " where colendingprogram_gid = '" + employee_gid + "' or colendingprogram_gid ='" + colendingprogram_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcolendingprogram_list = new List<colendingprogram_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcolendingprogram_list.Add(new colendingprogram_list
                    {
                        portfolio_gid = (dr_datarow["portfolio_gid"].ToString()),
                        wef_date = (dr_datarow["wef_date"].ToString()),
                        percentage_name = (dr_datarow["percentage_name"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString())
                    });
                }
                values.colendingprogram_list = getcolendingprogram_list;
            }
            dt_datatable.Dispose();
        }

        //Delete Edit Portfolio Temp list Summary

        //inactive log
        public void DaColendingProgInactiveLogview(string colendingprogram_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT colendingprogram_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcolenderinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where colendingprogram_gid ='" + colendingprogram_gid + "' order by a.colenderinactivelog_gid   desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            colendingprogram_gid = (dr_datarow["colendingprogram_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        //Colending rule
        public void DaGetColendingGroupTitleList(string colendingprogram_gid,ColendingTitle_list objmaster)
        {
            try
            {
                msSQL = " select colendingprogram_gid,colendar_name from ocs_mst_tcolendingprogram " +
                        " where colendingprogram_gid='" + colendingprogram_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objmaster.colendar_name = objODBCDatareader["colendar_name"].ToString();                    
                }
                objODBCDatareader.Close();

                msSQL = " SELECT a.grouptitle_name,a.grouptitle_gid FROM ocs_mst_tgrouptitle a where status='Y' order by a.grouptitle_name asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcolendinggroup_list = new List<GroupColendingTitle_dtl>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcolendinggroup_list.Add(new GroupColendingTitle_dtl
                        {
                            grouptitle_name = (dr_datarow["grouptitle_name"].ToString()),
                            grouptitle_gid = (dr_datarow["grouptitle_gid"].ToString()),
                        });
                    }
                    objmaster.GroupTitle_dtl = getcolendinggroup_list;
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
            }
        }

        public void DaPostCreateColendingRule(MdlColendingTitleQuestion values, string employee_gid)
        {
            string lsquestion_option = "";
            msGetGid = objcmnfunctions.GetMasterGID("CCQR");
            if (values.listarray_colending != null)
            {
                lsquestion_option = string.Join(",", values.listarray_colending.Select(item => "" + item.list_name + ""));
            }
            if (values.answer_type != "Calculation")
            {
                values.simplify_formula = "";
            }
            msSQL = " select group_order from ocs_mst_tcolendingquestionrule " +
                    " where colendingprogram_gid='" + values.colendingprogram_gid + "' and grouptitle_gid='" + values.grouptitle_gid + "'  limit 0,1";
            string lsgroup_order = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " insert into ocs_mst_tcolendingquestionrule(" +
                        " colendingquestionrule_gid," +
                        " colendingprogram_gid," +
                        " grouptitle_gid," +
                        " grouptitle_name," +
                        " question," +
                        " answer_type," +
                        " question_option, " +
                        " number_score, " +
                        " calculation_formula, " +
                        " simplify_formula, " +
                        " addfinal_score, " +
                        " hidden_question, " +
                        //" applicant_typegid, " +
                        " applicant_type, " +
                        " group_order, " +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + values.colendingprogram_gid + "'," +
                        "'" + values.grouptitle_gid + "'," +
                        "'" + values.grouptitle_name.Replace("'", "\\'") + "'," +
                        "'" + values.question.Replace("'", "\\'") + "'," +
                        "'" + values.answer_type + "'," +
                        "'" + lsquestion_option + "'," +
                        "'" + values.number_score + "'," +
                        "'" + values.calculation_formula + "'," +
                        "'" + values.simplify_formula + "'," +
                        "'" + values.addfinal_score + "'," +
                        "'" + values.hidden_question + "'," +
                        //"'" + values.applicant_typegid + "'," +
                        "'" + values.applicant_type + "'," +
                        "'" + lsgroup_order + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                if (values.listarray_colending != null)
                {
                    foreach (var data in values.listarray_colending)
                    {
                        string msGetOptionGid = objcmnfunctions.GetMasterGID("CQLO");

                        msSQL = " insert into ocs_mst_tcolendingquestionlistoption(" +
                            " colendingquestionlistoption_gid, " +
                           " colendingquestionrule_gid," +
                           " list_name," +
                           " score," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetOptionGid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + data.list_name.Replace("'", "\\'") + "'," +
                           "'" + data.Score + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                if (values.calculation_dtl_colending != null)
                {
                    foreach (var data in values.calculation_dtl_colending)
                    {
                        string msGetCalcGid = objcmnfunctions.GetMasterGID("CQCD");

                        msSQL = " insert into ocs_mst_tcolendingquestioncalculationdtl(" +
                           " colendingquestioncalculationdtl_gid," +
                           " colendingquestionrule_gid, " +
                           " question_gid," +
                           " question," +
                           " grouptitle_gid," +
                           " grouptitle_name," +
                           " field_type," +
                           " constant_value, " +
                           " operations," +
                           " simplify_key, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetCalcGid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + data.question_gid + "'," +
                           "'" + data.question.Replace("'", "\\'") + "'," +
                           "'" + data.grouptitle_gid + "'," +
                           "'" + data.grouptitle_name.Replace("'", "\\'") + "'," +
                           "'" + data.field_type + "'," +
                           "'" + data.constantvalue + "'," +
                           "'" + data.operations + "'," +
                           "'" + data.simplify_key + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                values.status = true;
                values.message = "colending Mapping - Rule Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";

            }
        }

        public void DaGetColendingquestionsummary(string colendingprogram_gid,string applicant_type, MdlColendingGroupTitleQuestion_list objmaster)
        {
            try
            {
                msSQL = " SELECT a.colendingquestionrule_gid,a.grouptitle_gid,a.grouptitle_name,question,answer_type,hidden_question, " +
                        " addfinal_score, calculation_formula,simplify_formula,group_order,question_order,applicant_type " +
                        " FROM ocs_mst_tcolendingquestionrule a  " +
                        " where colendingprogram_gid='" + colendingprogram_gid + "' and applicant_type='" + applicant_type + "' " +
                        " ORDER BY CAST(group_order AS UNSIGNED ) asc, " +
                        " CAST(question_order AS UNSIGNED) asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcolendinggroup_list = new List<MdlColendingGroupTitleQuestion>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcolendinggroup_list.Add(new MdlColendingGroupTitleQuestion
                        {
                            colendingquestionrule_gid = (dr_datarow["colendingquestionrule_gid"].ToString()),
                            grouptitle_name = (dr_datarow["grouptitle_name"].ToString()),
                            question = (dr_datarow["question"].ToString()),
                            answer_type = (dr_datarow["answer_type"].ToString()),
                            calculation_formula = (dr_datarow["calculation_formula"].ToString()),
                            grouptitle_gid = (dr_datarow["grouptitle_gid"].ToString()),
                            simplify_formula = (dr_datarow["simplify_formula"].ToString()),
                            addfinal_score = (dr_datarow["addfinal_score"].ToString()),
                            hidden_question = (dr_datarow["hidden_question"].ToString()),
                            group_order = (dr_datarow["group_order"].ToString()),
                            question_order = (dr_datarow["question_order"].ToString()),
                            applicant_type = (dr_datarow["applicant_type"].ToString()),
                        });
                    }
                    objmaster.MdlColendingGroupTitleQuestion = getcolendinggroup_list;
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
            }
        }
        public void DaGetColendingquestionlistsummary(string colendingquestionrule_gid, MdlColendingTitleQuestion values)
        {
            try
            {
                msSQL = " select colendingquestionlistoption_gid,list_name,score from ocs_mst_tcolendingquestionlistoption " +
                        " where colendingquestionrule_gid='" + colendingquestionrule_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditgroup_list = new List<listarray_colending>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcreditgroup_list.Add(new listarray_colending
                        {
                            questionlistoption_gid = (dr_datarow["colendingquestionlistoption_gid"].ToString()),
                            list_name = (dr_datarow["list_name"].ToString()),
                            Score = (dr_datarow["score"].ToString()),
                        });
                    }
                    values.listarray_colending = getcreditgroup_list;
                }
                dt_datatable.Dispose();

                msSQL = " select simplify_key,grouptitle_name,question,field_type,constant_value,operations from ocs_mst_tcolendingquestioncalculationdtl " +
                        " where colendingquestionrule_gid='" + colendingquestionrule_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcalculation_dtl = new List<calculation_dtl_colending>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcalculation_dtl.Add(new calculation_dtl_colending
                        {
                            simplify_key = (dr_datarow["simplify_key"].ToString()),
                            question = (dr_datarow["question"].ToString()),
                            field_type = (dr_datarow["field_type"].ToString()),
                            constantvalue = (dr_datarow["constant_value"].ToString()),
                            operations = (dr_datarow["operations"].ToString()),
                            grouptitle_name = (dr_datarow["grouptitle_name"].ToString()),
                        });
                    }
                    values.calculation_dtl_colending = getcalculation_dtl;
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
            }
        }
        public void DaGetDeleteColendingQuestionList(string colendingquestionrule_gid, result objvalues)
        {
            try
            {
                msSQL = " select colendingquestioncalculationdtl_gid from ocs_mst_tcolendingquestioncalculationdtl a " +
                        " left join ocs_mst_tcolendingquestionrule b on a.colendingquestionrule_gid =  b.colendingquestionrule_gid and a.grouptitle_gid = b.grouptitle_gid " +
                        " where a.question_gid = '" + colendingquestionrule_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    objvalues.status = false;
                    objvalues.message = "You cannot delete. This question already mapped to the Calculation.";
                }
                else
                {
                    objODBCDatareader.Close();
                    msSQL = " delete from ocs_mst_tcolendingquestionrule where colendingquestionrule_gid ='" + colendingquestionrule_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult == 1)
                    {
                        msSQL = " delete from ocs_mst_tcolendingquestionlistoption where colendingquestionrule_gid ='" + colendingquestionrule_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = " delete from ocs_mst_tcolendingquestioncalculationdtl where colendingquestionrule_gid ='" + colendingquestionrule_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        objvalues.status = true;
                        objvalues.message = "Question details are deleted successfully..!";
                    }
                    else
                    {
                        objvalues.status = true;
                        objvalues.message = "Error occured..!";
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        public void DaUpdateColendingGroupQuestionOrder(MdlColendingGroupTitleQuestion_list values, string employee_gid)
        {
            if (values.MdlColendingGroupTitleQuestion != null)
            {
                foreach (var data in values.MdlColendingGroupTitleQuestion)
                {
                    msSQL = " update ocs_mst_tcolendingquestionrule set question_order='" + data.question_order + "', " +
                            " updated_by='" + employee_gid + "'," +
                            " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                            " where colendingquestionrule_gid ='" + data.colendingquestionrule_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Group question order updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";

            }
        }
        public void DaGetColendingGroupList(string colendingprogram_gid,string applicant_type, MdlColendingdtl values)
        {
            msSQL = " select grouptitle_gid,grouptitle_name,group_order,applicant_type from ocs_mst_tcolendingquestionrule " +                   
                    " where colendingprogram_gid = '" + colendingprogram_gid + "' and  applicant_type = '" + applicant_type + "' group by grouptitle_gid order by group_order asc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditgroup_list = new List<GroupColendingTitle_dtl>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcreditgroup_list.Add(new GroupColendingTitle_dtl
                    {
                        grouptitle_name = (dr_datarow["grouptitle_name"].ToString()),
                        grouptitle_gid = (dr_datarow["grouptitle_gid"].ToString()),
                        group_order = (dr_datarow["group_order"].ToString()),
                        applicant_type = (dr_datarow["applicant_type"].ToString()),
                    });
                }
                values.GroupTitle_dtl = getcreditgroup_list;
            }

        }

        public void DaUpdateColendingGroupOrder(MdlColendingdtl values, string employee_gid)
        {
            if (values.GroupTitle_dtl != null)
            {
                foreach (var data in values.GroupTitle_dtl)
                {
                    msSQL = " update ocs_mst_tcolendingquestionrule set group_order='" + data.group_order + "', " +
                            " updated_by='" + employee_gid + "'," +
                            " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                            " where grouptitle_gid ='" + data.grouptitle_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Group order updated successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";

            }
        }

        public void DaGetCompanydocumentupdatelog(string companydocument_gid, documentupdatelog values)
        {
            msSQL = " select companydocument_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by " +
            " from ocs_mst_tcompanydocumentlog a " +
            " left join hrm_mst_temployee b on a.updated_by = b.employee_gid " +
            " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " where companydocument_gid ='" + companydocument_gid + "' order by a.updated_date desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentupdatelog_list = new List<documentupdatelog_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentupdatelog_list.Add(new documentupdatelog_list
                    {
                        companydocument_gid = dt["companydocument_gid"].ToString(),
                        updated_date = dt["updated_date"].ToString(),
                        updated_by = dt["updated_by"].ToString(),
                    });
                    values.documentupdatelog_list = getdocumentupdatelog_list;
                }
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetIndividualdocumentupdatelog(string individualdocument_gid, documentupdatelog values)
        {
            msSQL = " select individualdocument_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by " +
            " from ocs_mst_tindividualdocumentlog a " +
            " left join hrm_mst_temployee b on a.updated_by = b.employee_gid " +
            " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " where individualdocument_gid ='" + individualdocument_gid + "'  order by a.updated_date desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentupdatelog_list = new List<documentupdatelog_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentupdatelog_list.Add(new documentupdatelog_list
                    {
                        individualdocument_gid = dt["individualdocument_gid"].ToString(),
                        updated_date = dt["updated_date"].ToString(),
                        updated_by = dt["updated_by"].ToString(),
                    });
                    values.documentupdatelog_list = getdocumentupdatelog_list;
                }
            }
            dt_datatable.Dispose();
            values.status = true;
        }
        //public void DaGetAnswerTypeDropDown(string employee_gid, MdlMstAnswerType values)
        //{

        //    msSQL = " SELECT answertype_gid, answertype_name FROM ocs_mst_tanswertype " +
        //            " where status='Y' order by answertype_gid desc ";

        //    dt_datatable = objdbconn.GetDataTable(msSQL);
        //    var getanswertype = new List<AnswerType_List>();
        //    if (dt_datatable.Rows.Count != 0)
        //    {
        //        foreach (DataRow dr_datarow in dt_datatable.Rows)
        //        {
        //            getanswertype.Add(new AnswerType_List
        //            {
        //                answertype_gid = (dr_datarow["answertype_gid"].ToString()),
        //                answertype_name = (dr_datarow["answertype_name"].ToString()),

        //            });
        //        }
        //        values.AnswerType_List = getanswertype;
        //    }
        //    dt_datatable.Dispose();
        //}

        public void DaGetGroupdocumentupdatelog(string groupdocument_gid, documentupdatelog values)
        {
            msSQL = " select groupdocument_gid, date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by " +
            " from ocs_mst_tgroupdocumentlog a " +
            " left join hrm_mst_temployee b on a.updated_by = b.employee_gid " +
            " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " where groupdocument_gid ='" + groupdocument_gid + "' order by a.updated_date desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentupdatelog_list = new List<documentupdatelog_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentupdatelog_list.Add(new documentupdatelog_list
                    {
                        groupdocument_gid = dt["groupdocument_gid"].ToString(),
                        updated_date = dt["updated_date"].ToString(),
                        updated_by = dt["updated_by"].ToString(),
                    });
                    values.documentupdatelog_list = getdocumentupdatelog_list;
                }
            }
            dt_datatable.Dispose();
            values.status = true;
        }
        public void DaPostCreateColendingRuleadd(MdlColendingTitleQuestion values, string employee_gid)
        {
                   msGetGid = objcmnfunctions.GetMasterGID("CAQR");

                    msSQL = " insert into ocs_mst_tcolendingaddquestionrule(" +
                            " colendingaddquestionrule_gid," +
                            " colendingprogram_gid," +
                            " applicant_typegid, " +
                            " applicant_type, " +                          
                            " created_by," +
                            " created_date)" +
                            " values(" +
                           "'" + msGetGid + "',"+                                  
                           "'" + values.colendingprogram_gid + "'," +
                           "'" + values.applicant_typegid + "'," +
                           "'" + values.applicant_type + "'," +                           
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Co-lending added successfully";                        
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error occurred while adding";
                    }
        }
        public void DaGetapplicanttypesummary(string colendingprogram_gid,MdlColendingapplicant_list objmaster)
        {
            try
            {       

                msSQL = " SELECT applicant_type,colendingprogram_gid,colendingaddquestionrule_gid FROM ocs_mst_tcolendingaddquestionrule " +
                        " where colendingprogram_gid='" + colendingprogram_gid + "' ";
                       
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcolendinggroup_list = new List<MdlColendingapplicant>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcolendinggroup_list.Add(new MdlColendingapplicant
                        {                            
                            applicant_type = (dr_datarow["applicant_type"].ToString()),
                            colendingprogram_gid = (dr_datarow["colendingprogram_gid"].ToString()),
                            colendingaddquestionrule_gid = (dr_datarow["colendingaddquestionrule_gid"].ToString()),
                        });
                    }
                    objmaster.MdlColendingapplicant = getcolendinggroup_list;
                }
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {
            }
        }
        public void DaDeleteapplicanttype(string colendingaddquestionrule_gid, string employee_gid, result values)
        {
            msSQL = " select a.colendingprogram_gid from ocs_mst_tcolendingquestionrule a " +
                    " left join ocs_mst_tcolendingaddquestionrule b on a.colendingprogram_gid = b.colendingprogram_gid " +
                    " where colendingaddquestionrule_gid ='" + colendingaddquestionrule_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                values.message = "This applicant type is mapped, so..you can't delete it..!";
                values.status = false;
                objODBCDatareader.Close();
            }
            else
            {
                msSQL = " delete from ocs_mst_tcolendingaddquestionrule where colendingaddquestionrule_gid ='" + colendingaddquestionrule_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Applicant type deleted successfully..!";
                }
                else
                {
                    values.status = false;
                    values.message = "Error occured..!";
                }
            }
        }

        public void DaGetApplicantList(string colendingaddquestionrule_gid, ColendingTitle_list objmaster)
        {
            try
            {
                msSQL = " select applicant_type from ocs_mst_tcolendingaddquestionrule " +
                       " where colendingaddquestionrule_gid='" + colendingaddquestionrule_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objmaster.applicant_type = objODBCDatareader["applicant_type"].ToString();
                }
                objODBCDatareader.Close();

            }
            catch (Exception ex)
            {
            }
        }

        public void DaGetProgram2ProductSAMAGROList(string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct where " +
                    " program_gid='" + employee_gid + "' and entity_name ='SAMAGRO'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetProgram2ProductSAMFINList(string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct where " +
                    " program_gid='" + employee_gid + "' and entity_name ='SAMFIN'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }



        public void DaGetProductSAMFINTempList(string program_gid, string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct  " +
            " where program_gid = '" + employee_gid + "' or program_gid ='" + program_gid + "' and entity_name ='SAMFIN'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetProductSAMAGROTempList(string program_gid, string employee_gid, MdlLoanProductList values)
        {
            msSQL = "select program2loanproduct_gid,loanproduct_name,loansubproduct_name,program_gid from ocs_mst_tprogram2loanproduct  " +
            " where program_gid = '" + employee_gid + "' or program_gid ='" + program_gid + "' and entity_name ='SAMAGRO'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproduct_list = new List<loanproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproduct_list.Add(new loanproduct_list
                    {
                        program2loanproduct_gid = (dr_datarow["program2loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString())
                    });
                }
                values.loanproduct_list = getproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetProgramLog(string program_gid, MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT program,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by,a.updated_date" +
                        " FROM ocs_mst_tprogramlog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid where  program_gid ='" + program_gid + "' order by a.program_loggid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                      
                            program = (dr_datarow["program"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        //Courier Company

        public void DaGetCourierCompany(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT couriercompany_gid,couriercompany_code,couriercompany_name,lms_code, bureau_code,description, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,api_code," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tcouriercompany a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.couriercompany_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            couriercompany_gid = (dr_datarow["couriercompany_gid"].ToString()),
                            couriercompany_code = (dr_datarow["couriercompany_code"].ToString()),
                            couriercompany_name = (dr_datarow["couriercompany_name"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            description = (dr_datarow["description"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateCourierCompany(application360 values, string employee_gid)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            if (values.description == null || values.description == "")
            {
                lsdescription = "";
            }
            else
            {
                lsdescription = values.description.Replace("'", "");
            }
            msSQL = "select couriercompany_name from ocs_mst_tcouriercompany where couriercompany_name = '" + values.couriercompany_name.Replace("'", "\\'") + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Courier Company Name Already Exist";
            }
            else
            {
                msGetAPICode = objcmnfunctions.GetApiMasterGID("CCSC");
                msGetGid = objcmnfunctions.GetMasterGID("MCOC");
                msGetCompanyRefno = objcmnfunctions.GetMasterGID("CCOC");
                msSQL = " insert into ocs_mst_tcouriercompany(" +
                        " couriercompany_gid," +
                        " couriercompany_code," +
                        " api_code," +
                        " couriercompany_name," +
                        " lms_code," +
                        " bureau_code," +
                        " description," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + msGetCompanyRefno + "'," +
                        "'" + msGetAPICode + "'," +
                        "'" + values.couriercompany_name.Replace("'", "") + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        "'" + lsdescription + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Courier Company Name Added Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Adding";
                }
            }
        }
        public void DaEditCourierCompany(string couriercompany_gid, application360 values)
        {
            try
            {
                msSQL = " SELECT couriercompany_gid,couriercompany_name,lms_code, bureau_code,description, status as Status FROM ocs_mst_tcouriercompany " +
                        " where couriercompany_gid='" + couriercompany_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.couriercompany_gid = objODBCDatareader["couriercompany_gid"].ToString();
                    values.couriercompany_name = objODBCDatareader["couriercompany_name"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    values.description = objODBCDatareader["description"].ToString();
                    values.Status = objODBCDatareader["Status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateCourierCompany(string employee_gid, application360 values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "");
            }
            if (values.description == null || values.description == "")
            {
                lsdescription = "";
            }
            else
            {
                lsdescription = values.description.Replace("'", "");
            }
            msSQL = "select couriercompany_name, couriercompany_gid from ocs_mst_tcouriercompany where couriercompany_name = '" + values.couriercompany_name.Replace("'", "\\'") + "' and couriercompany_gid !='" + values.couriercompany_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Courier Company Name Already Exist";
            }
            else
            {
                msSQL = " update ocs_mst_tcouriercompany set " +
                 " couriercompany_name='" + values.couriercompany_name.Replace("'", "") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 " description='" + lsdescription + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where couriercompany_gid='" + values.couriercompany_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("MCOL");

                    msSQL = " insert into ocs_mst_tcouriercompanylog(" +
                           " couriercompanylog_gid, " +
                           " couriercompany_gid, " +
                           " couriercompany_name," +
                           " updated_by," +
                           " updated_date) " +
                           " values (" +
                           " '" + msGetGid + "'," +
                           " '" + values.couriercompany_gid + "'," +
                           " '" + values.couriercompany_name.Replace("'", "") + "'," +
                           " '" + employee_gid + "'," +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Courier Company Name Updated Successfully";
                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred While Updating";
                }
            }
        }
        public void DaInactiveCourierCompany(application360 values, string employee_gid)
        {
            msSQL = " select a.couriercompany_gid from ocs_trn_tcouriermgnt a " +
                   " where couriercompany_gid='" + values.couriercompany_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = true;
            }
            else
            {
                values.message = "Courier Company Name is Tagged in Transaction page. So, You cannot Inactive it.";
                values.status = false;
                return;
            }
            msSQL = " update ocs_mst_tcouriercompany set status='" + values.rbo_status + "'," +
                    " remarks='" + values.remarks.Replace("'", "") + "'" +
                    " where couriercompany_gid='" + values.couriercompany_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("MCIG");

                msSQL = " insert into ocs_mst_tcouriercompanyinactivelog (" +
                      " couriercompanyinactivelog_gid, " +
                      " couriercompany_gid," +
                      " couriercompany_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.couriercompany_gid + "'," +
                      " '" + values.couriercompany_name + "'," +
                      " '" + values.rbo_status + "'," +
                      " '" + values.remarks.Replace("'", "") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.rbo_status == 'N')
                {
                    values.status = true;
                    values.message = "Courier Company Name Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Courier Company Name Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

       

        public void DaDeleteCourierCompany(string couriercompany_gid, string employee_gid, result values)
        {
            msSQL = " select a.couriercompany_gid from ocs_trn_tcouriermgnt a " +
                   " where couriercompany_gid='" + couriercompany_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = true;
            }
            else
            {
                values.message = "Courier Company Name is Tagged in Transaction page. So, You cannot delete it.";
                values.status = false;
                return;
            }
            objODBCDatareader.Close();

            msSQL = " select couriercompany_name from ocs_mst_tcouriercompany where couriercompany_gid='" + couriercompany_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tcouriercompany where couriercompany_gid='" + couriercompany_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Courier Company Name Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Courier'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }
        }

        public void DaCourierCompanyInactiveLogview(string couriercompany_gid, MdlMstApplication360 values)
        {
            try
            {
                msSQL = " SELECT couriercompany_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tcouriercompanyinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where couriercompany_gid ='" + couriercompany_gid + "' order by a.couriercompanyinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            couriercompany_gid = (dr_datarow["couriercompany_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        //CSA Category Ending


        // Disbursement Document --- STARTING

        public void DaGetDisbursementDocument(Disbursement_Document objapplication360)
        {
            try
            {
                msSQL = " SELECT a.disbursementdocument_gid,a.disbursementdocument_name,a.disbursementdocument_id,a.lms_code, a.bureau_code, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as status" +
                        " FROM ocs_mst_tdisbursementdocument a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.disbursementdocument_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdisbursementdocument_list = new List<DisbursementDocument_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getdisbursementdocument_list.Add(new DisbursementDocument_List
                        {
                            disbursementdocument_gid = (dr_datarow["disbursementdocument_gid"].ToString()),
                            disbursementdocument_name = (dr_datarow["disbursementdocument_name"].ToString()),
                            disbursementdocument_id = (dr_datarow["disbursementdocument_id"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            bureau_code = (dr_datarow["bureau_code"].ToString()),
                            //remarks = (dr_datarow["remarks"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            status = (dr_datarow["status"].ToString()),
                        });
                    }
                    objapplication360.DisbursementDocument_List = getdisbursementdocument_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaCreateDisbursementDocument(DisbursementDocumentResult values, string employee_gid)
        {
            msGetGid = objcmnfunctions.GetMasterGID("DDCL");
            msGetGiddisbursementdocumentid = objcmnfunctions.GetMasterGID("DDID");
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");

            }
            //if (values.remarks == null || values.remarks == "")
            //{
            //    lsremarks = "";
            //}
            //else
            //{
            //    lsremarks = values.remarks.Replace("'", "\\'");
            //}

            msSQL = " insert into ocs_mst_tdisbursementdocument(" +
                       " disbursementdocument_gid," +
                        " disbursementdocument_name," +
                        " disbursementdocument_id," +
                        " lms_code," +
                        " bureau_code," +
                        //" remarks," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                       "'" + msGetGid + "'," +
                        "'" + values.disbursementdocument_name.Replace("'", "\\'") + "'," +
                        "'" + msGetGiddisbursementdocumentid + "'," +
                        "'" + lslms_code + "'," +
                        "'" + lsbureau_code + "'," +
                        //"'" + values.remarks.Replace("'", "\\'") + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Disbursement Document Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Adding";
            }
        }


        public void DaEditDisbursementDocument(string disbursementdocument_gid, DisbursementDocumentResult values)
        {
            try
            {
                msSQL = " SELECT disbursementdocument_gid,disbursementdocument_name, disbursementdocument_id, lms_code, bureau_code, status FROM ocs_mst_tdisbursementdocument " +
                        " where disbursementdocument_gid='" + disbursementdocument_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.disbursementdocument_gid = objODBCDatareader["disbursementdocument_gid"].ToString();
                    values.disbursementdocument_name = objODBCDatareader["disbursementdocument_name"].ToString();
                    values.disbursementdocument_id = objODBCDatareader["disbursementdocument_id"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.bureau_code = objODBCDatareader["bureau_code"].ToString();
                    //values.remarks = objODBCDatareader["remarks"].ToString();
                    values.Status = objODBCDatareader["status"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateDisbursementDocument(string employee_gid, DisbursementDocumentResult values)
        {
            if (values.lms_code == null || values.lms_code == "")
            {
                lslms_code = "";
            }
            else
            {
                lslms_code = values.lms_code.Replace("'", "\\'");
            }
            if (values.bureau_code == null || values.bureau_code == "")
            {
                lsbureau_code = "";
            }
            else
            {
                lsbureau_code = values.bureau_code.Replace("'", "\\'");
            }
            //if (values.remarks == null || values.remarks == "")
            //{
            //    lsremarks = "";
            //}
            //else
            //{
            //    lsremarks = values.remarks.Replace("'", "\\'");
            //}

            msSQL = " update ocs_mst_tdisbursementdocument set " +
                 " disbursementdocument_name='" + values.disbursementdocument_name.Replace("'", "\\'") + "'," +
                 " lms_code='" + lslms_code + "'," +
                 " bureau_code='" + lsbureau_code + "'," +
                 //" remarks='" + lsremarks + "'," +
                 " updated_by='" + employee_gid + "'," +
                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                 " where disbursementdocument_gid='" + values.disbursementdocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("DDUL");

                msSQL = " insert into ocs_mst_tdisbursementdocumentupdatelog (" +
                       " disbursementdocumentupdatelog_gid, " +
                       " disbursementdocument_gid, " +
                       " disbursementdocument_name," +
                       " lms_code," +
                       " bureau_code," +
                       //" remarks," +
                       " updated_by," +
                       " updated_date) " +
                       " values (" +
                       " '" + msGetGid + "'," +
                       " '" + values.disbursementdocument_gid + "'," +
                       " '" + values.disbursementdocument_name.Replace("'", "\\'") + "'," +
                       " '" + lslms_code + "'," +
                       " '" + lsbureau_code + "'," +
                       //" '" + values.remarks + "'," +
                       " '" + employee_gid + "'," +
                       " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Disbursement Document Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaInactiveDisbursementDocument(DisbursementDocumentResult values, string employee_gid)
        {
            msSQL = " update ocs_mst_tdisbursementdocument set status='" + values.Status + "'," +
                    " remarks='" + values.remarks.Replace("'", "\\'") + "'" +
                    " where disbursementdocument_gid='" + values.disbursementdocument_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("DDIA");

                msSQL = " insert into ocs_mst_tdisbursementdocumentinactivelog (" +
                      " disbursementdocumentinactivelog_gid, " +
                      " disbursementdocument_gid," +
                      " disbursementdocument_name," +
                      " status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.disbursementdocument_gid + "'," +
                      " '" + values.disbursementdocument_name.Replace("'", "\\'") + "'," +
                      " '" + values.Status + "'," +
                      " '" + values.remarks.Replace("'", "\\'") + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.Status == "N")
                {
                    values.status = true;
                    values.message = "Disbursement Document Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Disbursement Document Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred";
            }
        }

        public void DaDeleteDisbursementDocument(string disbursementdocument_gid, string employee_gid, result values)
        {

            msSQL = " select disbursementdocument_name from ocs_mst_tdisbursementdocument where disbursementdocument_gid='" + disbursementdocument_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tdisbursementdocument where disbursementdocument_gid='" + disbursementdocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Disbursement Document Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Disbursement Document'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }

        }

        public void DaDisbursementDocumentInactiveLogview(string disbursementdocument_gid, Disbursement_Document values)
        {
            try
            {
                msSQL = " SELECT disbursementdocument_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.status='N' then 'Inactive' else 'Active' end as Status, a.remarks" +
                        " FROM ocs_mst_tdisbursementdocumentinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where disbursementdocument_gid ='" + disbursementdocument_gid + "' order by a.disbursementdocumentinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<DisbursementDocument_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new DisbursementDocument_List
                        {
                            disbursementdocument_gid = (dr_datarow["disbursementdocument_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            status = (dr_datarow["Status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.DisbursementDocument_List = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        // Disbursement Document --- ENDING

        // Deviation Approval Group ---- STARTING

        public void DaPostDeviationApprovalGroupAdd(MdlDeviationApprovalGroup values, string employee_gid)
        {
            msSQL = "select deviationapprovalgroup_name from ocs_mst_tdeviationapprovalgroup where deviationapprovalgroup_name = '" + values.deviationapprovalgroup_name.Replace("'", "\\'") + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.status = false;
                values.message = "Deviation Approval Group Name Already Exist";
            }
            else
            {
                if (values.deviationapprovalgroup_lms == null || values.deviationapprovalgroup_lms == "")
                {
                    lsdeviationapprovalgroup_lms = "";
                }
                else
                {
                    lsdeviationapprovalgroup_lms = values.deviationapprovalgroup_lms.Replace("'", "\\'");
                }
                if (values.deviationapprovalgroup_bureau == null || values.deviationapprovalgroup_bureau == "")
                {
                    lsdeviationapprovalgroup_bureau = "";
                }
                else
                {
                    lsdeviationapprovalgroup_bureau = values.deviationapprovalgroup_bureau.Replace("'", "\\'");
                }

                msGetGid = objcmnfunctions.GetMasterGID("DAGC");
                lsgroupid = objcmnfunctions.GetMasterGID("DAID");
                msSQL = " insert into ocs_mst_tdeviationapprovalgroup(" +
                        " deviationapprovalgroup_gid ," +
                        " deviationapprovalgroup_id," +
                        //" products_gid," +
                        //" products_name," +
                        " deviationapprovalgroup_name," +
                        " subgroup_name," +
                        " deviationapprovalgroup_lms," +
                        " deviationapprovalgroup_bureau," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + lsgroupid + "'," +
                        //"'" + values.products_gid + "'," +
                        //"'" + values.products_name.Replace("'", "") + "'," +
                        "'" + values.deviationapprovalgroup_name.Replace("'", "\\'") + "'," +
                         "'" + values.subgroup_name.Replace("'", "\\'") + "'," +
                        "'" + lsdeviationapprovalgroup_lms + "'," +
                        "'" + lsdeviationapprovalgroup_bureau + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                for (var i = 0; i < values.DeviationApprovalGroupMember.Count; i++)
                {
                    string msGetdeviationapprovalgroupmember_gid = objcmnfunctions.GetMasterGID("DAME");

                    msSQL = "Insert into ocs_mst_tdeviationapprovalgroup_member ( " +
                           " deviationapprovalgroupmember_gid, " +
                           " deviationapprovalgroup_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetdeviationapprovalgroupmember_gid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + values.DeviationApprovalGroupMember[i].employee_gid + "'," +
                           "'" + values.DeviationApprovalGroupMember[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

                for (var i = 0; i < values.DeviationApprovalGroupManager.Count; i++)
                {
                    string msGetdeviationapprovalgroupmanager_gid = objcmnfunctions.GetMasterGID("DAMA");

                    msSQL = "Insert into ocs_mst_tdeviationapprovalgroup_manager( " +
                           " deviationapprovalgroupmanager_gid, " +
                           " deviationapprovalgroup_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetdeviationapprovalgroupmanager_gid + "'," +
                           "'" + msGetGid + "'," +
                           "'" + values.DeviationApprovalGroupManager[i].employee_gid + "'," +
                           "'" + values.DeviationApprovalGroupManager[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Deviation Approval Group Added successfully";
                }
                else
                {
                    values.message = "Error Occured while Adding";
                    values.status = false;
                }
            }
            objODBCDatareader.Close();
        }

        public void DaGetDeviationApprovalGroupSummary(MdlDeviationApprovalGroup objmaster)
        {
            try
            {
                msSQL = " SELECT a.deviationapprovalgroup_id,a.deviationapprovalgroup_gid , a.deviationapprovalgroup_name,a.subgroup_name,a.deviationapprovalgroup_lms, a.deviationapprovalgroup_bureau, date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " case when a.deviationapprovalgroup_status='N' then 'Inactive' else 'Active' end as deviationapprovalgroup_status" +
                        " FROM ocs_mst_tdeviationapprovalgroup a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid order by a.created_date desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdeviationapprovalgroup_list = new List<DeviationApprovalGroup>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getdeviationapprovalgroup_list.Add(new DeviationApprovalGroup
                        {
                            deviationapprovalgroup_id = (dr_datarow["deviationapprovalgroup_id"].ToString()),
                            deviationapprovalgroup_gid = (dr_datarow["deviationapprovalgroup_gid"].ToString()),
                            //products_gid = (dr_datarow["products_gid"].ToString()),
                            //products_name = (dr_datarow["products_name"].ToString()),
                            deviationapprovalgroup_name = (dr_datarow["deviationapprovalgroup_name"].ToString()),
                            subgroup_name = (dr_datarow["subgroup_name"].ToString()),
                            deviationapprovalgroup_lms = (dr_datarow["deviationapprovalgroup_lms"].ToString()),
                            deviationapprovalgroup_bureau = (dr_datarow["deviationapprovalgroup_bureau"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            deviationapprovalgroup_status = (dr_datarow["deviationapprovalgroup_status"].ToString())
                        });
                    }
                    objmaster.DeviationApprovalGroup = getdeviationapprovalgroup_list;
                }
                dt_datatable.Dispose();
                objmaster.status = true;
            }
            catch (Exception ex)
            {
                objmaster.status = false;
            }
        }

        //public void DaGetProductsNameSummary(MdlDeviationApprovalGroup objmaster)
        //{
        //    try
        //    {
        //        msSQL = " SELECT  loanproduct_gid, loanproduct_name FROM ocs_mst_tloanproduct a" +
        //                " where status = 'Y' order by loanproduct_gid desc";

        //        dt_datatable = objdbconn.GetDataTable(msSQL);
        //        var getdeviationapprovalgroup_list = new List<Products_Name>();
        //        if (dt_datatable.Rows.Count != 0)
        //        {
        //            foreach (DataRow dr_datarow in dt_datatable.Rows)
        //            {
        //                getdeviationapprovalgroup_list.Add(new Products_Name
        //                {
        //                    products_gid = (dr_datarow["loanproduct_gid"].ToString()),
        //                    products_name = (dr_datarow["loanproduct_name"].ToString())
        //                });
        //            }
        //            objmaster.Products_Name = getdeviationapprovalgroup_list;
        //        }
        //        dt_datatable.Dispose();
        //        objmaster.status = true;
        //    }
        //    catch (Exception ex)
        //    {
        //        objmaster.status = false;
        //    }
        //}


        public void DaGetDeviationApprovalGroupEdit(string deviationapprovalgroup_gid, MdlDeviationApprovalGroup objmaster)
        {
            msSQL = " select deviationapprovalgroup_gid,deviationapprovalgroup_name, subgroup_name, deviationapprovalgroup_id, deviationapprovalgroup_lms, deviationapprovalgroup_bureau, deviationapprovalgroup_status from ocs_mst_tdeviationapprovalgroup " +
                    " where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objmaster.deviationapprovalgroup_gid = objODBCDatareader["deviationapprovalgroup_gid"].ToString();
                objmaster.deviationapprovalgroup_name = objODBCDatareader["deviationapprovalgroup_name"].ToString();
                objmaster.subgroup_name = objODBCDatareader["subgroup_name"].ToString();
                //objmaster.products_gid = objODBCDatareader["products_gid"].ToString();
                //objmaster.products_name = objODBCDatareader["products_name"].ToString();
                objmaster.deviationapprovalgroup_id = objODBCDatareader["deviationapprovalgroup_id"].ToString();
                objmaster.deviationapprovalgroup_lms = objODBCDatareader["deviationapprovalgroup_lms"].ToString();
                objmaster.deviationapprovalgroup_bureau = objODBCDatareader["deviationapprovalgroup_bureau"].ToString();
                objmaster.deviationapprovalgroup_status = objODBCDatareader["deviationapprovalgroup_status"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select deviationapprovalgroupmember_gid,employee_gid,employee_name from ocs_mst_tdeviationapprovalgroup_member " +
                  " where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdeviationapprovalgroupmemberList = new List<DeviationApprovalGroupMember>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdeviationapprovalgroupmemberList.Add(new DeviationApprovalGroupMember
                    {
                        msGetdeviationapprovalgroupmember_gid = dt["deviationapprovalgroupmember_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                }
                objmaster.DeviationApprovalGroupMember = getdeviationapprovalgroupmemberList;
            }
            dt_datatable.Dispose();

            msSQL = " select deviationapprovalgroupmanager_gid,employee_gid,employee_name from ocs_mst_tdeviationapprovalgroup_manager " +
                " where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdeviationapprovalgroupmanagerList = new List<DeviationApprovalGroupManager>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdeviationapprovalgroupmanagerList.Add(new DeviationApprovalGroupManager
                    {
                        msGetdeviationapprovalgroupmanager_gid = dt["deviationapprovalgroupmanager_gid"].ToString(),
                        employee_gid = dt["employee_gid"].ToString(),
                        employee_name = dt["employee_name"].ToString(),
                    });
                }
                objmaster.DeviationApprovalGroupManager = getdeviationapprovalgroupmanagerList;
            }
            dt_datatable.Dispose();


            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name,b.employee_gid from adm_mst_tuser a " +
               " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
               " where user_status<>'N' order by a.user_firstname asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_deviationapprovalgroupmember = new List<DeviationApprovalGroupMemberem_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.DeviationApprovalGroupMemberem_list = dt_datatable.AsEnumerable().Select(row =>
                  new DeviationApprovalGroupMemberem_list
                  {
                      employee_gid = row["employee_gid"].ToString(),
                      employee_name = row["employee_name"].ToString()
                  }
                ).ToList();
            }
            dt_datatable.Dispose();

            msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ',a.user_lastname,' / ',a.user_code) as employee_name,b.employee_gid from adm_mst_tuser a " +
               " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
               " where user_status<>'N' order by a.user_firstname asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_deviationapprovalgroupmanager = new List<DeviationApprovalGroupManagerem_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objmaster.DeviationApprovalGroupManagerem_list = dt_datatable.AsEnumerable().Select(row =>
                  new DeviationApprovalGroupManagerem_list
                  {
                      employee_gid = row["employee_gid"].ToString(),
                      employee_name = row["employee_name"].ToString()
                  }
                ).ToList();
            }
            dt_datatable.Dispose();

        }

        public void DaGetDeviationApprovalGroupDetails(string deviationapprovalgroup_gid, DeviationApprovalGroupDetails values)
        {
            msSQL = " select group_concat(employee_name) as employee_name  from ocs_mst_tdeviationapprovalgroup_member " +
                  " where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.deviationapprovalgroup_member = objODBCDatareader["employee_name"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " select group_concat(employee_name) as employee_name from ocs_mst_tdeviationapprovalgroup_manager " +
                " where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.deviationapprovalgroup_manager = objODBCDatareader["employee_name"].ToString();
            }
            objODBCDatareader.Close();

        }

        public bool DaPostDeviationApprovalGroupUpdate(string employee_gid, MdlDeviationApprovalGroup values)
        {

            msSQL = "select deviationapprovalgroup_gid from ocs_mst_tdeviationapprovalgroup where deviationapprovalgroup_name = '" + values.deviationapprovalgroup_name.Replace("'", "\\'") + "'";
            string lsmappinggid = objdbconn.GetExecuteScalar(msSQL);
            if (lsmappinggid != "" && lsmappinggid != null)
            {
                if (lsmappinggid != values.deviationapprovalgroup_gid)
                {
                    values.status = false;
                    values.message = "Deviation Approval Group Name Already Exist";
                    return false;
                }
            }
            
            if (values.deviationapprovalgroup_lms == null || values.deviationapprovalgroup_lms == "")
            {
                lsdeviationapprovalgroup_lms = "";
            }
            else
            {
                lsdeviationapprovalgroup_lms = values.deviationapprovalgroup_lms.Replace("'", "\\'");
            }
            if (values.deviationapprovalgroup_bureau == null || values.deviationapprovalgroup_bureau == "")
            {
                lsdeviationapprovalgroup_bureau = "";
            }
            else
            {
                lsdeviationapprovalgroup_bureau = values.deviationapprovalgroup_bureau.Replace("'", "\\'");
            }

            msSQL = "select updated_by, updated_date, deviationapprovalgroup_name, subgroup_name from ocs_mst_tdeviationapprovalgroup where deviationapprovalgroup_gid ='" + values.deviationapprovalgroup_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
                string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();
                //string lsdeviationapprovalgroup_name = objODBCDatareader["deviationapprovalgroup_name"].ToString();
                //string lssubgroup_name = objODBCDatareader["subgroup_name"].ToString();

                if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
                {
                    msGetGid = objcmnfunctions.GetMasterGID("DAUL");
                    msSQL = " insert into ocs_mst_tdeviationapprovalgroupupdatelog(" +
                              " deviationapprovalgroupupdatelog_gid," +
                              " deviationapprovalgroup_gid," +
                              //" products_gid," +
                              //" products_name," +
                              " deviationapprovalgroup_name , " +
                              " subgroup_name , " +
                              " deviationapprovalgroup_lms," +
                              " deviationapprovalgroup_bureau , " +
                              " updated_by, " +
                              " updated_date) " +
                              " values(" +
                              "'" + msGetGid + "'," +
                              "'" + values.deviationapprovalgroup_gid + "'," +
                              //"'" + values.products_gid + "'," +
                              //"'" + values.products_name.Replace("'", "") + "'," +
                              "'" + values.deviationapprovalgroup_name.Replace("'","\\'") + "'," +
                              "'" + values.subgroup_name.Replace("'", "\\'") + "'," +
                              "'" + lsdeviationapprovalgroup_lms + "'," +
                              "'" + lsdeviationapprovalgroup_bureau + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }
            objODBCDatareader.Close();

            msSQL = "update ocs_mst_tdeviationapprovalgroup set deviationapprovalgroup_name='" + values.deviationapprovalgroup_name.Replace("'", "\\'") + "', " +
                    " subgroup_name = '" + values.subgroup_name.Replace("'", "\\'") + "'," +
                    //" products_gid='" + values.products_gid + "'," +
                    //" products_name='" + values.products_name.Replace("'", "") + "'," +
                    " deviationapprovalgroup_lms='" + lsdeviationapprovalgroup_lms + "'," +
                    " deviationapprovalgroup_bureau='" + lsdeviationapprovalgroup_bureau + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where deviationapprovalgroup_gid='" + values.deviationapprovalgroup_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " delete from ocs_mst_tdeviationapprovalgroup_member where deviationapprovalgroup_gid ='" + values.deviationapprovalgroup_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                for (var i = 0; i < values.DeviationApprovalGroupMember.Count; i++)
                {
                   string msGetdeviationapprovalgroupmember_gid = objcmnfunctions.GetMasterGID("DAME");

                    msSQL = "Insert into ocs_mst_tdeviationapprovalgroup_member( " +
                           " deviationapprovalgroupmember_gid, " +
                           " deviationapprovalgroup_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " updated_by," +
                           " updated_date)" +
                           " values(" +
                           "'" + msGetdeviationapprovalgroupmember_gid + "'," +
                           "'" + values.deviationapprovalgroup_gid + "'," +
                           "'" + values.DeviationApprovalGroupMember[i].employee_gid + "'," +
                           "'" + values.DeviationApprovalGroupMember[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            msSQL = " delete from ocs_mst_tdeviationapprovalgroup_manager where deviationapprovalgroup_gid ='" + values.deviationapprovalgroup_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                for (var i = 0; i < values.DeviationApprovalGroupManager.Count; i++)
                {
                   string msGetdeviationapprovalgroupmanager_gid = objcmnfunctions.GetMasterGID("DAMA");

                    msSQL = "Insert into ocs_mst_tdeviationapprovalgroup_manager( " +
                           " deviationapprovalgroupmanager_gid, " +
                           " deviationapprovalgroup_gid," +
                           " employee_gid," +
                           " employee_name," +
                           " updated_by," +
                           " updated_date)" +
                           " values(" +
                           "'" + msGetdeviationapprovalgroupmanager_gid + "'," +
                           "'" + values.deviationapprovalgroup_gid + "'," +
                           "'" + values.DeviationApprovalGroupManager[i].employee_gid + "'," +
                           "'" + values.DeviationApprovalGroupManager[i].employee_name + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }
            }

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Deviation Approval Group updated successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating Deviation Approval Group";
                return false;
            }
        }

        public void DaPostDeviationApprovalGroupInactive(DeviationApprovalGroup values, string employee_gid)
        {
            if (values.remarks == null || values.remarks == "")
            {
                lsremarks = "";
            }
            else
            {
                lsremarks = values.remarks.Replace("'", "\\'");
            }
            msSQL = " update ocs_mst_tdeviationapprovalgroup set deviationapprovalgroup_status ='" + values.deviationapprovalgroup_status + "'," +
                    " remarks='" + lsremarks + "'" +
                    " where deviationapprovalgroup_gid='" + values.deviationapprovalgroup_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("DAIA");

                msSQL = " insert into ocs_mst_tdeviationapprovalgroupinactivelog (" +
                      " deviationapprovalgroupinactivelog_gid, " +
                      " deviationapprovalgroup_gid," +
                      " deviationapprovalgroup_name ," +
                      " subgroup_name ," +
                      " deviationapprovalgroup_status," +
                      " remarks," +
                      " updated_by," +
                      " updated_date) " +
                      " values (" +
                      " '" + msGetGid + "'," +
                      " '" + values.deviationapprovalgroup_gid + "'," +
                      " '" + values.deviationapprovalgroup_name.Replace("'", "\\'") + "'," +
                      " '" + values.subgroup_name.Replace("'", "\\'") + "'," +
                      " '" + values.deviationapprovalgroup_status + "'," +
                      " '" + lsremarks + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (values.deviationapprovalgroup_status == "N")
                {
                    values.status = true;
                    values.message = "Deviation Approval Group Inactivated Successfully";
                }
                else
                {
                    values.status = true;
                    values.message = "Deviation Approval Group Activated Successfully";
                }
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Changing Status";
            }
        }

        public void DaGetDeviationApprovalGroupInactiveLogview(string deviationapprovalgroup_gid, MdlDeviationApprovalGroup values)
        {
            try
            {
                msSQL = " SELECT deviationapprovalgroup_gid,date_format(a.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as updated_by," +
                        " case when a.deviationapprovalgroup_status='N' then 'Inactive' else 'Active' end as deviationapprovalgroup_status, a.remarks" +
                        " FROM ocs_mst_tdeviationapprovalgroupinactivelog a" +
                        " left join hrm_mst_temployee b on a.updated_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where deviationapprovalgroup_gid ='" + deviationapprovalgroup_gid + "' order by a.deviationapprovalgroupinactivelog_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdeviationapprovalgrouplog = new List<DeviationApprovalGrouplog>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getdeviationapprovalgrouplog.Add(new DeviationApprovalGrouplog
                        {
                            deviationapprovalgroup_gid = (dr_datarow["deviationapprovalgroup_gid"].ToString()),
                            updated_by = (dr_datarow["updated_by"].ToString()),
                            updated_date = (dr_datarow["updated_date"].ToString()),
                            deviationapprovalgroup_status = (dr_datarow["deviationapprovalgroup_status"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                        });
                    }
                    values.DeviationApprovalGrouplog = getdeviationapprovalgrouplog;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaDeleteDeviationApprovalGroup(string deviationapprovalgroup_gid, string employee_gid, result values)
        {

            msSQL = " select deviationapprovalgroup_name from ocs_mst_tdeviationapprovalgroup where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " delete from ocs_mst_tdeviationapprovalgroup where deviationapprovalgroup_gid='" + deviationapprovalgroup_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Deviation Approval Group Deleted Successfully..!";
                msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                         "master_gid, " +
                         "master_name, " +
                         "master_value, " +
                         "deleted_by, " +
                         "deleted_date) " +
                         " values(" +
                         "'" + msGetGid + "'," +
                         "'Deviation Approval Group'," +
                         "'" + lsmaster_value + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            else
            {
                values.status = false;
                values.message = "Error Occured..!";
            }

        }


        // Deviation Approval Group ---- ENDING


        public void DaGetUserTypeCADList(MdlUserType objMdlUserType)
        {
            msSQL = " SELECT usertype_gid,user_type FROM ocs_mst_tusertype where status_log='Y' and user_type<> 'Applicant' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getusertype = new List<usertype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlUserType.usertype_list = dt_datatable.AsEnumerable().Select(row => new usertype_list
                {
                    usertype_gid = row["usertype_gid"].ToString(),
                    user_type = row["user_type"].ToString(),
                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public void DaGetAssociateMasterASC(MdlMstApplicationSADropdown objapplication360)
        {
            try
            {
                
                msSQL = " (select  concat(a.sa_associatename, ' / ' ,a.samfin_code) as 'name'  , a.sacontactinstitution_gid as 'associatemaster_gid' " +
                        " from ocs_mst_tsainstitution  a left join ocs_mst_tsaloginsbauser b on a.sa_autogeneratedid = b.sa_autogeneratedid " +
                        " where a.approvalinitated_flag = 'Y' and a.approval_flag = 'Y' and b.active = 'Y' and a.approvalstatus not in ('Rejected') " +
                        " and a.code_created_flag='Y')  union " +
                        " (select CONCAT(c.sa_firstname,' ',c.sa_middlename,' ',c.sa_lastname,' / ',c.samfin_code) , c.sacontact_gid from ocs_mst_tsacontact c " +
                        " left join ocs_mst_tsaloginsbauser d on c.sa_autogeneratedid = d.sa_autogeneratedid " +
                        " where c.approvalinitated_flag = 'Y' and c.approval_flag = 'Y' and d.active = 'Y' and c.approvalstatus not in ('Rejected') and c.code_created_flag='Y') ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<saassociatemaster_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new saassociatemaster_list
                        {
                            associatemaster_gid = (dr_datarow["associatemaster_gid"].ToString()),
                            name = (dr_datarow["name"].ToString()),

                        });
                    }
                    objapplication360.saassociatemaster_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        public void DaGetInstitutionDocTypeList(MdlInstitutionDocType objMdlInstitutionDocType, string program_gid)
        {
            msSQL = " select a.documenttypes_gid,a.documenttype_name from ocs_mst_tcompanydocument a" +
                    " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                    " where status='Y' and b.program_gid='" + program_gid + "' group by documenttypes_gid";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitutiondoctype_list = new List<institutiondoctype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlInstitutionDocType.institutiondoctype_list = dt_datatable.AsEnumerable().Select(row => new institutiondoctype_list
                {
                    documenttypes_gid = row["documenttypes_gid"].ToString(),
                    documenttype_name = row["documenttype_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }
        public void DaGetIndividualDocTypeList(MdlIndividualDocType objMdlIndividualDocType, string program_gid)
        {
            msSQL = " select a.documenttypes_gid,a.documenttype_name from ocs_mst_tindividualdocument a" +
                    " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                    " where status='Y' and b.program_gid='" + program_gid + "' group by documenttypes_gid";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getindividualdoctype_list = new List<individualdoctype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objMdlIndividualDocType.individualdoctype_list = dt_datatable.AsEnumerable().Select(row => new individualdoctype_list
                {
                    documenttypes_gid = row["documenttypes_gid"].ToString(),
                    documenttype_name = row["documenttype_name"].ToString()
                }).ToList();
            }
            dt_datatable.Dispose();
        }
        //Encore Product - start



        public void DaGetEncoreProduct(MdlEncoreProductMaster objMdlencoreproduct)
        {
            try
            {
                msSQL = " SELECT encoreproduct_gid,api_code,Products,SubProduct,PrincipalTennure,InterestTennure,case when a.Intdeductstatus='Y' then 'Yes' else 'No' end as Intdeductstatus,LoanTennure,case when a.Moratoriamstatus='Y' then 'Yes' else 'No' end as Moratoriamstatus,MoratoriumType,lms_code, status_log, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by " +
                    " from ocs_mst_tencoreproduct a" +
                    //" left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                    " left join adm_mst_tuser c on c.user_gid=a.created_by order by encoreproduct_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getencoreproduct_list = new List<EncoreProduct_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getencoreproduct_list.Add(new EncoreProduct_List
                        {
                            encoreproduct_gid = (dr_datarow["encoreproduct_gid"].ToString()),
                            api_code = (dr_datarow["api_code"].ToString()),
                            Products = (dr_datarow["Products"].ToString()),
                            SubProduct = (dr_datarow["SubProduct"].ToString()),
                            PrincipalTennure = (dr_datarow["PrincipalTennure"].ToString()),
                            InterestTennure = (dr_datarow["InterestTennure"].ToString()),
                            Intdeductstatus = (dr_datarow["Intdeductstatus"].ToString()),
                            LoanTennure = (dr_datarow["LoanTennure"].ToString()),
                            Moratoriamstatus = (dr_datarow["Moratoriamstatus"].ToString()),
                            MoratoriumType = (dr_datarow["MoratoriumType"].ToString()),
                            lms_code = (dr_datarow["lms_code"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objMdlencoreproduct.EncoreProduct_List = getencoreproduct_list;
                }
                dt_datatable.Dispose();
                objMdlencoreproduct.status = true;
            }
            catch
            {
                objMdlencoreproduct.status = false;
            }
        }

        public void DaCreateEncoreProduct(EncoreProduct values, string employee_gid, string user_gid)
        {

                string lsMoratoriumType, lsMoratoriumType_gid = "";
              
                if (values.MoratoriumType == null || values.MoratoriumType == "")
                {
                    lsMoratoriumType = "";
                }
                else
                {
                lsMoratoriumType_gid = values.MoratoriumType_gid.Replace("'", "\\'");
                lsMoratoriumType = values.MoratoriumType.Replace("'", "\\'");
                }

                string Products, SubProduct, PrincipalTennure, InterestTennure, LoanTennure, Moratoriamstatus, Intdeductstatus, MoratoriumType, lms_code;
                Products = SubProduct = PrincipalTennure = InterestTennure = LoanTennure = Moratoriamstatus = Intdeductstatus = MoratoriumType = lms_code = "";

                msSQL = " SELECT encoreproduct_gid, Products,SubProduct,PrincipalTennure, InterestTennure, LoanTennure, Moratoriamstatus, Intdeductstatus, MoratoriumType,lms_code FROM ocs_mst_tencoreproduct ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<EncoreProductComparison_List>();

                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {

                        //getSegment.Add(new EncoreProductComparison_List
                        //{

                        Products = (dr_datarow["Products"].ToString());
                        SubProduct = (dr_datarow["SubProduct"].ToString());
                        PrincipalTennure = (dr_datarow["PrincipalTennure"].ToString());
                        InterestTennure = (dr_datarow["InterestTennure"].ToString());
                        LoanTennure = (dr_datarow["LoanTennure"].ToString());
                        Moratoriamstatus = (dr_datarow["Moratoriamstatus"].ToString());
                        Intdeductstatus = (dr_datarow["Intdeductstatus"].ToString());
                        MoratoriumType = (dr_datarow["MoratoriumType"].ToString());
                        lms_code = (dr_datarow["lms_code"].ToString());
                
                        if (Products == values.Products && SubProduct == values.SubProduct && PrincipalTennure == values.PrincipalTennure && InterestTennure == values.InterestTennure
                            && LoanTennure == values.LoanTennure && Moratoriamstatus == values.Moratoriamstatus && Intdeductstatus == values.Intdeductstatus && MoratoriumType == lsMoratoriumType)
                        {
                            values.message = "This Encore Product Already Exists";
                            values.status = false;
                            return;
                        }
                    }
 
                    dt_datatable.Dispose();
                }
            msGetAPICode = objcmnfunctions.GetApiMasterGID("ENCP");
            msGetGid = objcmnfunctions.GetMasterGID("ENPC");
            msSQL = " insert into ocs_mst_tencoreproduct(" +
                    " encoreproduct_gid," +
                    " api_code," +
                    " Products_gid," +
                    " Products," +
                    " SubProduct_gid," +
                    " SubProduct," +
                    " PrincipalTennure_gid," +
                    " PrincipalTennure," +
                    " InterestTennure_gid," +
                    " InterestTennure," +
                    " Intdeductstatus," +
                    " LoanTennure_gid," +
                    " LoanTennure," +
                    " Moratoriamstatus," +
                    " MoratoriumType_gid," +
                    " MoratoriumType," +
                    " lms_code," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + msGetAPICode + "'," +
                    "'" + values.Products_gid.Replace("'", "\\'") + "'," +
                    "'" + values.Products.Replace("'", "\\'") + "'," +
                    "'" + values.SubProduct_gid.Replace("'", "\\'") + "'," +
                    "'" + values.SubProduct.Replace("'", "\\'") + "'," +
                    "'" + values.PrincipalTennure_gid.Replace("'", "\\'") + "'," +
                    "'" + values.PrincipalTennure.Replace("'", "\\'") + "'," +
                    "'" + values.InterestTennure_gid.Replace("'", "\\'") + "'," +
                    "'" + values.InterestTennure.Replace("'", "\\'") + "'," +
                    "'" + values.Intdeductstatus.Replace("'", "\\'") + "'," +
                    "'" + values.LoanTennure_gid.Replace("'", "\\'") + "'," +
                    "'" + values.LoanTennure.Replace("'", "\\'") + "'," +
                    "'" + values.Moratoriamstatus.Replace("'", "\\'") + "'," +
                    "'" + lsMoratoriumType_gid + "'," +
                    "'" + lsMoratoriumType + "'," +
                    "'" + values.lms_code.Replace("'", "\\'") + "'," +
                    "'" + user_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Encore Product Added Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while adding";
                values.status = false;
            }
        }

        public void DaEditEncoreProduct(string encoreproduct_gid, EncoreProduct values)
        {
            try
            {
                msSQL = " SELECT encoreproduct_gid,Products,SubProduct,PrincipalTennure,InterestTennure,Intdeductstatus,LoanTennure,Moratoriamstatus,MoratoriumType,lms_code, status_log " + 
                        " from ocs_mst_tencoreproduct where encoreproduct_gid='" + encoreproduct_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows)
                {
                    values.Products = objODBCDatareader["Products"].ToString();
                    values.SubProduct = objODBCDatareader["SubProduct"].ToString();
                    values.PrincipalTennure = objODBCDatareader["PrincipalTennure"].ToString();
                    values.InterestTennure = objODBCDatareader["InterestTennure"].ToString();
                    values.Intdeductstatus = objODBCDatareader["Intdeductstatus"].ToString();
                    values.LoanTennure = objODBCDatareader["LoanTennure"].ToString();
                    values.Moratoriamstatus = objODBCDatareader["Moratoriamstatus"].ToString();
                    values.MoratoriumType = objODBCDatareader["MoratoriumType"].ToString();
                    values.lms_code = objODBCDatareader["lms_code"].ToString();
                    values.status_log = objODBCDatareader["status_log"].ToString();
                    values.encoreproduct_gid = objODBCDatareader["encoreproduct_gid"].ToString();
                }
                objODBCDatareader.Close();
               
                msSQL = " SELECT a.Products,a.SubProduct,Previous_lms_code,Current_lms_code, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_mst_tencoreproductlog a" +
                    " left join adm_mst_tuser c on c.user_gid=a.created_by " +
                    " where a.encoreproduct_gid='" + encoreproduct_gid + "'" +
                    " order by a.encoreproductlog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<EncoreProductLMSlog_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new EncoreProductLMSlog_List
                        {
                            Products = (dr_datarow["Products"].ToString()),
                            SubProduct = (dr_datarow["SubProduct"].ToString()),
                            Previous_lms_code = (dr_datarow["Previous_lms_code"].ToString()),
                            Current_lms_code = (dr_datarow["Current_lms_code"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    values.EncoreProductLMSlog_List = getSegment;
                }
                dt_datatable.Dispose();
                values.status = true;
                
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaUpdateEncoreProduct(string employee_gid, string user_gid, EncoreProduct values)
        {
            //msSQL = "select updated_by, updated_date,loan_type from ocs_mst_tencoreproduct where encoreproduct_gid = '" + values.encoreproduct_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //if (objODBCDatareader.HasRows == true)
            //{
            //    string lsUpdatedBy = objODBCDatareader["updated_by"].ToString();
            //    string lsUpdatedDate = objODBCDatareader["updated_date"].ToString();

            //    if (!(String.IsNullOrEmpty(lsUpdatedBy)) && !(String.IsNullOrEmpty(lsUpdatedDate)))
            //    {
            //        msGetGid = objcmnfunctions.GetMasterGID("LNTY");
            //        msSQL = " insert into ocs_trn_tencoreproductlog(" +
            //                  " encoreproductlog_gid," +
            //                  " encoreproduct_gid," +
            //                  " loan_type, " +
            //                  " created_by, " +
            //                  " created_date) " +
            //                  " values(" +
            //                  "'" + msGetGid + "'," +
            //                  "'" + values.encoreproduct_gid + "'," +
            //                  "'" + objODBCDatareader["loan_type"].ToString() + "'," +
            //                   "'" + employee_gid + "'," +
            //                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            //    }
            //}
            //objODBCDatareader.Close();


            msSQL = " SELECT encoreproduct_gid,lms_code from ocs_mst_tencoreproduct where encoreproduct_gid='" + values.encoreproduct_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            string lslms_code = "";
            if (objODBCDatareader.HasRows == true)
            {
                lslms_code = objODBCDatareader["lms_code"].ToString();
            }

            msGetGid = objcmnfunctions.GetMasterGID("ENPU");
            msSQL = " insert into ocs_mst_tencoreproductlog(" +
                      " encoreproductlog_gid," +
                      " encoreproduct_gid," +
                      " Products, " +
                      " SubProduct, " +
                      //" PrincipalTennure, " +
                      //" InterestTennure, " +
                      //" Intdeductstatus, " +
                      //" LoanTennure, " +
                      //" Moratoriamstatus, " +
                      //" MoratoriumType, " +
                      " Previous_lms_code, " +
                      " Current_lms_code, " +
                      " created_by, " +
                      " created_date) " +
                      " values(" +
                      "'" + msGetGid + "'," +
                      "'" + values.encoreproduct_gid + "'," +
                      "'" + values.Products.Replace("'","\\'") + "'," +
                      "'" + values.SubProduct.Replace("'","\\'") + "'," +
                      //"'" + values.PrincipalTennure.Replace("'","\\'") + "'," +
                      //"'" + values.InterestTennure.Replace("'","\\'") + "'," +
                      //"'" + values.Intdeductstatus.Replace("'","\\'") + "'," +
                      //"'" + values.LoanTennure.Replace("'","\\'") + "'," +
                      //"'" + values.Moratoriamstatus.Replace("'","\\'") + "'," +
                      //"'" + values.MoratoriumType.Replace("'","\\'") + "'," +
                      "'" + lslms_code.Replace("'","\\'") + "'," +
                      "'" + values.lms_code.Replace("'","\\'") + "'," +
                       "'" + user_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " update ocs_mst_tencoreproduct set " +
                    " lms_code='" + values.lms_code.Replace("'", "\\'") + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where encoreproduct_gid='" + values.encoreproduct_gid + "' ";
            int mnResult2 = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0 && mnResult2 != 0)
            {
                values.status = true;
                values.message = "Encore Product Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating";
            }
        }

        public void DaDeleteEncoreProduct(string encoreproduct_gid, string employee_gid, string user_gid, EncoreProduct values)
        {
            try
            {

                msSQL = " select application2loan_gid from ocs_mst_tapplication2loan where application2loan_gid='" + encoreproduct_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    objODBCDatareader.Close();
                    values.message = "Can't able to Delete Encore Product, Because it is tagged to Application Creation";
                    values.status = false;
                    return;
                }
                else
                {
                    objODBCDatareader.Close();
                    msSQL = " select Products from ocs_mst_tencoreproduct where encoreproduct_gid='" + encoreproduct_gid + "'";
                    lsmaster_value = objdbconn.GetExecuteScalar(msSQL);
                    msSQL = " delete from ocs_mst_tencoreproduct where encoreproduct_gid='" + encoreproduct_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Encore Product Deleted Successfully..!";
                        msGetGid = objcmnfunctions.GetMasterGID("MSTD");
                        msSQL = " insert into ocs_mst_tmasterdeletelog(" +
                                 "master_gid, " +
                                 "master_name, " +
                                 "master_value, " +
                                 "deleted_by, " +
                                 "deleted_date) " +
                                 " values(" +
                                 "'" + msGetGid + "'," +
                                 "'Encore Product'," +
                                 "'" + lsmaster_value + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    else
                    {
                        values.status = false;
                    }
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = ex.ToString();

            }
        }
        public void DaEncoreProductStatusUpdate(string user_gid, EncoreProduct values)
        {

            msSQL = " update ocs_mst_tencoreproduct set status_log='" + values.status_log + "'," +
                    " remarks='" + values.remarks.Replace("'", "\\'") + "'," +
                    " updated_by='" + user_gid + "'," +
                    " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                    " where encoreproduct_gid='" + values.encoreproduct_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msGetGid = objcmnfunctions.GetMasterGID("ENPI");
                msSQL = " insert into ocs_mst_tencoreproductinactivelog(" +
                          " encoreproductinactivelog_gid," +
                          " encoreproduct_gid," +
                          " Products," +
                          " SubProduct," +
                          " status_log, " +
                          " remarks, " +
                          " created_by, " +
                          " created_date) " +
                          " values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.encoreproduct_gid + "'," +
                          "'" + values.Products + "'," +
                          "'" + values.SubProduct + "'," +
                          "'" + values.status_log + "'," +
                          "'" + values.remarks.Replace("'", "\\'") + "'," +
                          "'" + user_gid + "'," +
                          "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                
            }
            
            if (mnResult != 0)
            {
                values.message = "Status Updated Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured while updating Status";
                values.status = false;
            }

        }
        public void DaGetEncoreProductInActiveLog(string encoreproduct_gid, MdlEncoreProductMaster objgetsegment)
        {
            try
            {
                msSQL = " SELECT a.Products,a.SubProduct,a.status_log,a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date,concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by" +
                    " FROM ocs_mst_tencoreproductinactivelog a" +
                    " left join adm_mst_tuser c on c.user_gid=a.created_by " +
                    " where a.encoreproduct_gid='" + encoreproduct_gid + "'" +
                    " order by a.encoreproductinactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<EncoreProduct_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new EncoreProduct_List
                        {
                            Products = (dr_datarow["Products"].ToString()),
                            SubProduct = (dr_datarow["SubProduct"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    objgetsegment.EncoreProduct_List = getSegment;
                }
                dt_datatable.Dispose();
                objgetsegment.status = true;

            }
            catch
            {
                objgetsegment.status = false;
            }
        }

        public void DaGetLoanProductActive(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT loanproduct_gid,loanproduct_name FROM ocs_mst_tloanproduct where status='Y' order by loanproduct_gid desc ";
                        
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                            loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                            
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetLoanSubProductActive(MdlMstApplication360 objapplication360, string loanproduct_gid)
        {
            try
            {
                msSQL = " SELECT loansubproduct_gid,loansubproduct_name FROM ocs_mst_tloansubproduct where status='Y' and loanproduct_gid='" + loanproduct_gid + "' order by loansubproduct_gid desc ";
                
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            loansubproduct_gid = (dr_datarow["loansubproduct_gid"].ToString()),
                            loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString()),
                            
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetPrincipalFrequencyActive(MdlMstApplication360 objapplication360)
        {
            try
            {

                msSQL = " SELECT principalfrequency_gid,principalfrequency_name FROM ocs_mst_tprincipalfrequency where status='Y' order by principalfrequency_gid desc ";
                
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            principalfrequency_gid = (dr_datarow["principalfrequency_gid"].ToString()),
                            principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                            
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }

        public void DaGetInterestFrequencyActive(MdlMstApplication360 objapplication360)
        {
            try
            {
                msSQL = " SELECT interestfrequency_gid,interestfrequency_name FROM ocs_mst_tinterestfrequency where status='Y' order by interestfrequency_gid desc ";
                
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<application_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new application_list
                        {
                            interestfrequency_gid = (dr_datarow["interestfrequency_gid"].ToString()),
                            interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                            
                        });
                    }
                    objapplication360.application_list = getapplication_list;
                }
                dt_datatable.Dispose();
                objapplication360.status = true;
            }
            catch
            {
                objapplication360.status = false;
            }
        }
        //Encore Product - end
        public void DaIndividualDocumentListDis(MdlMstApplication360 objapplication360)
        {
            msSQL = " SELECT a.individualdocument_gid,a.individualdocument_name FROM ocs_mst_tindividualdocument a" +                  
                    " where status='Y'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                objapplication360.application_list = dt_datatable.AsEnumerable().Select(row => new application_list
                {
                    individualdocument_gid = (row["individualdocument_gid"].ToString()),
                    individualdocument_name = (row["individualdocument_name"].ToString()),

                }).ToList();
            }
            dt_datatable.Dispose();
        }

        public bool DaPostSupplierBank(string employee_gid, MdlSupplier2BankAcc values)
        {

            //msSQL = "select primary_status from agr_mst_tinstitution2bankdtl where primary_status='Yes' and (institution_gid ='" + employee_gid + "' or institution_gid ='" + values.institution_gid + "')";
            //string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            //if (lsprimary_status == (values.primary_status))
            //{
            //    values.status = false;
            //    values.message = "Already Primary Bank Account Number Added";
            //    return false;
            //}
            string lssupplier_gid = "";

            if (!string.IsNullOrEmpty(values.supplier_gid))
            {
                 lssupplier_gid = values.supplier_gid;
            }

            else { lssupplier_gid = employee_gid; }

                msGetGid = objcmnfunctions.GetMasterGID("S2BK");
            msSQL = " insert into ocs_mst_tsupplier2bank(" +
                    " supplier2bank_gid," +
                    " supplier_gid," +
                    " bank_name," +
                    " branch_name," +
                    " bank_address," +
                    " micr_code," +
                    " ifsc_code," +
                    " bankaccount_name," +
                    " bankaccounttype_gid," +
                    " bankaccounttype_name," +
                    " bankaccount_number," +
                    " confirmbankaccountnumber," +
                    " joinaccount_status," +
                    " joinaccount_name," +
                    //" primary_status," +
                    " chequebook_status," +
                    " accountopen_date," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + lssupplier_gid + "'," +
                    "'" + values.bank_name + "'," +
                    "'" + values.branch_name.Replace("'", "") + "'," +
                    "'" + values.bank_address.Replace("'", "") + "'," +
                    "'" + values.micr_code + "'," +
                    "'" + values.ifsc_code + "'," +
                    "'" + values.bankaccount_name + "'," +
                    "'" + values.bankaccounttype_gid + "'," +
                    "'" + values.bankaccounttype_name + "'," +
                    "'" + values.bankaccount_number + "'," +
                    "'" + values.confirmbankaccountnumber + "'," +
                    "'" + values.joint_account + "'," +
                    "'" + values.jointaccountholder_name + "'," +
                     //"'" + values.primary_status + "'," +
                    "'" + values.chequebook_status + "',";
            if (values.accountopen_date == null || values.accountopen_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.accountopen_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,ifsc_code,bankaccount_number,  " +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                          " from ocs_mst_tsupplier2bank a " +
                             " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                          "where supplier_gid ='" + values.supplier_gid + "' or supplier_gid ='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditbankacc_list = new List<supplierbankacc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditbankacc_list.Add(new supplierbankacc_list
                        {
                            bank_name = dt["bank_name"].ToString(),
                            branch_name = dt["branch_name"].ToString(),
                            ifsc_code = dt["ifsc_code"].ToString(),
                            bankaccount_number = dt["bankaccount_number"].ToString(),
                            supplier2bank_gid = dt["supplier2bank_gid"].ToString(),
                            supplier_gid = dt["supplier_gid"].ToString(),
                            created_date = dt["created_date"].ToString(),
                            created_by = dt["created_by"].ToString(),
                            updated_date = dt["updated_date"].ToString(),
                            updated_by = dt["updated_by"].ToString(),
                        });
                        values.supplierbankacc_list = getcreditbankacc_list;
                    }
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "Bank Account Details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Bank Account Details";
                return false;
            }

        }

        public void DaDeleteSupplierBankAcc(string supplier2bank_gid, string supplier_gid, MdlSupplier2BankAcc values, string employee_gid)
        {
            msSQL = "delete from ocs_mst_tsupplier2bank where supplier2bank_gid='" + supplier2bank_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Bank Account Details Deleted successfully";

                msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,ifsc_code,bankaccount_number,  " +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                          " from ocs_mst_tsupplier2bank a " +
                             " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                          "where supplier_gid ='" + supplier_gid + "' or supplier_gid ='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditbankacc_list = new List<supplierbankacc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditbankacc_list.Add(new supplierbankacc_list
                        {
                            bank_name = dt["bank_name"].ToString(),
                            branch_name = dt["branch_name"].ToString(),
                            ifsc_code = dt["ifsc_code"].ToString(),
                            bankaccount_number = dt["bankaccount_number"].ToString(),
                            supplier2bank_gid = dt["supplier2bank_gid"].ToString(),
                            supplier_gid = dt["supplier_gid"].ToString(),
                            created_date = dt["created_date"].ToString(),
                            created_by = dt["created_by"].ToString(),
                            updated_date = dt["updated_date"].ToString(),
                            updated_by = dt["updated_by"].ToString(),
                        });
                        values.supplierbankacc_list = getcreditbankacc_list;
                    }
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred while deleting";
            }
        }


        public void DaEditGetSupplierBankAccDtl(string supplier2bank_gid, MdlSupplier2BankAcc values)
        {
            try
            {
                msSQL = "select supplier2bank_gid,supplier_gid,bank_name,branch_name,bank_address,micr_code,ifsc_code,bankaccount_name," +
                " bankaccounttype_gid,bankaccounttype_name,bankaccount_number,confirmbankaccountnumber,joinaccount_status,joinaccount_name," +
                " chequebook_status,accountopen_date from ocs_mst_tsupplier2bank where supplier2bank_gid='" + supplier2bank_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.supplier2bank_gid = objODBCDatareader["supplier2bank_gid"].ToString();
                    values.supplier_gid = objODBCDatareader["supplier_gid"].ToString();
                    values.bank_name = objODBCDatareader["bank_name"].ToString();
                    values.branch_name = objODBCDatareader["branch_name"].ToString();
                    values.bank_address = objODBCDatareader["bank_address"].ToString();
                    values.micr_code = objODBCDatareader["micr_code"].ToString();
                    values.ifsc_code = objODBCDatareader["ifsc_code"].ToString();
                    values.bankaccount_name = objODBCDatareader["bankaccount_name"].ToString();
                    values.chequebook_status = objODBCDatareader["chequebook_status"].ToString();
                    values.bankaccounttype_gid = objODBCDatareader["bankaccounttype_gid"].ToString();
                    values.bankaccounttype_name = objODBCDatareader["bankaccounttype_name"].ToString();
                    values.bankaccount_number = objODBCDatareader["bankaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.joint_account = objODBCDatareader["joinaccount_status"].ToString();
                    values.jointaccountholder_name = objODBCDatareader["joinaccount_name"].ToString();
                    values.chequebook_status = objODBCDatareader["chequebook_status"].ToString();
                   // values.primary_status = objODBCDatareader["primary_status"].ToString();
                    if (objODBCDatareader["accountopen_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.accountopen_date = Convert.ToDateTime(objODBCDatareader["accountopen_date"]).ToString("MM-dd-yyyy");
                    }

                }
                values.status = true;


                dt_datatable.Dispose();
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateSupplierBankAccDtl(string employee_gid, MdlSupplier2BankAcc values)
        {

            msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,bank_address,micr_code,ifsc_code,bankaccount_name," +
                " bankaccounttype_gid,bankaccounttype_name,bankaccount_number,confirmbankaccountnumber,joinaccount_status,joinaccount_name," +
                " chequebook_status,accountopen_date from ocs_mst_tsupplier2bank where supplier2bank_gid ='" + values.supplier2bank_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsbank_name = objODBCDatareader["bank_name"].ToString();
                lsbranch_name = objODBCDatareader["branch_name"].ToString();
                lsbank_address = objODBCDatareader["bank_address"].ToString();
                lsmicr_code = objODBCDatareader["micr_code"].ToString();
                lsifsc_code = objODBCDatareader["ifsc_code"].ToString();
                lsbankaccount_name = objODBCDatareader["bankaccount_name"].ToString();
                lsbankaccounttype_gid = objODBCDatareader["bankaccounttype_gid"].ToString();
                lsbankaccounttype_name = objODBCDatareader["bankaccounttype_name"].ToString();
                lsbankaccount_number = objODBCDatareader["bankaccount_number"].ToString();
                lsconfirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                lsjoinaccount_status = objODBCDatareader["joinaccount_status"].ToString();
                lsjoinaccount_name = objODBCDatareader["joinaccount_name"].ToString();
                lschequebook_status = objODBCDatareader["chequebook_status"].ToString();
                lsaccountopen_date = objODBCDatareader["accountopen_date"].ToString();
                lssupplier_gid = objODBCDatareader["supplier_gid"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsupplier2bank set " +
                     " bank_name='" + values.bank_name + "'," +
                     " branch_name='" + values.branch_name.Replace("'", "") + "'," +
                     " bank_address='" + values.bank_address.Replace("'", "") + "'," +
                     " micr_code='" + values.micr_code + "'," +
                     " ifsc_code='" + values.ifsc_code + "'," +
                     " bankaccount_name='" + values.bankaccount_name + "'," +
                     " bankaccounttype_gid='" + values.bankaccounttype_gid + "'," +
                     " bankaccounttype_name='" + values.bankaccounttype_name + "'," +
                     " bankaccount_number='" + values.bankaccount_number + "'," +
                     " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                     " joinaccount_status='" + values.joint_account + "'," +
                     " joinaccount_name='" + values.jointaccountholder_name + "'," +
                     " chequebook_status='" + values.chequebook_status + "',";
            if ((values.accountopen_date == null) || (values.accountopen_date == ""))
            {
                msSQL += "accountopen_date=null,";
            }
            else
            {
                msSQL += "accountopen_date= '" + Convert.ToDateTime(values.accountopen_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL +=
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where supplier2bank_gid ='" + values.supplier2bank_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult == 1)
            {

                msGetGid = objcmnfunctions.GetMasterGID("S2BL");

                msSQL = " insert into ocs_mst_tsupplier2bankupdatelog(" +
                    " supplier2bankupdatelog_gid," +
                    " supplier2bank_gid," +
                    " supplier_gid," +
                    " bank_name," +
                    " branch_name," +
                    " bank_address," +
                    " micr_code," +
                    " ifsc_code," +
                    " bankaccount_name," +
                    " bankaccounttype_gid," +
                    " bankaccounttype_name," +
                    " bankaccount_number," +
                    " confirmbankaccountnumber," +
                    " joinaccount_status," +
                    " joinaccount_name," +
                    " chequebook_status," +
                    " accountopen_date," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.supplier2bank_gid + "'," +
                    "'" + lssupplier_gid + "'," +
                    "'" + lsbank_name + "'," +
                    "'" + lsbranch_name.Replace("'", "") + "'," +
                    "'" + lsbank_address.Replace("'", "") + "'," +
                    "'" + lsmicr_code + "'," +
                    "'" + lsifsc_code + "'," +
                    "'" + lsbankaccount_name + "'," +
                    "'" + lsbankaccounttype_gid + "'," +
                    "'" + lsbankaccounttype_name + "'," +
                    "'" + lsbankaccount_number + "'," +
                    "'" + lsconfirmbankaccountnumber + "'," +
                    "'" + lsjoinaccount_status + "'," +
                    "'" + lsjoinaccount_name + "'," +
                    "'" + lschequebook_status + "',";
                // "'" + lsaccountopen_date + "'," +
                if (lsaccountopen_date == null || lsaccountopen_date == "")
                {
                    msSQL += "null,";
                }
                else
                {
                    msSQL += "'" + Convert.ToDateTime(lsaccountopen_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                msSQL +=
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                

                msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,ifsc_code,bankaccount_number,  " +
                   " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                  " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                  " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                  " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                        " from ocs_mst_tsupplier2bank a " +
                           " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                  " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                  " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                  " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                        "where supplier_gid ='" + lssupplier_gid + "' or supplier_gid ='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditbankacc_list = new List<supplierbankacc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditbankacc_list.Add(new supplierbankacc_list
                        {
                            bank_name = dt["bank_name"].ToString(),
                            branch_name = dt["branch_name"].ToString(),
                            ifsc_code = dt["ifsc_code"].ToString(),
                            bankaccount_number = dt["bankaccount_number"].ToString(),
                            supplier2bank_gid = dt["supplier2bank_gid"].ToString(),
                            supplier_gid = dt["supplier_gid"].ToString(),
                            created_date = dt["created_date"].ToString(),
                            created_by = dt["created_by"].ToString(),
                            updated_date = dt["updated_date"].ToString(),
                            updated_by = dt["updated_by"].ToString(),
                        });
                        values.supplierbankacc_list = getcreditbankacc_list;
                    }
                }
                dt_datatable.Dispose();

                values.status = true;
                values.message = "Bank Account Details Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while updating Bank Account";
            }
        }


        public void DaSupplierPanValidation (string employee_gid, MdlSupplier2BankAcc values)
        {
            msSQL = " Select pan_no from ocs_mst_tsupplier " +
                    " where pan_no = '" + values.pan_no + "' ";
            string lspan = objdbconn.GetExecuteScalar(msSQL);

            if (!string.IsNullOrEmpty(lspan))
            {

                if (!string.IsNullOrEmpty(values.supplier_gid))
                {

                    msSQL = " Select pan_no from ocs_mst_tsupplier " +
                   " where pan_no = '" + values.pan_no + "' and supplier_gid = '" + values.supplier_gid + "' ";
                    string lssbpan = objdbconn.GetExecuteScalar(msSQL);
                    if (lssbpan == values.pan_no)
                    { values.status = true; }
                    else
                    {
                        msSQL = " select created_by from ocs_mst_tsupplier where pan_no ='" + values.pan_no + "' ";
                        string created_by = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                     " from hrm_mst_temployee a" +
                     " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                     " where a.employee_gid='" + created_by + "'";
                        values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                        values.panoraadhar = "PAN"; values.status = true; return;
                    }

                }

                else
                {

                    msSQL = " Select pan_no from ocs_mst_tsupplier " +
                  " where pan_no = '" + values.pan_no + "'  ";
                    string lssbpan = objdbconn.GetExecuteScalar(msSQL);
                    if (lssbpan == values.pan_no)
                    {
                        msSQL = " select created_by from ocs_mst_tsupplier where pan_no ='" + values.pan_no + "' ";
                        string created_by = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                     " from hrm_mst_temployee a" +
                     " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                     " where a.employee_gid='" + created_by + "'";
                        values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                        values.panoraadhar = "PAN"; values.status = true; return;
                    }
                    else
                    {
                        values.status = true;
                    }
                }

            }
            else
            {
                values.status = true;
            }
        }


        public void DaGetSupplierTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_mst_tsupplier2bank where supplier_gid ='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

        }

        public void DaGetSupplierBankList(string supplier_gid, string employee_gid, MdlSupplier2BankAcc values)
        {

            msSQL = " select supplier2bank_gid,supplier_gid,bank_name,branch_name,ifsc_code,bankaccount_number,  " +
                 " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                      " from ocs_mst_tsupplier2bank a " +
                         " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                             "where supplier_gid ='" + supplier_gid + "' or supplier_gid ='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditbankacc_list = new List<supplierbankacc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getcreditbankacc_list.Add(new supplierbankacc_list
                    {
                        bank_name = dt["bank_name"].ToString(),
                        branch_name = dt["branch_name"].ToString(),
                        ifsc_code = dt["ifsc_code"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        supplier2bank_gid = dt["supplier2bank_gid"].ToString(),
                        supplier_gid = dt["supplier_gid"].ToString(),
                        created_date = dt["created_date"].ToString(),
                        created_by = dt["created_by"].ToString(),
                        updated_date = dt["updated_date"].ToString(),
                        updated_by = dt["updated_by"].ToString(),

                    });
                    values.supplierbankacc_list = getcreditbankacc_list;
                }
            }
            dt_datatable.Dispose();

        }


        }
}
