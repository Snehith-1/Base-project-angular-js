using ems.master.Models;
using ems.utilities.Functions;
using System;
using System.Web;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Data.Odbc;
using System.Configuration;
using System.Globalization;
using System.Net.Mail;
using System.Net;
using System.Linq;
using ems.storage.Functions;
using OfficeOpenXml;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Text;
using static OfficeOpenXml.ExcelErrorValue;
using OfficeOpenXml.Style;
using System.Windows;

namespace ems.master.DataAccess
{

    public class DaMstSAOnboardingBussDevtVerification
    {
        string msSQL, msGetGid, msGetGid1, lspath, RegID, msGetGid2, RegistrationID, tagName, sa_autogeneratedid, bd_raise_flag,approvalstatus, defPass, sbauser_gid;
        int mnResult;
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        OdbcDataReader objODBCDatareader, objODBCDatareader1;
        string Editcodecreation_date, lstagging_remarks, sacontact_gid, reporting_to, RMName;
        string Editsa_dateofincorporation, Editsa_companystdate, reporting_manager, reportingmanager_gid, Editsa_appcrediteddate, lsto_mail, saAssociateName, sa_appcrediteddate, sa_apputr, sa_appcreditedamount;
        string sa_dateofincorporation, lscc_mail, sacontactinstitution_gid, lssaemail_address, lssamobile_no, lscreated_date, lsupdated_by, lsupdated_date, lscreated_by, lsuser_firstname, lssa_reportingmanager, lsindividualchecker_name, lsindividualmaker_name, lsinstitutionmaker_name, lsinstitutionchecker_name, lssa_autogeneratedid, sa_associatename, sa_contactfirstname, sa_monthsinbusiness, saUser, Editsa_ratingas_date;
        string sa_contactmiddlename, lsclosed, sa_contactlastname, sa_companystdate, sa_companypan, sa_yearsinbusiness, satype_gid, satype_name, saentitytype_gid, saentitytype_name;
        Fnazurestorage objcmnstorage = new Fnazurestorage();
        HttpPostedFile httpPostedFile;
        string sToken = string.Empty;
        int matchCount1, matchCount2;
        int k, ls_port, duration;
        DataTable dt_datatable, dt_dTable, dt_tloan, dt_tcontact, dt_tinstitution, dt_thypothecation;
        public string ls_server, ls_username, ls_password, tomail_id, lscc2members, sa_reportingmanager, institutionchecker_name, tomail_id1, lsto2members, tomail_id2, sub, body, employeename, cc_mailid, employee_reporting_to, lsBccmail_id;
        public string cc_mailidconfig, rmname, samfincode, samagrocode, renewal_gid;
        Random rand = new Random();
        public string[] lsCCReceipients;
        public string[] lsBCCReceipients;
        public string[] lsToReceipients;
        public void DaGetValues(string employee_gid, MdlValuesList values)
        {

            msSQL = "select gender_gid,gender_name from ocs_mst_tgender";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<Gender_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new Gender_list
                    {
                        gender_gid = (dr_datarow["gender_gid"].ToString()),
                        gender_name = (dr_datarow["gender_name"].ToString()),

                    });
                }
                values.Gender_Grp = getSegment1;
            }
            dt_datatable.Dispose();

        }
        public void DaGetValuesCombo(string employee_gid, MdlValuesList values)
        {

            msSQL = "select satype_gid,satype_name from ocs_mst_tsatype where status = 'Y' and satype_gid='" + values.satype_gid + "' ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<Combo_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new Combo_list
                    {
                        Combo_name = (dr_datarow["satype_name"].ToString()),


                    });
                }
                values.Combo = getSegment1;
            }
            dt_datatable.Dispose();

        }
        public void DaInstitutionDetailsEdit(string sacontactinstitution_gid, InstitutioneditVerification values)
        {
            try
            {
                msSQL = " SELECT a.sacontactinstitution_gid,a.sa_reportingmanager,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
                       " a.sa_associatename,a.sa_contactfirstname,a.sa_contactmiddlename,a.confirmbankaccountnumber,a.sa_contactlastname," +
                       " a.designation_gid,a.designation_type,a.sa_dateofincorporation,a.sa_companystdate,a.sa_yearsinbusiness," +
                       " a.sa_monthsinbusiness,a.sa_companypan,a.sa_startdate,a.sa_enddate,a.sa_annualturnover, " +
                       " a.saifsc_code,a.saaccount_number,a.saaccountholder_name,a.utr_no," +
                        " a.created_date,a.micr,a.branch_address,a.city,a.district,a.state,a.assessmentagency_gid,a.assessmentagency_name,a.assessmentagencyrating_gid,a.assessmentagencyrating_name,a.ratingas_date," +
                          " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_apputr,a.referred_by,a.sa_appcreditedamount,a.sa_appcrediteddate,a.update_flag,a.verify_flag,a.bureau_check, " +
                       " (a.origination) as RecordSource," +
                       " a.crime_check,a.training_status,a.rm_tagging,a.remarks,ratingas_date FROM " +
                       " ocs_mst_tsainstitution a" +
                       " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                       " where a.sacontactinstitution_gid = '" + sacontactinstitution_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.recordsource = (objODBCDatareader["RecordSource"].ToString());
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.update_flag = objODBCDatareader["update_flag"].ToString();
                    values.bureau_check = objODBCDatareader["bureau_check"].ToString();
                    values.crime_check = objODBCDatareader["crime_check"].ToString();
                    values.training_status = objODBCDatareader["training_status"].ToString();
                    values.rm_tagging_id = objODBCDatareader["rm_tagging"].ToString();
                    values.remarks = objODBCDatareader["remarks"].ToString();
                    values.sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                    values.sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    values.sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    values.sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    values.sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                    if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_dateofincorporation = Convert.ToDateTime(objODBCDatareader["sa_dateofincorporation"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }
                    //if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                    //{

                    //}
                    //else
                    //{
                    //    values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    //}
                    if (objODBCDatareader["sa_companystdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_startdate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_startdate = Convert.ToDateTime(objODBCDatareader["sa_startdate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_enddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editsa_enddate = Convert.ToDateTime(objODBCDatareader["sa_enddate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["created_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_updated_date = Convert.ToDateTime(objODBCDatareader["created_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }
                    values.sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    values.sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    values.sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    values.sa_annualturnover = objODBCDatareader["sa_annualturnover"].ToString();
                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.verify_flag = objODBCDatareader["verify_flag"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
                objODBCDatareader.Close();
            }
        }
        public void DaGetTagFlag(string sacontactinstitution_gid, MdlValuesList values)
        {
            try
            {
                msSQL = "Select tagging_flag from ocs_mst_tsainstitution where sacontactinstitution_gid='" + sacontactinstitution_gid + " '";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.tagging_flag = objODBCDatareader["tagging_flag"].ToString();
                    values.status = true;
                }
                else
                {
                    values.status = false;
                }
            }
            catch (Exception ex)
            {

            }
        }


        public void DaIndividualDetailsEdit(string sacontact_gid, Individualverifedit values)
        {
            try
            {
                msSQL = " SELECT a.sacontact_gid,a.sa_reportingmanager,a.confirmbankaccountnumber,a.satype_gid,a.satype_name,a.saentitytype_gid,a.saentitytype_name," +
                       " a.sa_firstname,a.sa_middlename,a.sa_lastname," +
                       " a.sa_pannumber,a.pan_status,a.sa_aadharnumber,a.sa_apputr,a.sa_appcrediteddate," +
                       " a.sa_appcreditedamount,a.saifsc_code,a.saaccountholder_name,a.saaccount_number,a.sacanccheque_number,a.present_occupation,a.work_experience,a.Expagri_business, " +
                       " a.sabank_name,a.sabranch_name,a.saaccountholder_name," +
                       " a.micr,a.branch_address,a.city,a.district,a.state,a.assessmentagency_gid,a.assessmentagency_name,a.assessmentagencyrating_gid,a.assessmentagencyrating_name,a.ratingas_date," +
                       " a.sacanccheque_number,a.sabranch_name,a.sabank_name,a.sa_onboard_flag,a.created_date,a.update_flag,a.bureau_check, " +
                       " a.crime_check,a.training_status,a.referred_by,a.utr_no,a.rm_tagging,a.remarks,a.gender,a.verify_flag, " +
                       " (a.origination) as RecordSource," +
                     " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by " +
                       " From ocs_mst_tsacontact a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                       //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                       //" left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                       " where a.sacontact_gid = '" + sacontact_gid + "' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.recordsource = objODBCDatareader["RecordSource"].ToString();
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.verify_flag = objODBCDatareader["verify_flag"].ToString();
                    values.update_flag = objODBCDatareader["update_flag"].ToString();
                    values.bureau_check = objODBCDatareader["bureau_check"].ToString();
                    values.crime_check = objODBCDatareader["crime_check"].ToString();
                    values.training_status = objODBCDatareader["training_status"].ToString();
                    values.rm_tagging_id = objODBCDatareader["rm_tagging"].ToString();
                    values.remarks = objODBCDatareader["remarks"].ToString();
                    values.sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
                    values.satype_name = objODBCDatareader["satype_name"].ToString();
                    values.saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    values.satype_gid = objODBCDatareader["satype_gid"].ToString();
                    values.saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    values.sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                    values.sa_firstname = objODBCDatareader["sa_firstname"].ToString();
                    values.gender = objODBCDatareader["gender"].ToString();
                    values.sa_middlename = objODBCDatareader["sa_middlename"].ToString();
                    values.sa_lastname = objODBCDatareader["sa_lastname"].ToString();
                    values.sa_pannumber = objODBCDatareader["sa_pannumber"].ToString();
                    values.pan_status = objODBCDatareader["pan_status"].ToString();

                    if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["ratingas_date"].ToString() == "" || (Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-02 00:00:00"))
                    {
                        values.ratingas_datecredit = "";
                    }
                    else
                    {
                        values.ratingas_datecredit = Convert.ToDateTime(objODBCDatareader["ratingas_date"]).ToString("dd-MM-yyyy");
                    }

                    values.sa_aadharnumber = objODBCDatareader["sa_aadharnumber"].ToString();
                    values.sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    values.sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();

                    values.saifsc_code = objODBCDatareader["saifsc_code"].ToString();
                    values.saaccount_number = objODBCDatareader["saaccount_number"].ToString();
                    values.confirmbankaccountnumber = objODBCDatareader["confirmbankaccountnumber"].ToString();
                    values.saaccountholder_name = objODBCDatareader["saaccountholder_name"].ToString();
                    values.sacanccheque_number = objODBCDatareader["sacanccheque_number"].ToString();
                    values.sabranch_name = objODBCDatareader["sabranch_name"].ToString();
                    values.sabank_name = objODBCDatareader["sabank_name"].ToString();
                    values.sa_onboard_flag = objODBCDatareader["sa_onboard_flag"].ToString();
                    values.micr = objODBCDatareader["micr"].ToString();
                    values.branch_address = objODBCDatareader["branch_address"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.referred_by = objODBCDatareader["referred_by"].ToString();
                    values.utr_no = objODBCDatareader["utr_no"].ToString();
                    values.present_occupation = objODBCDatareader["present_occupation"].ToString();
                    values.work_experience = objODBCDatareader["work_experience"].ToString();
                    values.Expagri_business = objODBCDatareader["Expagri_business"].ToString();
                    values.sa_updated_by = objODBCDatareader["created_by"].ToString();

                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }
        public bool DaInstitutionSamcodesApprovalupdate(string employee_gid, institutionsamcodesupdate values)
        {
            bool fl = false;
            try
            {
                msSQL = " SELECT sacontactinstitution_gid,sa_autogeneratedid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                    " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                    " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,date_format(codecreation_date,'%d-%m-%Y') as codecreation_date FROM " +
                    " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    Editcodecreation_date = objODBCDatareader["codecreation_date"].ToString();
                }
                

                msSQL = " update ocs_mst_tsainstitution set samfin_code='" + values.samfin_code + "', samagro_code='" + values.samagro_code + "', " +
                        " code_created_by='" + employee_gid + "',code_created_flag='Y',renewal_flag='Y',codecreation_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' " +
                         " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                     defPass = "Welcome@123";
                    msGetGid = objcmnfunctions.GetMasterGID("SBAL");
                    msSQL = "insert into ocs_mst_tsaloginsbauser(sbauser_gid,sa_autogeneratedid,samfin_code,samagro_code,sbauser_password, " +
                           " created_by,created_date,active,web_active) values ('" + msGetGid + "','" + sa_autogeneratedid + "','" + values.samfin_code + "', " +
                           " '" + values.samagro_code + "','" + objcmnfunctions.ConvertToAscii(defPass) + "','" + employee_gid + "', " +
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','Y')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        msSQL = "select renewal_gid,duration from ocs_mst_tsbarenewaltenure where updated_date ='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' and status='Y'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            duration =Convert.ToInt16(objODBCDatareader["duration"]);
                            renewal_gid = objODBCDatareader["renewal_gid"].ToString();
                        }
                        string next_renewal = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd HH:mm");
                        msSQL = " update ocs_mst_tsainstitution set next_renewal_date='" + next_renewal + "', renewal_gid='" + renewal_gid + "'" +                     
                                " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        //Mail Trigger
                        try
                        {
                            k = 1;

                            msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                ls_server = objODBCDatareader["pop_server"].ToString();
                                ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                                ls_username = objODBCDatareader["pop_username"].ToString();
                                ls_password = objODBCDatareader["pop_password"].ToString();
                            }
                            objODBCDatareader.Close();
                            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                            sToken = "";
                            int Length = 100;
                            for (int j = 0; j < Length; j++)
                            {
                                string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                                sToken += sTempChars;
                            }

                            k = k + 1;


                            //Mail Template Details

                            msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.approved_by) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                                 " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date,samfin_code,samagro_code, " +
                                    " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                    " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                     " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                                lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                                lscc2members = objODBCDatareader["cc2members"].ToString();
                                lscreated_date = objODBCDatareader["created_date"].ToString();
                                samfincode = objODBCDatareader["samfin_code"].ToString();
                                samagrocode = objODBCDatareader["samagro_code"].ToString();

                            }

                            objODBCDatareader.Close();

                            msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                            cc_mailid = objdbconn.GetExecuteScalar(msSQL);



                            objODBCDatareader.Close();

                            //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                            //string reporting_to = objdbconn.GetExecuteScalar(msql);

                            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                                RMName = objODBCDatareader["reporting_name"].ToString();
                            }
                            objODBCDatareader.Close();

                            msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                            tomail_id = objdbconn.GetExecuteScalar(msSQL);
                            string SACode_tomail = ConfigurationManager.AppSettings["SACode_tomail"].ToString();
                            if (tomail_id != null || tomail_id != string.Empty)
                            {
                                lsto_mail = SACode_tomail + ',' + tomail_id;
                            }
                            else
                            {
                                lsto_mail = SACode_tomail;
                            }





                            msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                            employeename = objdbconn.GetExecuteScalar(msSQL);


                            msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + reporting_to + "'";
                            rmname = objdbconn.GetExecuteScalar(msSQL);

                            sub = "SA Codes Created";
                            body = "Dear " + HttpUtility.HtmlEncode(rmname) + ",<br />";
                            body = body + "<br />";
                            body = body + "Greetings,  <br />";
                            body = body + "<br />";
                            body = body + "SA codes have been created. The details are as follows, <br />";
                            body = body + "<br />";
                            body = body + "<b> SA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Samfin code :</b> " + samfincode + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Samagro code :</b> " + samagrocode + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Your default password is :</b> " + defPass + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Created date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Created by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                            body = body + "<br />";
                            body = body + "Kindly log into systems to verify the Onboarding Details.";
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + "Thanks & Regards, ";
                            body = body + "<br />";
                            body = body + HttpUtility.HtmlEncode(employeename);
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                            MailMessage message = new MailMessage();
                            SmtpClient smtp = new SmtpClient();
                            message.From = new MailAddress(ls_username);
                            //  message.To.Add(new MailAddress(lsto_mail));


                            lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                            //  lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                            if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                            {
                                lsBCCReceipients = lsBccmail_id.Split(',');
                                if (lsBccmail_id.Length == 0)
                                {
                                    message.Bcc.Add(new MailAddress(lsBccmail_id));
                                }
                                else
                                {
                                    foreach (string BCCEmail in lsBCCReceipients)
                                    {
                                        message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                    }
                                }
                            }

                            if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                            {
                                lsToReceipients = lsto_mail.Split(',');
                                if (lsto_mail.Length == 0)
                                {
                                    message.To.Add(new MailAddress(lsto_mail));
                                }
                                else
                                {
                                    foreach (string ToEmail in lsToReceipients)
                                    {
                                        message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                    }
                                }
                            }
                            cc_mailidconfig = ConfigurationManager.AppSettings["SACodeCC"].ToString();
                            cc_mailid = cc_mailid + " , " + cc_mailidconfig;

                            if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                            {
                                lsCCReceipients = cc_mailid.Split(',');
                                if (cc_mailid.Length == 0)
                                {
                                    message.CC.Add(new MailAddress(cc_mailid));
                                }
                                else
                                {
                                    foreach (string CCEmail in lsCCReceipients)
                                    {
                                        message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                    }
                                }
                            }

                            message.Subject = sub;
                            message.IsBodyHtml = true; //to make message body as html  
                            message.Body = body;
                            smtp.Port = ls_port;
                            smtp.Host = ls_server; //for gmail host  
                            smtp.EnableSsl = true;
                            smtp.UseDefaultCredentials = false;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                            smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                            smtp.Send(message);

                            values.status = true;

                            if (values.status == true)
                            {
                                msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                                   " sacontactinstitution_gid," +
                                   " from_mail," +
                                   " to_mail," +
                                   " cc_mail," +
                                   " mail_status," +
                                   " mail_senddate, " +
                                   " created_by," +
                                   " created_date)" +
                                   " values(" +
                                   "'" + msGetGid + "'," +
                                   "'" + employee_gid + "'," +
                                   "'" + lsto_mail + "'," +
                                   "'" + cc_mailid + "'," +
                                   "'SA Codes Created'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                   "'" + employee_gid + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                          //Mail Trigger



                        values.status = true;
                        values.message = "Samunnati Associate codes updated successfully";
                        fl = values.status;
                        return fl;
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error occured";
                        fl = values.status;
                        return fl;
                    }

                }
            }

            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
            return fl;
        }
        public bool DaIndividualSamcodesApprovalupdate(string employee_gid, institutionsamcodesupdate values)
        {
            bool fl = false;
            try
            {
                msSQL = "Select sacontact_gid,date_format(codecreation_date,'%d-%m-%Y') as codecreation_date,sa_autogeneratedid from ocs_mst_tsacontact where sacontact_gid ='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == true)
                {
                    sa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    sacontact_gid = objODBCDatareader["sacontact_gid"].ToString();
                    Editcodecreation_date = objODBCDatareader["codecreation_date"].ToString();
                }

                msSQL = " update ocs_mst_tsacontact set samfin_code='" + values.samfin_code + "', samagro_code='" + values.samagro_code + "', " +
                            " code_created_by='" + employee_gid + "',code_created_flag='Y',renewal_flag='Y',codecreation_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' " +
                         " where sacontact_gid = '" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;

                     defPass = "Welcome@123";

                    msGetGid = objcmnfunctions.GetMasterGID("SBAL");
                    msSQL = "insert into ocs_mst_tsaloginsbauser(sbauser_gid,sa_autogeneratedid,samfin_code,samagro_code,sbauser_password, " +
                           " created_by,created_date,active,web_active) values ('" + msGetGid + "','" + sa_autogeneratedid + "','" + values.samfin_code + "', " +
                           " '" + values.samagro_code + "','" + objcmnfunctions.ConvertToAscii(defPass) + "','" + employee_gid + "', " + 
                           " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Y','Y')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        //Mail Trigger
                        try
                        {
                            msSQL = "select renewal_gid,duration from ocs_mst_tsbarenewaltenure where updated_date = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' and status='Y'";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                duration = Convert.ToInt16(objODBCDatareader["duration"]);
                                renewal_gid = objODBCDatareader["renewal_gid"].ToString();
                            }
                            string next_renewal = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd HH:mm");
                            msSQL = " update ocs_mst_tsacontact set next_renewal_date='" + next_renewal + "', renewal_gid='" + renewal_gid + "' " +
                                    " where sacontact_gid = '" + values.sacontact_gid + "' ";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                            k = 1;

                            msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                ls_server = objODBCDatareader["pop_server"].ToString();
                                ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                                ls_username = objODBCDatareader["pop_username"].ToString();
                                ls_password = objODBCDatareader["pop_password"].ToString();
                            }
                            objODBCDatareader.Close();
                            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                            sToken = "";
                            int Length = 100;
                            for (int j = 0; j < Length; j++)
                            {
                                string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                                sToken += sTempChars;
                            }

                            k = k + 1;
                            //RM Name-need to check

                            //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                            //string reporting_to = objdbconn.GetExecuteScalar(msql);


                            //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                            //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                            //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                            //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                            //Mail Template Details

                            msSQL = "select i.sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                                    " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date,samfin_code, samagro_code," +
                                " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                    " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                                       " i.sacontact_gid = '" + values.sacontact_gid + "'";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                                lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                                lscc2members = objODBCDatareader["cc2members"].ToString();
                                lscreated_date = objODBCDatareader["created_date"].ToString();
                                lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                                samfincode = objODBCDatareader["samfin_code"].ToString();
                                samagrocode = objODBCDatareader["samagro_code"].ToString();

                            }

                            objODBCDatareader.Close();

                            msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                            cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                            msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                                   " where sacontact_gid = '" + msGetGid + "'";
                            //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                            }

                            objODBCDatareader.Close();

                            msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                    " where sacontact_gid = '" + msGetGid + "'";

                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                            }

                            objODBCDatareader.Close();
                            //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                            //string reporting_to = objdbconn.GetExecuteScalar(msql);

                            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                                RMName = objODBCDatareader["reporting_name"].ToString();
                            }
                            objODBCDatareader.Close();



                            msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                            tomail_id = objdbconn.GetExecuteScalar(msSQL);
                            string SACode_tomail = ConfigurationManager.AppSettings["SACode_tomail"].ToString();
                            lsto_mail = SACode_tomail + ',' + tomail_id;




                            msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                            employeename = objdbconn.GetExecuteScalar(msSQL);


                            msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + reporting_to + "'";
                            rmname = objdbconn.GetExecuteScalar(msSQL);

                            sub = "SA Codes Created";
                            body = "Dear " + HttpUtility.HtmlEncode(rmname) + ",<br />";
                            body = body + "<br />";
                            body = body + "Greetings,  <br />";
                            body = body + "<br />";
                            body = body + "SA codes have been created. The details are as follows, <br />";
                            body = body + "<br />";
                            body = body + "<b> SA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Samfin code :</b> " + samfincode + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Samagro code :</b> " + samagrocode + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Your default password is :</b> " + HttpUtility.HtmlEncode(defPass) + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Created date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                            body = body + "<br />";
                            body = body + "<b> Created by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                            body = body + "<br />";
                            body = body + "Kindly log into systems to verify the Onboarding Details.";
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + "Thanks & Regards, ";
                            body = body + "<br />";
                            body = body + HttpUtility.HtmlEncode(employeename);
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + "<br />";
                            body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                            MailMessage message = new MailMessage();
                            SmtpClient smtp = new SmtpClient();
                            message.From = new MailAddress(ls_username);
                            //message.To.Add(new MailAddress(lsto_mail));


                            lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                            //lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                            if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                            {
                                lsBCCReceipients = lsBccmail_id.Split(',');
                                if (lsBccmail_id.Length == 0)
                                {
                                    message.Bcc.Add(new MailAddress(lsBccmail_id));
                                }
                                else
                                {
                                    foreach (string BCCEmail in lsBCCReceipients)
                                    {
                                        message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                    }
                                }
                            }

                            if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                            {
                                lsToReceipients = lsto_mail.Split(',');
                                if (lsto_mail.Length == 0)
                                {
                                    message.To.Add(new MailAddress(lsto_mail));
                                }
                                else
                                {
                                    foreach (string ToEmail in lsToReceipients)
                                    {
                                        message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                    }
                                }
                            }

                            if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                            {
                                lsCCReceipients = cc_mailid.Split(',');
                                if (cc_mailid.Length == 0)
                                {
                                    message.CC.Add(new MailAddress(cc_mailid));
                                }
                                else
                                {
                                    foreach (string CCEmail in lsCCReceipients)
                                    {
                                        message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                    }
                                }
                            }

                            message.Subject = sub;
                            message.IsBodyHtml = true; //to make message body as html  
                            message.Body = body;
                            smtp.Port = ls_port;
                            smtp.Host = ls_server; //for gmail host  
                            smtp.EnableSsl = true;
                            smtp.UseDefaultCredentials = false;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                            smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                            smtp.Send(message);

                            values.status = true;

                            if (values.status == true)
                            {
                                msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                                   " sacontactinstitution_gid," +
                                   " from_mail," +
                                   " to_mail," +
                                   " cc_mail," +
                                   " mail_status," +
                                   " mail_senddate, " +
                                   " created_by," +
                                   " created_date)" +
                                   " values(" +
                                   "'" + msGetGid + "'," +
                                   "'" + employee_gid + "'," +
                                   "'" + lsto_mail + "'," +
                                   "'" + cc_mailid + "'," +
                                   "'SBA Codes created'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                   "'" + employee_gid + "'," +
                                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }

                        }
                        catch (Exception ex)
                        {

                        }

                        //Mail Trigger

                        values.message = "Samunnati Associate codes updated successfully";
                        fl = values.status;

                        return fl;
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error occured";
                        fl = values.status;
                        return fl;
                    }

                }
            }

            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
            return fl;
        }


        public bool DaInstitutionRMUpdate(string employee_gid, InstitutioneditVerification values)
        {
            string msql;
            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                RMName = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();


            msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            string user_gid = objdbconn.GetExecuteScalar(msql);


            msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                      " where user_gid = '" + user_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reporting_manager = objODBCDatareader["user_firstname"].ToString();
                reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsainstitution set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reporting_to + "', " +
                    " created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y', approvalstatus= 'Onboard Pending' ,saveasdraftadd_flag='Y',tagging_remarks='" + values.tagging_remarks + "' " +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            //if (mnResult != 0)
            //{
            //    msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

            //    values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            //    msGetGid = objcmnfunctions.GetMasterGID("TEIL");

            //    msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
            //          " taggedemployeeinstitutionlog_gid , " +
            //          " sacontactinstitution_gid," +
            //          " institutiontaggedemployee_gid," +
            //          " institutiontaggedemployee_name," +
            //         " rmtagged_remarks," +
            //          " approval_status," +
            //          " created_by," +
            //          " created_date) " +
            //          " values (" +
            //          " '" + msGetGid + "'," +
            //           " '" + values.sacontactinstitution_gid + "'," +
            //          " '" + values.rm_tagging_id + "'," +
            //          " '" + values.rm_tagging_name + "'," +
            //        " '" + values.tagged_remarks + "'," +
            //          " '" + values.approvalstatus + "'," +
            //          " '" + employee_gid + "'," +
            //          " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            //    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {

                    try
                    {
                        k = 1;



                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check


                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);

                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                             " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();


                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.institutionchecker_name,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.rm_tagging)  as to2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date, " +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname,tagging_remarks from ocs_mst_tsainstitution i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionchecker_name = objODBCDatareader["institutionchecker_name"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                            lsto2members = objODBCDatareader["to2members"].ToString();
                            //lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                            lstagging_remarks = objODBCDatareader["tagging_remarks"].ToString();

                        }

                        objODBCDatareader.Close();

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                        string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                        lscc_mail = ConfigurationManager.AppSettings["SAccmail"].ToString();
                        cc_mailid = lscc_mail + "," + Tomailid;

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);




                        sub = "New Samunnati Business Associate is tagged to you ";
                        body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA is tagged to you. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Tagged date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Tagged remarks:</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into the " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to onboard SBA details ";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Tagging RM'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "RM tagged successfully";
                    return true;

                }
                else
                {
                    values.status = false;
                    values.message = "RM tagging failed";
                    return false;

                }
            


            //else
            //{
            //    values.status = false;
            //    values.message = "RM tagging failed";
            //    return false;

            //}
        }

        public bool DaIndividualRMUpdate(string employee_gid, IndividualeditVerification values)
        {            
            bool status = false;

            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);

            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //        " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();





            msSQL = " update ocs_mst_tsacontact set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "', " +
                " reportingmanager_gid='" + reporting_to + "',created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y', approvalstatus= 'Onboard Pending'," +
                " saveasdraftadd_flag='Y',tagging_remarks='" + values.tagging_remarks + "'  " +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            //if (mnResult != 0)
            //{
            //    msSQL = " select approvalstatus from ocs_mst_tsacontact where sacontact_gid = '" + values.sacontact_gid + "'";

            //    values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            //    msGetGid = objcmnfunctions.GetMasterGID("TEIN");

            //    msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
            //          " taggedemployeeindividuallog_gid , " +
            //          " sacontact_gid," +
            //          " individualtaggedemployee_gid," +
            //          " individualtaggedemployee_name," +
            //         " rmtagged_remarks," +
            //          " approval_status," +
            //          " created_by," +
            //          " created_date) " +
            //          " values (" +
            //          " '" + msGetGid + "'," +
            //           " '" + values.sacontact_gid + "'," +
            //          " '" + values.rm_tagging_id + "'," +
            //          " '" + values.rm_tagging_name + "'," +
            //         " '" + values.tagged_remarks + "'," +
            //          " '" + values.approvalstatus + "'," +
            //          " '" + employee_gid + "'," +
            //          " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            //    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {

                    try
                    {
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check


                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                             " where sacontact_gid = '" + values.sacontact_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }

                        objODBCDatareader.Close();


                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,i.sa_reportingmanager,i.individualchecker_name,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.rm_tagging)  as to2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date," +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname,tagging_remarks from ocs_mst_tsacontact i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            institutionchecker_name = objODBCDatareader["individualchecker_name"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                            lsto2members = objODBCDatareader["to2members"].ToString();
                            //lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                            lstagging_remarks = objODBCDatareader["tagging_remarks"].ToString();

                        }

                        objODBCDatareader.Close();

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                        string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                        lscc_mail = ConfigurationManager.AppSettings["SAccmail"].ToString();
                        cc_mailid = lscc_mail + "," + Tomailid;


                        sub = "New Samunnati Business Associate is tagged to you ";
                        body = "Dear " + HttpUtility.HtmlEncode(lsuser_firstname) + ",<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA is tagged to you. The details are as follows,<br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b>  Tagged date:</b> " + lscreated_date + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<b>  Tagged remarks:</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into the " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to onboard SBA details ";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + lsuser_firstname;
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }



                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;
                        status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                    //Mail Trigger

                    values.status = true;
                    values.message = "RM tagged successfully";
                    return status;
                }
                else
                {

                }

            //}
            //else
            //{
            //    values.status = status;
            //    values.message = "RM tagging failed";
            //    return status;

            //}
            return status;
        }


        public void DaIndividualUpdate(string employee_gid, IndividualeditVerification values)
        {
            
            try
            {
                //msSQL = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                //string reporting_name = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                   " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                   " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                   " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    reporting_manager = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saprimary_status='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add primary mobile number";
                    return;
                }

                msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number";
                    return;
                }
                msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one email";
                    return;
                }
                msSQL = "select addresstype_name  from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add Atleast One Address";
                    return;
                }
                msSQL = "select saprospects_gid " + " from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one prospects";
                    return;
                }
                msSQL = "select sadocument_gid " + " from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one document";
                    return;
                }

                if (!string.IsNullOrEmpty(values.sa_firstname))
                {
                    if (values.sa_firstname.Contains("'"))
                    {
                        values.sa_firstname = values.sa_firstname.Replace("'", " ");
                    }
                }
                //if (values.sbamiddle_name.Contains("'"))
                //{
                //    values.sbamiddle_name = values.sbamiddle_name.Replace("'", " ");
                //}
                if (!string.IsNullOrEmpty(values.sa_lastname))
                {
                    if (values.sa_lastname.Contains("'"))
                    {
                        values.sa_lastname = values.sa_lastname.Replace("'", " ");
                    }
                }


                msSQL = " update ocs_mst_tsacontact set " +
                        " sa_firstname = ' " + values.sa_firstname + " '," +
                        " sa_middlename='" + values.sa_middlename + "'," +
                        " sa_lastname='" + values.sa_lastname + "',";
                //" satype_gid='" + values.satype_gid + "'," +
                //" satype_name='" + values.satype_name + "'," +
                //" sa_reportingmanager='" + values.rm_tagging_name + "',";
                if (Convert.ToDateTime(values.saappcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.saappcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " sa_pannumber='" + values.sa_pannumber + "'," +
                         " reportingmanager_gid='" + reporting_to + "'," +
                         " sa_aadharnumber='" + values.sa_aadharnumber + "'," +
                          " pan_status='" + values.pan_status + "'," +
                         " saentitytype_gid='" + values.saentitytype_gid + "'," +
                          " saentitytype_name='" + values.saentitytype_name + "'," +
                         " sa_apputr='" + values.sa_apputr + "'," +
                         " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                         " saifsc_code='" + values.saifsc_code + "'," +
                         " saaccount_number='" + values.saaccount_number + "'," +
                            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                          " saaccountholder_name='" + values.saaccountholder_name + "'," +
                         " sacanccheque_number='" + values.sacanccheque_number + "'," +
                         " sabranch_name='" + values.sabranch_name + "'," +
                         " sabank_name='" + values.sabank_name + "'," +
                         " sa_onboard_flag='Y'," +
                             " micr='" + values.micr + "'," +
                         " branch_address='" + values.branch_address + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         " rm_tagging='" + employee_gid + "'," +
                         " saveasdraftadd_flag='N'," +
                         " approvalstatus='" + values.approvalstatus + "', " +
                         " gender ='" + values.gender + "', " +
                        " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                         " assessmentagency_name='" + values.assessmentagency_name + "'," +
                         " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                          " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }

                msSQL += " training_status='" + values.training_status + "'," +
                         " remarks='" + values.remarks + "',update_flag='Y' " +
                         " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                
                values.status = true;

                values.message = "Company details updated successfully";

                if (mnResult != 0)
                  
                {
                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        matchCount1 = 0;
                        matchCount2 = 0;

                        msSQL = " select panabsencereason from ocs_mst_tsacontact2panabsencereason" +
                                " where sacontact_gid='" + values.sacontact_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        if (dt_datatable.Rows.Count != 0)
                        {
                            values.contactpanabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                             new contactpanabsencereasonsa_list
                             {
                                 panabsencereason = row["panabsencereason"].ToString(),
                             }
                           ).ToList();
                        }
                        dt_datatable.Dispose();
                        if (values.contactpanabsencereasonsa_list == null)
                        {
                            foreach (string reason in values.panabsencereason_selectedlist)
                            {
                                msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                        " sacontact2panabsencereason_gid," +
                                        " sacontact_gid," +
                                        " panabsencereason," +
                                        " created_date," +
                                        " created_by)" +
                                        " VALUES(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + reason + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                        "'" + employee_gid + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                        }
                        else
                        {
                            for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                            {
                                for (var j = 0; j < values.contactpanabsencereasonsa_list.Count; j++)
                                {
                                    if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereasonsa_list[j].panabsencereason)
                                    {
                                        matchCount1++;
                                    }
                                }
                                if (matchCount1 == 0)
                                {
                                    msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                    msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                            " sacontact2panabsencereason_gid," +
                                            " sacontact_gid," +
                                            " panabsencereason," +
                                            " created_date," +
                                            " created_by)" +
                                            " VALUES(" +
                                            "'" + msGetGid + "'," +
                                            "'" + employee_gid + "'," +
                                            "'" + values.panabsencereason_selectedlist[i] + "'," +
                                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                            "'" + employee_gid + "')";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount1 = 0;
                            }

                            for (var i = 0; i < values.contactpanabsencereasonsa_list.Count; i++)
                            {
                                for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                                {
                                    if (values.contactpanabsencereasonsa_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                                    {
                                        matchCount2++;
                                    }
                                }
                                if (matchCount2 == 0)
                                {
                                    msSQL = "delete from ocs_mst_tsacontact2panabsencereason where panabsencereason='" + values.contactpanabsencereasonsa_list[i].panabsencereason + "' and sacontact_gid = '" + values.sacontact_gid + "'";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount2 = 0;
                            }
                        }
                    }

                    msGetGid1 = objcmnfunctions.GetMasterGID("SALO");

                    msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
                   " sacontactupdatelog_gid, " +
                   " sacontact_gid, " +
                   //" satype_gid," +
                   // " satype_name," +
                   // " saentitytype_gid," +
                   // " saentitytype_name," +
                   " sa_firstname," +
                   " sa_middlename," +
                   " sa_lastname," +
                   " sa_pannumber," +
                   " sa_aadharnumber," +
                   " updated_by," +
                   " updated_date)" +
                   " values (" +
                   "'" + msGetGid1 + "'," +
                   "'" + values.sacontact_gid + "'," +
                   //"'" + values.satype_gid + "'," +
                   //"'" + values.satype_name + "'," +
                   //"'" + values.saentitytype_gid + "'," +
                   //"'" + values.saentitytype_name + "'," +
                   "'" + values.sa_firstname + "'," +
                             "'" + values.sa_middlename + "'," +
                              "'" + values.sa_lastname + "'," +
                             "'" + values.sa_pannumber + "'," +
                             "'" + values.sa_aadharnumber + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Updates


                    msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msGetGid1 = objcmnfunctions.GetMasterGID("TEIN");

                    string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    string usergid = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                              " where user_gid = '" + usergid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        tagName = objODBCDatareader["user_firstname"].ToString();
                    }

                    msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                          " taggedemployeeindividuallog_gid , " +
                          " sacontact_gid," +
                          " individualtaggedemployee_gid," +
                          " individualtaggedemployee_name," +
                          " approval_status," +
                          " created_by," +
                          " created_date) " +
                          " values (" +
                          " '" + msGetGid1 + "'," +
                           " '" + values.sacontact_gid + "'," +
                          " '" + employee_gid + "'," +
                          " '" + tagName + "'," +
                          " '" + values.approvalstatus + "'," +
                          " '" + employee_gid + "'," +
                          " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "SELECT origination from ocs_mst_tsacontact  where sacontact_gid='" + values.sacontact_gid + "'";
                    string origination = objdbconn.GetExecuteScalar(msSQL);


                    if (origination=="Internal")
                    { 
                    //Mail Trigger
                   
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                        //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                                " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                            " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                                   " sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                               " where sacontact_gid = '" + values.sacontact_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        objODBCDatareader.Close();

                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    
                    }
                else
                {                  
                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                        //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                                " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                            " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                                " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                                   " sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                               " where sacontact_gid = '" + values.sacontact_gid + "'";
                        //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                                " where sacontact_gid = '" + values.sacontact_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        objODBCDatareader.Close();

                        sub = "Application has been Re-submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "Tagged RM has Re-submitted the SBA details for your verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }


                        }

                }
                }

            catch
            {
                values.status = false;

                values.message = "Error occured while updating company details";

                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAupdate/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);

                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                sw.Close();

                values.status = false;
                values.message = "Error Occured..";

                return;
            }
        }

        public bool DaIndividualUpdateafterraisequery(string employee_gid, IndividualeditVerification values)
        {

            msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "' and saprimary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add primary mobile number";
                return false;
            }

            msSQL = "select samobile_no  from ocs_mst_tsacontact2mobileno where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one mobile number";
                return false;
            }
            msSQL = "select saemail_address " + " from ocs_mst_tsacontact2email where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one email";
                return false;
            }
            msSQL = "select sacontact2address_gid  from ocs_mst_tsacontact2address where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Address";
                return false;
            }
            msSQL = "select saprospects_gid " + " from ocs_mst_tsaprospects where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one prospects";
                return false;
            }
            msSQL = "select sadocument_gid " + " from ocs_mst_tsadocumentsupload where sacontact_gid='" + employee_gid + "' or sacontact_gid='" + values.sacontact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one document";
                return false;
            }

            if (!string.IsNullOrEmpty(values.sa_firstname))
            {
                if (values.sa_firstname.Contains("'"))
                {
                    values.sa_firstname = values.sa_firstname.Replace("'", " ");
                }
            }
            //if (values.sbamiddle_name.Contains("'"))
            //{
            //    values.sbamiddle_name = values.sbamiddle_name.Replace("'", " ");
            //}
            if (!string.IsNullOrEmpty(values.sa_lastname))
            {
                if (values.sa_lastname.Contains("'"))
                {
                    values.sa_lastname = values.sa_lastname.Replace("'", " ");
                }
            }


            msSQL = " update ocs_mst_tsacontact set " +
                    " sa_firstname = ' " + values.sa_firstname + " '," +
                    " sa_middlename='" + values.sa_middlename + "'," +
                    " sa_lastname='" + values.sa_lastname + "',";
            //" satype_gid='" + values.satype_gid + "'," +
            //" satype_name='" + values.satype_name + "'," +
            //" sa_reportingmanager='" + values.rm_tagging_name + "',";
            if (Convert.ToDateTime(values.saappcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.saappcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " sa_pannumber='" + values.sa_pannumber + "'," +
                     " sa_aadharnumber='" + values.sa_aadharnumber + "'," +
                      " pan_status='" + values.pan_status + "'," +
                     " saentitytype_gid='" + values.saentitytype_gid + "'," +
                      " saentitytype_name='" + values.saentitytype_name + "'," +
                     " sa_apputr='" + values.sa_apputr + "'," +
                     " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                     " saifsc_code='" + values.saifsc_code + "'," +
                     " saaccount_number='" + values.saaccount_number + "'," +
                        " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                      " saaccountholder_name='" + values.saaccountholder_name + "'," +
                     " sacanccheque_number='" + values.sacanccheque_number + "'," +
                     " sabranch_name='" + values.sabranch_name + "'," +
                     " sabank_name='" + values.sabank_name + "'," +
                     " sa_onboard_flag='Y'," +
                         " micr='" + values.micr + "'," +
                     " branch_address='" + values.branch_address + "'," +
                     " city='" + values.city + "'," +
                     " district='" + values.district + "'," +
                     " state='" + values.state + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " rm_tagging='" + employee_gid + "'," +
                     " saveasdraftadd_flag='N'," +
                    " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                     " assessmentagency_name='" + values.assessmentagency_name + "'," +
                     " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                      " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
            if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }

            msSQL += " training_status='" + values.training_status + "'," +
                     " remarks='" + values.remarks + "',update_flag='Y' " +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                if (values.pan_status == "Customer Submitting Form 60")
                {
                    matchCount1 = 0;
                    matchCount2 = 0;

                    msSQL = " select panabsencereason from ocs_mst_tsacontact2panabsencereason" +
                            " where sacontact_gid='" + values.sacontact_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        values.contactpanabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                         new contactpanabsencereasonsa_list
                         {
                             panabsencereason = row["panabsencereason"].ToString(),
                         }
                       ).ToList();
                    }
                    dt_datatable.Dispose();
                    if (values.contactpanabsencereasonsa_list == null)
                    {
                        foreach (string reason in values.panabsencereason_selectedlist)
                        {
                            msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                            msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                    " sacontact2panabsencereason_gid," +
                                    " sacontact_gid," +
                                    " panabsencereason," +
                                    " created_date," +
                                    " created_by)" +
                                    " VALUES(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + reason + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                    "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    else
                    {
                        for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                        {
                            for (var j = 0; j < values.contactpanabsencereasonsa_list.Count; j++)
                            {
                                if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereasonsa_list[j].panabsencereason)
                                {
                                    matchCount1++;
                                }
                            }
                            if (matchCount1 == 0)
                            {
                                msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                        " sacontact2panabsencereason_gid," +
                                        " sacontact_gid," +
                                        " panabsencereason," +
                                        " created_date," +
                                        " created_by)" +
                                        " VALUES(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + values.panabsencereason_selectedlist[i] + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                        "'" + employee_gid + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            matchCount1 = 0;
                        }

                        for (var i = 0; i < values.contactpanabsencereasonsa_list.Count; i++)
                        {
                            for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                            {
                                if (values.contactpanabsencereasonsa_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                                {
                                    matchCount2++;
                                }
                            }
                            if (matchCount2 == 0)
                            {
                                msSQL = "delete from ocs_mst_tsacontact2panabsencereason where panabsencereason='" + values.contactpanabsencereasonsa_list[i].panabsencereason + "' and sacontact_gid = '" + values.sacontact_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            matchCount2 = 0;
                        }
                    }
                }

                msGetGid = objcmnfunctions.GetMasterGID("SALO");

                msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
               " sacontactupdatelog_gid, " +
               " sacontact_gid, " +
               //" satype_gid," +
               // " satype_name," +
               // " saentitytype_gid," +
               // " saentitytype_name," +
               " sa_firstname," +
               " sa_middlename," +
               " sa_lastname," +
               " sa_pannumber," +
               " sa_aadharnumber," +
               " updated_by," +
               " updated_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.sacontact_gid + "'," +
               //"'" + values.satype_gid + "'," +
               //"'" + values.satype_name + "'," +
               //"'" + values.saentitytype_gid + "'," +
               //"'" + values.saentitytype_name + "'," +
               "'" + values.sa_firstname + "'," +
                         "'" + values.sa_middlename + "'," +
                         "'" + values.sa_lastname + "'," + 
                        "'" + values.sa_pannumber + "'," +
                     "'" + values.sa_aadharnumber + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //Updates


                msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msGetGid1 = objcmnfunctions.GetMasterGID("TEIN");

                string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                string usergid = objdbconn.GetExecuteScalar(msql);


                msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                          " where user_gid = '" + usergid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    tagName = objODBCDatareader["user_firstname"].ToString();
                }

                msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                      " taggedemployeeindividuallog_gid , " +
                      " sacontact_gid," +
                      " individualtaggedemployee_gid," +
                      " individualtaggedemployee_name," +
                      " approval_status," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid1 + "'," +
                       " '" + values.sacontact_gid + "'," +
                      " '" + employee_gid + "'," +
                      " '" + tagName + "'," +
                      " '" + values.approvalstatus + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Individual details updated successfully";
                return true;
            }

            else
            {
                values.status = false;
                values.message = "Error occured while updating individual";
                return false;
            }

        }

        public bool DaIndividualEditSaveAsDraft(string employee_gid, IndividualeditVerification values)
        {
            bool sta = false;
            try
            {

                msSQL = " update ocs_mst_tsacontact set " +
                        " sa_firstname = ' " + values.sa_firstname + " '," +
                        " sa_middlename='" + values.sa_middlename + "'," +
                        " sa_lastname='" + values.sa_lastname + "',";
                //" satype_gid='" + values.satype_gid + "'," +
                //" satype_name='" + values.satype_name + "'," +
                //" sa_reportingmanager='" + values.rm_tagging_name + "',";
                if (Convert.ToDateTime(values.saappcrediteddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.saappcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " sa_pannumber='" + values.sa_pannumber + "'," +
                         " sa_aadharnumber='" + values.sa_aadharnumber + "'," +
                          " pan_status='" + values.pan_status + "'," +
                         " saentitytype_gid='" + values.saentitytype_gid + "'," +
                          " saentitytype_name='" + values.saentitytype_name + "'," +
                         " sa_apputr='" + values.sa_apputr + "'," +
                         " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                         " saifsc_code='" + values.saifsc_code + "'," +
                         " saaccount_number='" + values.saaccount_number + "'," +
                            " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                          " saaccountholder_name='" + values.saaccountholder_name + "'," +
                         " sacanccheque_number='" + values.sacanccheque_number + "'," +
                         " sabranch_name='" + values.sabranch_name + "'," +
                         " sabank_name='" + values.sabank_name + "'," +
                         " sa_onboard_flag='Y'," +
                             " micr='" + values.micr + "'," +
                         " branch_address='" + values.branch_address + "'," +
                           " gender='" + values.gender + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         " rm_tagging='" + values.rm_tagging_id + "'," +
                         " approvalstatus='" + values.approvalstatus + "'," +
                         " saveasdraftadd_flag='Y'," +
                        " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                         " assessmentagency_name='" + values.assessmentagency_name + "'," +
                         " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                          " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
                if (Convert.ToDateTime(values.ratingas_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }

                msSQL += " training_status='" + values.training_status + "'," +
                         " remarks='" + values.remarks + "',update_flag='N' " +
                         " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        matchCount1 = 0;
                        matchCount2 = 0;

                        msSQL = " select panabsencereason from ocs_mst_tsacontact2panabsencereason" +
                                " where sacontact_gid='" + values.sacontact_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        if (dt_datatable.Rows.Count != 0)
                        {
                            values.contactpanabsencereasonsa_list = dt_datatable.AsEnumerable().Select(row =>
                             new contactpanabsencereasonsa_list
                             {
                                 panabsencereason = row["panabsencereason"].ToString(),
                             }
                           ).ToList();
                        }
                        dt_datatable.Dispose();
                        if (values.contactpanabsencereasonsa_list == null)
                        {
                            foreach (string reason in values.panabsencereason_selectedlist)
                            {
                                msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                        " sacontact2panabsencereason_gid," +
                                        " sacontact_gid," +
                                        " panabsencereason," +
                                        " created_date," +
                                        " created_by)" +
                                        " VALUES(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + reason + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                        "'" + employee_gid + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                        }
                        else
                        {
                            for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                            {
                                for (var j = 0; j < values.contactpanabsencereasonsa_list.Count; j++)
                                {
                                    if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereasonsa_list[j].panabsencereason)
                                    {
                                        matchCount1++;
                                    }
                                }
                                if (matchCount1 == 0)
                                {
                                    msGetGid = objcmnfunctions.GetMasterGID("SAPP");
                                    msSQL = " INSERT INTO ocs_mst_tsacontact2panabsencereason(" +
                                            " sacontact2panabsencereason_gid," +
                                            " sacontact_gid," +
                                            " panabsencereason," +
                                            " created_date," +
                                            " created_by)" +
                                            " VALUES(" +
                                            "'" + msGetGid + "'," +
                                            "'" + employee_gid + "'," +
                                            "'" + values.panabsencereason_selectedlist[i] + "'," +
                                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                            "'" + employee_gid + "')";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount1 = 0;
                            }

                            for (var i = 0; i < values.contactpanabsencereasonsa_list.Count; i++)
                            {
                                for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                                {
                                    if (values.contactpanabsencereasonsa_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                                    {
                                        matchCount2++;
                                    }
                                }
                                if (matchCount2 == 0)
                                {
                                    msSQL = "delete from ocs_mst_tsacontact2panabsencereason where panabsencereason='" + values.contactpanabsencereasonsa_list[i].panabsencereason + "' and sacontact_gid = '" + values.sacontact_gid + "'";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount2 = 0;
                            }
                        }
                    }

                    msGetGid = objcmnfunctions.GetMasterGID("SALO");

                    msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
                   " sacontactupdatelog_gid, " +
                   " sacontact_gid, " +
                   //" satype_gid," +
                   // " satype_name," +
                   // " saentitytype_gid," +
                   // " saentitytype_name," +
                   " sa_firstname," +
                   " sa_middlename," +
                   " sa_lastname," +
                   " sa_pannumber," +
                   " sa_aadharnumber," +
                   " updated_by," +
                   " updated_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontact_gid + "'," +
                   //"'" + values.satype_gid + "'," +
                   //"'" + values.satype_name + "'," +
                   //"'" + values.saentitytype_gid + "'," +
                   //"'" + values.saentitytype_name + "'," +
                   "'" + values.sa_firstname + "'," +
                             "'" + values.sa_middlename + "'," +
                             "'" + values.sa_lastname + "'," +
                          "'" + values.sa_pannumber + "'," +
                             "'" + values.sa_aadharnumber + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Updates


                    msSQL = "update ocs_mst_tsacontact2mobileno set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2email set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2address set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaprospects set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panform60 set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsacontact2panabsencereason set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tindividualcancelchequeupload set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsaindividual2bureau set sacontact_gid ='" + values.sacontact_gid + "' where sacontact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    ////Mail Trigger
                    //try
                    //{
                    //    k = 1;

                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check

                    //    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    //    //msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                    //    //        " where employee_gid in ('" + reporting_to.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
                    //            " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    //        " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
                    //            " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
                    //               " sacontact_gid = '" + msGetGid + "'";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //        lscc2members = objODBCDatareader["cc2members"].ToString();
                    //        lscreated_date = objODBCDatareader["created_date"].ToString();
                    //        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                    //    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                    //           " where sacontact_gid = '" + msGetGid + "'";
                    //    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                    //            " where sacontact_gid = '" + msGetGid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    sub = "SBA Application submitted by RM";
                    //    body = "Dear Wellington,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + lsuser_firstname;
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";



                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                    //           " sacontactinstitution_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Intiated for Verification'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}
                    //catch (Exception ex)
                    //{

                    //}
                    ////Mail Trigger
                    values.status = true;
                    sta = true;
                    values.message = "SBA onboarding details save as draft added successfully";
                    return true;
                }

                else
                {
                    values.status = false;
                    values.message = "Error occured while saving individual";
                    sta = false;
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAEditSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";

                    return false;
                }
            }
            catch (Exception ex)
            {
                sta = false;
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAEditSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return sta;

        }
        

        public void DaRMLoad(string employee_gid, RM_List values)
        {

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);


            msSQL = "select concat(user_firstname,' ',user_lastname) as RMName ,user_gid from adm_mst_tuser where user_gid in " +
                    " (select user_gid from hrm_mst_temployee where employee_gid in " +
                    " (select employeereporting_to from adm_mst_tmodule2employee where module_gid = '" + lsmodulereportingto_gid + "') ) ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<RM_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new RM_List
                    {
                        user_gid = (dr_datarow["user_gid"].ToString()),
                        RMName = (dr_datarow["RMName"].ToString()),

                    });
                }
                values.Rm_Grp = getSegment1;
            }
            dt_datatable.Dispose();

        }
        public void DaInstitutionUpdate(string employee_gid, InstitutionbussVerification values)
        {

            try
            {
                if (!string.IsNullOrEmpty(values.sa_associatename))
                {
                    if (values.sa_associatename.Contains("'"))
                    {
                        values.sa_associatename = values.sa_associatename.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactfirstname))
                {
                    if (values.sa_contactfirstname.Contains("'"))
                    {
                        values.sa_contactfirstname = values.sa_contactfirstname.Replace("'", "");
                    }
                }
                if (!string.IsNullOrEmpty(values.sa_contactmiddlename))
                {
                    if (values.sa_contactmiddlename.Contains("'"))
                    {
                        values.sa_contactmiddlename = values.sa_contactmiddlename.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sa_contactlastname))
                {
                    if (values.sa_contactlastname.Contains("'"))
                    {
                        values.sa_contactlastname = values.sa_contactlastname.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.branch_address))
                {
                    if (values.branch_address.Contains("'"))
                    {
                        values.branch_address = values.branch_address.Replace("'", "");
                    }
                }

                if (!string.IsNullOrEmpty(values.sabranch_name))
                {
                    if (values.sabranch_name.Contains("'"))
                    {
                        values.sabranch_name = values.sabranch_name.Replace("'", "");
                    }
                }
                //msSQL = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                //string reporting_to = objdbconn.GetExecuteScalar(msSQL);


                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
                   " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
                   " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
                   " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
                   " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + employee_gid + "' group by a.employeereporting_to";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    reporting_to = objODBCDatareader["employeereporting_to"].ToString();
                    RMName = objODBCDatareader["reporting_name"].ToString();
                }
                objODBCDatareader.Close();


                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saprimary_status='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add primary mobile number";
                    return;
                }

                msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one mobile number";
                    return;
                }
                msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one email";
                    return;
                }
                if (values.rdbgstregister_status == "Yes")
                {
                    msSQL = "select sainstitution2gst_gid " + " from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);

                    if (objODBCDatareader.HasRows == false)
                    {
                        values.status = false;
                        values.message = "Add atleast one Gst detail";
                        return;
                    }
                }
                msSQL = "select sainstitution2address_gid " + " from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one address";
                    return;
                }
                msSQL = "select sainst_individual_gid " + " from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one individual";
                    return;
                }
                msSQL = "select saprospects_institution_gid " + " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one prospects";
                    return;
                }
                msSQL = "select sainstidocument_gid " + " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Upload atleast one document ";
                    return;
                }
                //msSQL = "select * " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                //objODBCDatareader = objdbconn.GetDataReader(msSQL);

                //if (objODBCDatareader.HasRows == false)
                //{
                //    values.status = false;
                //    values.message = "Add atleast one bureau";
                //    return false;

                //}


                msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                          " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                          " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,ratingas_date FROM " +
                          " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
               if (objODBCDatareader.HasRows == true)
                {
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();

                    
                    sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    satype_gid = objODBCDatareader["satype_gid"].ToString();
                    satype_name = objODBCDatareader["satype_name"].ToString();
                    saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                }
                objODBCDatareader.Close();
                CultureInfo cultures = new CultureInfo("en-US");
                msSQL = " update ocs_mst_tsainstitution set " +
                        " sa_associatename = ' " + values.sa_associatename + " ',";
                //" sa_reportingmanager='" + values.rm_tagging_name + "'," +
                //" satype_gid='" + values.satype_gid + "'," +
                //" satype_name='" + values.satype_name + "',";

                if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
                {
                }
                else
                {
                    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
                {
                }
                else
                {
                    msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
                         " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
                         " reportingmanager_gid='" + reporting_to + "'," +
                         " saentitytype_gid='" + values.saentitytype_gid + "'," +
                          " saentitytype_name='" + values.saentitytype_name + "'," +
                         " sa_associatename='" + values.sa_associatename + "'," +
                         " designation_gid='" + values.designation_gid + "'," +
                          " designation_type='" + values.designation_type + "'," +
                         " sa_companypan='" + values.sa_companypan + "'," +
                         " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                         " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                         " sa_contactlastname='" + values.sa_contactlastname + "'," +
                         " sa_annualturnover='" + values.sa_annualturnover + "'," +
                         " saifsc_code='" + values.saifsc_code + "'," +
                         " saaccount_number='" + values.saaccount_number + "'," +
                         " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                          " sa_apputr='" + values.sa_apputr + "'," +
                           " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                             " micr='" + values.micr + "'," +
                         " branch_address='" + values.branch_address + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +

                          " saaccountholder_name='" + values.saaccountholder_name + "'," +
                         " sacanccheque_number='" + values.sacanccheque_number + "'," +
                         " sabranch_name='" + values.sabranch_name + "'," +
                         " sabank_name='" + values.sabank_name + "'," +
                         " sa_onboard_flag='Y'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         " rm_tagging='" + employee_gid + "', " +
                         " saveasdraftadd_flag='N', " +
                          " approvalstatus= 'Pending BD Verification', " +
                         " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                         " assessmentagency_name='" + values.assessmentagency_name + "'," +
                         " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                          " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";

                if (Editsa_ratingas_date == Convert.ToString(values.ratingas_date))
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " training_status='" + values.training_status + "'," +
                         " remarks='" + values.remarks + "',update_flag='Y'" +
                         " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;

                values.message = "Company details updated successfully";


                if (mnResult != 0)
                {
                   
                    msGetGid1 = objcmnfunctions.GetMasterGID("SAUL");

                    msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
                   " institution_log_id, " +
                   " sacontactinstitution_gid, " +
                   " sa_associatename," +
                   " sa_contactfirstname," +
                   " sa_contactmiddlename," +
                   " sa_contactlastname," +                   
                   " sa_companypan," +
                   " sa_yearsinbusiness," +
                   " sa_monthsinbusiness," +
                   " sacreated_by," +
                   " sacreated_date)" +
                   " values (" +
                   "'" + msGetGid1 + "'," +
                   "'" + values.sacontactinstitution_gid + "'," +
                   "'" + sa_associatename + "'," +
                   "'" + sa_contactfirstname + "'," +
                   "'" + sa_contactmiddlename + "'," +
                   "'" + sa_contactlastname + "'," +
                     "'" + sa_companypan + "'," +
                             "'" + sa_yearsinbusiness + "'," +
                             "'" + sa_monthsinbusiness + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Updates

                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msGetGid1 = objcmnfunctions.GetMasterGID("TEIL");

                    string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                    string usergid = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                              " where user_gid = '" + usergid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        tagName = objODBCDatareader["user_firstname"].ToString();
                    }

                    msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                      " taggedemployeeinstitutionlog_gid , " +
                      " sacontactinstitution_gid," +
                      " institutiontaggedemployee_gid," +
                      " institutiontaggedemployee_name," +
                      " approval_status," +
                      " created_by," +
                      " created_date) " +
                      " values (" +
                      " '" + msGetGid1 + "'," +
                       " '" + values.sacontactinstitution_gid + "'," +
                      " '" + employee_gid + "'," +
                      " '" + tagName + "'," +
                      " '" + values.approvalstatus + "'," +
                      " '" + employee_gid + "'," +
                      " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "SELECT origination from ocs_mst_tsainstitution  where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                    string origination = objdbconn.GetExecuteScalar(msSQL);

                    if (origination == "Internal")
                    {

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;


                        msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                             " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                                " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                 " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                               " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        objODBCDatareader.Close();

                        sub = "SBA Application submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);



                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail));
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail));
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail));
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true;
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server;
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }


                    }
                    else
                    {

                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;


                        msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                             " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                                " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                 " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                        msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                               " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                                " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                        }
                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        objODBCDatareader.Close();

                        sub = "Application has been Re-submitted by RM";
                        body = "Dear Wellington,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "Tagged RM has Re-submitted the SBA details for your verification. The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);



                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail));
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail));
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail));
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true;
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server;
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                               " sacontactinstitution_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Verification'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                        
                    }

                }
            }

            catch
            {
                values.status = false;

                values.message = "Error occured while updating company details";

                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAupdate/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";


                return;
            }
                }
           
        public bool DaInstitutionUpdateRaise(string employee_gid, InstitutionbussVerification values)
        {

            msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' and saprimary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add primary mobile number";
                return false;
            }

            msSQL = "select samobile_no " + " from ocs_mst_tsainstitution2mobileno where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one mobile number";
                return false;
            }
            msSQL = "select saemail_address " + " from ocs_mst_tsainstitution2email where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one email";
                return false;
            }
            if (values.rdbgstregister_status == "Yes")
            {
                msSQL = "select sainstitution2gst_gid " + " from ocs_mst_tsainstitution2gst where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Add atleast one Gst detail";
                    return false;
                }
            }
            msSQL = "select sainstitution2address_gid " + " from ocs_mst_tsainstitution2address where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one address";
                return false;
            }
            msSQL = "select sainst_individual_gid " + " from ocs_mst_tsainstitutionindividual where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one individual";
                return false;
            }
            msSQL = "select saprospects_institution_gid " + " from ocs_mst_tsainstitutionprospects where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add atleast one prospects";
                return false;
            }
            msSQL = "select sainstidocument_gid " + " from ocs_mst_tsainstitutiondocumentsupload where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Upload atleast one document ";
                return false;
            }
            //msSQL = "select * " + " from ocs_mst_tsainstitution2bureau where sacontactinstitution_gid='" + employee_gid + "' or sacontactinstitution_gid='" + values.sacontactinstitution_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);

            //if (objODBCDatareader.HasRows == false)
            //{
            //    values.status = false;
            //    values.message = "Add atleast one bureau";
            //    return false;

            //}


            msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                      " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                      " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,ratingas_date FROM " +
                      " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();

                //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                //}
                //if (objODBCDatareader["sa_companystdate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                //}
                //if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                //{
                //}
                //else
                //{
                //    sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                //}
                sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                satype_gid = objODBCDatareader["satype_gid"].ToString();
                satype_name = objODBCDatareader["satype_name"].ToString();
                saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
            }
            objODBCDatareader.Close();
            CultureInfo cultures = new CultureInfo("en-US");
            msSQL = " update ocs_mst_tsainstitution set " +
                    " sa_associatename = ' " + values.sa_associatename + " ',";
            //" sa_reportingmanager='" + values.rm_tagging_name + "'," +
            //" satype_gid='" + values.satype_gid + "'," +
            //" satype_name='" + values.satype_name + "',";

            if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
            {
            }
            else
            {
                msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
            {
            }
            else
            {
                msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
            {

            }
            else
            {
                msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
                     " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
                     " saentitytype_gid='" + values.saentitytype_gid + "'," +
                      " saentitytype_name='" + values.saentitytype_name + "'," +
                     " sa_associatename='" + values.sa_associatename + "'," +
                     " designation_gid='" + values.designation_gid + "'," +
                      " designation_type='" + values.designation_type + "'," +
                     " sa_companypan='" + values.sa_companypan + "'," +
                     " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                     " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                     " sa_contactlastname='" + values.sa_contactlastname + "'," +
                     " sa_annualturnover='" + values.sa_annualturnover + "'," +
                     " saifsc_code='" + values.saifsc_code + "'," +
                     " saaccount_number='" + values.saaccount_number + "'," +
                     " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                      " sa_apputr='" + values.sa_apputr + "'," +
                       " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                         " micr='" + values.micr + "'," +
                     " branch_address='" + values.branch_address + "'," +
                     " city='" + values.city + "'," +
                     " district='" + values.district + "'," +
                     " state='" + values.state + "'," +

                      " saaccountholder_name='" + values.saaccountholder_name + "'," +
                     " sacanccheque_number='" + values.sacanccheque_number + "'," +
                     " sabranch_name='" + values.sabranch_name + "'," +
                     " sabank_name='" + values.sabank_name + "'," +
                     " sa_onboard_flag='Y'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " rm_tagging='" + employee_gid + "', " +
                     " saveasdraftadd_flag='N', " +
                     " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                     " assessmentagency_name='" + values.assessmentagency_name + "'," +
                     " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                      " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
            if (Editsa_ratingas_date == Convert.ToString(values.ratingas_date))
            {

            }
            else
            {
                msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " training_status='" + values.training_status + "'," +
                     " remarks='" + values.remarks + "',update_flag='Y'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                msGetGid = objcmnfunctions.GetMasterGID("SAUL");

                msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
               " institution_log_id, " +
               " sacontactinstitution_gid, " +
               " sa_associatename," +
               " sa_contactfirstname," +
               " sa_contactmiddlename," +
               " sa_contactlastname," +             
               " sa_companypan," +
               " sa_yearsinbusiness," +
               " sa_monthsinbusiness," +
               " sacreated_by," +
               " sacreated_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.sacontactinstitution_gid + "'," +
               "'" + sa_associatename + "'," +
               "'" + sa_contactfirstname + "'," +
               "'" + sa_contactmiddlename + "'," +
               "'" + sa_contactlastname + "'," +
                "'" + sa_companypan + "'," +
                         "'" + sa_yearsinbusiness + "'," +
                         "'" + sa_monthsinbusiness + "'," +
                         "'" + employee_gid + "'," +
                         "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                //Updates

                msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msGetGid1 = objcmnfunctions.GetMasterGID("TEIL");

                string msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + employee_gid + "'";
                string usergid = objdbconn.GetExecuteScalar(msql);


                msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
                          " where user_gid = '" + usergid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    tagName = objODBCDatareader["user_firstname"].ToString();
                }

                msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                  " taggedemployeeinstitutionlog_gid , " +
                  " sacontactinstitution_gid," +
                  " institutiontaggedemployee_gid," +
                  " institutiontaggedemployee_name," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid1 + "'," +
                   " '" + values.sacontactinstitution_gid + "'," +
                  " '" + employee_gid + "'," +
                  " '" + tagName + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);




                values.status = true;
                values.message = "Company details updated successfully";
                return true;
            }

            else
            {
                values.status = false;
                values.message = "Error occured while updating company details";
                return false;
            }

        }

        public bool DaInstitutionEditSaveAsDraft(string employee_gid, InstitutionbussVerification values)
        {
            bool sta = false;
            try
            {
                msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                          " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                          " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount,ratingas_date FROM " +
                          " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                    Editsa_ratingas_date = objODBCDatareader["ratingas_date"].ToString();

                    //if (objODBCDatareader["sa_dateofincorporation"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    //}
                    //if (objODBCDatareader["sa_companystdate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_companystdate = Convert.ToDateTime(objODBCDatareader["sa_companystdate"]).ToString("dd-MM-yyyy");
                    //}
                    //if (objODBCDatareader["sa_appcrediteddate"].ToString() == "")
                    //{
                    //}
                    //else
                    //{
                    //    sa_appcrediteddate = Convert.ToDateTime(objODBCDatareader["sa_appcrediteddate"]).ToString("dd-MM-yyyy");
                    //}
                    sa_yearsinbusiness = objODBCDatareader["sa_yearsinbusiness"].ToString();
                    sa_monthsinbusiness = objODBCDatareader["sa_monthsinbusiness"].ToString();
                    satype_gid = objODBCDatareader["satype_gid"].ToString();
                    satype_name = objODBCDatareader["satype_name"].ToString();
                    saentitytype_gid = objODBCDatareader["saentitytype_gid"].ToString();
                    saentitytype_name = objODBCDatareader["saentitytype_name"].ToString();
                    sa_companypan = objODBCDatareader["sa_companypan"].ToString();
                    sa_contactfirstname = objODBCDatareader["sa_contactfirstname"].ToString();
                    sa_contactmiddlename = objODBCDatareader["sa_contactmiddlename"].ToString();
                    sa_contactlastname = objODBCDatareader["sa_contactlastname"].ToString();
                    sa_apputr = objODBCDatareader["sa_apputr"].ToString();
                    sa_appcreditedamount = objODBCDatareader["sa_appcreditedamount"].ToString();
                }
                objODBCDatareader.Close();
                CultureInfo cultures = new CultureInfo("en-US");
                msSQL = " update ocs_mst_tsainstitution set " +
                        " sa_associatename = ' " + values.sa_associatename + " ',";
                //" sa_reportingmanager='" + values.rm_tagging_name + "'," +
                //" satype_gid='" + values.satype_gid + "'," +
                //" satype_name='" + values.satype_name + "',";

                if (Editsa_dateofincorporation == Convert.ToString(values.sa_dateofincorporation))
                {
                }
                else
                {
                    msSQL += " sa_dateofincorporation='" + Convert.ToDateTime(values.sa_dateofincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_companystdate == Convert.ToString(values.sa_companystdate))
                {
                }
                else
                {
                    msSQL += " sa_companystdate='" + Convert.ToDateTime(values.sa_companystdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Editsa_appcrediteddate == Convert.ToString(values.sa_appcrediteddate))
                {

                }
                else
                {
                    msSQL += " sa_appcrediteddate='" + Convert.ToDateTime(values.sa_appcrediteddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " sa_yearsinbusiness='" + values.sa_yearsinbusiness + "'," +
                         " sa_monthsinbusiness='" + values.sa_monthsinbusiness + "'," +
                         " saentitytype_gid='" + values.saentitytype_gid + "'," +
                          " saentitytype_name='" + values.saentitytype_name + "'," +
                         " sa_associatename='" + values.sa_associatename + "'," +
                         " designation_gid='" + values.designation_gid + "'," +
                          " designation_type='" + values.designation_type + "'," +
                         " sa_companypan='" + values.sa_companypan + "'," +
                         " sa_contactfirstname='" + values.sa_contactfirstname + "'," +
                         " sa_contactmiddlename='" + values.sa_contactmiddlename + "'," +
                         " sa_contactlastname='" + values.sa_contactlastname + "'," +
                         " sa_annualturnover='" + values.sa_annualturnover + "'," +
                         " saifsc_code='" + values.saifsc_code + "'," +
                         " saaccount_number='" + values.saaccount_number + "'," +
                         " confirmbankaccountnumber='" + values.confirmbankaccountnumber + "'," +
                          " sa_apputr='" + values.sa_apputr + "'," +
                           " sa_appcreditedamount='" + values.sa_appcreditedamount + "'," +
                             " micr='" + values.micr + "'," +
                         " branch_address='" + values.branch_address + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +

                          " saaccountholder_name='" + values.saaccountholder_name + "'," +
                         " sacanccheque_number='" + values.sacanccheque_number + "'," +
                         " sabranch_name='" + values.sabranch_name + "'," +
                         " sabank_name='" + values.sabank_name + "'," +
                         " sa_onboard_flag='Y'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                         " rm_tagging='" + values.rm_tagging_id + "', " +
                          " approvalstatus='" + values.approvalstatus + "', " +
                         " saveasdraftadd_flag='Y', " +
                         " assessmentagency_gid='" + values.assessmentagency_gid + "', " +
                         " assessmentagency_name='" + values.assessmentagency_name + "'," +
                         " assessmentagencyrating_gid = '" + values.assessmentagencyrating_gid + "'," +
                          " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
                if (Editsa_ratingas_date == Convert.ToString(values.ratingas_date))
                {

                }
                else
                {
                    msSQL += " ratingas_date='" + Convert.ToDateTime(values.ratingas_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " training_status='" + values.training_status + "'," +
                         " remarks='" + values.remarks + "',update_flag='N'" +
                         " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {

                    msGetGid = objcmnfunctions.GetMasterGID("SAUL");

                    msSQL = "Insert into ocs_mst_tsainstitutionupdatelog(" +
                   " institution_log_id, " +
                   " sacontactinstitution_gid, " +
                   " sa_associatename," +
                   " sa_contactfirstname," +
                   " sa_contactmiddlename," +
                   " sa_contactlastname," +                  
                   " sa_companypan," +
                   " sa_yearsinbusiness," +
                   " sa_monthsinbusiness," +
                   " sacreated_by," +
                   " sacreated_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontactinstitution_gid + "'," +
                   "'" + sa_associatename + "'," +
                   "'" + sa_contactfirstname + "'," +
                   "'" + sa_contactmiddlename + "'," +
                   "'" + sa_contactlastname + "'," +
                    "'" + sa_companypan + "'," +
                             "'" + sa_yearsinbusiness + "'," +
                             "'" + sa_monthsinbusiness + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Updates

                    msSQL = "update ocs_mst_tsainstitution2mobileno set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2email set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2address set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionindividual set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2gst set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutionprospects set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitutiondocumentsupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tinstitutioncancelchequeupload set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_mst_tsainstitution2bureau set sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' where sacontactinstitution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                    ////Mail Trigger
                    //try
                    //{
                    //    k = 1;



                    //    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        ls_server = objODBCDatareader["pop_server"].ToString();
                    //        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                    //        ls_username = objODBCDatareader["pop_username"].ToString();
                    //        ls_password = objODBCDatareader["pop_password"].ToString();
                    //    }
                    //    objODBCDatareader.Close();
                    //    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    //    sToken = "";
                    //    int Length = 100;
                    //    for (int j = 0; j < Length; j++)
                    //    {
                    //        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                    //        sToken += sTempChars;
                    //    }

                    //    k = k + 1;
                    //    //RM Name-need to check

                    //    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //    //string reporting_to = objdbconn.GetExecuteScalar(msql);

                    //    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //    //Mail Template Details

                    //    msSQL = "select sacontactinstitution_gid,sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by, " +
                    //         " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    //            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                    //            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                    //             " sacontactinstitution_gid = '" + msGetGid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                    //        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                    //        lscc2members = objODBCDatareader["cc2members"].ToString();
                    //        lscreated_date = objODBCDatareader["created_date"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //    cc_mailid = objdbconn.GetExecuteScalar(msSQL);


                    //    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                    //           " where sacontactinstitution_gid = '" + msGetGid + "'";
                    //    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                    //            " where sacontactinstitution_gid = '" + msGetGid + "'";

                    //    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    //    if (objODBCDatareader.HasRows == true)
                    //    {
                    //        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    //    }

                    //    objODBCDatareader.Close();

                    //    sub = "SBA Application submitted by RM";
                    //    body = "Dear Wellington,<br />";
                    //    body = body + "<br />";
                    //    body = body + "Greetings,  <br />";
                    //    body = body + "<br />";
                    //    body = body + "The following SBA Application is submitted for your Verification. The details are as follows, <br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> SBA Name :</b> " + saAssociateName + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Submitted date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Mobile number :</b> " + lssamobile_no + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<b> Email address :</b> " + lssaemail_address + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "Thanks & Regards, ";
                    //    body = body + "<br />";
                    //    body = body + saUser;
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + "<br />";
                    //    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    //    MailMessage message = new MailMessage();
                    //    SmtpClient smtp = new SmtpClient();
                    //    message.From = new MailAddress(ls_username);
                    //    //message.To.Add(new MailAddress(lsto_mail));


                    //    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                    //    lsto_mail = ConfigurationManager.AppSettings["SAonboardmail"].ToString();

                    //    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    //    {
                    //        lsBCCReceipients = lsBccmail_id.Split(',');
                    //        if (lsBccmail_id.Length == 0)
                    //        {
                    //            message.Bcc.Add(new MailAddress(lsBccmail_id));
                    //        }
                    //        else
                    //        {
                    //            foreach (string BCCEmail in lsBCCReceipients)
                    //            {
                    //                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                    //            }
                    //        }
                    //    }

                    //    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    //    {
                    //        lsToReceipients = lsto_mail.Split(',');
                    //        if (lsto_mail.Length == 0)
                    //        {
                    //            message.To.Add(new MailAddress(lsto_mail));
                    //        }
                    //        else
                    //        {
                    //            foreach (string ToEmail in lsToReceipients)
                    //            {
                    //                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }


                    //    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    //    {
                    //        lsCCReceipients = cc_mailid.Split(',');
                    //        if (cc_mailid.Length == 0)
                    //        {
                    //            message.CC.Add(new MailAddress(cc_mailid));
                    //        }
                    //        else
                    //        {
                    //            foreach (string CCEmail in lsCCReceipients)
                    //            {
                    //                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                    //            }
                    //        }
                    //    }

                    //    message.Subject = sub;
                    //    message.IsBodyHtml = true; //to make message body as html  
                    //    message.Body = body;
                    //    smtp.Port = ls_port;
                    //    smtp.Host = ls_server; //for gmail host  
                    //    smtp.EnableSsl = true;
                    //    smtp.UseDefaultCredentials = false;
                    //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    //    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    //    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //    smtp.Send(message);

                    //    values.status = true;

                    //    if (values.status == true)
                    //    {
                    //        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                    //           " sacontactinstitution_gid," +
                    //           " from_mail," +
                    //           " to_mail," +
                    //           " cc_mail," +
                    //           " mail_status," +
                    //           " mail_senddate, " +
                    //           " created_by," +
                    //           " created_date)" +
                    //           " values(" +
                    //           "'" + msGetGid + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + lsto_mail + "'," +
                    //           "'" + cc_mailid + "'," +
                    //           "'SA Onboarding Intiated for Verification'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    //           "'" + employee_gid + "'," +
                    //           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    //    }

                    //}
                    //catch (Exception ex)
                    //{

                    //}
                    ////Mail Trigger

                    values.status = true;
                    values.message = "SBA onboarding details save as draft added successfully";
                    sta = true;
                    return true;
                }

                else
                {
                    values.status = false;
                    sta = false;
                    values.message = "Error occured while saving company details";
                    string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAEditSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                    if ((!System.IO.Directory.Exists(lspath)))
                        System.IO.Directory.CreateDirectory(lspath);



                    lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                    System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                    sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + "error" + "*********Query-" + msSQL);
                    sw.Close();



                    values.status = false;
                    values.message = "Error Occured..";

                    return false;
                }
            }
            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAEditSaveasdraft/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

                return false;

            }

        }
        public bool DaInstitutionVerifyUpdate(string employee_gid, InstitutioneditVerification values)
        {


            msSQL = " update ocs_mst_tsainstitution set " +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " remarks='" + values.remarks + "'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Training status updated successfully";
                return true;
            }

            else
            {
                values.status = false;
                values.message = "Error occured while updating training status";
                return false;
            }

        }
        //Verify Institution        
        public void DaInstitutionApprove(string employee_gid, institutionupdate values)
        {

            try
            {
                msSQL = "update ocs_mst_tsbainstitution set approved_flag='Y' ,bureau_check='" + values.bureau_check + "', " +
                        " crime_check='" + values.crime_check + "',training_status='" + values.training_status + "'," +
                        " remarks='ee', rm_tagging = 's',pan_number='" + values.pan_number + "',sbainstitution_name='" + values.sbainstitution_name + "'," +
                        " constitution='" + values.constitution + "',sbafirst_name='" + values.sbafirst_name + "'," +
                        " sbamiddle_name='" + values.sbamiddle_name + "',sbalast_name='" + values.sbalast_name + "',date_of_incorporation='" + values.date_of_incorporation + "', " +
                        " designation='" + values.designation + "',gender='" + values.designation + "',mobile_no='" + values.mobile_no + "', " +
                        " address1='" + values.address1 + "',address2 ='" + values.address2 + "',email_add='" + values.email_add + "'," +
                        " current_business  = '" + values.current_business + "',updated_by='" + employee_gid + "', " +
                        " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where sbainstitution_gid = '" + values.sbainstitution_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    //values.status = true;
                    //values.message = "Business Verification Approved Successfully";
                    //return true;
                }
            }
            catch (Exception)
            {

            }

        }

        public void DaGetInstitutionValues(string employee_gid, MdlValuesList values, string sbainstitution_gid)
        {
            //Institution Data

            msSQL = "select sbainstitution_gid,pan_number,sbainstitution_name, " +
                    " constitution,sbafirst_name,sbamiddle_name,sbalast_name,date_of_incorporation,current_business, " +
                    " designation,gender,mobile_no,Alternativemobile_no,address1,address2,email_add,bureau_check,crime_check,training_status, " +
                    " remarks, rm_tagging,approved_flag from ocs_mst_tsbainstitution where sbainstitution_gid = '" + sbainstitution_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<Institution_summarylist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new Institution_summarylist
                    {
                        sbainstitution_gid = (dr_datarow["sbainstitution_gid"].ToString()),
                        pan_number = (dr_datarow["pan_number"].ToString()),
                        sbainstitution_name = (dr_datarow["sbainstitution_name"].ToString()),
                        constitution = (dr_datarow["constitution"].ToString()),
                        sbafirst_name = (dr_datarow["sbafirst_name"].ToString()),
                        sbamiddle_name = (dr_datarow["sbamiddle_name"].ToString()),
                        sbalast_name = (dr_datarow["sbalast_name"].ToString()),
                        current_business = (dr_datarow["current_business"].ToString()),
                        date_of_incorporation = (dr_datarow["date_of_incorporation"].ToString()),
                        designation = (dr_datarow["designation"].ToString()),
                        gender = (dr_datarow["gender"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        Alternativemobile_no = (dr_datarow["Alternativemobile_no"].ToString()),
                        address1 = (dr_datarow["address1"].ToString()),
                        address2 = (dr_datarow["address2"].ToString()),
                        email_add = (dr_datarow["email_add"].ToString()),
                        bureau_check = (dr_datarow["bureau_check"].ToString()),
                        crime_check = (dr_datarow["crime_check"].ToString()),
                        training_status = (dr_datarow["training_status"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                        rm_tagging = (dr_datarow["rm_tagging"].ToString()),
                        approved_flag = (dr_datarow["approved_flag"].ToString()),


                    });
                }
                values.Institution_summary = getSegment1;
            }
            dt_datatable.Dispose();

        }
        public void DaGetIndividualValues(string employee_gid, MdlValuesList values)
        {
            //Individual Data

            msSQL = "select pan_number,sbafirst_name,sbamiddle_name,sbalast_name,aadhar_number,date_of_birth,edu_Qualification," +
                " present_occupation,work_experience,Expagri_business,father_name,mobile_no,Alternativemobile_no,address1,address2,email_add," +
                " bureau_check,crime_check,remarks,rm_tagging,training_status from ocs_mst_tsbaindividual ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment1 = new List<Individual_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment1.Add(new Individual_list
                    {
                        pan_number = (dr_datarow["pan_number"].ToString()),
                        sbafirst_name = (dr_datarow["sbafirst_name"].ToString()),
                        sbamiddle_name = (dr_datarow["sbamiddle_name"].ToString()),
                        sbalast_name = (dr_datarow["sbalast_name"].ToString()),
                        aadhar_number = (dr_datarow["aadhar_number"].ToString()),
                        date_of_birth = (dr_datarow["date_of_birth"].ToString()),
                        edu_Qualification = (dr_datarow["edu_Qualification"].ToString()),
                        present_occupation = (dr_datarow["present_occupation"].ToString()),
                        work_experience = (dr_datarow["work_experience"].ToString()),
                        Expagri_business = (dr_datarow["Expagri_business"].ToString()),
                        father_name = (dr_datarow["father_name"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        Alternativemobile_no = (dr_datarow["Alternativemobile_no"].ToString()),
                        address1 = (dr_datarow["address1"].ToString()),
                        address2 = (dr_datarow["address2"].ToString()),
                        email_add = (dr_datarow["email_add"].ToString()),
                        bureau_check = (dr_datarow["bureau_check"].ToString()),
                        crime_check = (dr_datarow["crime_check"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                        rm_tagging = (dr_datarow["rm_tagging"].ToString()),
                        training_status = (dr_datarow["training_status"].ToString()),

                    });
                }
                values.Individual_listGrp = getSegment1;
            }
            dt_datatable.Dispose();

        }
        //Summary
        public void DaGetSBAInstitutionSummary(string employee_gid, MdlValuesList values)
        {
            //msSQL = "select sbainstitution_gid,pan_number,sbainstitution_name,constitution, " +
            //        " concat(sbafirst_name, ' ', sbamiddle_name, ' ', sbalast_name) as SbaName,designation,rm_tagging,approved_flag " +
            //        " from ocs_mst_tsbainstitution";
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date " +
                   " from ocs_mst_tsainstitution a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                    //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
                    // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
                    //" where a.sa_updated_by = '" + employee_gid + "' " + 
                    " order by a.created_date desc ";
            //dt_datatable = objdbconn.GetDataTable(msSQL);
            //var saOnboardSummary_list = new List<Institution_summarylist>();
            //if (dt_datatable.Rows.Count != 0)
            //{
            //    foreach (DataRow dt in dt_datatable.Rows)
            //    {
            //        saOnboardSummary_list.Add(new Institution_summarylist
            //        {
            //            sbainstitution_gid = (dt["sbainstitution_gid"].ToString()),
            //            pan_number = (dt["pan_number"].ToString()),
            //            sbainstitution_name = (dt["sbainstitution_name"].ToString()),
            //            sbafirst_name = (dt["SbaName"].ToString()),
            //            designation = (dt["designation"].ToString()),
            //            rm_tagging = (dt["rm_tagging"].ToString()),
            //            approved_flag = (dt["approved_flag"].ToString())
            //        });

            //    }   
            //}
            //values.Institution_summary = saOnboardSummary_list;
            //dt_datatable.Dispose();
        }
        public void DaGetSBAIndividualSummary(string employee_gid, MdlValuesList values)
        {
            msSQL = "select sbaindividual_gid,pan_number,concat(sbafirst_name , ' ' ,sbamiddle_name,' ',sbalast_name) as SbaName," +
                    " rm_tagging,approved_flag from ocs_mst_tsbaindividual";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<Individual_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new Individual_list
                    {
                        sbaindividual_gid = (dt["sbainstitution_gid"].ToString()),
                        pan_number = (dt["pan_number"].ToString()),
                        sbafirst_name = (dt["SbaName"].ToString()),
                        rm_tagging = (dt["rm_tagging"].ToString()),
                        approved_flag = (dt["approved_flag"].ToString())
                    });

                }
            }
            values.Individual_listGrp = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }


        //IndividualRegistration
        public bool DaIndividualRegister(string employee_gid, Individual_update values)
        {
            string latitude = "", longitude = "";
            bool sta = false;
            string lsind_refno = "SA_" + DateTime.Now.ToString("ddMMyyyy");
            String lsref_name = "_IN_";
            string msGETRef = objcmnfunctions.GetMasterGID("INDI");
            msGETRef = msGETRef.Replace("INDI", "");

            lsind_refno = lsind_refno + lsref_name + msGETRef;

            msSQL = "Select sadocument_gid from ocs_mst_tsadocumentsupload where regflag='N' and document_title='Pan'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Please Select Document for Pan";
                return false;
            }
            msSQL = "Select sadocument_gid from ocs_mst_tsadocumentsupload where regflag='N' and document_title='Aadhar'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Please select document for Aadhaar";
                return false;
            }
            RegID = objcmnfunctions.GetMasterGID("SBAR");
            // msGetGid = objcmnfunctions.GetMasterGID("SAIN");
            msSQL = "insert into  ocs_mst_tsacontact(sacontact_gid,sa_autogeneratedid,satype_gid,satype_name,sa_pannumber,sa_aadharnumber,sa_firstname,sa_middlename, " +
                        " sa_lastname,date_of_birth,edu_Qualification,present_occupation,work_experience,Expagri_business, " +
                        " created_by,created_date) values " +
                        " ('" + RegID + "','" + lsind_refno + "','" + values.satype_gid + "','" + values.satype_name + "','" + values.pan_number + "','" + values.aadhar_number + "','" + values.sbafirst_name + "','" + values.sbamiddle_name + "', " +
                        " '" + values.sbalast_name + "', ";
            if ((values.date_of_birth == null) || (values.date_of_birth == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.date_of_birth).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += " '" + values.edu_Qualification + "','" + values.present_occupation + "', " +
                    " '" + values.work_experience + "','" + values.Expagri_business + "','ResistrationPortal'," +
                         " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                string[] mobileno = new string[2];
                mobileno[0] = values.mobile_no;
                mobileno[1] = values.Alternativemobile_no;
                mnResult = AddMobileNoIndividual(RegID, mobileno);

                //emailAdd
                msGetGid = objcmnfunctions.GetMasterGID("SAIE");
                msSQL = " insert into ocs_mst_tsacontact2email(" +
                        " sacontact2email_gid," +
                        " sacontact_gid," +
                        " saemail_address," +
                        " saprimary_status," +
                        " created_by," +
                        " created_date)" +
                        " values(" +
                        "'" + msGetGid + "'," +
                        "'" + RegID + "'," +
                        "'" + values.email_add + "'," +
                        "'Yes'," +
                        "'RegistrationPortal'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                //emailAdd
                //address
                MdlSaOnboardAddress objMdlOnboardAddress = new MdlSaOnboardAddress();
                DaGetPostalCodeDetails(values.pincode, objMdlOnboardAddress);
                DaGoogleMapsAPI googlemaps = new DaGoogleMapsAPI();
                GeoCodingResponse ObjGeoCodingResponse = new GeoCodingResponse();
                string Addressval = values.address1 + ',' + values.address2 + ',' + values.pincode;
                ObjGeoCodingResponse = googlemaps.DaGetGeoCoding(Addressval);
                if (ObjGeoCodingResponse.status == "OK")
                {
                    latitude = ObjGeoCodingResponse.results[0].geometry.location.lat.ToString();
                    longitude = ObjGeoCodingResponse.results[0].geometry.location.lng.ToString();

                }
                msGetGid = objcmnfunctions.GetMasterGID("SAIA");
                msSQL = " insert into ocs_mst_tsacontact2address(" +
                    " sacontact2address_gid," +
                    " sacontact_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " primary_status," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + RegID + "'," +
                    "'MSAD202101192'," +
                    "'Registered Office'," +
                    "'" + values.address1 + "'," +
                    "'" + values.address2 + "'," +
                    "'Yes'," +
                    "''," +
                    "'" + values.pincode + "'," +
                    "'" + values.city + "'," +
                    "'" + objMdlOnboardAddress.taluka + "'," +
                    "'" + objMdlOnboardAddress.district + "'," +
                    "'" + objMdlOnboardAddress.state + "'," +
                    "'" + objMdlOnboardAddress.country + "'," +
                    "'" + latitude + "'," +
                    "'" + longitude + "'," +
                    "'RegistrationPortal'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                //address
                //  msGetGid1 = objcmnfunctions.GetMasterGID("SBAD");
                //msSQL = "insert into ocs_mst_tsbaindividualdocupload (sbaindividual_document_upload_gid,sbaindividual_gid,pan,aadhar, " +
                //        " passport_photo,created_by,created_date) Values('" + msGetGid1 + "','" + msGetGid + "','" + values.pan + "', " +
                //        "' " + values.aadhar + "','" + values.passport_photo + "','" + employee_gid + "'," +
                //         " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    msSQL = "update ocs_mst_tsadocumentsupload set sacontact_gid='" + RegID + "' ,regflag='Y' where sacontact_gid='Reg'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Registered Successfully";
                    sta = values.status;
                    return sta;

                }
                else
                {
                    values.status = false;
                    values.message = "Registration Failed";
                    sta = values.status;
                    return sta;


                }

            }
            string mSQL = "Delete * from ocs_mst_tsadocumentsupload where regflag='N' and sacontact_gid='Reg'";
            mnResult = objdbconn.ExecuteNonQuerySQL(mSQL);
            return sta;

        }
        public void DaGetPostalCodeDetails(string postal_code, MdlSaOnboardAddress objMdlOnboardAddress)
        {
            try
            {
                msSQL = "select city,taluka,district, state from ocs_mst_tpostalcode where " +
                        " postalcode_value='" + postal_code + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        objMdlOnboardAddress.city = (dr_datarow["city"].ToString());
                        objMdlOnboardAddress.taluka = (dr_datarow["taluka"].ToString());
                        objMdlOnboardAddress.district = (dr_datarow["district"].ToString());
                        objMdlOnboardAddress.state = (dr_datarow["state"].ToString());

                    }

                }
                dt_datatable.Dispose();

                objMdlOnboardAddress.status = true;
            }
            catch
            {
                objMdlOnboardAddress.status = false;
            }

        }

        public int AddMobileNoInstitution(string regID, string[] mobileno)
        {
            try
            {
                foreach (string mobno in mobileno)
                {
                    if (mobno != null)
                    {
                        msGetGid2 = objcmnfunctions.GetMasterGID("SAOC");

                        msSQL = " insert into ocs_mst_tsainstitution2mobileno(" +
                                " sainstitution2mobileno_gid," +
                                " sacontactinstitution_gid," +
                                " samobile_no," +
                                " saprimary_status," +
                                " sawhatsapp_no," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid2 + "'," +
                                "'" + regID + "'," +
                                "'" + mobno + "'," +
                                "'Yes' ," +
                                "'No' ," +
                                "'RegistrationPortal'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        objdbconn.CloseConn();

                    }
                }
            }
            catch (Exception ex)
            {

            }
            return mnResult;
        }
        public int AddMobileNoIndividual(string contact_gid, string[] mobileno)
        {

            try
            {
                foreach (string mobno in mobileno)
                {
                    if (mobno != null)
                    {

                        msGetGid = objcmnfunctions.GetMasterGID("SAIM");
                        //  msGetGid1 = objcmnfunctions.GetMasterGID("SBAI");
                        msSQL = " insert into ocs_mst_tsacontact2mobileno(" +
                                " sacontact2mobileno_gid," +
                                " sacontact_gid," +
                                " samobile_no," +
                                " saprimary_status," +
                                " sawhatsapp_no," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + contact_gid + "'," +
                                "'" + mobno + "'," +
                                "'Yes' ," +
                                "'No' ," +
                                "'RegistrationPortal'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        objdbconn.CloseConn();

                    }
                }
            }
            catch (Exception ex)
            {

            }
            return mnResult;
        }

        //document
        public bool DaSaInstitutionDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            //string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsid_document = "";
            string lsdocument_title = httpRequest.Form["document_name"].ToString();

            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;


            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("SACD");
                        msGetGid1 = objcmnfunctions.GetMasterGID("SBAI");

                        msSQL = " insert into ocs_mst_tsainstitutiondocumentsupload(" +
                                " sainstidocument_gid," +
                                " sacontactinstitution_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                " safile_path," +
                                " updated_by,updated_date,regflag)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'Reg'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'RegistrationPortal'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','N')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }

            return true;
        }
       
        public bool DaAddDocuments(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            //string lsid_document = httpRequest.Form["document_id"].ToString();
            string lsdocument_title = httpRequest.Form["document_name"].ToString();
            string lsid_document = "";
            // string lsdocument_title = "";
            //   string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            // string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            //string lsfile_no = httpRequest.Form["file_no"].ToString();

            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";




                        msGetGid = objcmnfunctions.GetMasterGID("SADO");

                        msSQL = " insert into ocs_mst_tsadocumentsupload(" +
                               " sadocument_gid," +
                                " sacontact_gid," +
                                " document_title ," +
                                " sadocument_name," +
                                " sadocument_id," +
                                " safile_path," +
                                " created_by,created_date,regflag)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'Reg'," +
                                 "'" + lsdocument_title + "'," +
                                "'" + httpPostedFile.FileName + "'," +
                                 "'" + lsid_document + "'," +
                                  "'" + lspath + msdocument_gid + FileExtension + "'," +
                                 "'Registration'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','N')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }

                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;

        }
        //Summary
        public void DaGetSaInstitutionSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus, " +
                    " a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat  , " +
                     " (a.origination) as RecordSource,a.verify_flag,renewal_flag, " +
                       " if (referred_by is null,'--',referred_by) as referred_by, " +
                          " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where a.approvalstatus in ('Registration Submitted','Submitted For Renewal') " +
            //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
            // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
            //" where a.sa_updated_by = '" + employee_gid + "' " + 
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = dt["Renewal_status"].ToString(),
                        update_flag = dt["update_flag"].ToString(),
                        renewal_flag = dt["renewal_flag"].ToString(),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetSaInstitutionCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.training_status,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag ,CONCAT(FLOOR(timestampdiff(day, a.verify_date, now())), ' days ',MOD(timestampdiff(hour, a.verify_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.verify_date, now()), '60'), 'Mins') as tat , " +
                       " (a.origination) as RecordSource,a.finalinstitutionapproval_flag," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                          " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where(verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or a.created_by = '" + employee_gid + "' ) and " +
                       " a.approvalstatus in ('Pending Assignment','Rejected','Approved','Query Raised by Maker','Query Raised by Checker','Query Raised by Approver','Maker Pending','Checker Pending','Approver Pending')" +
                       //" a.approvalstatus in ('Pending Assignment')" +
            //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
            // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
            //" where a.sa_updated_by = '" + employee_gid + "' " + 
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = dt["Renewal_status"].ToString(),
                        finalinstitutionapproval_flag = (dt["finalinstitutionapproval_flag"].ToString()),
                        update_flag = (dt["update_flag"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        training_status = (dt["training_status"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }


        public void DaGetInstitutionRejectedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource, CONCAT(FLOOR(timestampdiff(day, a.verify_date, now())), ' days ',MOD(timestampdiff(hour, a.verify_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.verify_date, now()), '60'), 'Mins') as tat ,  " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                       " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected') " +
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = dt["Renewal_status"].ToString(),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        //Summary     
        public void DaGetIndividualRejectedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource, CONCAT(FLOOR(timestampdiff(day, a.verify_date, now())), ' days ',MOD(timestampdiff(hour, a.verify_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.verify_date, now()), '60'), 'Mins') as tat,  " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected' ) " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            tagging_flag = (dr_datarow["tagging_flag"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetOnboardSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource,CONCAT(FLOOR((DATEDIFF(now(),a.created_date))), ' days ') as tat,   " +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " a.renewal_flag,(a.renewal_status) as Renewal_status from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where a.approvalstatus in ('Registration Submitted','Submitted For Renewal') " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {

                        if (dr_datarow["update_flag"].ToString() == null || dr_datarow["update_flag"].ToString() == "")
                        {
                            update = "N";
                        }
                        else
                        {
                            update = dr_datarow["update_flag"].ToString();
                        }
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_status = dr_datarow["Renewal_status"].ToString(),
                            renewal_flag = dr_datarow["renewal_flag"].ToString(),
                            update_flag = update,
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            tagging_flag = (dr_datarow["tagging_flag"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaInstitutionVerification(string employee_gid, InstitutioneditVerification values)
        {

            msSQL = " select count(*) as openquery from ocs_mst_tbdverifyinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                           " and bdverifyinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            if (values.openquerycount == "0")
            {

                msSQL = " SELECT sacontactinstitution_gid,satype_name,satype_gid,saentitytype_gid,saentitytype_name,sa_associatename,sa_contactfirstname,sa_contactmiddlename,sa_contactlastname," +
                   " sa_yearsinbusiness,sa_monthsinbusiness,date_format(sa_dateofincorporation,'%d-%m-%Y') as sa_dateofincorporation,date_format(sa_companystdate,'%d-%m-%Y') as sa_companystdate," +
                   " sa_companypan,sa_apputr,date_format(sa_appcrediteddate,'%d-%m-%Y') as sa_appcrediteddate,sa_appcreditedamount FROM " +
                   " ocs_mst_tsainstitution where sacontactinstitution_gid ='" + values.sacontactinstitution_gid + "' ";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    sacontactinstitution_gid = objODBCDatareader["sacontactinstitution_gid"].ToString();
                    sa_associatename = objODBCDatareader["sa_associatename"].ToString();
                    Editsa_dateofincorporation = objODBCDatareader["sa_dateofincorporation"].ToString();
                    Editsa_companystdate = objODBCDatareader["sa_companystdate"].ToString();
                    Editsa_appcrediteddate = objODBCDatareader["sa_appcrediteddate"].ToString();
                }
                if (!string.IsNullOrEmpty(values.remarks))
                {
                    if (values.remarks.Contains("'"))
                    {
                        values.remarks = values.remarks.Replace("'", "");
                    }
                }


                msSQL = " update ocs_mst_tsainstitution set " +
                     " sa_onboard_flag='Y'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " verify_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                      " approvalstatus='Pending Assignment'," +
                     " remarks='" + values.remarks + "',verify_flag = 'Y',onboardinginstitution_flag = 'Y' " +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {

                    try
                    {
                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details

                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_autogeneratedid,i.created_by,i.sa_reportingmanager,i.updated_by,i.updated_date, " +
                             " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                             " date_format(i.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                                " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname,concat(b.user_firstname, '  ', b.user_lastname) as updated_by from ocs_mst_tsainstitution i join " +
                                " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                 " join hrm_mst_temployee f on f.employee_gid = i.updated_by join adm_mst_tuser b on b.user_gid = f.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsupdated_date = objODBCDatareader["updated_date"].ToString();
                            lsupdated_by = objODBCDatareader["updated_by"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            sa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscreated_by.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                        "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                        "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = "Request for SBA Application Assignment ";
                        body = "Dear sir/madam,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA application is submitted. Please assign users for vetting, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Reference ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Business Development Approval date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Approved by:</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name:</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAbussverifymail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;
                    }
                    catch (Exception ex)
                    {
                        values.message = ex.ToString();
                        values.status = false;
                        return;
                    }
                    values.status = true;
                    values.message = "Verified successfully";
                    return;
                }
            }
            else
            {
                values.status = false;
                values.message = "Verify can't be done,the query is still open";
                return;
            }


        }
        public void DaGetOnboardCompletedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.training_status,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag, " +
                        " (a.origination) as RecordSource,a.finalindividualapproval_flag, " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                          " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where (verify_flag='Y' or verify_flag ='N' or verify_flag is null  or a.created_by = '" + employee_gid + "') " +
                        " and a.approvalstatus in ('Pending Assignment','Rejected','Approved','Query Raised by Maker','Query Raised by Checker','Query Raised by Approver','Maker Pending','Checker Pending','Approver Pending')" +
                        // " and a.approvalstatus in ('Pending Assignment')" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            update_flag = (dr_datarow["update_flag"].ToString()),
                            finalindividualapproval_flag = (dr_datarow["finalindividualapproval_flag"].ToString()),

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            tagging_flag = (dr_datarow["tagging_flag"].ToString()),
                            training_status = (dr_datarow["training_status"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public bool DaIndividualVerifyUpdate(string employee_gid, IndividualeditVerification values)
        {
            msSQL = " update ocs_mst_tsacontact set " +
                    " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " remarks='" + values.remarks + "'" +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Training status updated successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error occured while individual training status verifying";
                return false;
            }


        }

        public void DaIndividualVerification(string employee_gid, IndividualeditVerification values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tbdverifyindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                            " and bdverifyindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            if (values.openquerycount == "0")
            {
                if (!string.IsNullOrEmpty(values.remarks))
                {
                    if (values.remarks.Contains("'"))
                    {
                        values.remarks = values.remarks.Replace("'", "");
                    }
                }


                msSQL = " update ocs_mst_tsacontact set " +
                    " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " verify_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " approvalstatus='Pending Assignment'," +
                     " remarks='" + values.remarks + "',verify_flag='Y',onboardingindividual_flag='Y' " +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    msSQL = "Insert into ocs_mst_tsacontactupdatelog(" +
                  " sacontactupdatelog_gid, " +
                  " sacontact_gid, " +
                  //" satype_gid," +
                  // " satype_name," +
                  // " saentitytype_gid," +
                  // " saentitytype_name," +
                  " sa_firstname," +
                  " sa_middlename," +
                  " sa_lastname," +
                  " sa_pannumber," +
                  " sa_aadharnumber," +
                  " updated_by," +
                  " updated_date)" +
                  " values (" +
                  "'" + msGetGid + "'," +
                  "'" + values.sacontact_gid + "'," +
                  //"'" + values.satype_gid + "'," +
                  //"'" + values.satype_name + "'," +
                  //"'" + values.saentitytype_gid + "'," +
                  //"'" + values.saentitytype_name + "'," +
                  "'" + values.sa_firstname + "'," +
                            "'" + values.sa_middlename + "'," +
                            "'" + values.sa_lastname + "'," +
                            "'" + values.sa_pannumber + "'," +
                            "'" + values.sa_aadharnumber + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    try
                    {
                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details


                        msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.sa_reportingmanager,i.created_by," +
                               " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                               " date_format(i.updated_date,'%d-%m-%Y %h:%i %p') as updated_date, " +
                           " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname,concat(b.user_firstname,'  ',b.user_lastname) as updated_by from ocs_mst_tsacontact i" +
                               "  join hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                           "  join hrm_mst_temployee f on f.employee_gid = i.updated_by join adm_mst_tuser b on b.user_gid = f.user_gid " +
                               " where sacontact_gid = '" + values.sacontact_gid + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsupdated_date = objODBCDatareader["updated_date"].ToString();
                            lsupdated_by = objODBCDatareader["updated_by"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();
                            lscreated_by = objODBCDatareader["created_by"].ToString();

                        }
                        objODBCDatareader.Close();

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lscreated_by.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                     "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                     "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);


                        sub = "Request for SBA Application Assignment ";
                        body = "Dear sir/madam,<br />";
                        body = body + "<br />";
                        body = body + "Greetings,  <br />";
                        body = body + "<br />";
                        body = body + "The following SBA application is submitted. Please assign users for vetting, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Reference ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Business Development Approval date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Approved by:</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name:</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into systems to verify the Onboarding Details.";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";

                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();
                        lsto_mail = ConfigurationManager.AppSettings["SAbussverifymail"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }


                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;
                    }
                    catch (Exception ex)
                    {
                        values.message = ex.ToString();
                        values.status = false;
                        return;
                    }



                    values.status = true;
                    values.message = "Verified successfully";
                    return;
                }
            }
            else
            {
                values.status = false;
                values.message = "Verify can't be done,the query is still open";
                return;
            }


        }
        public void DaGetSaVerificationpendingCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = " select(select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.verify_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' order by a.created_date desc)   AS Institution_Count, " +
                     " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.verify_flag = 'Y' and a.finalindividualapproval_flag = 'N' order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }

        public void DaGetSaonboardingCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus not in ('Approved','Rejected','BD Verification Rejected','Application Rejected') )   AS Institution_Count, " +
                    " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected') )   AS institution_rejectedcount, " +
                    " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus='Approved' and a.samfin_code !='' )   AS institution_groupingcount, " +
                   " (select count(sacontact_gid) from ocs_mst_tsacontact a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected')) As individual_rejectedcount, " +
                     " (select count(sacontact_gid) from ocs_mst_tsacontact a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus = 'Approved' and a.samfin_code !='') As individual_groupingcount, " +
                    " (select count(sacontact_gid) from ocs_mst_tsacontact a  where " +
                    " (rm_tagging = '" + employee_gid + "' or a.created_by = '" + employee_gid + "') and a.approvalstatus not in ('Approved','Rejected','BD Verification Rejected','Application Rejected')) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institution_rejectedcount = objODBCDatareader["institution_rejectedcount"].ToString();
                values.institution_groupingcount = objODBCDatareader["institution_groupingcount"].ToString();
                values.individual_rejectedcount = objODBCDatareader["individual_rejectedcount"].ToString();
                values.individual_groupingcount = objODBCDatareader["individual_groupingcount"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }

        public void DaGetSaonboardingBDVerificationCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a" +
                     " where a.approvalstatus = 'Registration Submitted' order by a.created_date desc )   AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus = 'Registration Submitted'  order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();


        }
        public void DaGetSaonboardingBDVerificationRMCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a" +
                     " where a.approvalstatus = 'Onboard Pending' order by a.created_date desc )   AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where " +
                        " a.approvalstatus in ('Onboard Pending')  order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaonboardingBDVerificationCADCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a" +
                     " where a.approvalstatus in ('Maker Pending','Checker Pending','Query Raised by Maker','Query Raised by Checker','Approver Pending','Query Raised by Approver','Pending Assignment') " + 
                     " order by a.created_date desc )  AS Institution_Count, " +
                     "  (select count(sacontact_gid) from ocs_mst_tsacontact a where " +
                     " (verify_flag = 'Y' or verify_flag = 'N'  or a.created_by = '" + employee_gid + "') and " +
                        " a.saveasdraftadd_flag='N'and a.approvalstatus in ('Maker Pending','Checker Pending','Query Raised by Maker','Query Raised by Checker','Approver Pending', " +
                        " 'Query Raised by Approver','Pending Assignment') " +
                     //" a.approvalstatus in ('Maker Pending','Checker Pending','Query Raised by Maker','Query Raised by Checker','Approver Pending','Query Raised by Approver','Pending Assignment') " +
                     " order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaSaonboardingBDVerificationRejectedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected') order by a.created_date desc )   AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus in ('Rejected','BD Verification Rejected','Application Rejected')  order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaonboardingBDVerificationCompletedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where(verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or  " +
                     "a.created_by = '" + employee_gid + "' ) and a.approvalstatus in ('Pending Assignment','Rejected','Approved','Query Raised by Maker','Query Raised by Checker','Query Raised by Approver','Maker Pending','Checker Pending','Approver Pending')  order by a.created_date desc )   AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where (verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or a.created_by = '" + employee_gid + "') " +
                        " and a.approvalstatus in ('Pending Assignment','Rejected','Approved','Query Raised by Maker','Query Raised by Checker','Query Raised by Approver','Maker Pending','Checker Pending','Approver Pending') order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaVerificationapprovedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = " select(select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.onboardinginstitution_flag = 'Y' and a.approvalstatus='Approved'  order by a.created_date desc)   AS Institution_Count, " +
                     " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.onboardingindividual_flag = 'Y' and a.approvalstatus='Approved'  order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaVerificationRejectedCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = " select(select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.onboardinginstitution_flag = 'Y' and a.approvalstatus='Rejected'  order by a.created_date desc)   AS Institution_Count, " +
                     " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus='Rejected'  order by a.created_date desc) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }

        public void DaSaonboardingBDVerificationDeferredCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = " select(select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalstatus ='Deferred' order by a.created_date desc)   AS Institutiondeferred_Count, " +
                     " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus ='Deferred' order by a.created_date desc ) As Individualdeferred_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institutiondeferred_count = objODBCDatareader["Institutiondeferred_Count"].ToString();
                values.individualdeferred_count = objODBCDatareader["Individualdeferred_Count"].ToString();
            }
            objODBCDatareader.Close();
        }

        public bool DaInstitutionRMTaggedUpdate(string employee_gid, InstitutioneditVerification values)
        {           

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();


            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);


            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);


            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //          " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsainstitution set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "', " +
                    " created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIL");

            msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                  " taggedemployeeinstitutionlog_gid , " +
                  " sacontactinstitution_gid," +
                  " institutiontaggedemployee_gid," +
                  " institutiontaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontactinstitution_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                  " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);

                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.created_by,sa_autogeneratedid, " +
                            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                             " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        saUser = objODBCDatareader["user_firstname"].ToString();
                        RegistrationID = objODBCDatareader["sa_autogeneratedid"].ToString();

                    }
                    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                         " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                            " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    objODBCDatareader.Close();

                    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + RegistrationID + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Tagged successfully'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger

                values.status = true;
                values.message = "RM tagged successfully";
                return true;


            }


            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }


        public bool DaIndividualRMTaggedUpdate(string employee_gid, IndividualeditVerification values)
        {
            string msql;

            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);

            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //        " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsacontact set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "',created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsacontact where sacontact_gid = '" + values.sacontact_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIN");

            msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                  " taggedemployeeindividuallog_gid , " +
                  " sacontact_gid," +
                  " individualtaggedemployee_gid," +
                  " individualtaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontact_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                 " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
          " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
      " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
          " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
             " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                    }


                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                         " where sacontact_gid = '" + values.sacontact_gid + "'";
                    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                            " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Verification'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
                values.status = true;
                values.message = "RM tagged successfully";
                return true;




            }
            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }
        public void DaInstitutionRMTaggedLog(string sacontactinstitution_gid, InstitutioneditVerification values)
        {
            try
            {
                msSQL = " SELECT a.sacontactinstitution_gid,a.taggedemployeeinstitutionlog_gid,a.rmtagged_remarks,a.institutiontaggedemployee_gid,a.institutiontaggedemployee_name,a.approval_status,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " FROM ocs_mst_ttaggedemployeeinstitutionlog a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.sacontactinstitution_gid ='" + sacontactinstitution_gid + "' order by a.taggedemployeeinstitutionlog_gid asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var gettaggedinstitution_list = new List<taggedinstitution_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        gettaggedinstitution_list.Add(new taggedinstitution_list
                        {
                            sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                            taggedemployeeinstitutionlog_gid = (dr_datarow["taggedemployeeinstitutionlog_gid"].ToString()),
                            taggedemployeeinstitution_name = (dr_datarow["institutiontaggedemployee_name"].ToString()),
                            approval_status = (dr_datarow["approval_status"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            rmtagged_remarks = (dr_datarow["rmtagged_remarks"].ToString()),

                        });
                    }
                    values.taggedinstitution_list = gettaggedinstitution_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }
        public void DaIndividualRMTaggedLog(string sacontact_gid, IndividualeditVerification values)
        {
            try
            {
                msSQL = " SELECT a.sacontact_gid,a.taggedemployeeindividuallog_gid,a.rmtagged_remarks,a.individualtaggedemployee_gid,a.individualtaggedemployee_name,a.approval_status,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " FROM ocs_mst_ttaggedemployeeindividuallog a" +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where a.sacontact_gid ='" + sacontact_gid + "' order by a.taggedemployeeindividuallog_gid asc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var gettaggedindividual_list = new List<taggedindividual_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        gettaggedindividual_list.Add(new taggedindividual_list
                        {
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            taggedemployeeindividuallog_gid = (dr_datarow["taggedemployeeindividuallog_gid"].ToString()),
                            individualtaggedemployee_name = (dr_datarow["individualtaggedemployee_name"].ToString()),
                            approval_status = (dr_datarow["approval_status"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            rmtagged_remarks = (dr_datarow["rmtagged_remarks"].ToString()),

                        });
                    }
                    values.taggedindividual_list = gettaggedindividual_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }
        public void DaIndividualRejected(string employee_gid, IndividualeditVerification values)
        {
            msSQL = " select count(*) as openquery from ocs_mst_tbdverifyindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "'" +
                           " and bdverifyindividualraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);

            if (values.openquerycount == "0")
            {


                msSQL = " update ocs_mst_tsacontact set " +
                    " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " rejected_remarks='" + values.rejected_remarks + "'," +
                     " approvalstatus='BD Verification Rejected'," +
                     " remarks='" + values.remarks + "'" +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Rejected successfully";
                    return;
                }
            }
            else
            {
                values.status = false;
                values.message = "Rejected can't be done,the query is still open";
                return;
            }
        }
        public void DaInstitutionRejected(string employee_gid, InstitutioneditVerification values)
        {

            msSQL = " select count(*) as openquery from ocs_mst_tbdverifyinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'" +
                           " and bdverifyinstitutionraisequery_status = 'Query Raised'";
            values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
            if (values.openquerycount == "0")
            {
                msSQL = " update ocs_mst_tsainstitution set " +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                      " rejected_remarks='" + values.rejected_remarks + "'," +
                     " approvalstatus='BD Verification Rejected'," +
                     " remarks='" + values.remarks + "'" +
                     " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Rejected successfully";
                    return;
                }
            }
            else
            {
                values.status = false;
                values.message = "Rejected can't be done,the query is still open";
                return;
            }

        }
        public void DaSbaReport(SbaReport objsbaReport)
        {
            string sheetName = string.Empty;
            {

                if ((objsbaReport.satype_name == "Company") && ((objsbaReport.approvalstatus != "") && (objsbaReport.approvalstatus != null)))
                {
                    sheetName = "Company - " + objsbaReport.approvalstatus;
                    var aplstatus = objsbaReport.approvalstatus;
                    msSQL = "call ocs_rpt_sbaaplcompany('" +aplstatus+ "')";
                    dt_datatable = objdbconn.GetDataTable(msSQL);

                }
                else if ((objsbaReport.satype_name == "Company") && ((objsbaReport.approvalstatus == "") || (objsbaReport.approvalstatus == null)))
                {
                    sheetName = "Company";
                    msSQL = "call ocs_rpt_sbacompany";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                }
                else if ((objsbaReport.satype_name == "Individual") && ((objsbaReport.approvalstatus != "") && (objsbaReport.approvalstatus != null)))
                {
                    sheetName = "Individual - " + objsbaReport.approvalstatus;
                    var aplstatus = objsbaReport.approvalstatus;
                    msSQL = "call ocs_rpt_sbaaplindividual('"+aplstatus+"')";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                }

                else if ((objsbaReport.satype_name == "Individual") && ((objsbaReport.approvalstatus == "") || (objsbaReport.approvalstatus == null)))
                {
                    sheetName = "Individual";
                    msSQL = "call ocs_rpt_sbaindividual";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                }
                else
                {
                    sheetName = "SBA report list";
                    msSQL = "call ocs_rpt_sbacombinedreport";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                }

                string lscompany_code = string.Empty;

                //ExcelPackage excel = new ExcelPackage();
                MemoryStream ms = new MemoryStream();
                ExcelPackage excel = new ExcelPackage(ms);
                var workSheet = excel.Workbook.Worksheets.Add(sheetName);
                try
                {
                    msSQL = " select company_code from adm_mst_tcompany";

                    lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                    objsbaReport.lsname = "SBAReport.xlsx";
                    var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "SBA/SBA Report/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                    objsbaReport.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "SBA/SBA Report/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + objsbaReport.lsname;
                    objsbaReport.lscloudpath = lscompany_code + "/" + "SBA/SBA Report/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + objsbaReport.lsname;
                    bool exists = System.IO.Directory.Exists(path);
                    /*if (!exists)
                    {
                       // System.IO.Directory.CreateDirectory(path);
                    }*/
                    workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                    FileInfo file = new FileInfo(objsbaReport.lspath);
                    using (var range = workSheet.Cells[1, 1, 1, 53])  //Address "A1:A29"

                    {
                        range.Style.Font.Bold = true;
                        // range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //  range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                        //  range.Style.Font.Color.SetColor(Color.White);
                    }
                    excel.SaveAs(ms);
                    bool status;
                    status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "SBA/SBA Report/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + objsbaReport.lsname, ms);
                    ms.Close();
                }
                catch (Exception ex)
                {
                    objsbaReport.status = false;
                    objsbaReport.message = "Failure";
                }
                objsbaReport.lscloudpath = objcmnstorage.EncryptData(objsbaReport.lscloudpath);
                objsbaReport.lspath = objcmnstorage.EncryptData(objsbaReport.lspath);
                objsbaReport.status = true;
                objsbaReport.message = "Success";
            }
        }
        public void DaGetInstitutionReport(string employee_gid, reportValues values)
        {
            string update = string.Empty;
            try
            {
                //msSQL = " select  a.sa_autogeneratedid,sa_associatename,saentitytype_name,approvalstatus,a.created_by,a.created_date,sa_companypan,b.bureau_score," +
                //        " training_status,agreementexecutiondate,agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus," +
                //        " sa_appcreditedamount,sa_apputr from ocs_mst_tsainstitution a inner join ocs_mst_tsainstitution2bureau b on b.sacontactinstitution_gid = a.sacontactinstitution_gid " +
                //        " where a.approvalstatus='" + values.approvalstatus + "' order by a.sa_autogeneratedid desc";
              /*  msSQL = " select DISTINCT(a.sa_autogeneratedid),'Company'as sba_associatetype,sa_associatename,saentitytype_name,approvalstatus,sa_reportingmanager," +
                        " concat(ua.user_firstname, ' ', ua.user_lastname, ' / ', ua.user_code) as approvedBy," +
 " concat(u.user_firstname, ' ', u.user_lastname, ' / ', u.user_code) as created_by,a.created_date,sa_companypan,GROUP_CONCAT(b.bureau_score) as bureau_score ,  " +
 " training_status,agreementexecutiondate,agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus," +
 " sa_appcreditedamount,sa_apputr from ocs_mst_tsainstitution a left join ocs_mst_tsainstitution2bureau b on " +
 " b.sacontactinstitution_gid = a.sacontactinstitution_gid" +
 " left join hrm_mst_temployee h on h.employee_gid = a.created_by" +
" left join adm_mst_tuser u on h.user_gid = u.user_gid" +
 " left join hrm_mst_temployee he on he.employee_gid = a.approved_by" +
 " left join adm_mst_tuser ua on he.user_gid = ua.user_gid  where a.approvalstatus='" + values.approvalstatus + "' group by a.sacontactinstitution_gid  desc";
*/
                var aplstatus = values.approvalstatus;
                msSQL = "call ocs_rpt_sbaaplcompany('" + aplstatus + "')";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsaOnboardReport_list = new List<reportList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getsaOnboardReport_list.Add(new reportList
                        {
                            approvedBy = (dt["Approved_by"].ToString()),
                            // sa_reportingmanager = (dt["sa_reportingmanager"].ToString()),

                            sa_updated_by = (dt["RM_Name"].ToString()),
                            sa_associatename = (dt["SBA_Name"].ToString()),
                            saentitytype_name = (dt["SA_Entity_Type"].ToString()),
                           // sba_associatetype = (dt["sba_associatetype"].ToString()),
                            sa_updated_date = (dt["Created_Date"].ToString()),
                            sa_autogeneratedid = (dt["SBA_Auto_Generated_ID"].ToString()),
                            approvalstatus = (dt["Approval_Status"].ToString())

                        });

                    }
                }
                values.reportList = getsaOnboardReport_list;
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {

            }
        }
        public void DaGetIndividualReport(string employee_gid, reportValues values)
        {
            string update = string.Empty;
            try
            {
                //msSQL = "select distinct a.sa_autogeneratedid,concat(sa_firstname,' ' ,sa_middlename,' ' ,sa_lastname) as sa_firstname,saentitytype_name,approvalstatus,a.created_by,a.created_date,sa_pannumber,b.bureau_score,training_status,agreementexecutiondate, " +
                // " agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus,sa_appcreditedamount,sa_apputr from ocs_mst_tsacontact a " +
                // " inner join ocs_mst_tsaindividual2bureau b on b.sacontact_gid = a.sacontact_gid  where a.approvalstatus ='" + values.approvalstatus + "' order by a.sa_autogeneratedid desc";
            /*    msSQL = "select DISTINCT(a.sa_autogeneratedid), 'Individual'as sba_associatetype,sa_reportingmanager," +
                    " concat(sa_firstname, ' ', sa_middlename, ' ', sa_lastname) as sa_associatename,saentitytype_name,approvalstatus," +
 " concat(ua.user_firstname, ' ', ua.user_lastname, ' / ', ua.user_code) as approvedBy," +
 " concat(u.user_firstname, ' ', u.user_lastname, ' / ', u.user_code) as created_by,a.created_date,sa_pannumber,training_status ," +
 " agreementexecutiondate,  agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus,sa_appcreditedamount," +
 " sa_apputr from ocs_mst_tsacontact a  left join ocs_mst_tsaindividual2bureau b on b.sacontact_gid = a.sacontact_gid" +
 " left join hrm_mst_temployee h on h.employee_gid = a.created_by" +
 " left join adm_mst_tuser u on h.user_gid = u.user_gid" +
 " left join hrm_mst_temployee he on he.employee_gid = a.approved_by" +
 " left join adm_mst_tuser ua on he.user_gid = ua.user_gid  where a.approvalstatus ='" + values.approvalstatus + "' group by a.sacontact_gid desc ";
*/
                var aplstatus = values.approvalstatus;
                msSQL = "call ocs_rpt_sbaaplindividual('" + aplstatus + "')";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsaOnboardReport_list = new List<reportList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getsaOnboardReport_list.Add(new reportList
                        {

                            sa_updated_by = (dt["RM_Name"].ToString()),
                            sa_associatename = (dt["SBA_Name"].ToString()),
                            saentitytype_name = (dt["SA_Entity_Type"].ToString()),
                           // sba_associatetype = (dt["sba_associatetype"].ToString()),
                            sa_updated_date = (dt["Created_Date"].ToString()),
                            sa_autogeneratedid = (dt["SBA_Auto_Generated_ID"].ToString()),
                            approvalstatus = (dt["Approval_Status"].ToString()),
                            approvedBy = (dt["Approved_by"].ToString()),


                        });

                    }
                }
                values.reportList = getsaOnboardReport_list;
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {

            }

        }
        public void DaGetIndividualReportOnly(string employee_gid, reportValues values)
        {
            string update = string.Empty;
            try
            {
                /*msSQL = "select DISTINCT(a.sa_autogeneratedid), 'Individual'as sba_associatetype,sa_reportingmanager," +
 " concat(sa_firstname, ' ', sa_middlename, ' ', sa_lastname) as sa_associatename,saentitytype_name,approvalstatus," +
 " concat(ua.user_firstname, ' ', ua.user_lastname, ' / ', ua.user_code) as approvedBy," +
 " concat(u.user_firstname, ' ', u.user_lastname, ' / ', u.user_code) as created_by,a.created_date,sa_pannumber,training_status," +
 " agreementexecutiondate,  agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus,sa_appcreditedamount," +
 " sa_apputr from ocs_mst_tsacontact a  left join ocs_mst_tsaindividual2bureau b on b.sacontact_gid = a.sacontact_gid" +
 " left join hrm_mst_temployee h on h.employee_gid = a.created_by" +
 " left join adm_mst_tuser u on h.user_gid = u.user_gid" +
 " left join hrm_mst_temployee he on he.employee_gid = a.approved_by" +
 " left join adm_mst_tuser ua on he.user_gid = ua.user_gid group by a.sacontact_gid desc";
*/
                /*      //
                      msSQL = "select  DISTINCT(a.sa_autogeneratedid) as SBA_Auto_Generated_ID, 'Individual'as sba_associatetype,concat(sa_firstname,' ' ,sa_middlename,' ' ,sa_lastname) as SBA_Name, concat(u.user_firstname,u.user_lastname,' / ',u.user_code) as RM_Name,(case when substring(a.sacontact_gid,1,4) ='SBAR' then 'Online' else 'Internal' end) as Record_source, " +
        " a.saentitytype_name as SA_Entity_Type, b.addresstype_name as Address_Type, b.addressline1 as Address_Line_1, b.addressline2 as Address_Line_2,  " +
        " b.city as City, b.state as State, b.postal_code as Pincode, a.sa_pannumber as PAN_Value, a.sa_aadharnumber as	Aadhar,  " +
        " '' as GST_Number,	'' as GST_State, concat(a.sa_firstname,a.sa_middlename,a.sa_lastname) as Contact_Person_Name, '' as Designation,  " +
        " d.samobile_no as Mobile_Number ,c.saemail_address as Email_address,a.sa_appcreditedamount as Application_fee_amount,  " +
        " a.sa_apputr as UTR, date_format(a.sa_appcrediteddate,'%d-%m-%Y %h:%i %p') as Credited_Date,	a.saaccount_number as Bank_Account_Number,a.saaccountholder_name as	Account_Holder_Name,  " +
        " a.sabank_name as Bank_Name,a.sabranch_name as Bank_Branch,a.saifsc_code as IFSC_Code,  " +
        " f.salead_name as Lead_Name, f.sasector_industry as Lead_Sector,GROUP_CONCAT(DISTINCT(CONCAT(e.bureauname_name,' : ',e.bureau_score,' : ' ,date_format(e.bureauscore_date, '%d-%m-%Y') )) ORDER BY e.bureauname_name SEPARATOR ' / ' ) as 'Credit_Check & Credit_Score & Score_as_On',a.training_status as Training_Status,  " +
        " date_format(a.agreementexecutiondate,'%d-%m-%Y %h:%i %p') as Samfin_Agreement_Execution_Date, date_format(a.agreementexpirydate,'%d-%m-%Y %h:%i %p') as	Samfin_Agreement_Expiry_Date ,a.agreementstatus as Samfin_Agreement_Status,  " +
        " date_format(a.agroagreementexecutiondate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Execution_Date, date_format(a.agroagreementexpirydate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Expiry_Date,a.agroagreementstatus as	SamAgro_Agreement_Status,  " +
        " a.approvalstatus as Approval_Status, concat(l.user_firstname,l.user_lastname,' / ',l.user_code) as Approved_by, date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as Approved_on,  " +
        "  date_format(a.created_date,'%d-%m-%Y %h:%i %p') as Created_Date  " +
        " from ocs_mst_tsacontact  a  " +
        "  left join  ocs_mst_tsaindividual2bureau as e  on e.sacontact_gid = a.sacontact_gid  " +
        " left join ocs_mst_tsacontact2address as b on b.sacontact_gid = a.sacontact_gid  " +
        " left join  ocs_mst_tsacontact2email as c on c.sacontact_gid = a.sacontact_gid  " +
        " left join  ocs_mst_tsacontact2mobileno as d on d.sacontact_gid = a.sacontact_gid  " +
        " left join ocs_mst_tsaprospects as f on f.sacontact_gid = a.sacontact_gid  " +
        " left join hrm_mst_temployee h on h.employee_gid = a.created_by   " +
        " left join adm_mst_tuser u  on h.user_gid = u.user_gid   " +
        " left join hrm_mst_temployee k on k.employee_gid = a.approved_by  " +
        " left join adm_mst_tuser l  on l.user_gid = k.user_gid    " +
        " group by a.sacontact_gid ";
                      */
                msSQL = "call ocs_rpt_sbaindividual";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsaOnboardReport_list = new List<reportList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getsaOnboardReport_list.Add(new reportList
                        {

                            sa_updated_by = (dt["RM_Name"].ToString()),
                            sa_associatename = (dt["SBA_Name"].ToString()),
                            saentitytype_name = (dt["SA_Entity_Type"].ToString()),
                           // sba_associatetype = (dt["sba_associatetype"].ToString()),
                            sa_updated_date = (dt["Created_Date"].ToString()),
                            sa_autogeneratedid = (dt["SBA_Auto_Generated_ID"].ToString()),
                            approvalstatus = (dt["Approval_Status"].ToString()),
                            approvedBy = (dt["Approved_by"].ToString()),
                            //sa_reportingmanager = (dt["sa_reportingmanager"].ToString())


                        });

                    }
                }
                values.reportList = getsaOnboardReport_list;
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {

            }
        }

        public void DaGetInstitutionReportOnly(string employee_gid, reportValues values)

        {
            string update = string.Empty;
            try
            {
                /*  msSQL = "select DISTINCT(a.sa_autogeneratedid), 'Company' as sba_associatetype, sa_associatename,saentitytype_name,approvalstatus,sa_reportingmanager," +
                          " concat(ua.user_firstname, ' ', ua.user_lastname, ' ', ua.user_code) as approvedBy," +
   " concat(u.user_firstname, ' ', u.user_lastname, ' ', u.user_code) as created_by,a.created_date,sa_companypan," +
   " training_status,agreementexecutiondate,agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus," +
   " sa_appcreditedamount,sa_apputr from ocs_mst_tsainstitution a left join ocs_mst_tsainstitution2bureau b on" +
   " b.sacontactinstitution_gid = a.sacontactinstitution_gid" +
   " left join hrm_mst_temployee h on h.employee_gid = a.created_by" +
   " left join adm_mst_tuser u on h.user_gid = u.user_gid" +
  " left join hrm_mst_temployee he on he.employee_gid = a.approved_by" +
   " left join adm_mst_tuser ua on he.user_gid = ua.user_gid  group by a.sacontactinstitution_gid desc";
               */
          /*      //
                msSQL = " select  DISTINCT(a.sa_autogeneratedid) as SBA_Auto_Generated_ID,  'Company' as sba_associatetype,sa_associatename as SBA_Name, concat(u.user_firstname,u.user_lastname,' / ',u.user_code) as RM_Name,(case when substring(a.sacontactinstitution_gid,1,4) ='SBAI' then 'Online' else 'Internal' end)  as Record_source,  " +
   "  a.saentitytype_name as SA_Entity_Type, b.saaddresstype_name as Address_Type, b.addressline1 as Address_Line_1, b.addressline2 as Address_Line_2, " +
   "  b.sacity as City, b.sastate as State, b.sapostal_code as Pincode, m.sa_pannumber as PAN_Value, m.sa_aadharnumber as	Aadhar,   " +
   "  GROUP_CONCAT( distinct(r.gst_no )separator ' / ') as GST_Number,   group_concat( distinct (r.gststate_name )separator ' / ') as GST_State, concat(m.sa_firstname,m.sa_middlename,m.sa_lastname) as Contact_Person_Name, n.designation_type as Designation, " +
   "  d.samobile_no as Mobile_Number ,c.saemail_address as Email_address,a.sa_appcreditedamount as Application_fee_amount,   " +
   "  a.sa_apputr as UTR, date_format(a.sa_appcrediteddate,'%d-%m-%Y %h:%i %p') as Credited_Date,	a.saaccount_number as Bank_Account_Number,a.saaccountholder_name as	Account_Holder_Name,   " +
   "  a.sabank_name as Bank_Name,a.sabranch_name as Bank_Branch,a.saifsc_code as IFSC_Code,   " +
   "  f.salead_name as Lead_Name, f.sasector_industry as Lead_Sector, " +
      " GROUP_CONCAT(DISTINCT(CONCAT(e.bureauname_name,' : ',e.bureau_score,' : ' ,date_format(e.bureauscore_date, '%d-%m-%Y') )) ORDER BY e.bureauname_name SEPARATOR ' / ' ) as 'Credit_Check & Credit_Score & Score_as_on', a.training_status as Training_Status,  " +
   "  date_format(a.agreementexecutiondate,'%d-%m-%Y %h:%i %p') as Samfin_Agreement_Execution_Date, date_format(a.agreementexpirydate,'%d-%m-%Y %h:%i %p') as	Samfin_Agreement_Expiry_Date ,a.agreementstatus as Samfin_Agreement_Status,  " +
   "  date_format(a.agroagreementexecutiondate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Execution_Date,date_format(a.agroagreementexpirydate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Expiry_Date,a.agroagreementstatus as	SamAgro_Agreement_Status,    " +
       "  a.approvalstatus as Approval_Status, concat(l.user_firstname,l.user_lastname,' / ',l.user_code) as Approved_by,date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as Approved_on, " +
   "   date_format(a.created_date,'%d-%m-%Y %h:%i %p')  as Created_Date    " +
   "  from ocs_mst_tsainstitution  a   " +
   "  left join  ocs_mst_tsainstitution2bureau as e  on e.sacontactinstitution_gid = a.sacontactinstitution_gid   " +
   "  inner join ocs_mst_tsainstitution2address as b on b.sacontactinstitution_gid =  a.sacontactinstitution_gid   " +
   "  inner join  ocs_mst_tsainstitution2email as c on c.sacontactinstitution_gid = a.sacontactinstitution_gid   " +
   "  inner join  ocs_mst_tsainstitution2mobileno as d on d.sacontactinstitution_gid = a.sacontactinstitution_gid   " +
   "  inner join ocs_mst_tsainstitutionprospects as f on f.sacontactinstitution_gid = a.sacontactinstitution_gid    " +
   "  left join hrm_mst_temployee h on h.employee_gid = a.created_by    " +
   "  left join adm_mst_tuser u  on h.user_gid = u.user_gid    " +
   "  left join hrm_mst_temployee k on k.employee_gid = a.approved_by " +
   "  left join adm_mst_tuser l  on l.user_gid = k.user_gid   " +
   "  left join ocs_mst_tsainstitutionindividual m on m.sacontactinstitution_gid = a.sacontactinstitution_gid   " +
   "  left join ocs_mst_tdesignation n on n.designation_gid = m.sa_designation  " +
   "  left join ocs_mst_tsainstitution2gst r on r.sacontactinstitution_gid = a.sacontactinstitution_gid  group by a.sacontactinstitution_gid ";

                */

                msSQL = "call ocs_rpt_sbacompany";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsaOnboardReport_list = new List<reportList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getsaOnboardReport_list.Add(new reportList
                        {
                            approvedBy = (dt["Approved_by"].ToString()),
                            // sa_reportingmanager = (dt["sa_reportingmanager"].ToString()),

                            sa_updated_by = (dt["RM_Name"].ToString()),
                            sa_associatename = (dt["SBA_Name"].ToString()),
                            saentitytype_name = (dt["SA_Entity_Type"].ToString()),
                           // sba_associatetype = (dt["sba_associatetype"].ToString()),
                            sa_updated_date = (dt["Created_Date"].ToString()),
                            sa_autogeneratedid = (dt["SBA_Auto_Generated_ID"].ToString()),
                            approvalstatus = (dt["Approval_Status"].ToString())


                        });

                    }
                }
                values.reportList = getsaOnboardReport_list;
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {

            }
        }

        public void DaGetBothReport(string employee_gid, reportValues values)
        {
            string update = string.Empty;
            try
            {
                //msSQL =
                /*   " select DISTINCT(a.sa_autogeneratedid),'Company'as sba_associatetype,sa_associatename,saentitytype_name,approvalstatus," +
                       " sa_reportingmanager, concat(ua.user_firstname, ' ', ua.user_lastname, ' / ', ua.user_code) as approvedBy," +
                   " concat(u.user_firstname, ' ' ,u.user_lastname,' / ' ,u.user_code) as created_by,a.created_date,sa_companypan," +
                       " training_status,agreementexecutiondate,agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus," +
                       " sa_appcreditedamount,sa_apputr from ocs_mst_tsainstitution a " +
                       " left join ocs_mst_tsainstitution2bureau b on b.sacontactinstitution_gid = a.sacontactinstitution_gid " +
                       " left join hrm_mst_temployee h on h.employee_gid = a.created_by " +
                       " left join adm_mst_tuser u on h.user_gid = u.user_gid left join hrm_mst_temployee he on he.employee_gid = a.approved_by " +
                       " left join adm_mst_tuser ua on he.user_gid = ua.user_gid group by a.sacontactinstitution_gid desc " +
                       " union all " +
                       " select  DISTINCT(a.sa_autogeneratedid),'Individual'as sba_associatetype,concat(sa_firstname,' ' ,sa_middlename,' ' ,sa_lastname) as sa_associatename,saentitytype_name,approvalstatus, " +
                       " sa_reportingmanager,concat(ua.user_firstname, ' ' ,ua.user_lastname,' / ' ,ua.user_code) as approvedBy," +
                       " concat(u.user_firstname, ' ' ,u.user_lastname,' / ' ,u.user_code) as created_by,a.created_date,sa_pannumber,training_status,agreementexecutiondate, " +
                " agreementexpirydate,agreementstatus,agroagreementexecutiondate,agroagreementexpirydate,agroagreementstatus,sa_appcreditedamount,sa_apputr from ocs_mst_tsacontact a " +
                " left join ocs_mst_tsaindividual2bureau b on b.sacontact_gid = a.sacontact_gid  left join hrm_mst_temployee h on h.employee_gid = a.created_by " +
                " left join adm_mst_tuser u on h.user_gid = u.user_gid left join hrm_mst_temployee he on he.employee_gid = a.approved_by " +
                " left join adm_mst_tuser ua on he.user_gid = ua.user_gid group by a.sacontact_gid ";
             */
                //
             /*   msSQL = " select DISTINCT(a.sa_autogeneratedid) as SBA_Auto_Generated_ID,concat(sa_firstname,' ' ,sa_middlename,' ' ,sa_lastname) as SBA_Name,concat(u.user_firstname,u.user_lastname,' / ',u.user_code) as RM_Name, 'Individual' as SBA_Type,(case when substring(a.sacontact_gid,1,4) ='SBAR' then 'Online' else 'Internal' end) as Record_source,   " +
   "  a.saentitytype_name as SA_Entity_Type, b.addresstype_name as Address_Type, b.addressline1 as Address_Line_1, b.addressline2 as Address_Line_2,    " +
   "  b.city as City, b.state as State, b.postal_code as Pincode, a.sa_pannumber as PAN_Value, a.sa_aadharnumber as	Aadhar,   " +
   " '' as GST_Number,	'' as GST_State, concat(a.sa_firstname,a.sa_middlename,a.sa_lastname) as Contact_Person_Name, '' as Designation,  " +
   "  d.samobile_no as Mobile_Number ,c.saemail_address as Email_address,a.sa_appcreditedamount as Application_fee_amount,  " +
   "  a.sa_apputr as UTR, date_format(a.sa_appcrediteddate,'%d-%m-%Y %h:%i %p') as Credited_Date,	a.saaccount_number as Bank_Account_Number,a.saaccountholder_name as	Account_Holder_Name,   " +
   "  a.sabank_name as Bank_Name,a.sabranch_name as Bank_Branch,a.saifsc_code as IFSC_Code,    " +
   "  f.salead_name as Lead_Name, f.sasector_industry as Lead_Sector,GROUP_CONCAT(DISTINCT(CONCAT(e.bureauname_name,' : ',e.bureau_score,' : ' ,date_format(e.bureauscore_date, '%d-%m-%Y') )) ORDER BY e.bureauname_name SEPARATOR ' / ' ) as 'Credit_Check & Credit_Score & Score_as_On', a.training_status as Training_Status,   " +
   "  date_format(a.agreementexecutiondate,'%d-%m-%Y %h:%i %p') as Samfin_Agreement_Execution_Date, date_format(a.agreementexpirydate,'%d-%m-%Y %h:%i %p') as	Samfin_Agreement_Expiry_Date ,a.agreementstatus as Samfin_Agreement_Status,   " +
   "  date_format(a.agroagreementexecutiondate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Execution_Date, date_format(a.agroagreementexpirydate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Expiry_Date,a.agroagreementstatus as	SamAgro_Agreement_Status,   " +
       "  a.approvalstatus as Approval_Status, concat(l.user_firstname,l.user_lastname,' / ',l.user_code) as Approved_by,date_format(a.approved_date,'%d-%m-%Y %h:%i %p')  as Approved_on,   " +
   "   date_format(a.created_date,'%d-%m-%Y %h:%i %p') as Created_Date " +
   "  from ocs_mst_tsacontact  a   " +
   "   left join  ocs_mst_tsaindividual2bureau as e  on e.sacontact_gid = a.sacontact_gid   " +
   "  left join ocs_mst_tsacontact2address as b on b.sacontact_gid = a.sacontact_gid  " +
   "  left join  ocs_mst_tsacontact2email as c on c.sacontact_gid = a.sacontact_gid    " +
   "  left join  ocs_mst_tsacontact2mobileno as d on d.sacontact_gid = a.sacontact_gid    " +
   "  left join ocs_mst_tsaprospects as f on f.sacontact_gid = a.sacontact_gid    " +
   "  left join hrm_mst_temployee h on h.employee_gid = a.created_by     " +
   "  left join adm_mst_tuser u  on h.user_gid = u.user_gid    " +
   "  left join hrm_mst_temployee k on k.employee_gid = a.approved_by   " +
   "  left join adm_mst_tuser l  on l.user_gid = k.user_gid      " +
   "  group by a.sacontact_gid  " +
   "  union all " +
   "  select DISTINCT(a.sa_autogeneratedid) as SBA_Auto_Generated_ID,sa_associatename as SBA_Name, concat(u.user_firstname,u.user_lastname,' / ',u.user_code) as RM_Name,'Company' as SBA_Type,(case when substring(a.sacontactinstitution_gid,1,4) ='SBAI' then 'Online' else 'Internal' end) as Record_source,    " +
   "   a.saentitytype_name as SA_Entity_Type, b.saaddresstype_name as Address_Type, b.addressline1 as Address_Line_1, b.addressline2 as Address_Line_2,    " +
   "  b.sacity as City, b.sastate as State, b.sapostal_code as Pincode, m.sa_pannumber as PAN_Value, m.sa_aadharnumber as	Aadhar,    " +
   "   GROUP_CONCAT( distinct(r.gst_no )separator ' / ') as GST_Number,   group_concat( distinct (r.gststate_name )separator ' / ') as GST_State, concat(m.sa_firstname,m.sa_middlename,m.sa_lastname) as Contact_Person_Name, n.designation_type as Designation,    " +
   "   d.samobile_no as Mobile_Number ,c.saemail_address as Email_address,a.sa_appcreditedamount as Application_fee_amount,    " +
   "   a.sa_apputr as UTR,  date_format(a.sa_appcrediteddate,'%d-%m-%Y %h:%i %p') as Credited_Date,	a.saaccount_number as Bank_Account_Number,a.saaccountholder_name as	Account_Holder_Name,    " +
   "   a.sabank_name as Bank_Name,a.sabranch_name as Bank_Branch,a.saifsc_code as IFSC_Code,    " +
   "   f.salead_name as Lead_Name, f.sasector_industry as Lead_Sector, GROUP_CONCAT(DISTINCT(CONCAT(e.bureauname_name,' : ',e.bureau_score,' : ' ,date_format(e.bureauscore_date, '%d-%m-%Y') )) ORDER BY e.bureauname_name SEPARATOR ' / ' ) as 'Credit_Check & Credit_Score & Score_as_On', a.training_status as Training_Status,    " +
   "    date_format(a.agreementexecutiondate,'%d-%m-%Y %h:%i %p') as Samfin_Agreement_Execution_Date,  date_format(a.agreementexpirydate,'%d-%m-%Y %h:%i %p') as	Samfin_Agreement_Expiry_Date ,a.agreementstatus as Samfin_Agreement_Status,     " +
   "    date_format(a.agroagreementexecutiondate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Execution_Date,  date_format(a.agroagreementexpirydate,'%d-%m-%Y %h:%i %p') as SamAgro_Agreement_Expiry_Date,a.agroagreementstatus as	SamAgro_Agreement_Status,    " +
      "  a.approvalstatus as Approval_Status, concat(l.user_firstname,l.user_lastname,' / ',l.user_code) as Approved_by, date_format(a.approved_date,'%d-%m-%Y %h:%i %p')  as Approved_on,     " +
   "   date_format(a.created_date,'%d-%m-%Y %h:%i %p') as Created_Date    " +
   "  from ocs_mst_tsainstitution  a     " +
   "   left join  ocs_mst_tsainstitution2bureau as e  on e.sacontactinstitution_gid = a.sacontactinstitution_gid    " +
   "  left join ocs_mst_tsainstitution2address as b on b.sacontactinstitution_gid =  a.sacontactinstitution_gid    " +
   "  left join  ocs_mst_tsainstitution2email as c on c.sacontactinstitution_gid = a.sacontactinstitution_gid    " +
   "  left join  ocs_mst_tsainstitution2mobileno as d on d.sacontactinstitution_gid = a.sacontactinstitution_gid    " +
   "  left join ocs_mst_tsainstitutionprospects as f on f.sacontactinstitution_gid = a.sacontactinstitution_gid     " +
   "  left join hrm_mst_temployee h on h.employee_gid = a.created_by     " +
   "  left join adm_mst_tuser u  on h.user_gid = u.user_gid     " +
   "  left join hrm_mst_temployee k on k.employee_gid = a.approved_by    " +
   "   left join adm_mst_tuser l  on l.user_gid = k.user_gid    " +
   "   left join ocs_mst_tsainstitutionindividual m on m.sacontactinstitution_gid = a.sacontactinstitution_gid    " +
   "   left join ocs_mst_tdesignation n on n.designation_gid = m.sa_designation   " +
   "  left join ocs_mst_tsainstitution2gst r on r.sacontactinstitution_gid = a.sacontactinstitution_gid   " +
   "  group by a.sacontactinstitution_gid  desc ";
                */
                msSQL = "call ocs_rpt_sbacombinedreport";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getsaOnboardReport_list = new List<reportList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getsaOnboardReport_list.Add(new reportList
                        {
                            approvedBy = (dt["Approved_by"].ToString()),
                            // sa_reportingmanager = (dt["sa_reportingmanager"].ToString()),

                            sa_updated_by = (dt["RM_Name"].ToString()),
                            sa_associatename = (dt["SBA_Name"].ToString()),
                            sba_associatetype = (dt["SBA_Type"].ToString()),
                            saentitytype_name = (dt["SA_Entity_Type"].ToString()),
                            sa_updated_date = (dt["Created_Date"].ToString()),
                            sa_autogeneratedid = (dt["SBA_Auto_Generated_ID"].ToString()),
                            approvalstatus = (dt["Approval_Status"].ToString())
                        });

                    }
                }
                values.reportList = getsaOnboardReport_list;
                dt_datatable.Dispose();
            }
            catch (Exception ex)
            {

            }
        }


  
        public void DaPostBDInstitutionRaiseQuery(string employee_gid, Mdlbdinstitutionraisequery values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("BDRQ");
            msSQL = "Insert into ocs_mst_tbdverifyinstitutionraisequery( " +
                   " bdverifyinstitutionraisequery_gid, " +
                   " sacontactinstitution_gid," +
                   " query_title, " +
                   " query_description," +
                   " bdverifyinstitutionraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontactinstitution_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {

                    msSQL = " update ocs_mst_tsainstitution set raisequery_flag = 'Y',closeflag='Y',approvalstatus='Query Raised by BD'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query raised  successfully";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name, " +
                        " group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                          " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    lscc_mail = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "A query has been raised ";
                    body = "Dear Sir/Madam<br />";
                    body = body + "<br />";
                    body = body + "A new query has been raised.  The details are as follows<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Business Development Verification  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    // cc_mailid = ConfigurationManager.AppSettings["bdraisemail"].ToString();
                    cc_mailid = lscc_mail;
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
            }
            else
            {
                values.status = true;
                values.message = "Error occur while adding";
            }
        }


        public void DaGetBDInstitutionRaiseQuery(string sacontactinstitution_gid, Mdlbdinstitutionraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontactinstitution_gid,a.bdverifyinstitutionraisequery_gid,a.query_title,a.query_description,a.bdverifyinstitutionraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tbdverifyinstitutionraisequery a " +
                     " left join ocs_mst_tsainstitution b on a.sacontactinstitution_gid = b.sacontactinstitution_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontactinstitution_gid = '" + sacontactinstitution_gid + "'  group by bdverifyinstitutionraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getbdinstitutionraisequery_list = new List<bdinstitutionraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getbdinstitutionraisequery_list.Add(new bdinstitutionraisequery_list
                    {
                        sacontactinstitution_gid = (dr_datarow["sacontactinstitution_gid"].ToString()),
                        bdinstitutionraisequery_gid = (dr_datarow["bdverifyinstitutionraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        bdinstitutionraisequery_status = (dr_datarow["bdverifyinstitutionraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.bdinstitutionraisequery_list = getbdinstitutionraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostBDInstitutionresponsequery(Mdlbdinstitutionraisequery values, string employee_gid)
        {
            try
            {

                msSQL = " update ocs_mst_tbdverifyinstitutionraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                       " queryresponse_by='" + employee_gid + "'," +
                       " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                       " bdverifyinstitutionraisequery_status='Closed' " +
                       " where bdverifyinstitutionraisequery_gid='" + values.bdinstitutionraisequery_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                if (mnResult == 1)
                {
                    try
                    {
                        msSQL = "select bdverifyinstitutionraisequery_status from ocs_mst_tbdverifyinstitutionraisequery where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' " +
                            " and bdverifyinstitutionraisequery_status='Query Raised' ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            bd_raise_flag = "Y";
                            approvalstatus = "Query Raised by BD";
                        }
                        else
                        {
                            bd_raise_flag = "N";
                            approvalstatus = "Pending BD Verification";
                        }

                        msSQL = " update ocs_mst_tsainstitution set raisequery_flag = '" + bd_raise_flag + "',approvalstatus ='" + approvalstatus + "' " +
                                  " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        values.status = true;
                        values.message = "Query closed successfully..!";

                        k = 1;

                        msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            ls_server = objODBCDatareader["pop_server"].ToString();
                            ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                            ls_username = objODBCDatareader["pop_username"].ToString();
                            ls_password = objODBCDatareader["pop_password"].ToString();
                        }
                        objODBCDatareader.Close();
                        string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                        sToken = "";
                        int Length = 100;
                        for (int j = 0; j < Length; j++)
                        {
                            string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                            sToken += sTempChars;
                        }

                        k = k + 1;
                        //RM Name-need to check



                        //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        //Mail Template Details


                        msSQL = "select sacontactinstitution_gid,sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.institutionmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                            " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                                   " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                                   " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid " +
                                    " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                            lsinstitutionmaker_name = objODBCDatareader["institutionmaker_name"].ToString();
                            lsto2members = objODBCDatareader["tomembers"].ToString();
                            lscc2members = objODBCDatareader["cc2members"].ToString();
                            lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                            lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                            lscreated_date = objODBCDatareader["created_date"].ToString();
                            lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                        }

                        objODBCDatareader.Close();


                        msSQL = "select created_by from ocs_mst_tbdverifyinstitutionraisequery " +
                               " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lsclosed = objODBCDatareader["created_by"].ToString();

                        }

                        objODBCDatareader.Close();

                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                           " where employee_gid in ('" + lsclosed.Replace(",", "', '") + "')";
                        lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                        //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                        //string reporting_to = objdbconn.GetExecuteScalar(msql);


                        msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                        cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                          "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                          "where b.employee_gid ='" + employee_gid + "'";
                        employeename = objdbconn.GetExecuteScalar(msSQL);

                        sub = "SBA:Raised query has been closed";
                        body = "Dear Sir/Madam<br />";
                        body = body + "<br />";
                        body = body + "The query raised is closed by the RM.  The details are as follows, <br />";
                        body = body + "<br />";
                        body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Query closed by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                        body = body + "<br />";
                        body = body + "<b> Level:</b>Business Development Verification  <br />";
                        body = body + "<br />";
                        body = body + "<b> Query closed time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                        body = body + "<br />";
                        body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "Thanks & Regards, ";
                        body = body + "<br />";
                        body = body + HttpUtility.HtmlEncode(employeename);
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + "<br />";
                        body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                        MailMessage message = new MailMessage();
                        SmtpClient smtp = new SmtpClient();
                        message.From = new MailAddress(ls_username);
                        //message.To.Add(new MailAddress(lsto_mail));


                        lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                        if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                        {
                            lsBCCReceipients = lsBccmail_id.Split(',');
                            if (lsBccmail_id.Length == 0)
                            {
                                message.Bcc.Add(new MailAddress(lsBccmail_id));
                            }
                            else
                            {
                                foreach (string BCCEmail in lsBCCReceipients)
                                {
                                    message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                                }
                            }
                        }

                        if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                        {
                            lsToReceipients = lsto_mail.Split(',');
                            if (lsto_mail.Length == 0)
                            {
                                message.To.Add(new MailAddress(lsto_mail));
                            }
                            else
                            {
                                foreach (string ToEmail in lsToReceipients)
                                {
                                    message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                        {
                            lsCCReceipients = cc_mailid.Split(',');
                            if (cc_mailid.Length == 0)
                            {
                                message.CC.Add(new MailAddress(cc_mailid));
                            }
                            else
                            {
                                foreach (string CCEmail in lsCCReceipients)
                                {
                                    message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                                }
                            }
                        }

                        message.Subject = sub;
                        message.IsBodyHtml = true; //to make message body as html  
                        message.Body = body;
                        smtp.Port = ls_port;
                        smtp.Host = ls_server; //for gmail host  
                        smtp.EnableSsl = true;
                        smtp.UseDefaultCredentials = false;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                        smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtp.Send(message);

                        values.status = true;

                        if (values.status == true)
                        {
                            msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                               " sacontact_gid," +
                               " from_mail," +
                               " to_mail," +
                               " cc_mail," +
                               " mail_status," +
                               " mail_senddate, " +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + employee_gid + "'," +
                               "'" + lsto_mail + "'," +
                               "'" + cc_mailid + "'," +
                               "'SA Onboarding Intiated for Approval'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                    catch (Exception ex)
                    {
                    }
                }
                else
                {
                    values.status = false;
                    values.message = "Error occured..!";
                }


            }
            catch (Exception ex)
            {
            }
        }
        public void DaPostBDIndividualRaiseQuery(string employee_gid, Mdlbdindividualraisequery values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("BDRI");
            msSQL = "Insert into ocs_mst_tbdverifyindividualraisequery( " +
                   " bdverifyindividualraisequery_gid, " +
                   " sacontact_gid," +
                   " query_title, " +
                   " query_description," +
                   " bdverifyindividualraisequery_status, " +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.sacontact_gid + "', " +
                   "'" + values.query_title.Replace("'", "") + "'," +
                   "'" + values.query_description.Replace("'", "") + "'," +
                   "'Query Raised'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                try
                {
                    msSQL = " update ocs_mst_tsacontact set raisequery_flag = 'Y' ,closeflag='Y',approvalstatus='Query Raised by BD' " +
                          " where sacontact_gid = '" + values.sacontact_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Query Raised  Successfully";
                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                        " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                               " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                               " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                                " sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                       " where employee_gid in ('" + lsto2members.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);

                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "A query has been raised ";
                    body = "Dear Sir/Madam<br />";
                    body = body + "<br />";
                    body = body + "A new query has been raised.  The details are as follows<br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Business Development Verification  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query raised time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to clarify the query";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                 //   cc_mailid = ConfigurationManager.AppSettings["bdraisemail"].ToString();
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                values.status = true;
                values.message = "Error Occur While Adding";
            }
        }

        public void DaGetBDIndividualRaiseQuery(string sacontact_gid, Mdlbdindividualraisequery values, string employee_gid)
        {


            msSQL = " select distinct a.sacontact_gid,a.bdverifyindividualraisequery_gid,a.query_title,a.query_description,a.bdverifyindividualraisequery_status,a.queryresponse_by,a.queryresponse_remarks," +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(d.user_firstname, ' ', d.user_lastname, ' / ', d.user_code) as created_by, " +
                     " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as query_responseby " +
                    " from ocs_mst_tbdverifyindividualraisequery a " +
                     " left join ocs_mst_tsacontact b on a.sacontact_gid = b.sacontact_gid" +
                    " left join hrm_mst_temployee c on a.created_by = c.employee_gid" +
                     " left join hrm_mst_temployee e on a.queryresponse_by = e.employee_gid" +
                    " left join adm_mst_tuser d on c.user_gid = d.user_gid " +
                    " left join adm_mst_tuser f on e.user_gid = f.user_gid " +
                    " where b.sacontact_gid = '" + sacontact_gid + "' group by bdverifyindividualraisequery_gid ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getbdindividualraisequery_list = new List<bdindividualraisequery_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getbdindividualraisequery_list.Add(new bdindividualraisequery_list
                    {
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        bdindividualraisequery_gid = (dr_datarow["bdverifyindividualraisequery_gid"].ToString()),
                        query_title = (dr_datarow["query_title"].ToString()),
                        query_description = (dr_datarow["query_description"].ToString()),
                        queryresponse_remarks = (dr_datarow["queryresponse_remarks"].ToString()),
                        queryresponse_by = (dr_datarow["query_responseby"].ToString()),
                        bdindividualraisequery_status = (dr_datarow["bdverifyindividualraisequery_status"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString())

                    });
                }
                values.bdindividualraisequery_list = getbdindividualraisequery_list;
            }

            dt_datatable.Dispose();

        }

        public void DaPostBDIndividualresponsequery(Mdlbdindividualraisequery values, string employee_gid)
        {

            msSQL = " update ocs_mst_tbdverifyindividualraisequery set queryresponse_remarks ='" + values.queryresponse_remarks.Replace("'", "") + "'," +
                   " queryresponse_by='" + employee_gid + "'," +
                   " queryresponse_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                   " bdverifyindividualraisequery_status='Closed' " +
                   " where bdverifyindividualraisequery_gid='" + values.bdindividualraisequery_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult == 1)
            {
                try
                {
                    msSQL = "select bdverifyindividualraisequery_status from ocs_mst_tbdverifyindividualraisequery where sacontact_gid = '" + values.sacontact_gid + "' " +
                          " and bdverifyindividualraisequery_status='Query Raised' ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        bd_raise_flag = "Y";
                        approvalstatus = "Query Raised by BD";                   

                    }
                    else
                    {
                        bd_raise_flag = "N";
                        approvalstatus = "Pending BD Verification";
                    }

                    msSQL = " update ocs_mst_tsacontact set raisequery_flag = '" + bd_raise_flag + "',approvalstatus ='" + approvalstatus + "' " +
                              " where sacontact_gid = '" + values.sacontact_gid + "' ";
                          mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Query Closed Successfully..!";

                    k = 1;

                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check



                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details


                    msSQL = "select sacontact_gid,sa_firstname as sa_associatename,i.sa_reportingmanager,i.sa_autogeneratedid,i.individualmaker_name,group_concat(distinct i.created_by)  as tomembers,group_concat(distinct i.reportingmanager_gid)  as cc2members,i.created_by, " +
                      " date_format(i.created_date, '%d-%m-%Y') as created_date ," +
                             " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsacontact i join " +
                             " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                              " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lsinstitutionmaker_name = objODBCDatareader["individualmaker_name"].ToString();
                        lsto2members = objODBCDatareader["tomembers"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lssa_reportingmanager = objODBCDatareader["sa_reportingmanager"].ToString();

                    }

                    objODBCDatareader.Close();


                    msSQL = "select created_by from ocs_mst_tbdverifyindividualraisequery " +
                               " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsclosed = objODBCDatareader["created_by"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                                      " where employee_gid in ('" + lsclosed.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + lscreated_by + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    sub = "SBA:Raised query has been closed";
                    body = "Dear Sir/Madam<br />";
                    body = body + "<br />";
                    body = body + "The query raised is closed by the RM.  The details are as follows, <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Query closed by :</b> " + HttpUtility.HtmlEncode(employeename) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Level:</b> Business Development Verification  <br />";
                    body = body + "<br />";
                    body = body + "<b> Query closed time :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> RM Name :</b> " + HttpUtility.HtmlEncode(lsuser_firstname) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into " + ConfigurationManager.AppSettings["livedomain_url"].ToString() + " to verify the onboarding details";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Thanks & Regards, ";
                    body = body + "<br />";
                    body = body + HttpUtility.HtmlEncode(employeename);
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }

                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingindiVerificationmailcount( " +
                           " sacontact_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Approval'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {
                }
            }
            else
            {

                values.status = false;
                values.message = "Error Occured..!";
            }

        }
        //concat(a.user_firstname,' ', a.user_lastname,' / ', a.user_code,'/', d.baselocation_name
        public void DaGetEmployeelist(bdemployee values)
        {
            try
            {
                msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
                string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);


                msSQL = " SELECT a.user_firstname,a.user_gid ,concat(a.user_firstname,' ', a.user_lastname,' / ', a.user_code,' / ', d.baselocation_name) as employee_name,b.employee_gid from adm_mst_tuser a " +
                   " LEFT JOIN hrm_mst_temployee b ON a.user_gid=b.user_gid " +
                   " LEFT JOIN adm_mst_tmodule2employee c on c.employee_gid=b.employee_gid " +
                  " left join sys_mst_tbaselocation d on d.baselocation_gid = b.baselocation_gid " +
                   " where a.user_status<>'N' and c.module_gid = '" + lsmodulereportingto_gid + "' order by a.user_firstname asc";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getrmemployeeLists = new List<rmemployeelists>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getrmemployeeLists.Add(new rmemployeelists
                        {
                            employee_gid = dt["employee_gid"].ToString(),
                            employee_name = dt["employee_name"].ToString(),
                        });
                        values.rmemployeelists = getrmemployeeLists;
                    }
                }
                dt_datatable.Dispose();

                values.status = true;

            }
            catch (Exception ex)
            {
                values.status = false;
            }
        }

        public void DaGetPendingBDVerification(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource , CONCAT(FLOOR(timestampdiff(day, a.created_date, now())), ' days ',MOD(timestampdiff(hour, a.created_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.created_date, now()), '60'), 'Mins') as tat,  " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where (verify_flag='Y' or verify_flag is null or verify_flag ='N' or a.created_by = '" + employee_gid + "') and a.saveasdraftadd_flag='N' " +
                        " and a.approvalstatus in ('Pending BD Verification','Query Raised by BD')" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {

                        if (dr_datarow["update_flag"].ToString() == null || dr_datarow["update_flag"].ToString() == "")
                        {
                            update = "N";
                        }
                        else
                        {
                            update = dr_datarow["update_flag"].ToString();
                        }
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            update_flag = update,
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            tagging_flag = (dr_datarow["tagging_flag"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetPendingBDVerificationInstitution(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus, " +
                    " a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,CONCAT(FLOOR(timestampdiff(day, a.created_date, now())), ' days ',MOD(timestampdiff(hour, a.created_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.created_date, now()), '60'), 'Mins') as tat , " +
                     " (a.origination) as RecordSource,a.verify_flag, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where (verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or a.created_by = '" + employee_gid + "' ) and (a.saveasdraftadd_flag= 'N') and a.approvalstatus in ('Pending BD Verification','Query Raised by BD')" +
            //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
            // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
            //" where a.sa_updated_by = '" + employee_gid + "' " + 
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    if (dt["update_flag"].ToString() == null || dt["update_flag"].ToString() == "")
                    {
                        update = "N";
                    }
                    else
                    {
                        update = dt["update_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        update_flag = update,
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetBDVerificationPendingCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where(verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or " +
                     "a.created_by = '" + employee_gid + "' ) and (a.saveasdraftadd_flag= 'N') and a.approvalstatus in ('Query Raised by BD','Pending BD Verification')  order by a.created_date desc )   AS Institution_Count, " +
                        "  (select count(sacontact_gid) from ocs_mst_tsacontact a where (verify_flag = 'Y' or verify_flag is null or verify_flag ='N' or a.created_by = '" + employee_gid + "') and a.saveasdraftadd_flag='N'  and a.approvalstatus in ('Pending BD Verification','Query Raised by BD')  order by a.created_date desc ) As Individual_Count";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
            }
            objODBCDatareader.Close();
        }

        //PendingRM Summary
        public void DaGetPendingwithRMInstitutionSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus, " +
                    " a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag, " +
                     " (a.origination) as RecordSource,a.verify_flag, " +
                     " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where a.approvalstatus in ('Onboard Pending') " +
            //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
            // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
            //" where a.sa_updated_by = '" + employee_gid + "' " + 
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    if (dt["update_flag"].ToString() == null || dt["update_flag"].ToString() == "")
                    {
                        update = "N";
                    }
                    else
                    {
                        update = dt["update_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        update_flag = update,
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetPendingwithRMIndividualSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,concat(a.sa_firstname,a.sa_middlename,a.sa_lastname) as sa_associatename,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource,  " +
                        " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where  a.approvalstatus in ('Onboard Pending')" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {

                    if (dr_datarow["update_flag"].ToString() == null || dr_datarow["update_flag"].ToString() == "")
                    {
                        update = "N";
                    }
                    else
                    {
                        update = dr_datarow["update_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        renewal_status = (dr_datarow["Renewal_status"].ToString()),
                        update_flag = update,
                        recordsource = (dr_datarow["RecordSource"].ToString()),
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        sa_updated_by = (dr_datarow["created_by"].ToString()),
                        satype_name = (dr_datarow["satype_name"].ToString()),
                        sa_associatename = (dr_datarow["sa_associatename"].ToString()),
                        sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                        saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                        sa_updated_date = (dr_datarow["created_date"].ToString()),
                        sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                        sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                        sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                        approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                        referred_by = (dr_datarow["referred_by"].ToString()),
                        tagging_flag = (dr_datarow["tagging_flag"].ToString())
                    });
                }
                values.saOnboardSummary_list = getsaOnboardSummary_list;
            }
            dt_datatable.Dispose();
        }

        //PendingwithCAD Summary
        public void DaGetPendingwithCADInstitutionSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus, " +
                    " a.satype_gid,a.satype_name,a.saentitytype_name,a.tagging_flag,a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag, " +
                     " (a.origination) as RecordSource,a.verify_flag, " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                     " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                      " where a.approvalstatus in ('Maker Pending','Checker Pending','Query Raised by Maker','Query Raised by Checker','Approver Pending','Query Raised by Approver','Pending Assignment') " +
            //" left join  ocs_mst_tsatype e on e.satype_gid = a.satype_gid" +
            // " left join  ocs_mst_tsaentitytype f on f.satype_gid = a.satype_gid   " +
            //" where a.sa_updated_by = '" + employee_gid + "' " + 
            " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    if (dt["update_flag"].ToString() == null || dt["update_flag"].ToString() == "")
                    {
                        update = "N";
                    }
                    else
                    {
                        update = dt["update_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        update_flag = update,
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        tagging_flag = (dt["tagging_flag"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())

                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public void DaGetPendingwithCADIndividualSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            string update = string.Empty;
            msSQL = msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,concat(a.sa_firstname,' ',a.sa_middlename,' ',a.sa_lastname) as sa_associatename  ,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.tagging_flag,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,a.update_flag,(a.origination) as RecordSource,  " +
                         " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where (verify_flag='Y' or verify_flag='N'  or a.created_by = '" + employee_gid + "') and " +
                        " a.saveasdraftadd_flag='N'and a.approvalstatus in ('Maker Pending','Checker Pending','Query Raised by Maker','Query Raised by Checker','Approver Pending', " +
                        " 'Query Raised by Approver','Pending Assignment') " +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {

                    if (dr_datarow["update_flag"].ToString() == null || dr_datarow["update_flag"].ToString() == "")
                    {
                        update = "N";
                    }
                    else
                    {
                        update = dr_datarow["update_flag"].ToString();
                    }
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        update_flag = update,
                        renewal_status = (dr_datarow["Renewal_status"].ToString()),
                        recordsource = (dr_datarow["RecordSource"].ToString()),
                        sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                        sa_updated_by = (dr_datarow["created_by"].ToString()),
                        satype_name = (dr_datarow["satype_name"].ToString()),
                        sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                        saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                        sa_updated_date = (dr_datarow["created_date"].ToString()),
                        sa_associatename = (dr_datarow["sa_associatename"].ToString()),
                        sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                        sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                        sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                        approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                        referred_by = (dr_datarow["referred_by"].ToString()),
                        tagging_flag = (dr_datarow["tagging_flag"].ToString())
                    });
                }
                values.saOnboardSummary_list = getsaOnboardSummary_list;
            }
            dt_datatable.Dispose();
        }
        public void DaIndividualRegisterationRejected(string employee_gid, IndividualeditVerification values)
        {
            try
            {
                msSQL = " update ocs_mst_tsacontact set " +
                    " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                     " training_status='" + values.training_status + "'," +
                     " rejected_remarks='" + values.rejected_remarks + "'," +
                     " approvalstatus='Application Rejected'," +
                     " remarks='" + values.remarks + "'" +
                     " where sacontact_gid='" + values.sacontact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Rejected successfully";
                    return;
                }
            }
            catch (Exception ex)
            {

            }

        }
        public void DaInstitutionRegisterationRejected(string employee_gid, InstitutioneditVerification values)
        {
            try
            {

                msSQL = " update ocs_mst_tsainstitution set " +
              " updated_by='" + employee_gid + "'," +
              " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
              " training_status='" + values.training_status + "'," +
               " rejected_remarks='" + values.rejected_remarks + "'," +
              " approvalstatus='Application Rejected'," +
              " remarks='" + values.remarks + "'" +
              " where sacontactinstitution_gid='" + values.sacontactinstitution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Rejected successfully";
                    return;
                }
            }          


        catch (Exception ex)
            {
            }
        }
        public bool DaInstitutionPendingRMTaggedUpdate(string employee_gid, InstitutioneditVerification values)
        {
            string msql;

            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);


            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //          " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //  objODBCDatareader.Close();

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();



            msSQL = " update ocs_mst_tsainstitution set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "', " +
                    " created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIL");

            msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                  " taggedemployeeinstitutionlog_gid , " +
                  " sacontactinstitution_gid," +
                  " institutiontaggedemployee_gid," +
                  " institutiontaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontactinstitution_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                  " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);

                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.created_by,sa_autogeneratedid, " +
                            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                             " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        saUser = objODBCDatareader["user_firstname"].ToString();
                        RegistrationID = objODBCDatareader["sa_autogeneratedid"].ToString();

                    }
                    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                         " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                            " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    objODBCDatareader.Close();

                    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + RegistrationID + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Tagged successfully'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger

                values.status = true;
                values.message = "RM tagged successfully";
                return true;


            }


            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }

        public bool DaInstitutionVerificationPendingRMTaggedUpdate(string employee_gid, InstitutioneditVerification values)
        {
           

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();



            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);


            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //          " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsainstitution set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "', " +
                    " created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIL");

            msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                  " taggedemployeeinstitutionlog_gid , " +
                  " sacontactinstitution_gid," +
                  " institutiontaggedemployee_gid," +
                  " institutiontaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontactinstitution_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                  " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);

                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.created_by,sa_autogeneratedid, " +
                            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                             " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        saUser = objODBCDatareader["user_firstname"].ToString();
                        RegistrationID = objODBCDatareader["sa_autogeneratedid"].ToString();

                    }
                    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                         " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                            " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    objODBCDatareader.Close();

                    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + RegistrationID + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Tagged successfully'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger

                values.status = true;
                values.message = "RM tagged successfully";
                return true;


            }


            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }

        public bool DaInstitutionVettingRMTaggedUpdate(string employee_gid, InstitutioneditVerification values)
        {
           // string msql;

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();

            

            msSQL = " update ocs_mst_tsainstitution set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reporting_to + "', " +
                    " created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                      " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsainstitution where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIL");

            msSQL = " insert into ocs_mst_ttaggedemployeeinstitutionlog (" +
                  " taggedemployeeinstitutionlog_gid , " +
                  " sacontactinstitution_gid," +
                  " institutiontaggedemployee_gid," +
                  " institutiontaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontactinstitution_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                  " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);

                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontactinstitution_gid,sa_associatename,i.created_by,sa_autogeneratedid, " +
                            " concat(a.user_firstname, '  ', a.user_lastname) as user_firstname from ocs_mst_tsainstitution i join " +
                            " hrm_mst_temployee e on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where " +
                             " sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        saUser = objODBCDatareader["user_firstname"].ToString();
                        RegistrationID = objODBCDatareader["sa_autogeneratedid"].ToString();

                    }
                    msSQL = "select sacontactinstitution_gid,max(samobile_no) as samobile_no from ocs_mst_tsainstitution2mobileno " +
                         " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontactinstitution_gid,max(saemail_address) as saemail_address from ocs_mst_tsainstitution2email " +
                            " where sacontactinstitution_gid = '" + values.sacontactinstitution_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);

                    objODBCDatareader.Close();

                    msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + RegistrationID + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Tagged successfully'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger

                values.status = true;
                values.message = "RM tagged successfully";
                return true;


            }


            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }

        public bool DaIndividualPendingRMTaggedUpdate(string employee_gid, IndividualeditVerification values)
        {
            string msql;

            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);

            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //        " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();



            msSQL = " update ocs_mst_tsacontact set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "',created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsacontact where sacontact_gid = '" + values.sacontact_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIN");

            msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                  " taggedemployeeindividuallog_gid , " +
                  " sacontact_gid," +
                  " individualtaggedemployee_gid," +
                  " individualtaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontact_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                 " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
          " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
      " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
          " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
             " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                    }


                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                         " where sacontact_gid = '" + values.sacontact_gid + "'";
                    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                            " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Verification'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
                values.status = true;
                values.message = "RM tagged successfully";
                return true;




            }
            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }

        public bool DaIndividualVerificationPendingRMTaggedUpdate(string employee_gid, IndividualeditVerification values)
        {
            string msql;

            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);

            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //        " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();



            msSQL = " update ocs_mst_tsacontact set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reportingmanager_gid + "',created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsacontact where sacontact_gid = '" + values.sacontact_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIN");

            msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                  " taggedemployeeindividuallog_gid , " +
                  " sacontact_gid," +
                  " individualtaggedemployee_gid," +
                  " individualtaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontact_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                 " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
          " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
      " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
          " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
             " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                    }


                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                         " where sacontact_gid = '" + values.sacontact_gid + "'";
                    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                            " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Verification'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
                values.status = true;
                values.message = "RM tagged successfully";
                return true;




            }
            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }
        public bool DaIndividualVettingRMTaggedUpdate(string employee_gid, IndividualeditVerification values)
        {
            msSQL = "select module_gid_parent from adm_mst_tmodule where module_gid in(select modulereportingto_gid from adm_mst_tcompany) ";
            string lsmodulereportingto_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select a.employeereporting_to,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as level_zero,b.employee_gid," +
               " concat( g.user_firstname, ' ', g.user_lastname, ' / ', g.user_code) as reporting_name  from adm_mst_tmodule2employee a   " +
               " left join hrm_mst_temployee b on b.employee_gid = a.employee_gid left join adm_mst_tprivilege h on h.user_gid = b.user_gid " +
               " left join adm_mst_tuser c on c.user_gid = b.user_gid  left join hrm_mst_temployee f on a.employeereporting_to = f.employee_gid " +
               " left join adm_mst_tuser g on g.user_gid = f.user_gid  where a.module_gid ='" + lsmodulereportingto_gid + "' and b.employee_gid ='" + values.rm_tagging_id + "' group by a.employeereporting_to";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                reportingmanager_gid = objODBCDatareader["employeereporting_to"].ToString();
                reporting_manager = objODBCDatareader["reporting_name"].ToString();
            }
            objODBCDatareader.Close();



            //msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + values.rm_tagging_id + "'";
            //string reporting_to = objdbconn.GetExecuteScalar(msql);

            //msql = "SELECT user_gid from hrm_mst_temployee  where employee_gid='" + reporting_to + "'";
            //string user_gid = objdbconn.GetExecuteScalar(msql);

            //msSQL = " select concat(u.user_firstname,'  ',u.user_lastname) as user_firstname,user_gid from adm_mst_tuser u " +
            //        " where user_gid = '" + user_gid + "'";
            //objODBCDatareader = objdbconn.GetDataReader(msSQL);
            //if (objODBCDatareader.HasRows == true)
            //{
            //    reporting_manager = objODBCDatareader["user_firstname"].ToString();
            //    reportingmanager_gid = objODBCDatareader["user_gid"].ToString();

            //}

            //objODBCDatareader.Close();

            msSQL = " update ocs_mst_tsacontact set rm_tagging='" + values.rm_tagging_id + "', sa_reportingmanager='" + reporting_manager + "',reportingmanager_gid='" + reporting_to + "',created_by='" + values.rm_tagging_id + "',tagging_flag= 'Y'" +
                        " where sacontact_gid = '" + values.sacontact_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select approvalstatus from ocs_mst_tsacontact where sacontact_gid = '" + values.sacontact_gid + "'";

            values.approvalstatus = objdbconn.GetExecuteScalar(msSQL);

            msGetGid = objcmnfunctions.GetMasterGID("TEIN");

            msSQL = " insert into ocs_mst_ttaggedemployeeindividuallog (" +
                  " taggedemployeeindividuallog_gid , " +
                  " sacontact_gid," +
                  " individualtaggedemployee_gid," +
                  " individualtaggedemployee_name," +
                  " rmtagged_remarks," +
                  " approval_status," +
                  " created_by," +
                  " created_date) " +
                  " values (" +
                  " '" + msGetGid + "'," +
                   " '" + values.sacontact_gid + "'," +
                  " '" + values.rm_tagging_id + "'," +
                  " '" + values.rm_tagging_name + "'," +
                 " '" + values.tagged_remarks + "'," +
                  " '" + values.approvalstatus + "'," +
                  " '" + employee_gid + "'," +
                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                try
                {
                    k = 1;



                    msSQL = "SELECT company_mail,pop_server,pop_port,pop_username,pop_password FROM adm_mst_tcompany ";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        ls_server = objODBCDatareader["pop_server"].ToString();
                        ls_port = Convert.ToInt32(objODBCDatareader["pop_port"]);
                        ls_username = objODBCDatareader["pop_username"].ToString();
                        ls_password = objODBCDatareader["pop_password"].ToString();
                    }
                    objODBCDatareader.Close();
                    string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
                    sToken = "";
                    int Length = 100;
                    for (int j = 0; j < Length; j++)
                    {
                        string sTempChars = saAllowedCharacters[rand.Next(0, saAllowedCharacters.Length)];
                        sToken += sTempChars;
                    }

                    k = k + 1;
                    //RM Name-need to check


                    //string msql = "select employeereporting_to from adm_mst_tmodule2employee where module_gid = 'ITS' and  employee_gid='" + employee_gid + "'";
                    //string reporting_to = objdbconn.GetExecuteScalar(msql);


                    msSQL = " select group_concat(employee_emailid)  from hrm_mst_temployee " +
                            " where employee_gid in ('" + values.rm_tagging_id.Replace(",", "', '") + "')";
                    lsto_mail = objdbconn.GetExecuteScalar(msSQL);


                    //msSQL = "select group_concat(employee_emailid) from hrm_mst_temployee where employee_gid in ('" + lscc2members.Replace(",", "', '") + "')";
                    //cc_mailid = objdbconn.GetExecuteScalar(msSQL);

                    //Mail Template Details

                    msSQL = "select sacontact_gid,concat(i.sa_firstname,'  ',i.sa_middlename,'  ',i.sa_lastname) as sa_associatename,group_concat(distinct i.created_by, ',', i.reportingmanager_gid) as cc2members,i.sa_autogeneratedid,i.created_by," +
          " date_format(i.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
      " concat(a.user_firstname,'  ',a.user_lastname) as user_firstname from ocs_mst_tsacontact i join hrm_mst_temployee e" +
          " on e.employee_gid = i.created_by join adm_mst_tuser a on a.user_gid = e.user_gid where" +
             " sacontact_gid = '" + values.sacontact_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        saAssociateName = objODBCDatareader["sa_associatename"].ToString();
                        lssa_autogeneratedid = objODBCDatareader["sa_autogeneratedid"].ToString();
                        lscc2members = objODBCDatareader["cc2members"].ToString();
                        lscreated_date = objODBCDatareader["created_date"].ToString();
                        lsuser_firstname = objODBCDatareader["user_firstname"].ToString();

                    }


                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(samobile_no) as samobile_no from ocs_mst_tsacontact2mobileno " +
                         " where sacontact_gid = '" + values.sacontact_gid + "'";
                    //values.openquerycount = objdbconn.GetExecuteScalar(msSQL);
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssamobile_no = objODBCDatareader["samobile_no"].ToString();

                    }

                    objODBCDatareader.Close();

                    msSQL = "select sacontact_gid,max(saemail_address) as saemail_address from ocs_mst_tsacontact2email " +
                            " where sacontact_gid = '" + values.sacontact_gid + "'";

                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lssaemail_address = objODBCDatareader["saemail_address"].ToString();

                    }

                    objODBCDatareader.Close();
                    msSQL = "select concat(user_firstname,'',user_lastname,'/',user_code) from adm_mst_tuser a " +
                      "left join hrm_mst_temployee b on a.user_gid = b.user_gid " +
                      "where b.employee_gid ='" + employee_gid + "'";
                    employeename = objdbconn.GetExecuteScalar(msSQL);


                    msSQL = "select employee_emailid from hrm_mst_temployee where employee_gid='" + reporting_to + "'";
                    string Tomailid = objdbconn.GetExecuteScalar(msSQL);
                    string lsmailid = ConfigurationManager.AppSettings["taggedcc"].ToString();
                    cc_mailid = lsmailid + "," + Tomailid;

                    sub = " Samunnati Business Associate is tagged to you ";
                    body = "Dear " + HttpUtility.HtmlEncode(values.rm_tagging_name) + ",<br />";
                    body = body + "<br />";
                    body = body + "Greetings,  <br />";
                    body = body + "<br />";
                    body = body + "The following SBA has been Re-tagged to you. The details are as follows,  <br />";
                    body = body + "<br />";
                    body = body + "<b> SBA Name :</b> " + HttpUtility.HtmlEncode(saAssociateName) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Registration ID :</b> " + lssa_autogeneratedid + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Re-Tagged date :</b> " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Mobile number :</b> " + HttpUtility.HtmlEncode(lssamobile_no) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Email address :</b> " + HttpUtility.HtmlEncode(lssaemail_address) + "<br />";
                    body = body + "<br />";
                    body = body + "<b> Tagged Remarks :</b> " + HttpUtility.HtmlEncode(values.tagged_remarks) + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "Kindly log into systems to verify the Onboarding Details.";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + "<br />";
                    body = body + " **This is an automated e-mail. Please do not reply to this mailbox**";


                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new MailAddress(ls_username);
                    //message.To.Add(new MailAddress(lsto_mail));


                    lsBccmail_id = ConfigurationManager.AppSettings["SAbcc"].ToString();

                    if (lsBccmail_id != null & lsBccmail_id != string.Empty & lsBccmail_id != "")
                    {
                        lsBCCReceipients = lsBccmail_id.Split(',');
                        if (lsBccmail_id.Length == 0)
                        {
                            message.Bcc.Add(new MailAddress(lsBccmail_id));
                        }
                        else
                        {
                            foreach (string BCCEmail in lsBCCReceipients)
                            {
                                message.Bcc.Add(new MailAddress(BCCEmail)); //Adding Multiple BCC email Id
                            }
                        }
                    }

                    if (lsto_mail != null & lsto_mail != string.Empty & lsto_mail != "")
                    {
                        lsToReceipients = lsto_mail.Split(',');
                        if (lsto_mail.Length == 0)
                        {
                            message.To.Add(new MailAddress(lsto_mail));
                        }
                        else
                        {
                            foreach (string ToEmail in lsToReceipients)
                            {
                                message.To.Add(new MailAddress(ToEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }
                    if (cc_mailid != null & cc_mailid != string.Empty & cc_mailid != "")
                    {
                        lsCCReceipients = cc_mailid.Split(',');
                        if (cc_mailid.Length == 0)
                        {
                            message.CC.Add(new MailAddress(cc_mailid));
                        }
                        else
                        {
                            foreach (string CCEmail in lsCCReceipients)
                            {
                                message.CC.Add(new MailAddress(CCEmail)); //Adding Multiple CC email Id
                            }
                        }
                    }


                    message.Subject = sub;
                    message.IsBodyHtml = true; //to make message body as html  
                    message.Body = body;
                    smtp.Port = ls_port;
                    smtp.Host = ls_server; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    smtp.Credentials = new NetworkCredential(ls_username, ls_password);
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    values.status = true;

                    if (values.status == true)
                    {
                        msSQL = "Insert into ocs_trn_tSAOnboardingmailcount( " +
                           " sacontactinstitution_gid," +
                           " from_mail," +
                           " to_mail," +
                           " cc_mail," +
                           " mail_status," +
                           " mail_senddate, " +
                           " created_by," +
                           " created_date)" +
                           " values(" +
                           "'" + msGetGid + "'," +
                           "'" + employee_gid + "'," +
                           "'" + lsto_mail + "'," +
                           "'" + cc_mailid + "'," +
                           "'SA Onboarding Intiated for Verification'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }

                }
                catch (Exception ex)
                {

                }
                //Mail Trigger
                values.status = true;
                values.message = "RM tagged successfully";
                return true;

            }
            else
            {
                values.status = false;
                values.message = "RM tagging failed";
                return false;

            }
        }
        public void DaIndividualPannumbervalidate(string pannumber, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select sa_pannumber from ocs_mst_tsacontact where sa_pannumber='" + pannumber + "' and approvalstatus not in ('Rejected','BD Verification Rejected','Application Rejected','Deferred') ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.message = "Pannumber already exist";
                    values.status = false;
                }
                else
                {
                    values.status = true;
                }

            }
            catch
            {

            }
        }
        public void DaInstitutionPannumbervalidate(string pannumber, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select sa_companypan from ocs_mst_tsainstitution where sa_companypan='" + pannumber + "' and approvalstatus not in ('Rejected','BD Verification Rejected','Application Rejected','Deferred') ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.message = "Pannumber already exist";
                    values.status = false;
                }
                else
                {
                    values.status = true;
                }

            }
            catch
            {

            }
        }
        public void DaGetSaApprovalInitiateSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat ,  " +
                         " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                      " (a.origination) as RecordSource," +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                        " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved') and a.reportingmanager_gid='" + employee_gid + " '" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            code_created_flag = (dr_datarow["code_created_flag"].ToString()),
                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            approved_by = (dr_datarow["approved_by"].ToString()),
                            approved_date = (dr_datarow["approved_date"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetSaApproverCounts(string employee_gid, geSaOnboardingCount values)
        {
            msSQL = "select (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a  where a.approvalinitated_flag = 'Y' " +
                " and a.checkerinstitution_flag = 'Y' and a.finalinstitutionapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc)  AS Institution_Count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalinitated_flag = 'Y'  and a.approval_flag = 'Y' and a.approvalstatus in ('Approved') and a.reportingmanager_gid='" + employee_gid + "' " +
            " order by a.created_date desc) As InstitutionInitiated_count, " +
            " (select count(sacontactinstitution_gid) from ocs_mst_tsainstitution a where a.approvalstatus='Deferred'" +
            " order by a.created_date desc) As Institutiondeferred_count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y' and checkerindividual_flag = 'Y' and " +
            "  a.finalindividualapproval_flag = 'N' and a.reportingmanager_gid='" + employee_gid + "' order by a.created_date desc) As Individual_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalstatus='Deferred' order by a.created_date desc) As Individualdeferred_Count, " +
            " (select count(sacontact_gid) from ocs_mst_tsacontact a where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved') and a.reportingmanager_gid='" + employee_gid + "' " +
            "  order by a.created_date desc) As IndividualInitiated_count ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.institution_count = objODBCDatareader["Institution_Count"].ToString();
                values.institutioninitiated_count = objODBCDatareader["InstitutionInitiated_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.institutiondeferred_count = objODBCDatareader["Institutiondeferred_Count"].ToString();
                values.individualdeferred_count = objODBCDatareader["Individualdeferred_Count"].ToString();
                values.individual_count = objODBCDatareader["Individual_Count"].ToString();
                values.individualinitiated_count = objODBCDatareader["IndividualInitiated_Count"].ToString();
            }
            objODBCDatareader.Close();
        }
        public void DaGetSaApprovalInitiatedSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                      " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.finalapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.finalapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.finalapproved_date, now()), '60'), 'Mins') as tat  ,  " +
                      " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as approved_by," +
                      " (a.origination) as RecordSource," +
                      " date_format(a.approved_date,'%d-%m-%Y %h:%i %p') as approved_date,code_created_flag, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                      " (a.renewal_status) as Renewal_status" +
                      " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid=a.approved_by" +
                      " left join adm_mst_tuser f on f.user_gid=e.user_gid " +
                      " where a.approvalinitated_flag = 'Y'  and approval_flag = 'Y' and a.approvalstatus in ('Approved') and a.reportingmanager_gid='" + employee_gid + "' " +
                      " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        code_created_flag = (dt["code_created_flag"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        approved_by = (dt["approved_by"].ToString()),
                           approved_date = (dt["approved_date"].ToString()),
                        recordsource = (dt["RecordSource"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        sa_tat = (dt["tat"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
        public bool DaPostPasswordUpdate(employee values)
        {
            bool status = false;
            try
            {
                msSQL = "update ocs_mst_tsaloginsbauser set sbauser_password='" + objcmnfunctions.ConvertToAscii(values.sbauser_password) + "' where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult == 1)
                {
                   // objcmnfunctions.mail()

                    values.message = "Password updated successfully..!!";
                    values.status = true;
                     status = true;

                   
                }
                else
                {
                    values.message = "Error occurred while updating password..!!";
                    values.status = false;
                    status = false;
                    
                }

            }
            
            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAPassword/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }
        public bool DaPostDeActivate(string employee_gid, employee values)
        {
            bool status = false;
            try
            {
                msSQL = "select sbauser_gid from ocs_mst_tsaloginsbauser where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == true)
                {
                    sbauser_gid = objODBCDatareader["sbauser_gid"].ToString();
                }
                msSQL = "update ocs_mst_tsaloginsbauser set active='N' where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SALA");
                    msSQL = "Insert into ocs_trn_tsalogactivelog(loginactivelog_gid,sbauser_gid,sa_autogeneratedid,status_log,remarks,created_by,created_date)" +
                            " Values ('" + msGetGid + " ','" + sbauser_gid + "','" + values.sa_autogeneratedid + "','N','" + values.remarks + "','" + employee_gid + "', " +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult == 1)
                    {
                        values.message = "Login Deactivated successfully..!!";
                        values.status = true;
                        status = true;


                    }
                    else
                    {
                        values.message = "Error occurred in log..!!";
                        values.status = false;
                        status = false;

                    }


                }
                else
                {
                    values.message = "Error occurred while  Login Deactivating..!!";
                    values.status = false;
                    status = false;

                }

            }

            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBADeactivation/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }
        public bool DaPostActivate(string employee_gid, employee values)
        {
            bool status = false;
            try
            {
                msSQL = "select sbauser_gid from ocs_mst_tsaloginsbauser where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == true)
                {
                    sbauser_gid = objODBCDatareader["sbauser_gid"].ToString();
                }

                msSQL = "update ocs_mst_tsaloginsbauser set active='Y' where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SALA");
                    msSQL = "Insert into ocs_trn_tsalogactivelog(loginactivelog_gid,sbauser_gid,sa_autogeneratedid,status_log,remarks,created_by,created_date)" +
                            " Values ('" + msGetGid + " ','" + sbauser_gid + "','" + values.sa_autogeneratedid + "','Y','" + values.remarks + "','" + employee_gid + "', " +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult == 1)
                    {
                        values.message = "Login activated successfully..!!";
                        values.status = true;
                        status = true;


                    }
                    else
                    {
                        values.message = "Error occurred in log..!!";
                        values.status = false;
                        status = false;

                    }


                }
                else
                {
                    values.message = "Error occurred while  Login activating..!!";
                    values.status = false;
                    status = false;

                }
            }

            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBADeactivation/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }

        public bool DaPostWebActivate(string employee_gid, employee values)
        {
            bool status = false;
            try
            {
                msSQL = "select sbauser_gid from ocs_mst_tsaloginsbauser where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == true)
                {
                    sbauser_gid=objODBCDatareader["sbauser_gid"].ToString();
                }
                    
                    msSQL = "update ocs_mst_tsaloginsbauser set web_active='Y' where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SALW");
                    msSQL = "Insert into ocs_trn_tsaloginwebactivelog(loginweblog_gid,sbauser_gid,sa_autogeneratedid,status_log,remarks,created_by,created_date)" +
                            " Values ('" + msGetGid + " ','" + sbauser_gid + "','" + values.sa_autogeneratedid + "','Y','" + values.remarks + "','" + employee_gid + "', " +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult==1)
                    {
                        values.message = "Activated successfully..!!";
                        values.status = true;
                        status = true;


                    }
                    else
                    {
                        values.message = "Error occurred in log..!!";
                        values.status = false;
                        status = false;

                    }


                }
                else
                {
                    values.message = "Error occurred while Activating..!!";
                    values.status = false;
                    status = false;

                }

            }

            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAWeb/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }

        public bool DaPostWebDeActivate(string employee_gid,employee values)
        {
            bool status = false;
            try
            {
                msSQL = "select sbauser_gid from ocs_mst_tsaloginsbauser where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == true)
                {
                    sbauser_gid = objODBCDatareader["sbauser_gid"].ToString();
                }

                msSQL = "update ocs_mst_tsaloginsbauser set web_active='N' where sa_autogeneratedid='" + values.sa_autogeneratedid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("SALW");
                    msSQL = "Insert into ocs_trn_tsaloginwebactivelog(loginweblog_gid,sbauser_gid,sa_autogeneratedid,status_log,remarks,created_by,created_date)" +
                            " Values ('" + msGetGid + " ','" + sbauser_gid + "','" + values.sa_autogeneratedid + "','N','" + values.remarks + "','" + employee_gid + "', " +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult == 1)
                    {
                        values.message = "Deactivated successfully..!!";
                        values.status = true;
                        status = true;


                    }
                    else
                    {
                        values.message = "Error occurred in log..!!";
                        values.status = false;
                        status = false;

                    }


                }
                else
                {
                    values.message = "Error occurred while Deactivating..!!";
                    values.status = false;
                    status = false;

                }

            }

            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAWeb/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }


        public bool Dasamcodesview(employee values,string sa_autogeneratedid)
        {
            bool status = false;
            try
            {
                msSQL = "select samagro_code,concat(samfin_code ,' / ' , samagro_code) as samfin_code,web_active,active from ocs_mst_tsaloginsbauser where sa_autogeneratedid='" + sa_autogeneratedid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                   values.samfin_code= objODBCDatareader["samfin_code"].ToString();
                   values.samagro_code = objODBCDatareader["samagro_code"].ToString();
                    values.web_active = objODBCDatareader["web_active"].ToString();
                    values.active = objODBCDatareader["active"].ToString();

                }
                else
                {
                    values.message = "Error occurred..!!";
                    values.status = false;
                    status = false;

                }

            }

            catch (Exception ex)
            {
                string lspath = ConfigurationManager.AppSettings["file_path"].ToString() + "/erpdocument/SBALOG/SBAWeb/" + DateTime.Now.Year + @"\" + DateTime.Now.Month;
                if ((!System.IO.Directory.Exists(lspath)))
                    System.IO.Directory.CreateDirectory(lspath);



                lspath = lspath + @"\" + DateTime.Now.ToString("yyyy-MM-dd HH") + ".txt";
                System.IO.StreamWriter sw = new System.IO.StreamWriter(lspath, true);
                sw.WriteLine("*******Date*****" + DateTime.Now.ToString("yyyy - MM - dd HH: mm:ss") + "***********Exception-" + ex.Message.ToString() + "*********Query-" + msSQL);
                sw.Close();



                values.status = false;
                values.message = "Error Occured..";

            }
            return status;
        }
        public void DaGetWebAccessActiveLog(string sa_autogeneratedid, employee values)
        {
            try
            {
               
                msSQL = "Select a.sa_autogeneratedid,a.remarks,date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by,status_log" +
                        " from ocs_trn_tsaloginwebactivelog a" +
                        " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where a.sa_autogeneratedid='" + sa_autogeneratedid + "'  order by a.loginweblog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<log_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new log_list
                        {
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    values.log_list= getSegment;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }
        public void DaGetLoginActiveLog(string sa_autogeneratedid, employee values)
        {
            try
            {

                msSQL = "Select a.sa_autogeneratedid,a.remarks,date_format(a.created_date,'%d-%m-%Y || %h:%i %p') as created_date, " +
                        " concat(c.user_firstname,' ' ,c.user_lastname,'||',c.user_code) as created_by,status_log" +
                        " from ocs_trn_tsalogactivelog a" +
                        " left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid where a.sa_autogeneratedid='" + sa_autogeneratedid + "'  order by a.loginactivelog_gid desc ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getSegment = new List<log_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getSegment.Add(new log_list
                        {
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            remarks = (dr_datarow["remarks"].ToString()),
                            status_log = (dr_datarow["status_log"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                        });
                    }
                    values.log_list = getSegment;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }
        public void DaGetIndividualDeferredSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            try
            {
                msSQL = " select a.sacontact_gid,a.sa_firstname,a.sa_middlename,a.sa_lastname,a.approvalstatus,a.sa_autogeneratedid,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                        " (a.origination) as RecordSource," +
                        " CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                          " if (referred_by is null,'--',referred_by) as referred_by, " +
                        " (a.renewal_status) as Renewal_status" +
                        " from ocs_mst_tsacontact a " +
                        " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                        " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                        " where a.approvalstatus = 'Deferred'" +
                        " order by (concat(a.created_date,'%d-%m-%Y %h:%i %p')) desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getsaOnboardSummary_list.Add(new saOnboardSummary_list
                        {

                            sacontact_gid = (dr_datarow["sacontact_gid"].ToString()),
                            renewal_status = (dr_datarow["Renewal_status"].ToString()),
                            sa_updated_by = (dr_datarow["created_by"].ToString()),
                            satype_name = (dr_datarow["satype_name"].ToString()),
                            sa_autogeneratedid = (dr_datarow["sa_autogeneratedid"].ToString()),
                            saentitytype_name = (dr_datarow["saentitytype_name"].ToString()),
                            sa_updated_date = (dr_datarow["created_date"].ToString()),
                            sa_firstname = (dr_datarow["sa_firstname"].ToString()),
                            sa_lastname = (dr_datarow["sa_lastname"].ToString()),
                            sa_middlename = (dr_datarow["sa_middlename"].ToString()),
                            approvalstatus = (dr_datarow["approvalstatus"].ToString()),
                            recordsource = (dr_datarow["RecordSource"].ToString()),
                            referred_by = (dr_datarow["referred_by"].ToString()),
                            sa_tat = (dr_datarow["tat"].ToString())
                        });
                    }
                    values.saOnboardSummary_list = getsaOnboardSummary_list;
                }
                dt_datatable.Dispose();
            }
            catch
            {

            }
        }
        public void DaGetInstitutionDeferredSummary(string employee_gid, MdlsaOnboardSummary values)
        {
            msSQL = " select a.sacontactinstitution_gid,a.sa_associatename,a.sa_autogeneratedid,a.approvalstatus,a.satype_gid,a.satype_name,a.saentitytype_name, a.saentitytype_gid,concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by," +
                       " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, CONCAT(FLOOR(timestampdiff(day, a.makerapproved_date, now())), ' days ',MOD(timestampdiff(hour, a.makerapproved_date, now()), '24'),' Hrs ',MOD(timestampdiff(minute, a.makerapproved_date, now()), '60'), 'Mins') as tat, " +
                     " (a.origination) as RecordSource," +
                      " if (referred_by is null,'--',referred_by) as referred_by, " +
                     " (a.renewal_status) as Renewal_status" +
                       " from ocs_mst_tsainstitution a " +
                      " left join hrm_mst_temployee b on b.employee_gid=a.created_by" +
                      " left join adm_mst_tuser c on c.user_gid=b.user_gid " +
                     " where a.approvalstatus ='Deferred'" +
                      " order by a.created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsaOnboardSummary_list = new List<saOnboardSummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getsaOnboardSummary_list.Add(new saOnboardSummary_list
                    {
                        sacontactinstitution_gid = (dt["sacontactinstitution_gid"].ToString()),
                        sa_updated_by = (dt["created_by"].ToString()),
                        sa_associatename = (dt["sa_associatename"].ToString()),
                        satype_name = (dt["satype_name"].ToString()),
                        saentitytype_name = (dt["saentitytype_name"].ToString()),
                        sa_updated_date = (dt["created_date"].ToString()),
                        sa_autogeneratedid = (dt["sa_autogeneratedid"].ToString()),
                        approvalstatus = (dt["approvalstatus"].ToString()),
                        sa_tat = (dt["tat"].ToString()),
                        renewal_status = (dt["Renewal_status"].ToString()),
                        referred_by = (dt["referred_by"].ToString()),
                        recordsource = (dt["RecordSource"].ToString())
                    });

                }
            }
            values.saOnboardSummary_list = getsaOnboardSummary_list;
            dt_datatable.Dispose();
        }
    }
}

