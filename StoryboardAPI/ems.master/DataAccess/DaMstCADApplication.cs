using ems.master.Models;
using ems.utilities.Functions;
using Spire.Doc;
using Spire.Doc.Documents;
using Spire.Pdf;
using Spire.Pdf.HtmlConverter;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Odbc;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading;
using System.Web;
using System.Text.RegularExpressions;
using ems.storage.Functions;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Text;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using Newtonsoft.Json;
using ems.hbapiconn.Functions;
using ems.hbapiconn.Models;

/// <summary>
/// (It's used for CAD page in Samfin)CADApplication DataAccess Class accessed by API methods from related Controller class and is returning relevant response to client.
/// </summary>
/// <remarks>Written by Sumala,Logapriya and Abilash</remarks>

namespace ems.master.DataAccess
{
    public class DaMstCADApplication
    {
        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        Fnazurestorage objcmnstorage = new Fnazurestorage();
        DataTable dt_datatable, dt_child, dt_childindividual, dt_childgroup, dt_datatable1, dt_datatable2, dt_datatable3, dt_datatable4, dt_datatable5;
        string msSQL, msGetGid, msGetGid1, msGetGidCC, msGetGid2, msGetGid3,  lscadapplication_gid;
        int mnResult, mnResult1, mnResult2, mnResultCAD;
        HttpPostedFile httpPostedFile;
        OdbcDataReader objODBCDataReader, objODBCDataReader1, objODBCDataReader2, objODBCDatareader;
        string lssanctionref_no, lstemplate_content, lscompany_code, lspath, lsdocument_path, fileName;
        string msGetRef, msGetGID, lsdocument_code, lsdocument_name, lsdocumenttype_name, lscompanydocument_name, lsindividualdocument_name, lsgroupdocument_name, lsdocumenttype_gid;
        string lscontent = string.Empty;
        string lsinsti_id, lscont_id;
        int lsinsti_idcount, lscont_idcount;
        string institution_urn = string.Empty;
        string individual_urn = string.Empty;
        string group_urn = string.Empty;
        string lsgeneticcode_gid, lsgeneticcode_name, lsgeneticcode_status, lsgeneticcode_remarks, lscreditgeneticcode_gid, lscredit_gid;
        string lsexistingbankfacility_gid, lsbank_gid, lsbank_name, lsfacilitysanctioned_on, lsfundedtypeindicator_gid, lsfundedtypeindicator_name, lssanction_limit;
        string lscreditinstalmentfrequency_gid, lscreditinstalmentfrequency_name, lsinstalment_amount, lsoutstanding_amount, lsoverdue_amount, lsnumberofdays_overdue;
        string lsoverdueifany_dpd, lscreditaccountclassification_gid, lscreditaccountclassification_name, lsremarks, lsrecord_date, lscreditrepaymentdtl_gid;
        string lslendertype_gid, lslender_type, lsifsc_code, lsnbfc_name, lsbranch_name, lsfacility_type, lssanctionreference_id, lssanctioned_on, lssanction_amount;
        string lsaccountstatus_on, lscurrentoutsatnding_amount, lsinstalment_frequency, lsdemanddue_date, lsoringinaltenure_year, lsoringinaltenure_month, lsfacilitytype_gid;
        string lsoringinaltenure_days, lsbalancetenure_year, lsbalancetenure_month, lsbalancetenure_days, lsaccountclassification_gid, lsaccount_classification;
        string lssupplier_gid, lssupplier_name, lsrelationship_vintage_year, lsrelationship_vintage_month, lspurchase_amount, lsbankdebit_amount, lsrelationship_supplier,
             lsstart_date, lsend_date, lsapplication_gid, lsapplication_no, lsinstitution2branch_gid, lsinstitution2mobileno_gid;
        string lsbuyer_gid, lsbuyer_name, lsbuyer_limit, lsavailed_limit, lsbalance_limit, lstop_buyer, lsbill_tenuredays, lsmargin, lsbankcredit_value, lsbankcredit_date;
        string lssource_deduction, lsrelationship_borrower, lsenduse_monitoring, lsinstitution2email_gid, lsinstitution2address_gid, lsinstitution2licensedtl_gid;
        string lscreditpolicy_gid, lscredit_policy, lscomplied_status, lsobservation, application2servicecharge_count, application2loan_count;

        string lsbank_address, lsmicr_code, lsbankaccount_name, lsbankaccounttype_gid, lsbankaccounttype_name, lsbankaccount_number, lsconfirmbankaccountnumber,
                   lsjoinaccount_status, lsjoinaccount_name, lschequebook_status, lsaccountopen_date;
        string lscompany_name, lsdate_incorporation, lsbusinessstart_date, lscompanypan_no, lsmonth_business, lscin_no,
        lsofficial_telephoneno, lsofficialemail_address, lscompanytype_gid, lscompanytype_name, lsstakeholder_type, lsstakeholdertype_gid, lsassessmentagency_gid,
        lsassessmentagency_name, lsassessmentagencyrating_gid, lsratingas_on, lsamlcategory_gid, lsamlcategory_name, lsbusinesscategory_gid,
        lsbusinesscategory_name, lscontactperson_firstname, lscontactperson_middlename, lscontactperson_lastname, lsdesignation_gid, lsdesignation, lslastyear_turnover,
        lsescrow, lsurn_status, lsurn, lsyear_business, lsassessmentagencyrating_name, lsgst_state, lsgst_no, lsgst_registered;
        string lsmobile_no, lsprimary_status, lswhatsapp_no, lsemail_address;
        string lsaddress_typegid, lsaddress_type, lsaddressline1, lsaddressline2, lslandmark, lstaluka, lspostal_code, lscity, lsdistrict, lsstate, lscountry;
        string lslicensetype_gid, lslicensetype_name, lslicense_number, lslicenseissue_date, lslicenseexpiry_date,
        lscontact2mobileno_gid, lscontact2email_gid, lscontact_gid, lscontact2address_gid, lscustomer_urn, lscustomer_name, lsvertical_gid,
        lsvertical_name, lsverticaltaggs_gid, lsverticaltaggs_name, lsconstitution_gid, lsconstitution_name, lsbusinessunit_gid, lsbusinessunit_name,
        lssa_status, lsvernacularlanguage_gid, lsvernacular_language, lscontactpersonfirst_name, lscontactpersonmiddle_name, lscontactpersonlast_name,
        lsdesignation_type, lslandline_no, lssa_name, lsapplication2geneticcode_gid, lsgenetic_status, lsgenetic_remarks, lsprimary_emailaddress,
        lsapplication2email_gid, lsprimary_mobileno, lswhatsapp_mobileno, lsapplication2contact_gid, lsmaritalstatus_gid, lsmaritalstatus_name;
        string lspan_no, lsaadhar_no, lsfirst_name, lsmiddle_name, lslast_name, lsindividual_dob, lsage, lsgender_gid, lsgender_name, lsdesignation_name,
        lseducationalqualification_gid, lseducationalqualification_name, lsmain_occupation, lsannual_income, lsmonthly_income, lspep_status, lspepverified_date;
        string lsfather_firstname, lsfather_middlename, lsfather_lastname, lsfather_dob, lsfather_age, lsmother_firstname, lsmother_middlename,
        lsmother_lastname, lsmother_dob, lsmother_age, lsspouse_firstname, lsspouse_middlename, lsspouse_lastname, lsspouse_age, lsownershiptype_gid,
        lsownershiptype_name, lsresidencetype_gid, lsresidencetype_name, lscurrentresidence_years, lsbranch_distance, lspropertyholder_gid,
        lspropertyholder_name, lsincometype_gid, lsincometype_name, lsgroup_gid, lsgroup_name, lsprofile, lsspouse_dob, lsfathernominee_status,
        lsmothernominee_status, lsspousenominee_status, lsothernominee_status, lsrelationshiptype, lsnomineefirst_name, lsnominee_middlename,
        lsnominee_lastname, lsnominee_dob, lsnominee_age, lstotallandinacres, lscultivatedland, lspreviouscrop, lsprposedcrop, lsinstitution_gid, lsinstitution_name;
        string lsbank_accountno, lsaccountholder_name, lsbank_branch, lsgroup2bank_gid, lsgroup2address_gid, lsapplication2hypothecation_gid;
        string lssecuritytype_gid, lssecurity_type, lssecurity_description, lssecurity_value, lssecurityassessed_date, lsasset_id, lsroc_fillingid, lsgroup_status,
        lshypoobservation_summary, lsprimary_security, lsCERSAI_fillingid, lsdate_of_formation, lsgroup_type, lsgroupmember_count, lsgroupurn_status, lsgroup_urn;
        string lsprocessing_fee, lsprocessing_collectiontype, lsdoc_charges, lsdoccharge_collectiontype, lsfieldvisit_charge, lsadhoc_fee,
        lsadhoc_collectiontype, lslife_insurance, lslifeinsurance_collectiontype, lsacct_insurance, lstotal_collect, lstotal_deduct, lsproduct_type, lsproducttype_gid, lsacctinsurance_collectiontype,
            lsfieldvisit_charges_collectiontype, lscreditgroup_gid, lscreditgroup_name, lsregion;
        string lsmonth, lsyear, lstotaldebits, lstotalcredits, lsaccttransferdebits, lsaccttransfercredits, lsloansrepayment, lscashdeposits, lspurchasepayments, lssalesreceipts, lschequeneftinward, lschequeneftoutward, lsoverdrawingscc, lssalesgst, excelRange, lsprogram_gid, lsprogram_name;
        int rowCount, columnCount;
        int columnNumber;
        string endRange, colName;
        string lsratemargin;
        int columnInsertCount;
        string lsproduct_gid, lsproduct_name, lsvariety_gid, lsvariety_name, lssector_name, lscategory_name, lsbotanical_name, lsalternative_name;
        int matchCount1, matchCount2;
        string lspan_status, msGetGidpan, lsapplication_gidcontact, msGetDocumentGid;
        string lsapplication2collateral_gid, lssource_type, lsguideline_value, lsguideline_date, lsmarketvalue_date, lsmarket_value, lsforcedsource_value;
        string lscollateralSSV_value, lsforcedvalueassessed_on, lscollateralobservation_summary, lsbill_tenure;
        string lsoveralllimit_amount, lsvalidityoveralllimit_year, lsvalidityoveralllimit_month, lsvalidityoveralllimit_days, lscalculationoveralllimit_validity;
        string lsenduse_purpose, lsfieldvisit_collectiontype;
        string lsapplication2buyer_gid, lsapplication2loan_gid;

        string lsfacilityrequested_date, lsproductsub_type, lsfacilityvalidity_month, lsfacilityvalidity_days;
        string lsproductsubtype_gid, lsloantype_gid, lsloan_type, lsfacilityloan_amount, lsrate_interest, lspenal_interest, lsfacilityvalidity_year;
        string lsfacilityoverall_limit, lstenureproduct_year, lstenureproduct_month, lstenureproduct_days, lstenureoverall_limit, lsfacility_mode;
        string lsscheme_type, lsprincipalfrequency_name, lsprincipalfrequency_gid, lsinterestfrequency_name, lsinterestfrequency_gid, lsinterest_status, lsmoratorium_status;
        string lsmoratorium_type, lsmoratorium_startdate, lsmoratorium_enddate, lsprogram;
        string lsnearsamunnatiabranch_gid, lsnearsamunnatiabranch_name, lsudhayam_registration, lstan_number, lsbusiness_description, lstanstate_gid, lstanstate_name, lsinternalrating_gid, lsinternalrating_name;
        string lsphysicalstatus_gid, lsphysicalstatus_name, lsstatusupdated_by;
        string lslatitude, lslongitude, msinstitution2fpocacity_gid;
        string lssales, lspurchase, lscredit_summation, lscheque_bounce, lsnumberof_boardmeetings, lsfarmer_count, lscrop_cycle, lscalamities_prone;
        string lsavailablerenthire, lsquantity, lsdescription, lsinsurance_status, lsinsurance_details, lscount, lsBreed;
        string lsnotrejectedpan, lsrejectedpan;
        int notrejectcount, rejectcount;
        private string lsrejectapplication_gid;
        public string institution_panstatus, contact_panstatus;
        int applicant_status;
        public void DaGetApplicationBasicView(string application_gid, MdlMstApplicationView values)
        {
            try
            {
                msSQL = " select a.application_gid, a.application_no, customer_urn, customerref_name as customer_name, vertical_name, verticaltaggs_name, " +
                        " constitution_name, businessunit_name, vernacular_language, sa_status, sa_id, sa_name, a.social_capital, a.trade_capital," +
                        " designation_type, landline_no, concat_ws(' ', contactpersonfirst_name, contactpersonmiddle_name, contactpersonlast_name) as contactperson_name," +
                        " a.region, " +
                        " date_format(a.headapproval_date,'%d-%m-%Y %h:%i %p') as businessapproved_date, date_format(a.cccompleted_date,'%d-%m-%Y %h:%i %p') as ccapproved_date," +
                        " momapproval_flag,approval_status,creditgroup_name, " +
                        " docchecklist_makerflag,docchecklist_checkerflag,docchecklist_approvalflag,product_gid,product_name, " +
                        " sector_name,category_name,variety_gid,variety_name,botanical_name,alternative_name,program_gid,program_name, " +
                        " case when e.urn = '' then d.urn else e.urn end as customer_urnno from ocs_trn_tcadapplication a" +
                        " left join ocs_trn_tcadinstitution d on d.application_gid = a.application_gid " +
                        " left join ocs_trn_tcadcontact e on e.application_gid = a.application_gid " +
                        " where a.application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.application_no = objODBCDatareader["application_no"].ToString();
                    values.customer_urn = objODBCDatareader["customer_urn"].ToString();
                    values.customer_name = objODBCDatareader["customer_name"].ToString();
                    values.vertical_name = objODBCDatareader["vertical_name"].ToString();
                    values.verticaltaggs_name = objODBCDatareader["verticaltaggs_name"].ToString();
                    values.constitution_name = objODBCDatareader["constitution_name"].ToString();
                    values.businessunit_name = objODBCDatareader["businessunit_name"].ToString();
                    values.vernacular_language = objODBCDatareader["vernacular_language"].ToString();
                    values.sa_status = objODBCDatareader["sa_status"].ToString();
                    values.sa_id = objODBCDatareader["sa_id"].ToString();
                    values.sa_name = objODBCDatareader["sa_name"].ToString();
                    values.landline_no = objODBCDatareader["landline_no"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    values.contactperson_name = objODBCDatareader["contactperson_name"].ToString();
                    values.social_capital = objODBCDatareader["social_capital"].ToString();
                    values.trade_capital = objODBCDatareader["trade_capital"].ToString();
                    values.momapproval_flag = objODBCDatareader["momapproval_flag"].ToString();
                    values.approval_status = objODBCDatareader["approval_status"].ToString();
                    values.creditgroup_name = objODBCDatareader["creditgroup_name"].ToString();
                    values.businessapproved_date = objODBCDatareader["businessapproved_date"].ToString();
                    values.ccapproved_date = objODBCDatareader["ccapproved_date"].ToString();
                    values.region = objODBCDatareader["region"].ToString();
                    values.docchecklist_makerflag = objODBCDatareader["docchecklist_makerflag"].ToString();
                    values.docchecklist_checkerflag = objODBCDatareader["docchecklist_checkerflag"].ToString();
                    values.docchecklist_approvalflag = objODBCDatareader["docchecklist_approvalflag"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();
                    values.program_gid = objODBCDatareader["program_gid"].ToString();
                    values.program_name = objODBCDatareader["program_name"].ToString();
                    values.customer_urnno = objODBCDatareader["customer_urnno"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();

                msSQL = " select application2hypothecation_gid from ocs_trn_tcadapplication2hypothecation " +
                       " where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.hypo_flag = "Y";
                }
                else
                {
                    values.hypo_flag = "N";
                }
                objODBCDatareader.Close();

                msSQL = " select application_gid from ocs_trn_tcadinstitution " +
                        " where application_gid='" + application_gid + "' and (stakeholder_type='Applicant' or stakeholder_type='Borrower')";
                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsapplication_gid != "")
                {
                    values.borrower_flag = "Y";
                    values.borrower_type = "Institution";
                }
                else
                {
                    msSQL = " select application_gid from ocs_trn_tcadcontact " +
                            " where application_gid='" + application_gid + "' and (stakeholder_type='Applicant' or stakeholder_type='Borrower')";
                    lsapplication_gidcontact = objdbconn.GetExecuteScalar(msSQL);
                    if (lsapplication_gidcontact != "")
                    {
                        values.borrower_flag = "N";
                        values.borrower_type = "Individual";
                    }
                    else
                    {
                        values.borrower_type = "";
                        values.borrower_flag = "";
                    }
                }

                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetGeneticDetailsView(string application_gid, MdlMstApplicationView values)
        {

            try
            {
                msSQL = " select geneticcode_name, genetic_status, genetic_remarks, application_gid, geneticcode_gid " +
                        " from ocs_trn_tcadapplication2geneticcode " +
                        " where application_gid = '" + application_gid + "' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getgenetic_list = new List<geneticdetails_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getgenetic_list.Add(new geneticdetails_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                            genetic_status = (dr_datarow["genetic_status"].ToString()),
                            genetic_remarks = (dr_datarow["genetic_remarks"].ToString()),

                        });
                    }
                    values.geneticdetails_list = getgenetic_list;
                }
                dt_datatable.Dispose();
                values.status = true;

            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetMobileMailDetailsView(string application_gid, MdlMstApplicationView values)
        {
            msSQL = "select mobile_no from ocs_trn_tcadapplication2contactno where application_gid='" + application_gid + "' and primary_mobileno = 'Yes'";
            values.primary_mobileno = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select email_address from ocs_trn_tcadapplication2email where application_gid='" + application_gid + "' and primary_emailaddress = 'Yes'";
            values.primary_email = objdbconn.GetExecuteScalar(msSQL);
            try
            {
                msSQL = " select application2contact_gid, application_gid, mobile_no, whatsapp_mobileno " +
                        " from ocs_trn_tcadapplication2contactno " +
                        " where application_gid = '" + application_gid + "' and primary_mobileno = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<mobilenumber_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new mobilenumber_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            mobile_no = (dr_datarow["mobile_no"].ToString()),
                            whatsapp_mobileno = (dr_datarow["whatsapp_mobileno"].ToString()),

                        });
                    }
                    values.mobilenumber_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

                msSQL = " select application2email_gid, application_gid, email_address " +
                        " from ocs_trn_tcadapplication2email " +
                        " where application_gid = '" + application_gid + "' and primary_emailaddress = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmail_list = new List<mail_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmail_list.Add(new mail_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            application2email_gid = (dr_datarow["application2email_gid"].ToString()),
                            email_address = (dr_datarow["email_address"].ToString()),

                        });
                    }
                    values.mail_list = getmail_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetProductChargesDtl(string application_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select application2loan_gid,date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,limit_product, " +
                        " productsub_type, format(loanfacility_amount,0,'en_IN') as loanfacility_amount, loan_type, rate_interest,margin, penal_interest, facilityoverall_limit, " +
                        " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name, " +
                        " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate, " +
                        " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate,scheme_type,tenureproduct_month,tenureproduct_days, " +
                        " product_gid,product_name,sector_name,category_name,variety_gid,variety_name,botanical_name,alternative_name,program_gid,program " +
                        " from ocs_trn_tcadapplication2loan " +
                        " where application_gid='" + application_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstloansummary_list = new List<mstLoan_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstloansummary_list.Add(new mstLoan_list
                        {
                            application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                            facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            productsub_type = (dr_datarow["productsub_type"].ToString()),
                            loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                            loan_type = (dr_datarow["loan_type"].ToString()),
                            rate_interest = (dr_datarow["rate_interest"].ToString()),
                            roi_margin = (dr_datarow["margin"].ToString()),
                            penal_interest = (dr_datarow["penal_interest"].ToString()),
                            facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                            tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                            facility_type = (dr_datarow["facility_type"].ToString()),
                            facility_mode = (dr_datarow["facility_mode"].ToString()),
                            principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                            interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                            interest_status = (dr_datarow["interest_status"].ToString()),
                            moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                            moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                            moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                            moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                            scheme_type = (dr_datarow["scheme_type"].ToString()),
                            tenureproduct_days = (dr_datarow["tenureproduct_days"].ToString()),
                            tenureproduct_month = (dr_datarow["tenureproduct_month"].ToString()),
                            limit_product = (dr_datarow["limit_product"].ToString()),
                            product_gid = (dr_datarow["product_gid"].ToString()),
                            product_name = (dr_datarow["product_name"].ToString()),
                            sector_name = (dr_datarow["sector_name"].ToString()),
                            category_name = (dr_datarow["category_name"].ToString()),
                            variety_gid = (dr_datarow["variety_gid"].ToString()),
                            variety_name = (dr_datarow["variety_name"].ToString()),
                            botanical_name = (dr_datarow["botanical_name"].ToString()),
                            alternative_name = (dr_datarow["alternative_name"].ToString()),
                            program_gid = (dr_datarow["program_gid"].ToString()),
                            program = (dr_datarow["program"].ToString())
                        });
                    }
                    values.mstLoan_list = getmstloansummary_list;
                }
                dt_datatable.Dispose();

                msSQL = " select overalllimit_amount, validityoveralllimit_year, validityoveralllimit_month, validityoveralllimit_days, " +
                                " calculationoveralllimit_validity,csa_applicability,csaactivity_gid,csaactivity_name,percentageoftotal_limit from ocs_trn_tcadapplication " +
                                " where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.overalllimit_amount = objODBCDatareader["overalllimit_amount"].ToString();
                    values.validityoveralllimit_year = objODBCDatareader["validityoveralllimit_year"].ToString();
                    values.validityoveralllimit_month = objODBCDatareader["validityoveralllimit_month"].ToString();
                    values.validityoveralllimit_days = objODBCDatareader["validityoveralllimit_days"].ToString();
                    values.calculationoveralllimit_validity = objODBCDatareader["calculationoveralllimit_validity"].ToString();
                    values.csa_applicability = objODBCDatareader["csa_applicability"].ToString();
                    values.csaactivity_gid = objODBCDatareader["csaactivity_gid"].ToString();
                    values.csaactivity_name = objODBCDatareader["csaactivity_name"].ToString();
                    values.percentageoftotal_limit = objODBCDatareader["percentageoftotal_limit"].ToString();
                }
                objODBCDatareader.Close();


                msSQL = " select application2loan_gid, source_type, format(guideline_value,0,'en_IN') as guideline_value, date_format(guideline_date, '%d-%m-%Y') as guideline_date, " +
                        " date_format(marketvalue_date, '%d-%m-%Y') as marketvalue_date, format(market_value,0,'en_IN') as market_value, " +
                        " format(forcedsource_value,0,'en_IN') as forcedsource_value, format(collateralSSV_value,0,'en_IN') as collateralSSV_value, " +
                        " date_format(forcedvalueassessed_on, '%d-%m-%Y') as forcedvalueassessed_on, " +
                        " collateralobservation_summary,product_type,productsub_type from ocs_trn_tcadapplication2loan  " +
                        " where application_gid='" + application_gid + "' and loan_type ='Secured'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstcollateral_list = new List<mstcollateral_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstcollateral_list.Add(new mstcollateral_list
                        {
                            application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                            source_type = (dr_datarow["source_type"].ToString()),
                            guideline_value = (dr_datarow["guideline_value"].ToString()),
                            guideline_date = (dr_datarow["guideline_date"].ToString()),
                            marketvalue_date = (dr_datarow["marketvalue_date"].ToString()),
                            market_value = (dr_datarow["market_value"].ToString()),
                            forcedsource_value = (dr_datarow["forcedsource_value"].ToString()),
                            collateralSSV_value = (dr_datarow["collateralSSV_value"].ToString()),
                            forcedvalueassessed_on = (dr_datarow["forcedvalueassessed_on"].ToString()),
                            collateralobservation_summary = (dr_datarow["collateralobservation_summary"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            productsub_type = (dr_datarow["productsub_type"].ToString()),
                        });
                    }
                    values.mstcollateral_list = getmstcollateral_list;
                }
                dt_datatable.Dispose();

                msSQL = " select producttype_gid,product_type, format(processing_fee,0,'en_IN') as processing_fee,processing_collectiontype, " +
                        " format(doc_charges,0,'en_IN') as doc_charges," +
                        " doccharge_collectiontype,format(fieldvisit_charges,0,'en_IN') as fieldvisit_charge, " +
                        " fieldvisit_charges_collectiontype,format(adhoc_fee,0,'en_IN') as adhoc_fee,adhoc_collectiontype," +
                        " format(life_insurance,0,'en_IN') as life_insurance,lifeinsurance_collectiontype,format(acct_insurance,0,'en_IN') as acct_insurance, " +
                        " format(total_collect,0,'en_IN') as total_collect,format(total_deduct,0,'en_IN') as total_deduct," +
                        " acctinsurance_collectiontype, " +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " from ocs_trn_tcadapplicationservicecharge a " +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                        " where a.application_gid = '" + application_gid + "' order by application2servicecharge_gid desc";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstservicecharge_list = new List<servicecharge_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstservicecharge_list.Add(new servicecharge_List
                        {
                            producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            processing_fee = (dr_datarow["processing_fee"].ToString()),
                            processing_collectiontype = (dr_datarow["processing_collectiontype"].ToString()),
                            doc_charges = (dr_datarow["doc_charges"].ToString()),
                            doccharge_collectiontype = (dr_datarow["doccharge_collectiontype"].ToString()),
                            fieldvisit_charge = (dr_datarow["fieldvisit_charge"].ToString()),
                            fieldvisit_collectiontype = (dr_datarow["fieldvisit_charges_collectiontype"].ToString()),
                            adhoc_fee = (dr_datarow["adhoc_fee"].ToString()),
                            adhoc_collectiontype = (dr_datarow["adhoc_collectiontype"].ToString()),
                            life_insurance = (dr_datarow["life_insurance"].ToString()),
                            lifeinsurance_collectiontype = (dr_datarow["lifeinsurance_collectiontype"].ToString()),
                            acct_insurance = (dr_datarow["acct_insurance"].ToString()),
                            acctinsurance_collectiontype = (dr_datarow["acctinsurance_collectiontype"].ToString()),
                            total_collect = (dr_datarow["total_collect"].ToString()),
                            total_deduct = (dr_datarow["total_deduct"].ToString())
                        });
                    }
                    values.servicecharge_List = getmstservicecharge_list;
                }
                dt_datatable.Dispose();

                msSQL = " select application2hypothecation_gid, security_type, security_description, format(security_value,0,'en_IN') as security_value, " +
                        " date_format(securityassessed_date, '%d-%m-%Y') as securityassessed_date, asset_id, roc_fillingid, " +
                        " CERSAI_fillingid, hypoobservation_summary, primary_security " +
                        " from ocs_trn_tcadapplication2hypothecation " +
                        " where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2hypothecation_gid = objODBCDatareader["application2hypothecation_gid"].ToString();
                    values.security_type = objODBCDatareader["security_type"].ToString();
                    values.security_description = objODBCDatareader["security_description"].ToString();
                    values.security_value = objODBCDatareader["security_value"].ToString();
                    values.securityassessed_date = objODBCDatareader["securityassessed_date"].ToString();
                    values.asset_id = objODBCDatareader["asset_id"].ToString();
                    values.roc_fillingid = objODBCDatareader["roc_fillingid"].ToString();
                    values.CERSAI_fillingid = objODBCDatareader["CERSAI_fillingid"].ToString();
                    values.hypoobservation_summary = objODBCDatareader["hypoobservation_summary"].ToString();
                    values.primary_security = objODBCDatareader["primary_security"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetIndividualList(string application_gid, MdlCreditView values)
        {
            msSQL =   " select a.contact_gid, a.application_gid, concat_ws(' ', first_name, last_name, middle_name) as individual_name," +
                      " (select crimecheck_flag from ocs_trn_tcadcrimechecksearchrecord xx where " +
                      " xx.contact_gid = a.contact_gid order by (xx.created_date) desc limit 1) as crimecheck_flag," +
                      " (select crimecheck_flag from ocs_trn_tcadcrimecheckrtsearchrecord cc where " +
                      " cc.contact_gid = a.contact_gid order by (cc.created_date) desc limit 1) as rtcrimecheck_flag," +
                      " a.pan_no, a.aadhar_no, date_format(individual_dob, '%d-%m-%Y') as individual_dob,a.age,a.designation_name," +
                      " a.main_occupation, date_format(a.created_date, '%d-%m-%Y') as created_date," +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.stakeholder_type,a.institution_name,a.credit_status, " +
                      " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                      " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                      " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                      " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc, f.vertical_gid, f.vertical_name " +
                      " from ocs_trn_tcadcontact a" +
                      " left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                      " left join adm_mst_tuser c on b.user_gid = c.user_gid" +
                      " left join ocs_mst_tapplication f on f.application_gid = a.application_gid" +
                      " where a.application_gid = '" + application_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getindividualList = new List<individual_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getindividualList.Add(new individual_List
                    {
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        crimecheck_flag = (dr_datarow["crimecheck_flag"].ToString()),
                        rtcrimecheck_flag = (dr_datarow["rtcrimecheck_flag"].ToString()),
                        individual_name = (dr_datarow["individual_name"].ToString()),
                        pan_no = (dr_datarow["pan_no"].ToString()),
                        aadhar_no = (dr_datarow["aadhar_no"].ToString()),
                        individual_dob = (dr_datarow["individual_dob"].ToString()),
                        main_occupation = (dr_datarow["main_occupation"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        company_name = (dr_datarow["institution_name"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        age = (dr_datarow["age"].ToString()),
                        designation_name = (dr_datarow["designation_name"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                    });
                }
                values.individual_List = getindividualList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetInstitutionList(string application_gid, MdlCreditView values)
        {

            msSQL =  " select a.institution_gid, a.application_gid, a.cin_no, a.companytype_name," +
                     " (select crimecheck_flag from ocs_trn_tcadcrimechecksearchrecord xx where " +
                     " xx.institution_gid = a.institution_gid order by (xx.created_date) desc limit 1) as crimecheck_flag," +
                     " (select crimecheck_flag from ocs_trn_tcadcrimecheckrtsearchrecord cc where " +
                     " cc.institution_gid = a.institution_gid order by (cc.created_date) desc limit 1) as rtcrimecheck_flag," +
                     " a.company_name, a.companypan_no, date_format(date_incorporation, '%d-%m-%Y') as date_incorporation," +
                     " date_format(a.created_date, '%d-%m-%Y') as created_date," +
                     " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.stakeholder_type,a.credit_status, " +
                     " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                     " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                     " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                     " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc, f.vertical_gid, f.vertical_name " +
                     " from ocs_trn_tcadinstitution a" +
                     " left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                     " left join adm_mst_tuser c on b.user_gid = c.user_gid" +
                     " left join ocs_mst_tapplication f on f.application_gid = a.application_gid" +
                     " where a.application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitutionList = new List<institution_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinstitutionList.Add(new institution_List
                    {
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        crimecheck_flag = (dr_datarow["crimecheck_flag"].ToString()),
                        rtcrimecheck_flag = (dr_datarow["rtcrimecheck_flag"].ToString()),
                        company_name = (dr_datarow["company_name"].ToString()),
                        companypan_no = (dr_datarow["companypan_no"].ToString()),
                        cin_no = (dr_datarow["cin_no"].ToString()),
                        companytype_name = (dr_datarow["companytype_name"].ToString()),
                        date_incorporation = (dr_datarow["date_incorporation"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),

                    });
                }
                values.institution_List = getinstitutionList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetRMDetailsView(string application_gid, MdlRMDtlView values)
        {
            try
            {
                msSQL = " select d.department_name,concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as RM_Name, " +
                        " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as applicationinitiated_date,date_format(a.ccsubmitted_date, '%d-%m-%Y %h:%i %p') as ccsubmitted_date, " +
                        " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as ccsubmitted_by from ocs_trn_tcadapplication a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " left join hrm_mst_tdepartment d on d.department_gid = b.department_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid = a.ccsubmitted_by " +
                        " left join adm_mst_tuser f on f.user_gid = e.user_gid " +
                        " where application_gid = '" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.department_name = objODBCDatareader["department_name"].ToString();
                    values.RM_Name = objODBCDatareader["RM_Name"].ToString();
                    values.applicationinitiated_date = objODBCDatareader["applicationinitiated_date"].ToString();
                    values.ccsubmitted_date = objODBCDatareader["ccsubmitted_date"].ToString();
                    values.ccsubmitted_by = objODBCDatareader["ccsubmitted_by"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " select approval_name, date_format(approved_date, '%d-%m-%Y %h:%i %p') as approved_date " +
                        " from ocs_trn_tcadappcreditapproval " +
                        " where application_gid = '" + application_gid + "' and hierary_level = '0'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.creditunderwritten_by = objODBCDatareader["approval_name"].ToString();
                    values.creditunderwritten_date = objODBCDatareader["approved_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetCAM(string application_gid, MdlMstCC values)
        {
            msSQL = " select application2camdoc_gid,application_gid,document_name,document_path,document_title from " +
                       " ocs_trn_tcadapplication2camdoc where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcamdocument_list = new List<camdocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getcamdocument_list.Add(new camdocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        application_gid = dt["application_gid"].ToString(),
                        application2camdoc_gid = dt["application2camdoc_gid"].ToString(),

                    });
                    values.camdocument_list = getcamdocument_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCollateralDocDtl(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path,a.migration_flag, " +
                       " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title,migration_flag  " +
                       " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                       " and b.user_gid = c.user_gid and application2loan_gid='" + application2loan_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<CollatralDocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new CollatralDocumentList
                        {
                            //document_path = (dr_datarow["document_path"].ToString()),
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString(),
                            migration_flag = dr_datarow["migration_flag"].ToString()
                        });
                    }
                    values.CollatralDocumentList = get_filename;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetHypoDocDtl(string application2hypothecation_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select hypothecationdocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                      " from ocs_trn_tcaduploadhypothecationocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                      " and b.user_gid = c.user_gid and application2hypothecation_gid='" + application2hypothecation_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<HypoDocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new HypoDocumentList
                        {
                            //document_path = HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString()),
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["hypothecationdocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.HypoDocumentList = get_filename;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetPurposeofLoan(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select enduse_purpose from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
                values.enduse_purpose = objdbconn.GetExecuteScalar(msSQL);
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetLoanProgramValueChain(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select program, primaryvaluechain_name, secondaryvaluechain_name,product_gid,product_name, " +
                        " variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.program = objODBCDatareader["program"].ToString();
                    values.primaryvaluechain_name = objODBCDatareader["primaryvaluechain_name"].ToString();
                    values.secondaryvaluechain_name = objODBCDatareader["secondaryvaluechain_name"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " select application2product_gid,product_gid,product_name,variety_gid,variety_name,sector_name,category_name," +
                   " botanical_name,alternative_name,csacommodity_average,csapercentageoftotal_limit from ocs_trn_tcadapplication2product where application2loan_gid='" + application2loan_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstproductdtl_list = new List<mstproductdtl_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstproductdtl_list.Add(new mstproductdtl_list
                        {
                            application2product_gid = (dr_datarow["application2product_gid"].ToString()),
                            product_gid = (dr_datarow["product_gid"].ToString()),
                            product_name = (dr_datarow["product_name"].ToString()),
                            variety_gid = (dr_datarow["variety_gid"].ToString()),
                            variety_name = (dr_datarow["variety_name"].ToString()),
                            sector_name = (dr_datarow["sector_name"].ToString()),
                            category_name = (dr_datarow["category_name"].ToString()),
                            botanical_name = (dr_datarow["botanical_name"].ToString()),
                            alternative_name = (dr_datarow["alternative_name"].ToString()),
                            csacommodity_average = (dr_datarow["csacommodity_average"].ToString()),
                            csapercentageoftotal_limit = (dr_datarow["csapercentageoftotal_limit"].ToString())
                        });
                    }
                    values.mstproductdtl_list = getmstproductdtl_list;
                }
                dt_datatable.Dispose();

                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetLoantoBuyerList(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                   " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + application2loan_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstbuyer_list = new List<mstbuyer_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstbuyer_list.Add(new mstbuyer_list
                        {
                            application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                            buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                            buyer_name = (dr_datarow["buyer_name"].ToString()),
                            buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                            availed_limit = (dr_datarow["availed_limit"].ToString()),
                            balance_limit = (dr_datarow["balance_limit"].ToString()),
                            bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                            margin = (dr_datarow["margin"].ToString())
                        });
                    }
                    values.mstbuyer_list = getmstbuyer_list;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaEditGroup(string group_gid, MdlMstGroup values)
        {
            try
            {
                msSQL = " select group_name,date_of_formation,group_type,groupmember_count,groupurn_status,group_urn,group_status," +
                        " male_count,female_count,internalrating_gid,internalrating_name " +
                        " from ocs_trn_tcadgroup where group_gid='" + group_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.group_name = objODBCDatareader["group_name"].ToString();
                    if (objODBCDatareader["date_of_formation"].ToString() != "")
                        values.date_of_formation = Convert.ToDateTime(objODBCDatareader["date_of_formation"]).ToString("dd-MM-yyyy");
                    values.group_type = objODBCDatareader["group_type"].ToString();
                    values.groupmember_count = objODBCDatareader["groupmember_count"].ToString();
                    values.groupurn_status = objODBCDatareader["groupurn_status"].ToString();
                    values.group_urn = objODBCDatareader["group_urn"].ToString();
                    values.group_status = objODBCDatareader["group_status"].ToString();
                    values.male_count = objODBCDatareader["male_count"].ToString();
                    values.female_count = objODBCDatareader["female_count"].ToString();
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                }


                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGroupAddressList(string group_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select group2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude, landmark," +
                    " postal_code from ocs_trn_tcadgroup2address where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        group2address_gid = (dr_datarow["group2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGroupBankList(string group_gid, MdlMstBankDetails values)
        {
            msSQL = "  select group2bank_gid,ifsc_code,bank_accountno, accountholder_name, bank_name, bank_branch" +
                    " from ocs_trn_tcadgroup2bank where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbank_list = new List<mstbank_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbank_list.Add(new mstbank_list
                    {
                        group2bank_gid = (dr_datarow["group2bank_gid"].ToString()),
                        ifsc_code = (dr_datarow["ifsc_code"].ToString()),
                        bank_accountno = (dr_datarow["bank_accountno"].ToString()),
                        accountholder_name = (dr_datarow["accountholder_name"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        bank_branch = (dr_datarow["bank_branch"].ToString())
                    });
                }
                values.mstbank_list = getmstbank_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGroupDocumentList(string group_gid, MdlGroupDocument values)
        {
            msSQL = " select group2document_gid,document_name,document_title,document_path from ocs_trn_tcadgroup2document " +
                                 " where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<groupdocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new groupdocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        group2document_gid = dt["group2document_gid"].ToString(),
                    });
                    values.groupdocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetGroupSummary(string application_gid, MdlMstGroup values)
        {
            msSQL = " select a.group_gid,a.group_name,date_format(a.date_of_formation,'%d-%m-%Y') as date_of_formation,a.group_status, a.group_type," +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,credit_status," +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid =a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc " +
                    " from ocs_trn_tcadgroup a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by " +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid" +
                    " where application_gid='" + application_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroup_list = new List<group_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroup_list.Add(new group_list
                    {
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        group_name = (dr_datarow["group_name"].ToString()),
                        date_of_formation = (dr_datarow["date_of_formation"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        group_status = (dr_datarow["group_status"].ToString()),
                        group_type = (dr_datarow["group_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                    });
                }
            }
            values.group_list = getgroup_list;
            dt_datatable.Dispose();
        }

        public void DaGetGrouptoMemberList(string group_gid, MdlMstGroupMember values)
        {
            msSQL = "select a.contact_gid,a.pan_no,a.aadhar_no,concat(first_name, ' ',middle_name,' ',last_name) as individual_name,stakeholder_type,credit_status," +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc " +
                    " from ocs_trn_tcadcontact a " +
                    " where group_gid='" + group_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroupmember_list = new List<groupmember_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroupmember_list.Add(new groupmember_list
                    {
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        individual_name = (dr_datarow["individual_name"].ToString()),
                        pan_no = (dr_datarow["pan_no"].ToString()),
                        aadhar_no = (dr_datarow["aadhar_no"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                    });
                }
            }
            values.groupmember_list = getgroupmember_list;
            dt_datatable.Dispose();
        }

        public void DaPostUnderwrite(string employee_gid, MdlMstCUWGeneticCode values)
        {
            msSQL = "update ocs_trn_tcadapplication set ccsubmit_flag='Y', approval_status='Submitted to CC',ccsubmitted_by='" + employee_gid + "'," +
                   " ccsubmitted_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                   " where application_gid='" + values.application_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Application Submitted to CC Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Submitting";
            }
        }

        public void DaGetGeneticCodeList(string employee_gid, MdlGeneticCode values)
        {
            msSQL = " SELECT a.geneticcode_gid,a.geneticcode_name FROM ocs_mst_tgeneticcode a" +
                         " where a.status='Y' order by a.geneticcode_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<genetic_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getapplication_list.Add(new genetic_list
                    {
                        geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                        geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                    });
                }
                values.genetic_list = getapplication_list;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetDropDown(string employee_gid, MdlDropDown values)
        {
            //Vertical
            msSQL = " SELECT a.vertical_gid,a.vertical_name,vertical_code " +
                    " FROM ocs_mst_tvertical a  where status_log='Y' order by a.vertical_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment = new List<vertical_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new vertical_list
                    {
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        vertical_code = (dr_datarow["vertical_code"].ToString()),
                    });
                }
                values.vertical_list = getSegment;
            }
            dt_datatable.Dispose();
            //Vertical Tag
            msSQL = " SELECT verticaltaggs_gid,verticaltaggs_name" +
                        " FROM ocs_mst_tverticaltaggs a  where status='Y' order by a.verticaltaggs_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<verticaltaggs_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getapplication_list.Add(new verticaltaggs_list
                    {
                        verticaltaggs_gid = (dr_datarow["verticaltaggs_gid"].ToString()),
                        verticaltaggs_name = (dr_datarow["verticaltaggs_name"].ToString()),
                    });
                }
                values.verticaltaggs_list = getapplication_list;
            }
            dt_datatable.Dispose();
            //Constitution
            msSQL = " SELECT constitution_gid,constitution_name FROM ocs_mst_tconstitution a" +
                   " where status_log='Y' order by constitution_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getconstitution = new List<constitutionlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getconstitution.Add(new constitutionlist
                    {
                        constitution_gid = (dr_datarow["constitution_gid"].ToString()),
                        constitution_name = (dr_datarow["constitution_name"].ToString()),
                    });
                }
                values.constitutionlist = getconstitution;
            }
            dt_datatable.Dispose();
            //Strategic business Unit
            msSQL = " SELECT businessunit_gid,businessunit_name from ocs_mst_tbusinessunit a" +
                   " where status_log='Y' order by businessunit_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getbusinessunit = new List<businessunitlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getbusinessunit.Add(new businessunitlist
                    {
                        businessunit_gid = (dr_datarow["businessunit_gid"].ToString()),
                        businessunit_name = (dr_datarow["businessunit_name"].ToString()),
                    });
                }
                values.businessunitlist = getbusinessunit;
            }
            dt_datatable.Dispose();
            //Value Chain
            msSQL = " SELECT valuechain_gid,valuechain_name from ocs_mst_tvaluechain a" +
                    " where status_log='Y' order by valuechain_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getvaluechain = new List<valuechainlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getvaluechain.Add(new valuechainlist
                    {
                        valuechain_gid = (dr_datarow["valuechain_gid"].ToString()),
                        valuechain_name = (dr_datarow["valuechain_name"].ToString()),
                    });
                }
                values.valuechainlist = getvaluechain;
            }
            dt_datatable.Dispose();
            //Vernacular Language
            msSQL = " SELECT vernacularlanguage_gid,vernacular_language FROM ocs_mst_tvernacularlanguage a" +
                      " where status='Y' order by a.vernacularlanguage_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getvernacularlang_list = new List<vernacularlang_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getvernacularlang_list.Add(new vernacularlang_list
                    {
                        vernacularlanguage_gid = (dr_datarow["vernacularlanguage_gid"].ToString()),
                        vernacular_language = (dr_datarow["vernacular_language"].ToString()),
                    });
                }
                values.vernacularlang_list = getvernacularlang_list;
            }
            dt_datatable.Dispose();
            //Samunnati Associate
            msSQL = " SELECT associatemaster_gid,concat(name,' / ',associate_code) as name,associate_code FROM ocs_mst_tassociatemaster" +
                " where status='Yes' order by associatemaster_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getassociatemaster = new List<associatemasterlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getassociatemaster.Add(new associatemasterlist
                    {
                        associatemaster_gid = (dr_datarow["associatemaster_gid"].ToString()),
                        name = (dr_datarow["name"].ToString()),
                        associate_code = (dr_datarow["associate_code"].ToString()),
                    });
                }
                values.associatemasterlist = getassociatemaster;
            }
            dt_datatable.Dispose();
            //Designation
            msSQL = " SELECT a.designation_gid,a.designation_type from ocs_mst_tdesignation a" +
                   "  where status_log='Y' order by a.designation_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdesignation = new List<designationlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getdesignation.Add(new designationlist
                    {
                        designation_gid = (dr_datarow["designation_gid"].ToString()),
                        designation_type = (dr_datarow["designation_type"].ToString()),
                    });
                }
                values.designationlist = getdesignation;
            }
            dt_datatable.Dispose();
            //Credit Group
            msSQL = " SELECT creditmapping_gid,creditgroup_name FROM ocs_mst_tcreditmapping a" +
                       " where status='Y' order by a.creditmapping_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditgrouplist = new List<creditgrouplist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcreditgrouplist.Add(new creditgrouplist
                    {
                        creditmapping_gid = (dr_datarow["creditmapping_gid"].ToString()),
                        creditgroup_name = (dr_datarow["creditgroup_name"].ToString()),
                    });
                }
                values.creditgrouplist = getcreditgrouplist;
            }
            dt_datatable.Dispose();
            // Program 
            msSQL = " SELECT program_gid,program FROM ocs_mst_tprogram a" +
                       " where status='Y' order by a.program_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getprogram_list = new List<program_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getprogram_list.Add(new program_list
                    {
                        program_gid = (dr_datarow["program_gid"].ToString()),
                        program = (dr_datarow["program"].ToString()),
                    });
                }
                values.program_list = getprogram_list;
            }
            dt_datatable.Dispose();
            // Product 
            msSQL = " SELECT product_gid,product_name FROM ocs_mst_tproducts a" +
                       " where status='Y' order by a.product_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproductname_list = new List<productname_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproductname_list.Add(new productname_list
                    {
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        product_name = (dr_datarow["product_name"].ToString()),
                    });
                }
                values.productname_list = getproductname_list;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetSectorcategory(string employee_gid, string product_gid, MdlSectorcategory values)
        {
            msSQL = " SELECT businessunit_gid,businessunit_name,valuechain_gid,valuechain_name FROM ocs_mst_tproducts a " +
                    " where product_gid = '" + product_gid + "' order by a.product_gid desc ";

            objODBCDataReader1 = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader1.HasRows == true)
            {
                values.businessunit_gid = objODBCDataReader1["businessunit_gid"].ToString();
                values.businessunit_name = objODBCDataReader1["businessunit_name"].ToString();
                values.valuechain_gid = objODBCDataReader1["valuechain_gid"].ToString();
                values.valuechain_name = objODBCDataReader1["valuechain_name"].ToString();
            }
            objODBCDataReader1.Close();

            // Variety 
            msSQL = " SELECT variety_gid,variety_name FROM ocs_mst_tvariety a" +
                       " where product_gid='" + product_gid + "' order by a.product_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getvarietyname_list = new List<varietyname_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getvarietyname_list.Add(new varietyname_list
                    {
                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                        variety_name = (dr_datarow["variety_name"].ToString()),
                    });
                }
                values.varietyname_list = getvarietyname_list;
            }
            dt_datatable.Dispose();


        }

        public void DaGetApplicationBasicDetailsTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2contactno where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2email where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2geneticcode where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2product where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            values.status = true;
        }

        public void DaEditAppBasicDetail(string application_gid, MdlMstApplicationAdd values)
        {
            try
            {
                msSQL = " select application_gid,customer_urn,customerref_name as customer_name,vertical_gid,vertical_name,verticaltaggs_gid,verticaltaggs_name," +
                        " constitution_gid,constitution_name,businessunit_gid,businessunit_name,sa_status,sa_id,sa_name,saname_gid,vernacularlanguage_gid," +
                        " vernacular_language,contactpersonfirst_name,contactpersonmiddle_name,contactpersonlast_name,designation_gid,designation_type,landline_no,creditgroup_gid,creditgroup_name," +
                        " program_gid,program_name,product_gid,product_name,variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name from ocs_trn_tcadapplication where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.customer_urn = objODBCDatareader["customer_urn"].ToString();
                    values.customer_name = objODBCDatareader["customer_name"].ToString();
                    values.vertical_gid = objODBCDatareader["vertical_gid"].ToString();
                    values.vertical_name = objODBCDatareader["vertical_name"].ToString();
                    //values.verticaltaggs_gid = objODBCDatareader["verticaltaggs_gid"].ToString();
                    //values.verticaltaggs_name = objODBCDatareader["verticaltaggs_name"].ToString();
                    values.constitution_gid = objODBCDatareader["constitution_gid"].ToString();
                    values.constitution_name = objODBCDatareader["constitution_name"].ToString();
                    values.businessunit_gid = objODBCDatareader["businessunit_gid"].ToString();
                    values.businessunit_name = objODBCDatareader["businessunit_name"].ToString();
                    values.sa_status = objODBCDatareader["sa_status"].ToString();
                    values.saname_gid = objODBCDatareader["saname_gid"].ToString();
                    values.sa_name = objODBCDatareader["sa_name"].ToString();

                    String[] verlanggid_list = objODBCDatareader["vernacularlanguage_gid"].ToString().Split(',');
                    String[] verlangname_list = objODBCDatareader["vernacular_language"].ToString().Split(',');

                    var getvernacularLanguageList = new List<vernacularlanguage_list>();

                    for (var i = 0; i < verlanggid_list.Length; i++)
                    {
                        getvernacularLanguageList.Add(new vernacularlanguage_list
                        {
                            vernacularlanguage_gid = verlanggid_list[i],
                            vernacular_language = verlangname_list[i],
                        });

                    }
                    values.vernacularlanguage_list = getvernacularLanguageList;

                    values.contactpersonfirst_name = objODBCDatareader["contactpersonfirst_name"].ToString();
                    values.contactpersonmiddle_name = objODBCDatareader["contactpersonmiddle_name"].ToString();
                    values.contactpersonlast_name = objODBCDatareader["contactpersonlast_name"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    values.landline_no = objODBCDatareader["landline_no"].ToString();
                    values.creditgroup_gid = objODBCDatareader["creditgroup_gid"].ToString();
                    values.creditgroup_name = objODBCDatareader["creditgroup_name"].ToString();
                    values.program_gid = objODBCDatareader["program_gid"].ToString();
                    values.program_name = objODBCDatareader["program_name"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();

                }

                //Value Chain
                msSQL = " SELECT valuechain_gid,valuechain_name from ocs_mst_tvaluechain a" +
                        " where status_log='Y' order by valuechain_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getvaluechain = new List<valuechainlist>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getvaluechain.Add(new valuechainlist
                        {
                            valuechain_gid = (dr_datarow["valuechain_gid"].ToString()),
                            valuechain_name = (dr_datarow["valuechain_name"].ToString()),
                        });
                    }
                    values.valuechainlist = getvaluechain;
                }
                dt_datatable.Dispose();

                //Vernacular Language
                msSQL = " SELECT vernacularlanguage_gid,vernacular_language FROM ocs_mst_tvernacularlanguage a" +
                          " where status='Y' order by a.vernacularlanguage_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getvernacularlang_list = new List<vernacularlang_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getvernacularlang_list.Add(new vernacularlang_list
                        {
                            vernacularlanguage_gid = (dr_datarow["vernacularlanguage_gid"].ToString()),
                            vernacular_language = (dr_datarow["vernacular_language"].ToString()),
                        });
                    }
                    values.vernacularlang_list = getvernacularlang_list;
                }
                dt_datatable.Dispose();
                //     msSQL = "select primaryvaluechain_gid,primaryvaluechain_name from ocs_trn_tcadapplication2primaryvaluechain where application_gid='" + application_gid + "'";
                //     dt_datatable = objdbconn.GetDataTable(msSQL);

                //     values.primaryvaluechain_list = dt_datatable.AsEnumerable().Select(row =>
                //new primaryvaluechain_list
                //{
                //    valuechain_gid = row["primaryvaluechain_gid"].ToString(),
                //    valuechain_name = row["primaryvaluechain_name"].ToString()
                //}).ToList();
                //     dt_datatable.Dispose();

                //     msSQL = "select secondaryvaluechain_gid,secondaryvaluechain_name from ocs_trn_tcadapplication2secondaryvaluechain where application_gid='" + application_gid + "'";
                //     dt_datatable = objdbconn.GetDataTable(msSQL);

                //     values.secondaryvaluechain_list = dt_datatable.AsEnumerable().Select(row =>
                //  new secondaryvaluechain_list
                //  {
                //      valuechain_gid = row["secondaryvaluechain_gid"].ToString(),
                //      valuechain_name = row["secondaryvaluechain_name"].ToString()
                //  }).ToList();
                //     dt_datatable.Dispose();


                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetAppMobileNoList(string application_gid, string employee_gid, MdlMstMobileNo values)
        {
            msSQL = "select mobile_no,application2contact_gid,primary_mobileno,whatsapp_mobileno from ocs_trn_tcadapplication2contactno where " +
              " application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstmobileno_list = new List<mstmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstmobileno_list.Add(new mstmobileno_list
                    {
                        application2contact_gid = (dr_datarow["application2contact_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_mobileno = (dr_datarow["primary_mobileno"].ToString()),
                        whatsapp_mobileno = (dr_datarow["whatsapp_mobileno"].ToString()),
                    });
                }
                values.mstmobileno_list = getmstmobileno_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetAppEmailAddressList(string application_gid, string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = "select email_address,application2email_gid,primary_emailaddress, application_gid from ocs_trn_tcadapplication2email where " +
              " application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstemailaddress_list = new List<mstemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstemailaddress_list.Add(new mstemailaddress_list
                    {
                        application2email_gid = (dr_datarow["application2email_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_emailaddress = (dr_datarow["primary_emailaddress"].ToString())
                    });
                }
                values.mstemailaddress_list = getmstemailaddress_list;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetVarietyDtl(string employee_gid, string variety_gid, MdlSectorcategory values)
        {
            msSQL = " SELECT product_gid,variety_gid,variety_name,botanical_name,alternative_name FROM ocs_mst_tvariety a " +
                   " where variety_gid = '" + variety_gid + "'";

            objODBCDataReader1 = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader1.HasRows == true)
            {
                values.product_gid = objODBCDataReader1["product_gid"].ToString();
                values.variety_gid = objODBCDataReader1["variety_gid"].ToString();
                values.variety_name = objODBCDataReader1["variety_name"].ToString();
                values.botanical_name = objODBCDataReader1["botanical_name"].ToString();
                values.alternative_name = objODBCDataReader1["alternative_name"].ToString();
            }
            objODBCDataReader1.Close();

        }

        public bool DaPostAppMobileNo(string employee_gid, MdlMstMobileNo values)
        {
            msSQL = "select primary_mobileno from ocs_trn_tcadapplication2contactno where primary_mobileno='Yes' and (application_gid='" + employee_gid + "' or" +
               " application_gid='" + values.application_gid + "') ";
            string lsprimary_mobileno = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_mobileno == (values.primary_mobileno))
            {
                values.status = false;
                values.message = "Already Primary Mobile Number Added";
                return false;
            }
            msSQL = "select application2contact_gid from ocs_trn_tcadapplication2contactno where mobile_no='" + values.mobile_no + "' " +
                " and (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "')";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Mobile Number Added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("A2CN");
            msSQL = " insert into ocs_trn_tcadapplication2contactno(" +
                    " application2contact_gid," +
                    " application_gid," +
                    " mobile_no," +
                    " primary_mobileno," +
                    " whatsapp_mobileno," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.mobile_no + "'," +
                    "'" + values.primary_mobileno + "'," +
                    "'" + values.whatsapp_mobileno + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile Number Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Mobile Number";
                return false;
            }
        }

        public void DaGetAppMobileNoTempList(string application_gid, string employee_gid, MdlMstMobileNo values)
        {
            msSQL = "select mobile_no,application2contact_gid,primary_mobileno,whatsapp_mobileno from ocs_trn_tcadapplication2contactno where " +
              " application_gid='" + employee_gid + "' or application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstmobileno_list = new List<mstmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstmobileno_list.Add(new mstmobileno_list
                    {
                        application2contact_gid = (dr_datarow["application2contact_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_mobileno = (dr_datarow["primary_mobileno"].ToString()),
                        whatsapp_mobileno = (dr_datarow["whatsapp_mobileno"].ToString()),
                    });
                }
                values.mstmobileno_list = getmstmobileno_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditAppMobileNo(string application2contact_gid, MdlMstMobileNo values)
        {
            try
            {
                msSQL = " select mobile_no,application2contact_gid,primary_mobileno,whatsapp_mobileno from ocs_trn_tcadapplication2contactno where " +
                        " application2contact_gid='" + application2contact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.mobile_no = objODBCDatareader["mobile_no"].ToString();
                    values.primary_mobileno = objODBCDatareader["primary_mobileno"].ToString();
                    values.whatsapp_mobileno = objODBCDatareader["whatsapp_mobileno"].ToString();
                    values.application2contact_gid = objODBCDatareader["application2contact_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateAppMobileNo(string employee_gid, MdlMstMobileNo values)
        {
            msSQL = " select mobile_no,application2contact_gid,primary_mobileno,whatsapp_mobileno from ocs_trn_tcadapplication2contactno where " +
                    " application2contact_gid='" + values.application2contact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsmobile_no = objODBCDatareader["mobile_no"].ToString();
                lsprimary_mobileno = objODBCDatareader["primary_mobileno"].ToString();
                lswhatsapp_mobileno = objODBCDatareader["whatsapp_mobileno"].ToString();
                lsapplication2contact_gid = objODBCDatareader["application2contact_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplication2contactno set " +
                         " mobile_no='" + values.mobile_no + "'," +
                         " primary_mobileno='" + values.primary_mobileno + "'," +
                         " whatsapp_mobileno='" + values.whatsapp_mobileno + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2contact_gid='" + values.application2contact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("AMUL");

                    msSQL = "Insert into ocs_trn_tcadapplication2contactnoupdatelog(" +
                   " application2contactnoupdatelog_gid, " +
                   " application2contact_gid, " +
                   " application_gid, " +
                   " mobile_no," +
                   " primary_mobileno," +
                   " whatsapp_mobileno," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.application2contact_gid + "'," +
                   "'" + values.application_gid + "'," +
                   "'" + lsmobile_no + "'," +
                   "'" + lsprimary_mobileno + "'," +
                   "'" + lswhatsapp_mobileno + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Mobile Number Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Upating Mobile Number";
            }
        }

        public void DaDeleteAppMobileNo(string application2contact_gid, MdlMstMobileNo values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2contactno where application2contact_gid='" + application2contact_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadapplication2contactnoupdatelog where application2contact_gid='" + application2contact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Mobile Number Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting Mobile Number";
                values.status = false;
            }
        }

        public bool DaPostAppEmailAddress(string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = "select primary_emailaddress from ocs_trn_tcadapplication2email where primary_emailaddress='Yes' and (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "')";
            string lsprimary_emailaddress = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_emailaddress == (values.primary_emailaddress))
            {
                values.status = false;
                values.message = "Already Primary Email Address Added";
                return false;
            }
            msSQL = "select application2email_gid from ocs_trn_tcadapplication2email where email_address='" + values.email_address + "' and (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Email Address Added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("A2EA");
            msSQL = " insert into ocs_trn_tcadapplication2email(" +
                    " application2email_gid," +
                    " application_gid," +
                    " email_address," +
                    " primary_emailaddress," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.email_address + "'," +
                    "'" + values.primary_emailaddress + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Email Address Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Email Address";
                return false;
            }
        }

        public void DaGetAppEmailAddressTempList(string application_gid, string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = "select email_address,application2email_gid,primary_emailaddress, application_gid from ocs_trn_tcadapplication2email where " +
              " application_gid='" + employee_gid + "' or application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstemailaddress_list = new List<mstemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstemailaddress_list.Add(new mstemailaddress_list
                    {
                        application2email_gid = (dr_datarow["application2email_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_emailaddress = (dr_datarow["primary_emailaddress"].ToString())
                    });
                }
                values.mstemailaddress_list = getmstemailaddress_list;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaEditAppEmailAddress(string application2email_gid, MdlMstEmailAddress values)
        {
            try
            {
                msSQL = " select email_address,application2email_gid,primary_emailaddress from ocs_trn_tcadapplication2email where " +
                        " application2email_gid='" + application2email_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.email_address = objODBCDatareader["email_address"].ToString();
                    values.primary_emailaddress = objODBCDatareader["primary_emailaddress"].ToString();
                    values.application2email_gid = objODBCDatareader["application2email_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateAppEmailAddress(string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = " select email_address,application2email_gid,primary_emailaddress, application_gid from ocs_trn_tcadapplication2email where " +
                        " application2email_gid='" + values.application2email_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsemail_address = objODBCDatareader["email_address"].ToString();
                lsprimary_emailaddress = objODBCDatareader["primary_emailaddress"].ToString();
                lsapplication2email_gid = objODBCDatareader["application2email_gid"].ToString();
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplication2email set " +
                         " email_address='" + values.email_address + "'," +
                         " primary_emailaddress='" + values.primary_emailaddress + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2email_gid='" + values.application2email_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("AEUL");

                    msSQL = "Insert into ocs_trn_tcadapplication2emailupdatelog(" +
                   " application2emailupdatelog_gid, " +
                   " application2email_gid, " +
                   " application_gid, " +
                   " email_address," +
                   " primary_emailaddress," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.application2email_gid + "'," +
                   "'" + values.application_gid + "'," +
                   "'" + lsemail_address + "'," +
                   "'" + lsprimary_emailaddress + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Email Address Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Email Address";
            }
        }

        public void DaDeleteAppEmailAddress(string application2email_gid, MdlMstEmailAddress values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2email where application2email_gid='" + application2email_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadapplication2emailupdatelog where application2email_gid='" + application2email_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Email Address Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting Email Address";
                values.status = false;
            }
        }

        public void DaPostAppGeneticCode(string employee_gid, MdlMstGeneticCode values)
        {
            msSQL = "select geneticcode_gid from ocs_trn_tcadapplication2geneticcode where (application_gid='" + employee_gid + "' or " +
                " application_gid='" + values.application_gid + "') and geneticcode_gid='" + values.geneticcode_gid + "'";
            string lsgenetic_code = objdbconn.GetExecuteScalar(msSQL);
            if (lsgenetic_code == (values.geneticcode_gid))
            {
                values.status = false;
                values.message = "Already Genetic Code Added";
                return;
            }
            msGetGid = objcmnfunctions.GetMasterGID("A2GC");
            msSQL = " insert into ocs_trn_tcadapplication2geneticcode(" +
                   " application2geneticcode_gid," +
                   " application_gid," +
                   " geneticcode_gid," +
                   " geneticcode_name," +
                   " genetic_status," +
                   " genetic_remarks," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.geneticcode_gid + "'," +
                   "'" + values.geneticcode_name.Replace("'", " ") + "'," +
                   "'" + values.genetic_status + "'," +
                   "'" + values.genetic_remarks.Replace("'", " ") + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Genetic Code Details Added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured While Adding Genetic Code";
            }
        }

        public void DaGetAppGeneticCodeTempList(string application_gid, string employee_gid, MdlMstGeneticCode values)
        {
            msSQL = " select application2geneticcode_gid,geneticcode_gid,geneticcode_name,genetic_status,genetic_remarks,application_gid" +
                      " from ocs_trn_tcadapplication2geneticcode where " +
                      " application_gid='" + employee_gid + "' or application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgeneticcode_list = new List<mstgeneticcode_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgeneticcode_list.Add(new mstgeneticcode_list
                    {
                        application2geneticcode_gid = (dr_datarow["application2geneticcode_gid"].ToString()),
                        geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                        geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                        genetic_status = (dr_datarow["genetic_status"].ToString()),
                        genetic_remarks = (dr_datarow["genetic_remarks"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                    });
                }
                values.mstgeneticcode_list = getgeneticcode_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetAppGeneticCodeList(string application_gid, string employee_gid, MdlMstGeneticCode values)
        {
            msSQL = " select application2geneticcode_gid,geneticcode_gid,geneticcode_name,genetic_status,genetic_remarks,application_gid " +
                      " from ocs_trn_tcadapplication2geneticcode where " +
                      " application_gid='" + application_gid + "' or application_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgeneticcode_list = new List<mstgeneticcode_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgeneticcode_list.Add(new mstgeneticcode_list
                    {
                        application2geneticcode_gid = (dr_datarow["application2geneticcode_gid"].ToString()),
                        geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                        geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                        genetic_status = (dr_datarow["genetic_status"].ToString()),
                        genetic_remarks = (dr_datarow["genetic_remarks"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                    });
                }
                values.mstgeneticcode_list = getgeneticcode_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditAppGeneticCode(string application2geneticcode_gid, MdlMstGeneticCode values)
        {
            try
            {
                msSQL = " select application2geneticcode_gid,geneticcode_gid,geneticcode_name,genetic_status,genetic_remarks from ocs_trn_tcadapplication2geneticcode where " +
                        " application2geneticcode_gid='" + application2geneticcode_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2geneticcode_gid = objODBCDatareader["application2geneticcode_gid"].ToString();
                    values.geneticcode_gid = objODBCDatareader["geneticcode_gid"].ToString();
                    values.geneticcode_name = objODBCDatareader["geneticcode_name"].ToString();
                    values.genetic_status = objODBCDatareader["genetic_status"].ToString();
                    values.genetic_remarks = objODBCDatareader["genetic_remarks"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateAppGeneticCode(string employee_gid, MdlMstGeneticCode values)
        {
            msSQL = " select application2geneticcode_gid,geneticcode_gid,geneticcode_name,genetic_status,genetic_remarks from ocs_trn_tcadapplication2geneticcode where " +
                        " application2geneticcode_gid='" + values.application2geneticcode_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication2geneticcode_gid = objODBCDatareader["application2geneticcode_gid"].ToString();
                lsgeneticcode_gid = objODBCDatareader["geneticcode_gid"].ToString();
                lsgeneticcode_name = objODBCDatareader["geneticcode_name"].ToString();
                lsgenetic_status = objODBCDatareader["genetic_status"].ToString();
                lsgenetic_remarks = objODBCDatareader["genetic_remarks"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_trn_tcadapplication2geneticcode set " +
                     " genetic_status='" + values.genetic_status + "'," +
                     " genetic_remarks='" + values.genetic_remarks.Replace("'", " ") + "'," +
                     " updated_by='" + employee_gid + "'," +
                     " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                     " where application2geneticcode_gid='" + values.application2geneticcode_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult == 1)
            {
                msGetGid = objcmnfunctions.GetMasterGID("AGUL");

                msSQL = "Insert into ocs_trn_tcadapplication2geneticcodeupdatelog(" +
               " application2geneticcodeupdatelog_gid, " +
               " application2geneticcode_gid, " +
               " application_gid, " +
               " geneticcode_gid, " +
               " geneticcode_name," +
               " genetic_status," +
               " genetic_remarks," +
               " statusupdated_by," +
               " created_by," +
               " created_date)" +
               " values (" +
               "'" + msGetGid + "'," +
               "'" + values.application2geneticcode_gid + "'," +
               "'" + values.application_gid + "'," +
               "'" + lsgeneticcode_gid + "'," +
               "'" + lsgeneticcode_name + "'," +
               "'" + lsgenetic_status + "'," +
               "'" + lsgenetic_remarks + "'," +
               "'" + values.statusupdated_by + "'," +
               "'" + employee_gid + "'," +
               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Genetic Code Details Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Updating Genetic Code";
            }
        }

        public void DaDeleteAppGeneticCode(string application2geneticcode_gid, MdlMstGeneticCode values, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadapplication2geneticcode where application2geneticcode_gid='" + application2geneticcode_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadapplication2geneticcodeupdatelog where application2geneticcode_gid='" + application2geneticcode_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Genetic Code Details Deleted Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred While Deleting Genetic Code";
            }
        }

        public void DaUpdateAppBasicDetail(string employee_gid, MdlMstApplicationAdd values)
        {
            msSQL = "select count(geneticcode_gid) from ocs_mst_tgeneticcode where status='Y'";
            string lsmastercount = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select count(application2geneticcode_gid) from ocs_trn_tcadapplication2geneticcode where application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "'";
            string lsgeneticcount = objdbconn.GetExecuteScalar(msSQL);
            if (lsmastercount == lsgeneticcount)
            {
                msSQL = "select application2contact_gid from ocs_trn_tcadapplication2contactno where (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "')" +
                  " and primary_mobileno='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    objODBCDatareader.Close();
                    values.status = false;
                    values.message = "Kindly Add Primary Mobile Number ";
                    return;
                }
                objODBCDatareader.Close();

                msSQL = "select application2email_gid from ocs_trn_tcadapplication2email where (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "')" +
                     " and primary_emailaddress='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    objODBCDatareader.Close();
                    values.status = false;
                    values.message = "Kindly Add Primary Email Adddress";
                    return;
                }
                msSQL = "select application2product_gid from ocs_trn_tcadapplication2product  where (application_gid='" + employee_gid + "' or application_gid='" + values.application_gid + "') ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == false)
                {
                    objODBCDatareader.Close();
                    values.status = false;
                    values.message = "Kindly Add Atleast One Product Details";
                    return;
                }

                string gsvernacularlanguage_gid = string.Empty;
                string gsvernacular_language = string.Empty;

                for (var i = 0; i < values.vernacularlanguage_list.Count; i++)
                {
                    gsvernacularlanguage_gid += values.vernacularlanguage_list[i].vernacularlanguage_gid + ",";
                    gsvernacular_language += values.vernacularlanguage_list[i].vernacular_language + ",";

                }
                gsvernacularlanguage_gid = gsvernacularlanguage_gid.TrimEnd(',');
                gsvernacular_language = gsvernacular_language.TrimEnd(',');

                msSQL = " select application_gid,customer_urn,customerref_name as customer_name,vertical_gid,vertical_name,verticaltaggs_gid,verticaltaggs_name," +
                             " constitution_gid,constitution_name,businessunit_gid,businessunit_name,sa_status,sa_id,sa_name,vernacularlanguage_gid,application_no," +
                             " vernacular_language,contactpersonfirst_name,contactpersonmiddle_name,contactpersonlast_name,designation_gid,designation_type,landline_no,creditgroup_gid,creditgroup_name, " +
                             " program_gid,program_name,product_gid,product_name,variety_gid,variety_name,sector_name,category_name, botanical_name, alternative_name from ocs_trn_tcadapplication " +
                             " where application_gid='" + values.application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    lsapplication_no = objODBCDatareader["application_no"].ToString();
                    lscustomer_urn = objODBCDatareader["customer_urn"].ToString();
                    lscustomer_name = objODBCDatareader["customer_name"].ToString();
                    lsvertical_gid = objODBCDatareader["vertical_gid"].ToString();
                    lsvertical_name = objODBCDatareader["vertical_name"].ToString();
                    //lsverticaltaggs_gid = objODBCDatareader["verticaltaggs_gid"].ToString();
                    //lsverticaltaggs_name = objODBCDatareader["verticaltaggs_name"].ToString();
                    lsconstitution_gid = objODBCDatareader["constitution_gid"].ToString();
                    lsconstitution_name = objODBCDatareader["constitution_name"].ToString();
                    lsbusinessunit_gid = objODBCDatareader["businessunit_gid"].ToString();
                    lsbusinessunit_name = objODBCDatareader["businessunit_name"].ToString();
                    lssa_status = objODBCDatareader["sa_status"].ToString();
                    lssa_name = objODBCDatareader["sa_name"].ToString();
                    lsvernacularlanguage_gid = objODBCDatareader["vernacularlanguage_gid"].ToString();
                    lsvernacular_language = objODBCDatareader["vernacular_language"].ToString();
                    lscontactpersonfirst_name = objODBCDatareader["contactpersonfirst_name"].ToString();
                    lscontactpersonmiddle_name = objODBCDatareader["contactpersonmiddle_name"].ToString();
                    lscontactpersonlast_name = objODBCDatareader["contactpersonlast_name"].ToString();
                    lsdesignation_gid = objODBCDatareader["designation_gid"].ToString();
                    lsdesignation_type = objODBCDatareader["designation_type"].ToString();
                    lslandline_no = objODBCDatareader["landline_no"].ToString();
                    lscreditgroup_gid = objODBCDatareader["creditgroup_gid"].ToString();
                    lscreditgroup_name = objODBCDatareader["creditgroup_name"].ToString();
                    lsprogram_gid = objODBCDatareader["program_gid"].ToString();
                    lsprogram_name = objODBCDatareader["program_name"].ToString();
                    lsproduct_gid = objODBCDatareader["product_gid"].ToString();
                    lsproduct_name = objODBCDatareader["product_name"].ToString();
                    lsvariety_gid = objODBCDatareader["variety_gid"].ToString();
                    lsvariety_name = objODBCDatareader["variety_name"].ToString();
                    lssector_name = objODBCDatareader["sector_name"].ToString();
                    lscategory_name = objODBCDatareader["category_name"].ToString();
                    lsbotanical_name = objODBCDatareader["botanical_name"].ToString();
                    lsalternative_name = objODBCDatareader["alternative_name"].ToString();
                }
                objODBCDatareader.Close();
                try
                {
                    if (values.vertical_gid == lsvertical_gid)
                    {
                    }
                    else
                    {
                        msSQL = "select vertical_refno from ocs_mst_tvertical where vertical_gid='" + values.vertical_gid + "'";
                        string lsvertical_refno = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select entity_gid from ocs_mst_tvertical where vertical_gid='" + values.vertical_gid + "'";
                        string lsentity_gid = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select entity_code from adm_mst_tentity where entity_gid='" + lsentity_gid + "'";
                        string lsentity_code = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select substring('" + lsapplication_no + "',8,16)";
                        string lsrefno = objdbconn.GetExecuteScalar(msSQL);
                        lsapplication_no = "ARN" + lsentity_code + lsvertical_refno + lsrefno;

                    }

                    msSQL = " update ocs_trn_tcadapplication set " +
                             " application_no='" + lsapplication_no + "'," +
                             " customer_urn='" + values.customer_urn + "'," +
                             " customerref_name='" + values.customer_name + "'," +
                             //" vertical_gid='" + values.vertical_gid + "'," +
                             //" vertical_name='" + values.vertical_name + "'," +
                             //" verticaltaggs_gid='" + values.verticaltaggs_gid + "'," +
                             //" verticaltaggs_name='" + values.verticaltaggs_name + "'," +
                             " constitution_gid='" + values.constitution_gid + "'," +
                             " constitution_name='" + values.constitution_name + "'," +
                             " businessunit_gid='" + values.businessunit_gid + "'," +
                             " businessunit_name='" + values.businessunit_name + "'," +
                             " sa_status='" + values.sa_status + "'," +
                             " saname_gid='" + values.saname_gid + "'," +
                             " sa_name='" + values.sa_name + "'," +
                             " vernacularlanguage_gid='" + gsvernacularlanguage_gid + "'," +
                             " vernacular_language='" + gsvernacular_language + "'," +
                             " contactpersonfirst_name='" + values.contactpersonfirst_name + "'," +
                             " contactpersonmiddle_name='" + values.contactpersonmiddle_name + "'," +
                             " contactpersonlast_name='" + values.contactpersonlast_name + "'," +
                             " designation_gid='" + values.designation_gid + "'," +
                             " designation_type='" + values.designation_type + "'," +
                             " landline_no='" + values.landline_no + "'," +
                             //" creditgroup_gid='" + values.creditgroup_gid + "'," +
                             //" creditgroup_name='" + values.creditgroup_name + "'," +
                             //" program_gid='" + values.program_gid + "'," +
                             //" program_name='" + values.program_name + "'," +
                             " product_gid= '" + values.product_gid + "'," +
                             " product_name='" + values.product_name + "'," +
                             " variety_gid= '" + values.variety_gid + "'," +
                             " variety_name='" + values.variety_name + "'," +
                             " sector_name= '" + values.sector_name + "'," +
                             " category_name='" + values.category_name + "'," +
                             " botanical_name= '" + values.botanical_name + "'," +
                             " alternative_name='" + values.alternative_name + "'," +
                             " status = 'Completed'," +
                             " updated_by='" + employee_gid + "'," +
                             " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                             " where application_gid='" + values.application_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult == 1)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("ABUL");

                        msSQL = "Insert into ocs_trn_tcadapplicationbasicdetailsupdatelog(" +
                       " applicationbasicdetailsupdatelog_gid, " +
                       " application_gid, " +
                       " customer_urn, " +
                       " customer_name, " +
                       " vertical_gid, " +
                       " vertical_name," +
                       //" verticaltaggs_gid," +
                       //" verticaltaggs_name," +
                       " constitution_gid," +
                       " constitution_name," +
                       " businessunit_gid," +
                       " businessunit_name," +
                       " sa_status," +
                       " vernacularlanguage_gid," +
                       " vernacularlanguage_name," +
                       " contactpersonfirst_name," +
                       " contactpersonmiddle_name," +
                       " contactpersonlast_name," +
                       " designation_gid," +
                       " designation_type," +
                       " landline_no," +
                       " creditgroup_gid," +
                       " creditgroup_name," +
                       " program_gid," +
                       " program_name," +
                       " product_gid," +
                       " product_name," +
                       " variety_gid," +
                       " variety_name," +
                       " sector_name," +
                       " category_name," +
                       " botanical_name," +
                       " alternative_name," +
                       " statusupdated_by," +
                       " created_by," +
                       " created_date)" +
                       " values (" +
                       "'" + msGetGid + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + lscustomer_urn + "'," +
                       "'" + lscustomer_name + "'," +
                       "'" + lsvertical_gid + "'," +
                       "'" + lsvertical_name + "'," +
                       //"'" + lsverticaltaggs_gid + "'," +
                       //"'" + lsverticaltaggs_name + "'," +
                       "'" + lsconstitution_gid + "'," +
                       "'" + lsconstitution_name + "'," +
                       "'" + lsbusinessunit_gid + "'," +
                       "'" + lsbusinessunit_name + "'," +
                       "'" + lssa_status + "'," +
                       "'" + lsvernacularlanguage_gid + "'," +
                       "'" + lsvernacular_language + "'," +
                       "'" + lscontactpersonfirst_name + "'," +
                       "'" + lscontactpersonmiddle_name + "'," +
                       "'" + lscontactpersonlast_name + "'," +
                       "'" + lsdesignation_gid + "'," +
                       "'" + lsdesignation_type + "'," +
                       "'" + lslandline_no + "'," +
                       "'" + lscreditgroup_gid + "'," +
                       "'" + lscreditgroup_name + "'," +
                       "'" + lsprogram_gid + "'," +
                       "'" + lsprogram_name + "'," +
                       "'" + lsproduct_gid + "'," +
                       "'" + lsproduct_name + "'," +
                       "'" + lsvariety_gid + "'," +
                       "'" + lsvariety_name + "'," +
                       "'" + lssector_name + "'," +
                       "'" + lscategory_name + "'," +
                       "'" + lsbotanical_name + "'," +
                       "'" + lsalternative_name + "'," +
                       "'" + values.statusupdated_by + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        //msSQL = "select primaryvaluechain_gid,primaryvaluechain_name from ocs_trn_tcadapplication2primaryvaluechain where application_gid='" + values.application_gid + "'";
                        //dt_datatable = objdbconn.GetDataTable(msSQL);
                        //List<primaryvaluechain_list> existingprimaryvaluechain_list = new List<primaryvaluechain_list>();
                        //if (dt_datatable.Rows.Count != 0)
                        //{
                        //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                        //    {
                        //        existingprimaryvaluechain_list.Add(new primaryvaluechain_list
                        //        {
                        //            valuechain_gid = dr_datarow["primaryvaluechain_gid"].ToString(),
                        //            valuechain_name = dr_datarow["primaryvaluechain_name"].ToString(),
                        //        });
                        //    }
                        //}

                        //for (var i = 0; i < values.primaryvaluechain_list.Count; i++)
                        //{

                        //    if (existingprimaryvaluechain_list.Contains(values.primaryvaluechain_list[i]) == false)
                        //    {
                        //        msGetGid1 = objcmnfunctions.GetMasterGID("CPRI");
                        //        msSQL = " insert into ocs_trn_tcadapplication2primaryvaluechain(" +
                        //                " application2primaryvaluechain_gid," +
                        //                " application_gid," +
                        //                " primaryvaluechain_name," +
                        //                " primaryvaluechain_gid," +
                        //                " created_by," +
                        //                " created_date)" +
                        //                " values(" +
                        //                "'" + msGetGid1 + "'," +
                        //                "'" + values.application_gid + "'," +
                        //                "'" + values.primaryvaluechain_list[i].valuechain_name + "'," +
                        //                "'" + values.primaryvaluechain_list[i].valuechain_gid + "'," +
                        //                "'" + employee_gid + "'," +
                        //                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        //    }

                        //}

                        //for (var i = 0; i < existingprimaryvaluechain_list.Count; i++)
                        //{
                        //    if (values.primaryvaluechain_list.Contains(existingprimaryvaluechain_list[i]) == false)
                        //    {
                        //        msSQL = "select application2primaryvaluechain_gid from ocs_trn_tcadapplication2primaryvaluechain where primaryvaluechain_gid='" + existingprimaryvaluechain_list[i].valuechain_gid + "' and application_gid = '" + values.application_gid + "'";
                        //        string lsapplication2primaryvaluechain_gid = objdbconn.GetExecuteScalar(msSQL);

                        //        msSQL = "delete from ocs_trn_tcadapplication2primaryvaluechain where application2primaryvaluechain_gid='" + lsapplication2primaryvaluechain_gid + "'";
                        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        //    }
                        //}

                        ////Secondary Value Chain

                        //msSQL = "select secondaryvaluechain_gid,secondaryvaluechain_name from ocs_trn_tcadapplication2secondaryvaluechain where application_gid='" + values.application_gid + "'";
                        //dt_datatable = objdbconn.GetDataTable(msSQL);
                        //List<secondaryvaluechain_list> existingsecondaryvaluechain_list = new List<secondaryvaluechain_list>();
                        //if (dt_datatable.Rows.Count != 0)
                        //{
                        //    foreach (DataRow dr_datarow in dt_datatable.Rows)
                        //    {
                        //        existingsecondaryvaluechain_list.Add(new secondaryvaluechain_list
                        //        {
                        //            valuechain_gid = dr_datarow["secondaryvaluechain_gid"].ToString(),
                        //            valuechain_name = dr_datarow["secondaryvaluechain_name"].ToString(),
                        //        });
                        //    }
                        //}
                        //if (values.secondaryvaluechain_list == null)
                        //{

                        //}
                        //else
                        //{
                        //    for (var i = 0; i < values.secondaryvaluechain_list.Count; i++)
                        //    {

                        //        if (existingsecondaryvaluechain_list.Contains(values.secondaryvaluechain_list[i]) == false)
                        //        {
                        //            msGetGid1 = objcmnfunctions.GetMasterGID("CSEC");
                        //            msSQL = " insert into ocs_trn_tcadapplication2secondaryvaluechain(" +
                        //                    " application2secondaryvaluechain_gid," +
                        //                    " application_gid," +
                        //                    " secondaryvaluechain_name," +
                        //                    " secondaryvaluechain_gid," +
                        //                    " created_by," +
                        //                    " created_date)" +
                        //                    " values(" +
                        //                    "'" + msGetGid1 + "'," +
                        //                    "'" + values.application_gid + "'," +
                        //                    "'" + values.secondaryvaluechain_list[i].valuechain_name + "'," +
                        //                    "'" + values.secondaryvaluechain_list[i].valuechain_gid + "'," +
                        //                    "'" + employee_gid + "'," +
                        //                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        //            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        //        }

                        //    }
                        //}

                        //for (var i = 0; i < existingsecondaryvaluechain_list.Count; i++)
                        //{
                        //    if (values.secondaryvaluechain_list.Contains(existingsecondaryvaluechain_list[i]) == false)
                        //    {
                        //        msSQL = "select application2secondaryvaluechain_gid from ocs_trn_tcadapplication2secondaryvaluechain where secondaryvaluechain_gid='" + existingsecondaryvaluechain_list[i].valuechain_gid + "' and application_gid = '" + values.application_gid + "'";
                        //        string lsapplication2secondaryvaluechain_gid = objdbconn.GetExecuteScalar(msSQL);

                        //        msSQL = "delete from ocs_trn_tcadapplication2secondaryvaluechain where application2secondaryvaluechain_gid='" + lsapplication2secondaryvaluechain_gid + "'";
                        //        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        //    }
                        //}

                        //Updates

                        msSQL = "update ocs_trn_tcadapplication2contactno set application_gid ='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = "update ocs_trn_tcadapplication2email set application_gid ='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = "update ocs_trn_tcadapplication2geneticcode set application_gid ='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = "update ocs_trn_tcadapplication2product set application_gid ='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        values.status = true;
                        values.message = "Basic Details Updated Successfully";
                    }

                }
                catch (Exception ex)
                {
                    values.status = false;
                    values.message = "Error Occured While Updating Basic Details";
                }
            }
            else
            {
                values.message = "Kindly Add all Genetic details";
                values.status = false;
            }
        }

        public void GetIndividualTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2mobileno where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2email where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2address where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2idproof where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2document where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadindividual2cicdocumentupload where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2cicdocumentupload where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2panform60 where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2panabsencereason where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2equipment where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadcontact2livestock where contact_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            values.status = true;
        }

        public void DaGetIntitutionTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2mobileno where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2email where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2address where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2branch where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2licensedtl where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2documentupload where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2form60documentupload where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2equipment where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2livestock where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadinstitution2receivable where institution_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            values.status = true;
        }

        public void DaGetEditProductcharges(string application_gid, MdlMstApplicationAdd values, string employee_gid)
        {
            try
            {

                msSQL = "select application_gid,overalllimit_amount,processing_fee,doc_charges, applicant_type, productcharge_flag, economical_flag," +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date,applicant_type,status,productcharges_status,hypothecation_flag, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by," +
                        " program_gid, program_name from ocs_trn_tcadapplication a " +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.overalllimit_amount = objODBCDatareader["overalllimit_amount"].ToString();
                    values.processing_fee = objODBCDatareader["processing_fee"].ToString();
                    values.doc_charges = objODBCDatareader["doc_charges"].ToString();
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.applicant_type = objODBCDatareader["applicant_type"].ToString();
                    values.economical_flag = objODBCDatareader["economical_flag"].ToString();
                    values.productcharge_flag = objODBCDatareader["productcharge_flag"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.applicant_type = objODBCDatareader["applicant_type"].ToString();
                    values.application_status = objODBCDatareader["status"].ToString();
                    values.productcharges_status = objODBCDatareader["productcharges_status"].ToString();
                    values.hypothecation_flag = objODBCDatareader["hypothecation_flag"].ToString();
                    values.program_gid = objODBCDatareader["program_gid"].ToString();
                    values.program_name = objODBCDatareader["program_name"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaDeleteGSTInstitution(string employee_gid, string institution_gid, MdlMstGST values)
        {
            msSQL = "select institution2branch_gid from ocs_trn_tcadinstitution2branch where institution_gid='" + employee_gid + "' or institution_gid='" + institution_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            string institution2branch_gid;
            foreach (DataRow dr_datarow in dt_datatable.Rows)
            {
                institution2branch_gid = (dr_datarow["institution2branch_gid"].ToString());
                msSQL = "delete from ocs_trn_tcadinstitution2branch where institution2branch_gid='" + institution2branch_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            dt_datatable.Dispose();

            if (mnResult != 0)
            {
                values.message = "GST Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured While Deleting The Gst Details";
                values.status = false;

            }
        }

        public bool DaPostInstitutionGSTList(string employee_gid, MdlMstGST values)
        {

            InstitutionGSTDetails[] GstArray = values.GSTArray;
            string GSTValue, GSTStateCode, GSTState;

            for (int i = 0; i < GstArray.Length; i++)
            {
                GSTValue = GstArray[i].gstinId;
                GSTStateCode = GSTValue.Substring(0, 2);

                msSQL = "select gst_state from ocs_mst_tgstcode2state where " +
                       " gst_code='" + GSTStateCode + "'";
                GSTState = objdbconn.GetExecuteScalar(msSQL);

                msGetGid = objcmnfunctions.GetMasterGID("ITGS");
                msSQL = " insert into ocs_trn_tcadinstitution2branch(" +
                    " institution2branch_gid," +
                    " institution_gid," +
                    " gst_state," +
                    " gst_no," +
                    " gst_registered," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + GSTState + "'," +
                    "'" + GSTValue + "'," +
                    "'" + "Yes" + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "GST Details Added Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }
        }

        public bool DaInstitutionForm_60DocumentUpload(HttpRequest httpRequest, institutionuploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        msGetGid = objcmnfunctions.GetMasterGID("IF6D");
                        msSQL = " insert into ocs_trn_tcadinstitution2form60documentupload( " +
                                    " institution2form60documentupload_gid, " +
                                    " institution_gid," +
                                    " form60document_name," +
                                    " form60document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }

                        msSQL = " select institution2form60documentupload_gid,form60document_name,form60document_path from ocs_trn_tcadinstitution2form60documentupload " +
                                " where institution_gid='" + employee_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getdocumentdtlList = new List<institutionupload_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getdocumentdtlList.Add(new institutionupload_list
                                {
                                    document_name = dt["form60document_name"].ToString(),
                                    //document_path = (dt["form60document_path"].ToString()),
                                    document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                                    institution2form60documentupload_gid = dt["institution2form60documentupload_gid"].ToString()
                                });
                                objfilename.institutionupload_list = getdocumentdtlList;
                            }
                        }
                        dt_datatable.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaInstitutionForm_60DocumentDelete(string institution2form60documentupload_gid, institutionuploaddocument objfilename, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2form60documentupload where institution2form60documentupload_gid='" + institution2form60documentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = " select institution2form60documentupload_gid,form60document_name,form60document_path from ocs_trn_tcadinstitution2form60documentupload " +
                                " where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        document_name = dt["form60document_name"].ToString(),
                        //document_path = (dt["form60document_path"].ToString
                        document_path = objcmnstorage.EncryptData((dt["form60document_path"].ToString())),
                        institution2form60documentupload_gid = dt["institution2form60documentupload_gid"].ToString()
                    });
                    objfilename.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();

            if (mnResult != 0)
            {
                objfilename.message = "Document Deleted Successfully";
                objfilename.status = true;
            }
            else
            {
                objfilename.message = "Error Occured";
                objfilename.status = false;

            }
        }

        public bool DaSaveInstitutionDtlAdd(MdlMstInstitutionAdd values, string employee_gid)
        {


            msSQL = "select stakeholder_type from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            string lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholder_type)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return false;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholder_type)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return false;
            }
            msGetGid = objcmnfunctions.GetMasterGID("APIN");
            msSQL = " insert into ocs_trn_tcadinstitution(" +
                " institution_gid," +
                " application_gid," +
                " company_name," +
                " date_incorporation," +
                " businessstart_date," +
                " year_business," +
                " month_business," +
                " companypan_no," +
                " cin_no," +
                " official_telephoneno," +
                " officialemail_address," +
                " companytype_gid," +
                " companytype_name," +
                " stakeholdertype_gid," +
                " stakeholder_type," +
                " assessmentagency_gid," +
                " assessmentagency_name," +
                " assessmentagencyrating_gid," +
                " assessmentagencyrating_name," +
                " ratingas_on," +
                " amlcategory_gid," +
                " amlcategory_name," +
                " businesscategory_gid," +
                " businesscategory_name," +
                " contactperson_firstname," +
                " contactperson_middlename," +
                " contactperson_lastname," +
                " designation_gid," +
                " designation," +
                " start_date," +
                " end_date," +
                " lastyear_turnover," +
                " escrow," +
                " urn_status," +
                " urn," +
                " institution_status," +
                " created_by," +
                " created_date) values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.application_gid + "'," +
                  "'" + values.company_name + "',";
            if ((values.date_incorporation == null) || (values.date_incorporation == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.date_incorporation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.businessstartdate == null) || (values.businessstartdate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.businessstartdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.year_business + "'," +
                    "'" + values.month_business + "'," +
                    "'" + values.companypan_no + "'," +
                    "'" + values.cin_no + "'," +
                    "'" + values.official_telephoneno + "'," +
                    "'" + values.official_mailid + "'," +
                    "'" + values.companytype_gid + "'," +
                    "'" + values.companytype_name + "'," +
                    "'" + values.stakeholdertype_gid + "'," +
                    "'" + values.stakeholder_type + "'," +
                    "'" + values.assessmentagency_gid + "'," +
                    "'" + values.assessmentagency_name + "'," +
                    "'" + values.assessmentagencyrating_gid + "'," +
                    "'" + values.assessmentagencyrating_name + "',";
            if ((values.ratingas_on == null) || (values.ratingas_on == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.ratingas_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.amlcategory_gid + "'," +
                    "'" + values.amlcategory_name + "'," +
                    "'" + values.businesscategory_gid + "'," +
                    "'" + values.businesscategory_name + "'," +
                    "'" + values.contactperson_firstname + "'," +
                    "'" + values.contactperson_middlename + "'," +
                    "'" + values.contactperson_lastname + "'," +
                    "'" + values.designation_gid + "'," +
                    "'" + values.designation + "',";
            if ((values.start_date == null) || (values.start_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.start_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.end_date == null) || (values.end_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.end_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.lastyear_turnover + "'," +
                    "'" + values.escrow + "'," +
                    "'" + values.urn_status + "'," +
                    "'" + values.urn + "'," +
                    "'Incomplete'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "update ocs_trn_tcadinstitution2branch set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2mobileno set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2email set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2address set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2licensedtl set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select companydocument_gid,institution2documentupload_gid from ocs_trn_tcadinstitution2documentupload where institution_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select companydocument_gid,documenttypes_gid,documenttype_name,companydocument_name,covenant_type " +
                                " from ocs_mst_tcompanydocument where companydocument_gid='" + dt["companydocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["companydocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " companydocument_gid, " +
                             " documentuploaded_gid, " +
                            " documenttype_gid," +
                        " documenttype_code," +
                        " documenttype_name," +
                        " covenant_type, " +
                        " tagged_by, " +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetdefDocchecklistGID + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + msGetGid + "'," +
                        "'" + dt["companydocument_gid"].ToString() + "'," +
                        "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                        "'" + lsdocumenttype_gid + "'," +
                        "'" + lsdocumenttype_name + "'," +
                        "'" + lscompanydocument_name.Replace("'", "") + "'," +
                        "'" + lscovenant_type + "'," +
                        "'N'," +
                        "current_timestamp," +
                        "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                       " covenantdocumentcheckdtl_gid," +
                       " application_gid," +
                       " credit_gid," +
                       " companydocument_gid," +
                       " documentuploaded_gid, " +
                       " documenttype_gid," +
                       " documenttype_code," +
                       " documenttype_name," +
                       " covenant_type, " +
                       " tagged_by, " +
                       " created_date," +
                       " created_by)" +
                       " VALUES(" +
                       "'" + msGetDocchecklistGID + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + msGetGid + "'," +
                       "'" + dt["companydocument_gid"].ToString() + "'," +
                       "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                       "'" + lsdocumenttype_gid + "'," +
                       "'" + lsdocumenttype_name + "'," +
                       "'" + lscompanydocument_name.Replace("'", "") + "'," +
                       "'" + lscovenant_type + "'," +
                       "'N'," +
                       "current_timestamp," +
                       "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();

                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, msGetGid, employee_gid);

                msSQL = "update ocs_trn_tcadinstitution2documentupload set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2form60documentupload set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycgstsbpan set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycudyamauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Institution Information Saved Successfully";
                values.status = true;
                return true;

            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
                return false;
            }
        }

        public bool DaSubmitInstitutionDtlAdd(MdlMstInstitutionAdd values, string user_gid, string employee_gid)
        {

            msSQL = " select a.companydocument_gid from ocs_mst_tcompanydocument a " +
                    " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                    " where a.documenttypes_gid = 'DOCT2022010611' and " +
                    " status = 'Y' and b.program_gid ='" + values.program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmasterdocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmasterdocument_list.Add(dr_datarow["companydocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            msSQL = " select distinct(a.companydocument_gid) " +
                    " from ocs_trn_tcadinstitution2documentupload a where a.documenttype_gid = 'DOCT2022010611' and " +
                    " institution_gid = '" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gettransactiondocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gettransactiondocument_list.Add(dr_datarow["companydocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            var set1 = new HashSet<string>(getmasterdocument_list);
            var set2 = new HashSet<string>(gettransactiondocument_list);

            if (set1.SetEquals(set2) == false)
            {
                values.status = false;
                values.message = "Upload All KYC Documents";
                return false;
            }

            msSQL = "select institution2mobileno_gid from ocs_trn_tcadinstitution2mobileno where institution_gid='" + employee_gid + "' and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Mobile Number";
                return false;
            }

            msSQL = "select institution2mobileno_gid from ocs_trn_tcadinstitution2mobileno where institution_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Mobile Number";
                return false;
            }

            msSQL = "select institution2email_gid from ocs_trn_tcadinstitution2email where institution_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Email Address";
                return false;
            }

            msSQL = "select institution2address_gid from ocs_trn_tcadinstitution2address where institution_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Address Detail";
                return false;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            string lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholder_type)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return false;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholder_type)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return false;
            }
            if (values.Gstflag == "Yes")
            {
                msSQL = "select institution2branch_gid from ocs_trn_tcadinstitution2branch where institution_gid='" + employee_gid + "' and headoffice_status ='Yes' ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Atleast Select One GST Number as Head Office";
                    return false;
                }
                objODBCDatareader.Close();
            }
            if (values.business_description == null || values.business_description == "")
            {
                lsbusiness_description = "";
            }
            else
            {
                lsbusiness_description = values.business_description.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("APIN");
            msSQL = " insert into ocs_trn_tcadinstitution(" +
                    " institution_gid," +
                    " application_gid," +
                    " company_name," +
                    " date_incorporation," +
                    " businessstart_date," +
                    " year_business," +
                    " month_business," +
                    " companypan_no," +
                    " cin_no," +
                    " official_telephoneno," +
                    " officialemail_address," +
                    " companytype_gid," +
                    " companytype_name," +
                    " stakeholdertype_gid," +
                    " stakeholder_type," +
                    " assessmentagency_gid," +
                    " assessmentagency_name," +
                    " assessmentagencyrating_gid," +
                    " assessmentagencyrating_name," +
                    " ratingas_on," +
                    " amlcategory_gid," +
                    " amlcategory_name," +
                    " businesscategory_gid," +
                    " businesscategory_name," +
                    " contactperson_firstname," +
                    " contactperson_middlename," +
                    " contactperson_lastname," +
                    " designation_gid," +
                    " designation," +
                    " start_date," +
                    " end_date," +
                    " lastyear_turnover," +
                    " escrow," +
                    " urn_status," +
                    " urn," +
                    " institution_status," +
                    " nearsamunnatiabranch_gid," +
                    " nearsamunnatiabranch_name," +
                    " udhayam_registration," +
                    " tan_number," +
                    " business_description," +
                    " tanstate_gid," +
                    " tanstate_name," +
                    " internalrating_gid," +
                    " internalrating_name," +
                    " sales," +
                    " purchase," +
                    " credit_summation," +
                    " cheque_bounce," +
                    " numberof_boardmeetings, " +
                    " farmer_count, " +
                    " crop_cycle, " +
                    " calamities_prone, " +
                     " msme_regi_no," +
                    " lei_no," +
                    " kin_no," +
                    " renewaldue_date," +
                    " created_by," +
                    " created_date) values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.application_gid + "'," +
                  "'" + values.company_name.Replace("'", "\\'") + "',";
            if ((values.date_incorporation == null) || (values.date_incorporation == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.date_incorporation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.businessstartdate == null) || (values.businessstartdate == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.businessstartdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.year_business + "'," +
                    "'" + values.month_business + "'," +
                    "'" + values.companypan_no + "'," +
                    "'" + values.cin_no + "'," +
                    "'" + values.official_telephoneno + "'," +
                    "'" + values.official_mailid + "'," +
                    "'" + values.companytype_gid + "'," +
                    "'" + values.companytype_name + "'," +
                    "'" + values.stakeholdertype_gid + "'," +
                    "'" + values.stakeholder_type + "'," +
                    "'" + values.assessmentagency_gid + "'," +
                    "'" + values.assessmentagency_name + "'," +
                    "'" + values.assessmentagencyrating_gid + "'," +
                    "'" + values.assessmentagencyrating_name + "',";
            if ((values.ratingas_on == null) || (values.ratingas_on == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.ratingas_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.amlcategory_gid + "'," +
                    "'" + values.amlcategory_name + "'," +
                    "'" + values.businesscategory_gid + "'," +
                    "'" + values.businesscategory_name + "'," +
                    "'" + values.contactperson_firstname + "'," +
                    "'" + values.contactperson_middlename + "'," +
                    "'" + values.contactperson_lastname + "'," +
                    "'" + values.designation_gid + "'," +
                    "'" + values.designation + "',";
            if ((values.start_date == null) || (values.start_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.start_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.end_date == null) || (values.end_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.end_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + values.lastyear_turnover + "'," +
                    "'" + values.escrow + "'," +
                    "'" + values.urn_status + "'," +
                    "'" + values.urn + "'," +
                    "'Completed'," +
                    "'" + values.nearsamunnatiabranch_gid + "'," +
                    "'" + values.nearsamunnatiabranch_name + "'," +
                    "'" + values.udhayam_registration + "'," +
                    "'" + values.tan_number + "'," +
                    "'" + lsbusiness_description + "'," +
                    "'" + values.tanstate_gid + "'," +
                    "'" + values.tanstate_name + "'," +
                    "'" + values.internalrating_gid + "'," +
                    "'" + values.internalrating_name + "'," +
                    "'" + values.sales + "'," +
                    "'" + values.purchase + "'," +
                    "'" + values.credit_summation + "'," +
                    "'" + values.cheque_bounce + "'," +
                    "'" + values.numberof_boardmeetings + "'," +
                    "'" + values.farmer_count + "'," +
                    "'" + values.crop_cycle + "'," +
                    "'" + values.calamities_prone + "'," +
                     "'" + values.msme_regi_no + "'," +
                    "'" + values.lei_no + "'," +
                    "'" + values.kin_no + "',";
            if ((values.renewaldue_date == null) || (values.renewaldue_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.renewaldue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "update ocs_trn_tcadinstitution2branch set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2mobileno set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2email set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2address set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2licensedtl set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2equipment set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2livestock set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2receivable set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select companydocument_gid,institution2documentupload_gid from ocs_trn_tcadinstitution2documentupload where institution_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select companydocument_gid,documenttypes_gid,documenttype_name,companydocument_name,covenant_type " +
                                " from ocs_mst_tcompanydocument where companydocument_gid='" + dt["companydocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["companydocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " companydocument_gid, " +
                            " documentuploaded_gid, " +
                            " documenttype_gid," +
                            " documenttype_code," +
                            " documenttype_name," +
                            " covenant_type, " +
                            " tagged_by, " +
                            " created_date," +
                            " created_by)" +
                            " VALUES(" +
                            "'" + msGetdefDocchecklistGID + "'," +
                            "'" + values.application_gid + "'," +
                            "'" + msGetGid + "'," +
                            "'" + dt["companydocument_gid"].ToString() + "'," +
                            "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                            "'" + lsdocumenttype_gid + "'," +
                            "'" + lsdocumenttype_name + "'," +
                            "'" + lscompanydocument_name.Replace("'", "") + "'," +
                            "'" + lscovenant_type + "'," +
                            "'N'," +
                            "current_timestamp," +
                            "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                               " covenantdocumentcheckdtl_gid," +
                               " application_gid," +
                               " credit_gid," +
                               " companydocument_gid," +
                               " documentuploaded_gid, " +
                               " documenttype_gid," +
                               " documenttype_code," +
                               " documenttype_name," +
                               " covenant_type, " +
                               " tagged_by, " +
                               " created_date," +
                               " created_by)" +
                               " VALUES(" +
                               "'" + msGetDocchecklistGID + "'," +
                               "'" + values.application_gid + "'," +
                               "'" + msGetGid + "'," +
                               "'" + dt["companydocument_gid"].ToString() + "'," +
                               "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                               "'" + lsdocumenttype_gid + "'," +
                               "'" + lsdocumenttype_name + "'," +
                               "'" + lscompanydocument_name.Replace("'", "") + "'," +
                               "'" + lscovenant_type + "'," +
                               "'N'," +
                               "current_timestamp," +
                               "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();

                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, msGetGid, employee_gid);

                if (values.fpocity_list == null)
                {
                }
                else
                {
                    for (var i = 0; i < values.fpocity_list.Count; i++)
                    {
                        msGetGid1 = objcmnfunctions.GetMasterGID("I2FC");
                        msSQL = " insert into ocs_trn_tcadinstitution2fpocacity(" +
                                " institution2fpocacity_gid," +
                                " institution_gid," +
                                " city_gid," +
                                " city_name," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid1 + "'," +
                                "'" + msGetGid + "'," +
                                "'" + values.fpocity_list[i].city_gid + "'," +
                                "'" + values.fpocity_list[i].city_name + "'," +
                                "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = "update ocs_trn_tcadinstitution2documentupload set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadinstitution2form60documentupload set institution_gid='" + msGetGid + "' where institution_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycgstsbpan set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycudyamauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msSQL = "select stakeholder_type from ocs_mst_tinstitution where institution_gid='" + msGetGid + "' ";
                    string lsstakeholders_type = objdbconn.GetExecuteScalar(msSQL);

                    if (lsstakeholders_type == "Applicant" || lsstakeholders_type == "Borrower")
                    {
                        msSQL = "select mobile_no from ocs_trn_tcadinstitution2mobileno where institution_gid='" + msGetGid + "' and primary_status='yes'";
                        string lsmobileno = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select email_address from ocs_trn_tcadinstitution2email where institution_gid='" + msGetGid + "' and primary_status='yes'";
                        lsemail_address = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select company_name,institution_gid,urn,stakeholder_type from ocs_trn_tcadinstitution where " +
                                " application_gid='" + values.application_gid + "' and stakeholder_type in ('Applicant','Borrower')";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lscustomer_name = objODBCDatareader["company_name"].ToString();
                            lsurn = objODBCDatareader["urn"].ToString();
                            lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();

                            //Region
                            msSQL = "select state from ocs_trn_tcadinstitution2address where primary_status='Yes' and institution_gid='" + objODBCDatareader["institution_gid"].ToString() + "'";
                            lsregion = objdbconn.GetExecuteScalar(msSQL);

                            //Main Table 
                            msSQL = " update ocs_trn_tcadapplication set customer_name='" + lscustomer_name.Replace("'", "\\'") + "'," +
                                    " mobile_no='" + lsmobile_no + "'," +
                                    " email_address='" + lsemail_address + "'," +
                                    " region='" + lsregion + "'," +
                                    " customer_urn='" + lsurn + "'," +
                                    " applicant_type='Institution'," +
                                    " updated_by='" + employee_gid + "'," +
                                    " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                                    " where application_gid='" + values.application_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            msSQL = " update ocs_trn_tcadinstitution set mobile_no='" + lsmobileno + "'," +
                                    " email_address='" + lsemail_address + "' where institution_gid='" + msGetGid + "' ";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                        objODBCDatareader.Close();
                        values.status = true;
                        values.message = "Institution Details Updated Successfully";
                        return true;
                    }
                    else
                    {

                    }
                }

                DaMstCADApplication objDaMstCADApplication = new DaMstCADApplication();
                objDaMstCADApplication.FnProgramBasedDcoument4Cadflow(values.application_gid, employee_gid, user_gid);

                values.message = "Institution Information Submitted Successfully";
                values.status = true;
                return true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
                return false;
            }
        }

        public void DaGetInstitutionLicenseList(string employee_gid, MdlMstLicenseDetails values)
        {
            msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                    " date_format(expiry_date,'%d-%m-%Y') as expiry_date from ocs_trn_tcadinstitution2licensedtl" +
                    " where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlicense_list = new List<mstlicense_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlicense_list.Add(new mstlicense_list
                    {
                        institution2licensedtl_gid = (dr_datarow["institution2licensedtl_gid"].ToString()),
                        licensetype_gid = (dr_datarow["licensetype_gid"].ToString()),
                        licensetype_name = (dr_datarow["licensetype_name"].ToString()),
                        license_number = (dr_datarow["license_no"].ToString()),
                        licenseissue_date = (dr_datarow["issue_date"].ToString()),
                        licenseexpiry_date = (dr_datarow["expiry_date"].ToString())
                    });
                }
                values.mstlicense_list = getmstlicense_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetInstitutionGSTList(string employee_gid, MdlMstGST values)
        {
            msSQL = " select institution2branch_gid,gst_state,gst_no, gst_registered,headoffice_status " +
                    " from ocs_trn_tcadinstitution2branch where institution_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstgst_list = new List<mstgst_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstgst_list.Add(new mstgst_list
                    {
                        institution2branch_gid = (dr_datarow["institution2branch_gid"].ToString()),
                        gst_state = (dr_datarow["gst_state"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gst_registered = (dr_datarow["gst_registered"].ToString()),
                        headoffice_status = (dr_datarow["headoffice_status"].ToString())
                    });
                }
                values.mstgst_list = getmstgst_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetInstitutionMobileNoList(string employee_gid, MdlMstMobileNo values)
        {
            msSQL = "select mobile_no,institution2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadinstitution2mobileno where " +
              " institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstmobileno_list = new List<mstmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstmobileno_list.Add(new mstmobileno_list
                    {
                        institution2mobileno_gid = (dr_datarow["institution2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
                values.mstmobileno_list = getmstmobileno_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetInstitutionEmailAddressList(string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = " select email_address,institution2email_gid,primary_status from ocs_trn_tcadinstitution2email where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstemailaddress_list = new List<mstemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstemailaddress_list.Add(new mstemailaddress_list
                    {
                        institution2email_gid = (dr_datarow["institution2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString())
                    });
                }
                values.mstemailaddress_list = getmstemailaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetInstitutionAddressList(string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select institution2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, landmark, latitude, longitude," +
                    " postal_code from ocs_trn_tcadinstitution2address where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        institution2address_gid = (dr_datarow["institution2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostInstitutionGST(string employee_gid, MdlMstGST values)
        {
            msSQL = "select application_gid from tmp_application where employee_gid='" + employee_gid + "'";
            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select institution2branch_gid from ocs_trn_tcadinstitution2branch where gst_no='" + values.gst_no + "' and institution_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("ITGS");
            msSQL = " insert into ocs_trn_tcadinstitution2branch(" +
                    " institution2branch_gid," +
                    " institution_gid," +
                    " gst_state," +
                    " gst_no," +
                    " gst_registered," +
                    " headoffice_status, " +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.gst_state + "'," +
                    "'" + values.gst_no + "'," +
                    "'" + values.gst_registered + "'," +
                    "'No'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "GST Details Added Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaDeleteInstitutionGST(string institution2branch_gid, MdlMstGST values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2branch where institution2branch_gid='" + institution2branch_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadinstitution2branchupdatelog where institution2branch_gid='" + institution2branch_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "GST Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaPostInstitutionMobileNo(string employee_gid, MdlMstMobileNo values)
        {
            msSQL = "select primary_status from ocs_trn_tcadinstitution2mobileno where primary_status='Yes' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Mobile Number Added";
                return false;
            }

            msSQL = "select institution2mobileno_gid from ocs_trn_tcadinstitution2mobileno where mobile_no='" + values.mobile_no + "' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Mobile Number Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("IT2M");
            msSQL = " insert into ocs_trn_tcadinstitution2mobileno(" +
                    " institution2mobileno_gid," +
                    " institution_gid," +
                    " mobile_no," +
                    " primary_status," +
                    " whatsapp_no," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.mobile_no + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.whatsapp_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile Number Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaDeleteInstitutionMobileNo(string institution2mobileno_gid, MdlMstMobileNo values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2mobileno where institution2mobileno_gid='" + institution2mobileno_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadinstitution2mobilenoupdatelog where institution2mobileno_gid='" + institution2mobileno_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Mobile Number Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }

        public bool DaPostInstitutionEmailAddress(string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = "select primary_status from ocs_trn_tcadinstitution2email where primary_status='Yes' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {

                values.status = false;
                values.message = "Already Primary Email Address Added";
                return false;
            }
            msSQL = "select institution2email_gid from ocs_trn_tcadinstitution2email where email_address='" + values.email_address + "' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Email Address Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("IT2E");
            msSQL = " insert into ocs_trn_tcadinstitution2email(" +
                    " institution2email_gid," +
                    " institution_gid," +
                    " email_address," +
                    " primary_status," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.email_address + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Email Address Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaDeleteInstitutionEmailAddress(string institution2email_gid, MdlMstEmailAddress values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2email where institution2email_gid='" + institution2email_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadinstitution2emailupdatelog where institution2email_gid='" + institution2email_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Email Address Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaPostInstitutionAddressDetail(string employee_gid, string user_gid, MdlMstAddressDetails values)
        {
            msSQL = "select primary_status from ocs_trn_tcadinstitution2address where primary_status='Yes' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Address Added";
                return false;
            }
            msSQL = "select institution2address_gid from ocs_trn_tcadinstitution2address where addresstype_name='" + values.address_type + "' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Address Type Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("IT2A");
            msSQL = " insert into ocs_trn_tcadinstitution2address(" +
                    " institution2address_gid," +
                    " institution_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " primary_status," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.address_typegid + "'," +
                    "'" + values.address_type + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.landmark + "'," +
                    "'" + values.postal_code + "'," +
                    "'" + values.city + "'," +
                    "'" + values.taluka + "'," +
                    "'" + values.district + "'," +
                    "'" + values.state + "'," +
                    "'" + values.country + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Address Details Added Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }

        }

        public void DaDeleteInstitutionAddressDetail(string institution2address_gid, string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2address where institution2address_gid='" + institution2address_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadinstitution2addressupdatelog where institution2address_gid='" + institution2address_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Address Deatils Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaPostInstitutionLicenseDetail(string employee_gid, string user_gid, MdlMstLicenseDetails values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("IT2L");
            msSQL = " insert into ocs_trn_tcadinstitution2licensedtl(" +
                    " institution2licensedtl_gid," +
                    " institution_gid," +
                    " licensetype_gid," +
                    " licensetype_name," +
                    " license_no," +
                    " issue_date," +
                    " expiry_date," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.licensetype_gid + "'," +
                    "'" + values.licensetype_name + "'," +
                    "'" + values.license_number + "',";
            if ((values.licenseissue_date == null) || (values.licenseissue_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.licenseissue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if ((values.licenseexpiry_date == null) || (values.licenseexpiry_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.licenseexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            msSQL += "'" + employee_gid + "'," +
             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "License Details Added Sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }

        }

        public void DaDeleteInstitutionLicenseDetail(string institution2licensedtl_gid, MdlMstLicenseDetails values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2licensedtl where institution2licensedtl_gid='" + institution2licensedtl_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadinstitution2licenseupdatelog where institution2licensedtl_gid='" + institution2licensedtl_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "License Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaInstitutionDocumentUpload(HttpRequest httpRequest, institutionuploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsdocument_id = httpRequest.Form["document_id"].ToString();
            string lscompanydocument_gid = httpRequest.Form["companydocument_gid"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();
            string lsdocumenttype_gid = httpRequest.Form["documenttype_gid"].ToString();
            string lsdocumenttype_name = httpRequest.Form["documenttype_name"].ToString();
            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        bool status;

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msSQL = "select covenant_type from ocs_mst_tcompanydocument where companydocument_gid='" + lscompanydocument_gid + "'";
                        string lscovenant_type = objdbconn.GetExecuteScalar(msSQL);

                        msGetGid = objcmnfunctions.GetMasterGID("INDO");
                        msSQL = " insert into ocs_trn_tcadinstitution2documentupload( " +
                                    " institution2documentupload_gid," +
                                    " institution_gid," +
                                    " document_title ," +
                                    " document_id," +
                                    " document_name ," +
                                    " document_path," +
                                    " companydocument_gid, " +
                                    " covenant_type," +
                                    " documenttype_gid," +
                                    " documenttype_name," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + lsdocument_title.Replace("'", "") + "'," +
                                    "'" + lsdocument_id.Replace("'", "") + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + lscompanydocument_gid + "'," +
                                    "'" + lscovenant_type + "'," +
                                    "'" + lsdocumenttype_gid + "'," +
                                    "'" + lsdocumenttype_name + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }

                        msSQL = " select institution2documentupload_gid,institution_gid,document_name,document_path," +
                                " document_title,document_id,migration_flag,documenttype_name" +
                                " from ocs_trn_tcadinstitution2documentupload " +
                                " where institution_gid='" + employee_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getdocumentdtlList = new List<institutionupload_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getdocumentdtlList.Add(new institutionupload_list
                                {
                                    migration_flag = dt["migration_flag"].ToString(),
                                    document_name = dt["document_name"].ToString(),
                                    //document_path = (dt["document_path"].ToString()),
                                    document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                                    institution_gid = dt["institution_gid"].ToString(),
                                    institution2documentupload_gid = dt["institution2documentupload_gid"].ToString(),
                                    document_title = dt["document_title"].ToString(),
                                    document_id = dt["document_id"].ToString(),
                                    documenttype_name = dt["documenttype_name"].ToString()
                                });
                                objfilename.institutionupload_list = getdocumentdtlList;
                            }
                        }
                        dt_datatable.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaInstitutionDocumentDelete(string institution2documentupload_gid, institutionuploaddocument objfilename, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2documentupload where institution2documentupload_gid='" + institution2documentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult == 1)
            {
                msSQL = " select groupdocumentchecklist_gid from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                string lsgroupdocumentchecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsgroupdocumentchecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcaddocumentchecktls " +
                            " where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupdocumentchecklist where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                msSQL = " select groupcovdocumentchecklist_gid from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                string lschecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lschecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcadcovanantdocumentcheckdtls " +
                      " where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupcovenantdocumentchecklist where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                msSQL = "delete from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "delete from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }

            msSQL = " select institution2documentupload_gid,institution_gid,document_name,document_path,document_title," +
                    " document_id, migration_flag,documenttype_name from ocs_trn_tcadinstitution2documentupload " +
                    " where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        institution_gid = dt["institution_gid"].ToString(),
                        institution2documentupload_gid = dt["institution2documentupload_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_id = dt["document_id"].ToString(),
                        documenttype_name = dt["documenttype_name"].ToString()
                    });
                    objfilename.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();

            if (mnResult != 0)
            {
                objfilename.message = "Document Deleted Successfully";
                objfilename.status = true;
            }
            else
            {
                objfilename.message = "Error Occured";
                objfilename.status = false;

            }
        }

        public void DaInstitutionGSTList(string institution_gid, MdlMstGST values)
        {
            msSQL = "select institution2branch_gid,gst_state,gst_no, gst_registered,headoffice_status " +
                    " from ocs_trn_tcadinstitution2branch where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstgst_list = new List<mstgst_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstgst_list.Add(new mstgst_list
                    {
                        institution2branch_gid = (dr_datarow["institution2branch_gid"].ToString()),
                        gst_state = (dr_datarow["gst_state"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gst_registered = (dr_datarow["gst_registered"].ToString()),
                        headoffice_status = (dr_datarow["headoffice_status"].ToString())
                    });
                }
                values.mstgst_list = getmstgst_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionMobileNoList(string institution_gid, MdlMstMobileNo values)
        {
            msSQL = "select mobile_no,institution2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadinstitution2mobileno where " +
              " institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstmobileno_list = new List<mstmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstmobileno_list.Add(new mstmobileno_list
                    {
                        institution2mobileno_gid = (dr_datarow["institution2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
                values.mstmobileno_list = getmstmobileno_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionEmailAddressList(string institution_gid, MdlMstEmailAddress values)
        {
            msSQL = "select email_address,institution2email_gid,primary_status from ocs_trn_tcadinstitution2email where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstemailaddress_list = new List<mstemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstemailaddress_list.Add(new mstemailaddress_list
                    {
                        institution2email_gid = (dr_datarow["institution2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString())
                    });
                }
                values.mstemailaddress_list = getmstemailaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionAddressList(string institution_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select institution2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, landmark," +
                    " postal_code from ocs_trn_tcadinstitution2address where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        institution2address_gid = (dr_datarow["institution2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionLicenseList(string institution_gid, MdlMstLicenseDetails values)
        {
            msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                    " date_format(expiry_date,'%d-%m-%Y') as expiry_date from ocs_trn_tcadinstitution2licensedtl" +
                    " where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlicense_list = new List<mstlicense_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlicense_list.Add(new mstlicense_list
                    {
                        institution2licensedtl_gid = (dr_datarow["institution2licensedtl_gid"].ToString()),
                        licensetype_gid = (dr_datarow["licensetype_gid"].ToString()),
                        licensetype_name = (dr_datarow["licensetype_name"].ToString()),
                        license_number = (dr_datarow["license_no"].ToString()),
                        licenseissue_date = (dr_datarow["issue_date"].ToString()),
                        licenseexpiry_date = (dr_datarow["expiry_date"].ToString())
                    });
                }
                values.mstlicense_list = getmstlicense_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionDocumentList(string institution_gid, institutionuploaddocument values)
        {
            msSQL = " select institution2documentupload_gid,institution_gid,document_name,document_path,document_title,document_id," +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by, " +
                    " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as uploaded_date,migration_flag, " +
                    " documenttype_name from ocs_trn_tcadinstitution2documentupload a" +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        institution_gid = dt["institution_gid"].ToString(),
                        institution2documentupload_gid = dt["institution2documentupload_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_id = dt["document_id"].ToString(),
                        uploaded_by = dt["uploaded_by"].ToString(),
                        uploaded_date = dt["uploaded_date"].ToString(),
                        documenttype_name = dt["uploaded_date"].ToString()
                    });
                    values.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionForm60DocumentList(string institution_gid, institutionuploaddocument values)
        {
            msSQL = " select institution2form60documentupload_gid,institution_gid,form60document_name,form60document_path," +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by, " +
                    " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as uploaded_date" +
                    " from ocs_trn_tcadinstitution2form60documentupload a" +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        document_name = dt["form60document_name"].ToString(),
                        //document_path = (dt["form60document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["form60document_path"].ToString())),
                        institution_gid = dt["institution_gid"].ToString(),
                        institution2form60documentupload_gid = dt["institution2form60documentupload_gid"].ToString(),
                        uploaded_by = dt["uploaded_by"].ToString(),
                        uploaded_date = dt["uploaded_date"].ToString(),
                    });
                    values.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionDetailsEdit(string institution_gid, MdlMstInstitutionAdd values)
        {
            try
            {
                msSQL = " select application_gid, application_no, company_name,msme_regi_no,kin_no,lei_no,renewaldue_date, date_incorporation, businessstart_date, companypan_no, year_business, month_business, cin_no," +
                   " official_telephoneno, officialemail_address, companytype_gid, companytype_name, stakeholder_type, stakeholdertype_gid, assessmentagency_gid, " +
                   " assessmentagency_name, assessmentagencyrating_gid, assessmentagencyrating_name, ratingas_on, amlcategory_gid, amlcategory_name,businesscategory_gid, " +
                   " businesscategory_name, contactperson_firstname, contactperson_middlename, contactperson_lastname, designation_gid, designation, " +
                   " lastyear_turnover, escrow, start_date, end_date, institution_status, urn, urn_status, " +
                   " nearsamunnatiabranch_gid,nearsamunnatiabranch_name,udhayam_registration,tan_number,business_description, " +
                   " tanstate_gid,tanstate_name,internalrating_gid,internalrating_name,sales, purchase, credit_summation, " +
                   " cheque_bounce, numberof_boardmeetings, farmer_count, crop_cycle, calamities_prone " +
                   " from ocs_trn_tcadinstitution where institution_gid='" + institution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.application_no = objODBCDatareader["application_no"].ToString();
                    values.company_name = objODBCDatareader["company_name"].ToString();
                    values.msme_regi_no = objODBCDatareader["msme_regi_no"].ToString();
                    values.kin_no = objODBCDatareader["kin_no"].ToString();
                    values.lei_no = objODBCDatareader["lei_no"].ToString();
                    if (objODBCDatareader["renewaldue_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.renewaldue_date = Convert.ToDateTime(objODBCDatareader["renewaldue_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["date_incorporation"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editdate_incorporation = Convert.ToDateTime(objODBCDatareader["date_incorporation"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["businessstart_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editbusinessstart_date = Convert.ToDateTime(objODBCDatareader["businessstart_date"]).ToString("dd-MM-yyyy");
                    }
                    values.companypan_no = objODBCDatareader["companypan_no"].ToString();
                    values.year_business = objODBCDatareader["year_business"].ToString();
                    values.month_business = objODBCDatareader["month_business"].ToString();
                    values.cin_no = objODBCDatareader["cin_no"].ToString();
                    values.official_telephoneno = objODBCDatareader["official_telephoneno"].ToString();
                    values.official_mailid = objODBCDatareader["officialemail_address"].ToString();
                    values.companytype_gid = objODBCDatareader["companytype_gid"].ToString();
                    values.companytype_name = objODBCDatareader["companytype_name"].ToString();
                    values.stakeholder_type = objODBCDatareader["stakeholder_type"].ToString();
                    values.stakeholdertype_gid = objODBCDatareader["stakeholdertype_gid"].ToString();
                    values.assessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    if (objODBCDatareader["ratingas_on"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editratingas_on = Convert.ToDateTime(objODBCDatareader["ratingas_on"]).ToString("dd-MM-yyyy");
                    }
                    values.amlcategory_gid = objODBCDatareader["amlcategory_gid"].ToString();
                    values.amlcategory_name = objODBCDatareader["amlcategory_name"].ToString();
                    values.businesscategory_gid = objODBCDatareader["businesscategory_gid"].ToString();
                    values.businesscategory_name = objODBCDatareader["businesscategory_name"].ToString();
                    values.contactperson_firstname = objODBCDatareader["contactperson_firstname"].ToString();
                    values.contactperson_middlename = objODBCDatareader["contactperson_middlename"].ToString();
                    values.contactperson_lastname = objODBCDatareader["contactperson_lastname"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation = objODBCDatareader["designation"].ToString();
                    values.lastyear_turnover = objODBCDatareader["lastyear_turnover"].ToString();
                    values.escrow = objODBCDatareader["escrow"].ToString();
                    if (objODBCDatareader["start_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editstart_date = Convert.ToDateTime(objODBCDatareader["start_date"]).ToString("dd-MM-yyyy");
                    }
                    if (objODBCDatareader["end_date"].ToString() == "")
                    {
                    }
                    else
                    {
                        values.editend_date = Convert.ToDateTime(objODBCDatareader["end_date"]).ToString("dd-MM-yyyy");
                    }
                    values.institution_status = objODBCDatareader["institution_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.nearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                    values.nearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                    values.udhayam_registration = objODBCDatareader["udhayam_registration"].ToString();
                    values.tan_number = objODBCDatareader["tan_number"].ToString();
                    values.business_description = objODBCDatareader["business_description"].ToString();
                    values.tanstate_gid = objODBCDatareader["tanstate_gid"].ToString();
                    values.tanstate_name = objODBCDatareader["tanstate_name"].ToString();
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                    values.sales = objODBCDatareader["sales"].ToString();
                    values.purchase = objODBCDatareader["purchase"].ToString();
                    values.credit_summation = objODBCDatareader["credit_summation"].ToString();
                    values.cheque_bounce = objODBCDatareader["cheque_bounce"].ToString();
                    values.numberof_boardmeetings = objODBCDatareader["numberof_boardmeetings"].ToString();
                    values.farmer_count = objODBCDatareader["farmer_count"].ToString();
                    values.crop_cycle = objODBCDatareader["crop_cycle"].ToString();
                    values.calamities_prone = objODBCDatareader["calamities_prone"].ToString();
                }

                msSQL = "select city_gid,city_name from ocs_trn_tcadinstitution2fpocacity where institution_gid='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);

                var get_fpocity_list = new List<fpocity_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    values.fpocity_list = dt_datatable.AsEnumerable().Select(row =>
                      new fpocity_list
                      {
                          city_gid = row["city_gid"].ToString(),
                          city_name = row["city_name"].ToString()
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();

                msSQL = " Select city_gid,city_name FROM ocs_mst_tcity ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcityedit_list = new List<cityedit_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcityedit_list.Add(new cityedit_list
                        {
                            city_gid = (dr_datarow["city_gid"].ToString()),
                            city_name = (dr_datarow["city_name"].ToString())
                        });
                    }
                    values.cityedit_list = getcityedit_list;
                }
                dt_datatable.Dispose();

                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaInstitutionLicenseTmpList(string employee_gid, string institution_gid, MdlMstLicenseDetails values)
        {
            msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                    " date_format(expiry_date,'%d-%m-%Y') as expiry_date from ocs_trn_tcadinstitution2licensedtl" +
                    " where institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlicense_list = new List<mstlicense_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlicense_list.Add(new mstlicense_list
                    {
                        institution2licensedtl_gid = (dr_datarow["institution2licensedtl_gid"].ToString()),
                        licensetype_gid = (dr_datarow["licensetype_gid"].ToString()),
                        licensetype_name = (dr_datarow["licensetype_name"].ToString()),
                        license_number = (dr_datarow["license_no"].ToString()),
                        licenseissue_date = (dr_datarow["issue_date"].ToString()),
                        licenseexpiry_date = (dr_datarow["expiry_date"].ToString())
                    });
                }
                values.mstlicense_list = getmstlicense_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionGSTTmpList(string employee_gid, string institution_gid, MdlMstGST values)
        {
            msSQL = "select institution2branch_gid,gst_state,gst_no, gst_registered,headoffice_status from ocs_trn_tcadinstitution2branch " +
                " where institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstgst_list = new List<mstgst_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstgst_list.Add(new mstgst_list
                    {
                        institution2branch_gid = (dr_datarow["institution2branch_gid"].ToString()),
                        gst_state = (dr_datarow["gst_state"].ToString()),
                        gst_no = (dr_datarow["gst_no"].ToString()),
                        gst_registered = (dr_datarow["gst_registered"].ToString()),
                        headoffice_status = (dr_datarow["headoffice_status"].ToString())
                    });
                }
                values.mstgst_list = getmstgst_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionMobileNoTmpList(string employee_gid, string institution_gid, MdlMstMobileNo values)
        {
            msSQL = "select mobile_no,institution2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadinstitution2mobileno where " +
              " institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstmobileno_list = new List<mstmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstmobileno_list.Add(new mstmobileno_list
                    {
                        institution2mobileno_gid = (dr_datarow["institution2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
                values.mstmobileno_list = getmstmobileno_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionEmailAddressTmpList(string employee_gid, string institution_gid, MdlMstEmailAddress values)
        {
            msSQL = "select email_address,institution2email_gid,primary_status from ocs_trn_tcadinstitution2email " +
                " where institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstemailaddress_list = new List<mstemailaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstemailaddress_list.Add(new mstemailaddress_list
                    {
                        institution2email_gid = (dr_datarow["institution2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString())
                    });
                }
                values.mstemailaddress_list = getmstemailaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionAddressTmpList(string employee_gid, string institution_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select institution2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, landmark," +
                    " latitude,longitude,postal_code from ocs_trn_tcadinstitution2address where institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        institution2address_gid = (dr_datarow["institution2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditInstitutionGST(string institution2branch_gid, MdlMstGST values)
        {
            try
            {
                msSQL = "select gst_state, gst_no, institution_gid, institution2branch_gid, gst_registered" +
                    " from ocs_trn_tcadinstitution2branch where institution2branch_gid='" + institution2branch_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.gst_state = objODBCDatareader["gst_state"].ToString();
                    values.gst_no = objODBCDatareader["gst_no"].ToString();
                    values.institution2branch_gid = objODBCDatareader["institution2branch_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.gst_registered = objODBCDatareader["gst_registered"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateInstitutionGST(string employee_gid, MdlMstGST values)
        {
            msSQL = "select gst_state, gst_no, gst_registered, institution_gid, institution2branch_gid" +
                " from ocs_trn_tcadinstitution2branch where institution2branch_gid='" + values.institution2branch_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsgst_state = objODBCDatareader["gst_state"].ToString();
                lsgst_no = objODBCDatareader["gst_no"].ToString();
                lsinstitution2branch_gid = objODBCDatareader["institution2branch_gid"].ToString();
                lsinstitution_gid = objODBCDatareader["institution_gid"].ToString();
                lsgst_registered = objODBCDatareader["gst_registered"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution2branch set " +
                         " gst_state='" + values.gst_state + "'," +
                         " gst_no='" + values.gst_no + "'," +
                         " gst_registered='" + values.gst_registered + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution2branch_gid='" + values.institution2branch_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IGUL");

                    msSQL = "Insert into ocs_trn_tcadinstitution2branchupdatelog(" +
                   " institution2gstupdatelog_gid, " +
                   " institution2branch_gid, " +
                   " institution_gid, " +
                   " gst_state," +
                   " gst_no," +
                   " gst_registered," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.institution2branch_gid + "'," +
                   "'" + values.institution_gid + "'," +
                   "'" + lsgst_state + "'," +
                   "'" + lsgst_no + "'," +
                   "'" + lsgst_registered + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "GST Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating GST Details";
            }
        }

        public bool DaInstitutionEditForm_60DocumentUpload(HttpRequest httpRequest, institutionuploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IntitutionForm_60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        msGetGid = objcmnfunctions.GetMasterGID("IF6D");
                        msSQL = " insert into ocs_trn_tcadinstitution2form60documentupload( " +
                                    " institution2form60documentupload_gid, " +
                                    " institution_gid," +
                                    " form60document_name," +
                                    " form60document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaInstitutionEditForm60TmpList(string institution_gid, string employee_gid, institutionuploaddocument values)
        {
            msSQL = " select institution2form60documentupload_gid,form60document_name,form60document_path from ocs_trn_tcadinstitution2form60documentupload " +
                               " where institution_gid='" + employee_gid + "' or institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        document_name = dt["form60document_name"].ToString(),
                        //document_path = (dt["form60document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["form60document_path"].ToString())),
                        institution2form60documentupload_gid = dt["institution2form60documentupload_gid"].ToString()
                    });
                    values.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionEditForm_60DocumentDelete(string institution2form60documentupload_gid, institutionuploaddocument objfilename, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2form60documentupload where institution2form60documentupload_gid='" + institution2form60documentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                objfilename.message = "Document Deleted Successfully";
                objfilename.status = true;
            }
            else
            {
                objfilename.message = "Error Occured While Deleting Document";
                objfilename.status = false;

            }
        }

        public void DaEditInstitutionMobileNo(string institution2mobileno_gid, MdlMstMobileNo values)
        {
            try
            {
                msSQL = " select mobile_no,institution2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadinstitution2mobileno where " +
                        " institution2mobileno_gid='" + institution2mobileno_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.mobile_no = objODBCDatareader["mobile_no"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.whatsapp_no = objODBCDatareader["whatsapp_no"].ToString();
                    values.institution2mobileno_gid = objODBCDatareader["institution2mobileno_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateInstitutionMobileNo(string employee_gid, MdlMstMobileNo values)
        {
            msSQL = " select mobile_no,institution2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadinstitution2mobileno where " +
                    " institution2mobileno_gid='" + values.institution2mobileno_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsmobile_no = objODBCDatareader["mobile_no"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lswhatsapp_no = objODBCDatareader["whatsapp_no"].ToString();
                lsinstitution2mobileno_gid = objODBCDatareader["institution2mobileno_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution2mobileno set " +
                         " mobile_no='" + values.mobile_no + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " whatsapp_no='" + values.whatsapp_no + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution2mobileno_gid='" + values.institution2mobileno_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IMUL");

                    msSQL = "Insert into ocs_trn_tcadinstitution2mobilenoupdatelog(" +
                   " institution2mobilenoupdatelog_gid, " +
                   " institution2mobileno_gid, " +
                   " institution_gid, " +
                   " mobile_no," +
                   " primary_status," +
                   " whatsapp_no," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.institution2mobileno_gid + "'," +
                   "'" + values.institution_gid + "'," +
                   "'" + lsmobile_no + "'," +
                   "'" + lsprimary_status + "'," +
                   "'" + lswhatsapp_no + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Institution Mobile Number Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Mobile Number";
            }
        }

        public void DaEditInstitutionEmailAddress(string institution2email_gid, MdlMstEmailAddress values)
        {
            try
            {
                msSQL = " select email_address,institution2email_gid,primary_status from ocs_trn_tcadinstitution2email where " +
                        " institution2email_gid='" + institution2email_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.email_address = objODBCDatareader["email_address"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.institution2email_gid = objODBCDatareader["institution2email_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateInstitutionEmailAddress(string employee_gid, MdlMstEmailAddress values)
        {
            msSQL = " select email_address,institution2email_gid,primary_status from ocs_trn_tcadinstitution2email where " +
                        " institution2email_gid='" + values.institution2email_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsemail_address = objODBCDatareader["email_address"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lsinstitution2email_gid = objODBCDatareader["institution2email_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution2email set " +
                         " email_address='" + values.email_address + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution2email_gid='" + values.institution2email_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IEUL");

                    msSQL = "Insert into ocs_trn_tcadinstitution2emailupdatelog(" +
                   " institution2emailaddressupdatelog_gid, " +
                   " institution2email_gid, " +
                   " institution_gid, " +
                   " email_address," +
                   " primary_status," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.institution2email_gid + "'," +
                   "'" + values.institution_gid + "'," +
                   "'" + lsemail_address + "'," +
                   "'" + lsprimary_status + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Email Address Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured Updating Email Address";
            }
        }

        public void DaEditInstitutionAddressDetail(string institution2address_gid, MdlMstAddressDetails values)
        {
            try
            {
                msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, institution_gid, institution2address_gid,latitude,longitude " +
                    " from ocs_trn_tcadinstitution2address where institution2address_gid='" + institution2address_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.address_typegid = objODBCDatareader["addresstype_gid"].ToString();
                    values.address_type = objODBCDatareader["addresstype_name"].ToString();
                    values.addressline1 = objODBCDatareader["addressline1"].ToString();
                    values.addressline2 = objODBCDatareader["addressline2"].ToString();
                    values.landmark = objODBCDatareader["landmark"].ToString();
                    values.taluka = objODBCDatareader["taluka"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.postal_code = objODBCDatareader["postal_code"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.country = objODBCDatareader["country"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.institution2address_gid = objODBCDatareader["institution2address_gid"].ToString();
                    values.latitude = objODBCDatareader["latitude"].ToString();
                    values.longitude = objODBCDatareader["longitude"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateInstitutionAddressDetail(string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, institution_gid, institution2address_gid,latitude,longitude " +
                    " from ocs_trn_tcadinstitution2address where institution2address_gid='" + values.institution2address_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsaddress_typegid = objODBCDatareader["addresstype_gid"].ToString();
                lsaddress_type = objODBCDatareader["addresstype_name"].ToString();
                lsaddressline1 = objODBCDatareader["addressline1"].ToString();
                lsaddressline2 = objODBCDatareader["addressline2"].ToString();
                lslandmark = objODBCDatareader["landmark"].ToString();
                lstaluka = objODBCDatareader["taluka"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lspostal_code = objODBCDatareader["postal_code"].ToString();
                lscity = objODBCDatareader["city"].ToString();
                lsdistrict = objODBCDatareader["district"].ToString();
                lsstate = objODBCDatareader["state"].ToString();
                lscountry = objODBCDatareader["country"].ToString();
                lsinstitution_gid = objODBCDatareader["institution_gid"].ToString();
                lsinstitution2address_gid = objODBCDatareader["institution2address_gid"].ToString();
                lslatitude = objODBCDatareader["latitude"].ToString();
                lslongitude = objODBCDatareader["longitude"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution2address set " +
                         " addresstype_gid='" + values.address_typegid + "'," +
                         " addresstype_name='" + values.address_type + "'," +
                         " addressline1='" + values.addressline1 + "'," +
                         " addressline2='" + values.addressline2 + "'," +
                         " landmark='" + values.landmark + "'," +
                         " taluka='" + values.taluka + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " postal_code='" + values.postal_code + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +
                         " country='" + values.country + "'," +
                         " latitude='" + values.latitude + "'," +
                         " longitude='" + values.longitude + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution2address_gid='" + values.institution2address_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IAUL");

                    msSQL = " insert into ocs_trn_tcadinstitution2addressupdatelog(" +
                  " institution2addressupdatelog_gid," +
                  " institution2address_gid," +
                  " institution_gid," +
                  " addresstype_gid," +
                  " addresstype_name," +
                  " addressline1," +
                  " addressline2," +
                  " primary_status," +
                  " landmark," +
                  " postal_code," +
                  " city," +
                  " taluka," +
                  " district," +
                  " state," +
                  " country," +
                  " statusupdated_by," +
                  " latitude," +
                  " longitude, " +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.institution2address_gid + "'," +
                  "'" + values.institution_gid + "'," +
                  "'" + lsaddress_typegid + "'," +
                  "'" + lsaddress_type + "'," +
                  "'" + lsaddressline1 + "'," +
                  "'" + lsaddressline2 + "'," +
                  "'" + lsprimary_status + "'," +
                  "'" + lslandmark + "'," +
                  "'" + lspostal_code + "'," +
                  "'" + lscity + "'," +
                  "'" + lstaluka + "'," +
                  "'" + lsdistrict + "'," +
                  "'" + lsstate + "'," +
                  "'" + lscountry + "'," +
                  "'" + values.statusupdated_by + "'," +
                  "'" + lslatitude + "'," +
                  "'" + lslongitude + "'," +
                  "'" + employee_gid + "'," +
                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Address Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Address Details";
            }
        }

        public bool DaInstitutionEditDocumentUpload(HttpRequest httpRequest, institutionuploaddocument objfilename, string employee_gid)
        {
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string lscompany_code = string.Empty;
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsdocument_id = httpRequest.Form["document_id"].ToString();
            string lsinstitution_gid = httpRequest.Form["institution_gid"].ToString();
            string lscompanydocument_gid = httpRequest.Form["companydocument_gid"].ToString();
            string lsdocumenttype_gid = httpRequest.Form["documenttype_gid"].ToString();
            string lsdocumenttype_name = httpRequest.Form["documenttype_name"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();

            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/InstitutionDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msSQL = "select covenant_type from ocs_mst_tcompanydocument where companydocument_gid='" + lscompanydocument_gid + "'";
                        string lscovenant_type = objdbconn.GetExecuteScalar(msSQL);

                        msGetGid = objcmnfunctions.GetMasterGID("INDO");
                        msSQL = " insert into ocs_trn_tcadinstitution2documentupload( " +
                                    " institution2documentupload_gid," +
                                    " institution_gid," +
                                    " document_title," +
                                    " document_id," +
                                    " document_name," +
                                    " companydocument_gid, " +
                                    " document_path," +
                                    " covenant_type," +
                                    " documenttype_gid," +
                                    " documenttype_name," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + lsdocument_title.Replace("'", "") + "'," +
                                    "'" + lsdocument_id.Replace("'", "") + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lscompanydocument_gid + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + lscovenant_type + "'," +
                                    "'" + lsdocumenttype_gid + "'," +
                                    "'" + lsdocumenttype_name + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaInstitutionEditDocumentTmpList(string institution_gid, string employee_gid, institutionuploaddocument values)
        {
            msSQL = " select institution2documentupload_gid,institution_gid,document_name,document_path,document_title," +
                    " documenttype_name,document_id, migration_flag " +
                    " from ocs_trn_tcadinstitution2documentupload where institution_gid='" + employee_gid + "'" +
                    " or institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<institutionupload_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new institutionupload_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        institution_gid = dt["institution_gid"].ToString(),
                        institution2documentupload_gid = dt["institution2documentupload_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_id = dt["document_id"].ToString(),
                        documenttype_name = dt["documenttype_name"].ToString()
                    });
                    values.institutionupload_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaInstitutionEditDocumentDelete(string institution2documentupload_gid, institutionuploaddocument objfilename, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2documentupload where institution2documentupload_gid='" + institution2documentupload_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult == 1)
            {
                msSQL = " select groupdocumentchecklist_gid from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                string lsgroupdocumentchecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsgroupdocumentchecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcaddocumentchecktls " +
                            " where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupdocumentchecklist where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = " select groupcovdocumentchecklist_gid from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                string lschecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lschecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcadcovanantdocumentcheckdtls " +
                      " where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupcovenantdocumentchecklist where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = "delete from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "delete from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + institution2documentupload_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }

            if (mnResult != 0)
            {
                objfilename.message = "Document Deleted Successfully";
                objfilename.status = true;
            }
            else
            {
                objfilename.message = "Error Occured While Deleting Document";
                objfilename.status = false;

            }
        }

        public void DaEditInstitutionLicenseDetail(string institution2licensedtl_gid, MdlMstLicenseDetails values)
        {
            try
            {
                msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                   " date_format(expiry_date,'%d-%m-%Y') as expiry_date, date_format(expiry_date,'%Y-%m-%d') as expiry_dateedit,date_format(issue_date,'%Y-%m-%d') as issue_dateedit,institution_gid from ocs_trn_tcadinstitution2licensedtl" +
                   " where institution2licensedtl_gid='" + institution2licensedtl_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.licensetype_gid = objODBCDatareader["licensetype_gid"].ToString();
                    values.licensetype_name = objODBCDatareader["licensetype_name"].ToString();
                    values.license_number = objODBCDatareader["license_no"].ToString();
                    values.licenseissue_date = objODBCDatareader["issue_date"].ToString();
                    values.licenseexpiry_date = objODBCDatareader["expiry_date"].ToString();
                    values.licenseissue_dateedit = objODBCDatareader["issue_dateedit"].ToString();
                    values.licenseexpiry_dateedit = objODBCDatareader["expiry_dateedit"].ToString();
                    values.institution2licensedtl_gid = objODBCDatareader["institution2licensedtl_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateInstitutionLicenseDetail(string employee_gid, MdlMstLicenseDetails values)
        {
            msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                  " date_format(expiry_date,'%d-%m-%Y') as expiry_date, institution_gid from ocs_trn_tcadinstitution2licensedtl" +
                  " where institution2licensedtl_gid='" + values.institution2licensedtl_gid + "'";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lslicensetype_gid = objODBCDatareader["licensetype_gid"].ToString();
                lslicensetype_name = objODBCDatareader["licensetype_name"].ToString();
                lslicense_number = objODBCDatareader["license_no"].ToString();
                lslicenseissue_date = objODBCDatareader["issue_date"].ToString();
                lslicenseexpiry_date = objODBCDatareader["expiry_date"].ToString();
                lsinstitution2licensedtl_gid = objODBCDatareader["institution2licensedtl_gid"].ToString();
                lsinstitution_gid = objODBCDatareader["institution_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution2licensedtl set " +
                         " licensetype_gid='" + values.licensetype_gid + "'," +
                         " licensetype_name='" + values.licensetype_name + "'," +
                         " license_no='" + values.license_number + "',";
                if (Convert.ToDateTime(values.licenseissue_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " issue_date='" + Convert.ToDateTime(values.licenseissue_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.licenseexpiry_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " expiry_date='" + Convert.ToDateTime(values.licenseexpiry_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution2licensedtl_gid='" + values.institution2licensedtl_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("ILUL");

                    msSQL = "Insert into ocs_trn_tcadinstitution2licenseupdatelog(" +
                   " institution2licenseupdatelog_gid, " +
                   " institution2licensedtl_gid, " +
                   " institution_gid, " +
                   " licensetype_gid," +
                   " licensetype_name," +
                   " license_no," +
                   " issue_date," +
                   " expiry_date," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.institution2licensedtl_gid + "'," +
                   "'" + values.institution_gid + "'," +
                   "'" + lslicensetype_gid + "'," +
                   "'" + lslicensetype_name + "'," +
                   "'" + lslicense_number + "'," +
                   "'" + lslicenseissue_date + "'," +
                   "'" + lslicenseexpiry_date + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "License Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating License Details";
            }
        }

        public bool DaUpdateInstitutionDtl(MdlMstInstitutionAdd values, string employee_gid)
        {

            msSQL = " select a.companydocument_gid from ocs_mst_tcompanydocument a " +
                    " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                    " where a.documenttypes_gid = 'DOCT2022010611' and " +
                    " status = 'Y' and b.program_gid ='" + values.program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmasterdocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmasterdocument_list.Add(dr_datarow["companydocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            msSQL = " select distinct(a.companydocument_gid) " +
                    " from ocs_trn_tcadinstitution2documentupload a where a.documenttype_gid = 'DOCT2022010611'  and " +
                    "  (institution_gid='" + values.institution_gid + "' or institution_gid = '" + employee_gid + "')";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gettransactiondocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gettransactiondocument_list.Add(dr_datarow["companydocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            var set1 = new HashSet<string>(getmasterdocument_list);
            var set2 = new HashSet<string>(gettransactiondocument_list);

            if (set1.SetEquals(set2) == false)
            {
                values.status = false;
                values.message = "Upload All KYC Documents";
                return false;
            }

            msSQL = "select institution2mobileno_gid from ocs_trn_tcadinstitution2mobileno where (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "') and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Mobile Number";
                return false;
            }

            msSQL = "select institution2mobileno_gid from ocs_trn_tcadinstitution2mobileno where institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Mobile Number";
                return false;
            }

            msSQL = "select institution2email_gid from ocs_trn_tcadinstitution2email where institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Email Address";
                return false;
            }

            msSQL = "select institution2address_gid from ocs_trn_tcadinstitution2address where institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Atleast One Address Detail";
                return false;
            }
            if (values.Gstflag == "Yes")
            {
                msSQL = "select institution2branch_gid from ocs_trn_tcadinstitution2branch where (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "') and headoffice_status ='Yes'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

                if (objODBCDatareader.HasRows == false)
                {
                    values.status = false;
                    values.message = "Atleast Select One GST Number as Head Office";
                    return false;
                }
            }
            msSQL = " select application_gid, application_no, company_name, date_incorporation, businessstart_date,companypan_no, year_business, month_business, cin_no," +
                     " official_telephoneno, officialemail_address, companytype_gid, companytype_name, stakeholder_type, stakeholdertype_gid, assessmentagency_gid, " +
                     " assessmentagency_name, assessmentagencyrating_gid, assessmentagencyrating_name, ratingas_on, amlcategory_gid, amlcategory_name,businesscategory_gid, " +
                     " businesscategory_name, contactperson_firstname, contactperson_middlename, contactperson_lastname, designation_gid, designation, " +
                     " lastyear_turnover, escrow, start_date, end_date, urn_status, urn, nearsamunnatiabranch_gid,nearsamunnatiabranch_name,udhayam_registration, " +
                     " tan_number,business_description,tanstate_gid,tanstate_name,internalrating_gid,internalrating_name," +
                     " sales, purchase, credit_summation, cheque_bounce, numberof_boardmeetings, farmer_count, crop_cycle,calamities_prone " +
                     " from ocs_trn_tcadinstitution where institution_gid='" + values.institution_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                lsapplication_no = objODBCDatareader["application_no"].ToString();
                lscompany_name = objODBCDatareader["company_name"].ToString();
                if (objODBCDatareader["date_incorporation"].ToString() == "")
                {
                }
                else
                {
                    lsdate_incorporation = Convert.ToDateTime(objODBCDatareader["date_incorporation"]).ToString("dd-MM-yyyy");
                }
                if (objODBCDatareader["businessstart_date"].ToString() == "")
                {
                }
                else
                {
                    lsbusinessstart_date = Convert.ToDateTime(objODBCDatareader["businessstart_date"]).ToString("dd-MM-yyyy");
                }
                lscompanypan_no = objODBCDatareader["companypan_no"].ToString();
                lsyear_business = objODBCDatareader["year_business"].ToString();
                lsmonth_business = objODBCDatareader["month_business"].ToString();
                lscin_no = objODBCDatareader["cin_no"].ToString();
                lsofficial_telephoneno = objODBCDatareader["official_telephoneno"].ToString();
                lsofficialemail_address = objODBCDatareader["officialemail_address"].ToString();
                lscompanytype_gid = objODBCDatareader["companytype_gid"].ToString();
                lscompanytype_name = objODBCDatareader["companytype_name"].ToString();
                lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();
                lsstakeholdertype_gid = objODBCDatareader["stakeholdertype_gid"].ToString();
                lsassessmentagency_gid = objODBCDatareader["assessmentagency_gid"].ToString();
                lsassessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                lsassessmentagencyrating_gid = objODBCDatareader["assessmentagencyrating_gid"].ToString();
                lsassessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                if (objODBCDatareader["ratingas_on"].ToString() == "")
                {
                }
                else
                {
                    lsratingas_on = Convert.ToDateTime(objODBCDatareader["ratingas_on"]).ToString("dd-MM-yyyy");
                }
                lsamlcategory_gid = objODBCDatareader["amlcategory_gid"].ToString();
                lsamlcategory_name = objODBCDatareader["amlcategory_name"].ToString();
                lsbusinesscategory_gid = objODBCDatareader["businesscategory_gid"].ToString();
                lsbusinesscategory_name = objODBCDatareader["businesscategory_name"].ToString();
                lscontactperson_firstname = objODBCDatareader["contactperson_firstname"].ToString();
                lscontactperson_middlename = objODBCDatareader["contactperson_middlename"].ToString();
                lscontactperson_lastname = objODBCDatareader["contactperson_lastname"].ToString();
                lsdesignation_gid = objODBCDatareader["designation_gid"].ToString();
                lsdesignation = objODBCDatareader["designation"].ToString();
                lslastyear_turnover = objODBCDatareader["lastyear_turnover"].ToString();
                lsescrow = objODBCDatareader["escrow"].ToString();
                if (objODBCDatareader["start_date"].ToString() == "")
                {
                }
                else
                {
                    lsstart_date = Convert.ToDateTime(objODBCDatareader["start_date"]).ToString("dd-MM-yyyy");
                }
                if (objODBCDatareader["end_date"].ToString() == "")
                {
                }
                else
                {
                    lsend_date = Convert.ToDateTime(objODBCDatareader["end_date"]).ToString("dd-MM-yyyy");
                }
                lsurn_status = objODBCDatareader["urn_status"].ToString();
                lsurn = objODBCDatareader["urn"].ToString();
                lsnearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                lsnearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                lsudhayam_registration = objODBCDatareader["udhayam_registration"].ToString();
                lstan_number = objODBCDatareader["tan_number"].ToString();
                lsbusiness_description = objODBCDatareader["business_description"].ToString();
                lstanstate_gid = objODBCDatareader["tanstate_gid"].ToString();
                lstanstate_name = objODBCDatareader["tanstate_name"].ToString();
                lsinternalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                lsinternalrating_name = objODBCDatareader["internalrating_name"].ToString();
                lssales = objODBCDatareader["sales"].ToString();
                lspurchase = objODBCDatareader["purchase"].ToString();
                lscredit_summation = objODBCDatareader["credit_summation"].ToString();
                lscheque_bounce = objODBCDatareader["cheque_bounce"].ToString();
                lsnumberof_boardmeetings = objODBCDatareader["numberof_boardmeetings"].ToString();
                lsfarmer_count = objODBCDatareader["farmer_count"].ToString();
                lscrop_cycle = objODBCDatareader["crop_cycle"].ToString();
                lscalamities_prone = objODBCDatareader["calamities_prone"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadinstitution set " +
                        " company_name='" + values.company_name.Replace("'", "\\'") + "',";
                if (Convert.ToDateTime(values.dateincorporation).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " date_incorporation='" + Convert.ToDateTime(values.dateincorporation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.businessstart_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " businessstart_date='" + Convert.ToDateTime(values.businessstart_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " year_business='" + values.year_business + "'," +
                         " month_business='" + values.month_business + "'," +
                         " companypan_no='" + values.companypan_no + "'," +
                         " cin_no='" + values.cin_no + "'," +
                         " official_telephoneno='" + values.official_telephoneno + "'," +
                         " officialemail_address='" + values.official_mailid + "'," +
                         " companytype_gid='" + values.companytype_gid + "'," +
                         " companytype_name='" + values.companytype_name + "'," +
                         " stakeholdertype_gid='" + values.stakeholdertype_gid + "'," +
                         " stakeholder_type='" + values.stakeholder_type + "'," +
                         " assessmentagency_gid='" + values.assessmentagency_gid + "'," +
                         " assessmentagency_name='" + values.assessmentagency_name + "'," +
                         " assessmentagencyrating_gid='" + values.assessmentagencyrating_gid + "'," +
                         " assessmentagencyrating_name='" + values.assessmentagencyrating_name + "',";
                if (Convert.ToDateTime(values.ratingason).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " ratingas_on='" + Convert.ToDateTime(values.ratingason).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " amlcategory_gid='" + values.amlcategory_gid + "'," +
                         " amlcategory_name='" + values.amlcategory_name + "'," +
                         " businesscategory_gid='" + values.businesscategory_gid + "'," +
                         " businesscategory_name='" + values.businesscategory_name + "'," +
                         " contactperson_firstname='" + values.contactperson_firstname + "'," +
                         " contactperson_middlename='" + values.contactperson_middlename + "'," +
                         " contactperson_lastname='" + values.contactperson_lastname + "'," +
                         " designation_gid='" + values.designation_gid + "'," +
                         " designation='" + values.designation + "',";
                if (Convert.ToDateTime(values.startdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " start_date='" + Convert.ToDateTime(values.startdate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.enddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " end_date='" + Convert.ToDateTime(values.enddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (Convert.ToDateTime(values.Renewaldue_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " renewaldue_date='" + Convert.ToDateTime(values.Renewaldue_date).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " lastyear_turnover='" + values.lastyear_turnover + "'," +
                         " escrow='" + values.escrow + "'," +
                         " urn_status='" + values.urn_status + "'," +
                         " urn='" + values.urn + "'," +
                         " nearsamunnatiabranch_gid ='" + values.nearsamunnatiabranch_gid + "'," +
                         " nearsamunnatiabranch_name ='" + values.nearsamunnatiabranch_name + "'," +
                         " udhayam_registration ='" + values.udhayam_registration + "'," +
                         " tan_number ='" + values.tan_number + "'," +
                         " business_description ='" + values.business_description.Replace("'", "") + "'," +
                         " tanstate_gid ='" + values.tanstate_gid + "'," +
                         " tanstate_name ='" + values.tanstate_name + "'," +
                         " internalrating_gid ='" + values.internalrating_gid + "'," +
                         " internalrating_name ='" + values.internalrating_name + "'," +
                         " sales ='" + values.sales + "'," +
                         " purchase ='" + values.purchase + "'," +
                         " credit_summation ='" + values.credit_summation + "'," +
                         " cheque_bounce ='" + values.cheque_bounce + "'," +
                         " numberof_boardmeetings ='" + values.numberof_boardmeetings + "'," +
                         " farmer_count ='" + values.farmer_count + "'," +
                         " crop_cycle ='" + values.crop_cycle + "'," +
                         " calamities_prone ='" + values.calamities_prone + "'," +
                          " msme_regi_no ='" + values.msme_regi_no + "'," +
                         " lei_no ='" + values.lei_no + "'," +
                         " kin_no ='" + values.kin_no + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where institution_gid='" + values.institution_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {

                    msSQL = " delete from ocs_mst_tinstitution2fpocacity where institution_gid = '" + values.institution_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    if (mnResult != 0)
                    {
                        for (var i = 0; i < values.fpocity_list.Count; i++)
                        {
                            msinstitution2fpocacity_gid = objcmnfunctions.GetMasterGID("I2FC");
                            msSQL = " Insert into ocs_trn_tcadinstitution2fpocacity( " +
                               " institution2fpocacity_gid, " +
                               " institution_gid, " +
                               " city_gid," +
                               " city_name," +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msinstitution2fpocacity_gid + "'," +
                               "'" + values.institution_gid + "'," +
                               "'" + values.fpocity_list[i].city_gid + "'," +
                               "'" + values.fpocity_list[i].city_name + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }

                    msGetGid = objcmnfunctions.GetMasterGID("IULG");

                    msSQL = " insert into ocs_trn_tcadinstitutionupdateLOG(" +
                            " institution_gidupdateLOG_GID," +
                            " institution_gid," +
                            " application_gid," +
                            " application_no," +
                            " company_name," +
                            " date_incorporation," +
                            " businessstart_date," +
                            " year_business," +
                            " month_business," +
                            " companypan_no," +
                            " cin_no," +
                            " official_telephoneno," +
                            " officialemail_address," +
                            " companytype_gid," +
                            " companytype_name," +
                            " stakeholdertype_gid," +
                            " stakeholder_type," +
                            " assessmentagency_gid," +
                            " assessmentagency_name," +
                            " assessmentagencyrating_gid," +
                            " assessmentagencyrating_name," +
                            " ratingas_on," +
                            " amlcategory_gid," +
                            " amlcategory_name," +
                            " businesscategory_gid," +
                            " businesscategory_name," +
                            " contactperson_firstname," +
                            " contactperson_middlename," +
                            " contactperson_lastname," +
                            " designation_gid," +
                            " designation," +
                            " start_date," +
                            " end_date," +
                            " lastyear_turnover," +
                            " escrow," +
                            " urn_status," +
                            " urn," +
                            " statusupdated_by," +
                            " nearsamunnatiabranch_gid," +
                            " nearsamunnatiabranch_name," +
                            " udhayam_registration," +
                            " tan_number," +
                            " business_description," +
                            " tanstate_gid," +
                            " tanstate_name," +
                            " internalrating_gid," +
                            " internalrating_name," +
                            " sales," +
                            " purchase," +
                            " credit_summation," +
                            " cheque_bounce," +
                            " numberof_boardmeetings," +
                            " farmer_count," +
                            " crop_cycle," +
                            " calamities_prone, " +
                            " created_by," +
                            " created_date) values(" +
                          "'" + msGetGid + "'," +
                          "'" + values.institution_gid + "'," +
                          "'" + lsapplication_gid + "'," +
                          "'" + lsapplication_no + "'," +
                          "'" + lscompany_name.Replace("'", "\\'") + "'," +
                            "'" + lsdate_incorporation + "'," +
                            "'" + lsbusinessstart_date + "'," +
                            "'" + lsyear_business + "'," +
                               "'" + lsmonth_business + "'," +
                               "'" + lscompanypan_no + "'," +
                               "'" + lscin_no + "'," +
                               "'" + lsofficial_telephoneno + "'," +
                               "'" + lsofficialemail_address + "'," +
                               "'" + lscompanytype_gid + "'," +
                               "'" + lscompanytype_name + "'," +
                               "'" + lsstakeholdertype_gid + "'," +
                               "'" + lsstakeholder_type + "'," +
                               "'" + lsassessmentagency_gid + "'," +
                               "'" + lsassessmentagency_name + "'," +
                               "'" + lsassessmentagencyrating_gid + "'," +
                               "'" + lsassessmentagencyrating_name + "'," +
                               "'" + lsratingas_on + "'," +
                               "'" + lsamlcategory_gid + "'," +
                               "'" + lsamlcategory_name + "'," +
                               "'" + lsbusinesscategory_gid + "'," +
                               "'" + lsbusinesscategory_name + "'," +
                               "'" + lscontactperson_firstname + "'," +
                               "'" + lscontactperson_middlename + "'," +
                               "'" + lscontactperson_lastname + "'," +
                               "'" + lsdesignation_gid + "'," +
                               "'" + lsdesignation + "'," +
                               "'" + lsstart_date + "'," +
                               "'" + lsend_date + "'," +
                               "'" + lslastyear_turnover + "'," +
                               "'" + lsescrow + "'," +
                               "'" + lsurn_status + "'," +
                               "'" + lsurn + "'," +
                               "'" + lsstatusupdated_by + "'," +
                               "'" + lsnearsamunnatiabranch_gid + "'," +
                               "'" + lsnearsamunnatiabranch_name + "'," +
                               "'" + lsudhayam_registration + "'," +
                               "'" + lstan_number + "'," +
                               "'" + lsbusiness_description.Replace("'", "") + "'," +
                               "'" + lstanstate_gid + "'," +
                               "'" + lstanstate_name + "'," +
                               "'" + lsinternalrating_gid + "'," +
                               "'" + lsinternalrating_name + "'," +
                               "'" + lssales + "'," +
                               "'" + lspurchase + "'," +
                               "'" + lscredit_summation + "'," +
                               "'" + lscheque_bounce + "'," +
                               "'" + lsnumberof_boardmeetings + "'," +
                               "'" + lsfarmer_count + "'," +
                               "'" + lscrop_cycle + "'," +
                               "'" + lscalamities_prone + "'," +
                               "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    // Updates for Multiple Add
                    msSQL = "update ocs_trn_tcadinstitution2branch set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2mobileno set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2email set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2address set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2licensedtl set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2equipment set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2livestock set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2receivable set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "select companydocument_gid,institution2documentupload_gid from ocs_trn_tcadinstitution2documentupload where institution_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                        string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                        msSQL = " select companydocument_gid,documenttypes_gid,documenttype_name,companydocument_name,covenant_type " +
                                    " from ocs_mst_tcompanydocument where companydocument_gid='" + dt["companydocument_gid"].ToString() + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                            lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                            lscompanydocument_name = objODBCDatareader["companydocument_name"].ToString();
                            lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                        }
                        objODBCDatareader.Close();

                        msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                                " documentcheckdtl_gid," +
                                " application_gid," +
                                " credit_gid, " +
                                " companydocument_gid, " +
                                " documentuploaded_gid, " +
                                " documenttype_gid," +
                                " documenttype_code," +
                                " documenttype_name," +
                                " covenant_type, " +
                                " tagged_by, " +
                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetdefDocchecklistGID + "'," +
                                "'" + lsapplication_gid + "'," +
                                "'" + values.institution_gid + "'," +
                                "'" + dt["companydocument_gid"].ToString() + "'," +
                                "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                                "'" + lsdocumenttype_gid + "'," +
                                "'" + lsdocumenttype_name + "'," +
                                "'" + lscompanydocument_name.Replace("'", "") + "'," +
                                "'" + lscovenant_type + "'," +
                                "'N'," +
                                "current_timestamp," +
                                "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (lscovenant_type == "Y")
                        {
                            string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                            msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                                   " covenantdocumentcheckdtl_gid," +
                                   " application_gid," +
                                   " credit_gid," +
                                   " companydocument_gid," +
                                   " documentuploaded_gid, " +
                                   " documenttype_gid," +
                                   " documenttype_code," +
                                   " documenttype_name," +
                                   " covenant_type, " +
                                   " tagged_by, " +
                                   " created_date," +
                                   " created_by)" +
                                   " VALUES(" +
                                   "'" + msGetDocchecklistGID + "'," +
                                   "'" + lsapplication_gid + "'," +
                                   "'" + values.institution_gid + "'," +
                                   "'" + dt["companydocument_gid"].ToString() + "'," +
                                   "'" + dt["institution2documentupload_gid"].ToString() + "'," +
                                   "'" + lsdocumenttype_gid + "'," +
                                   "'" + lsdocumenttype_name + "'," +
                                   "'" + lscompanydocument_name.Replace("'", "") + "'," +
                                   "'" + lscovenant_type + "'," +
                                   "'N'," +
                                   "current_timestamp," +
                                   "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    dt_datatable.Dispose();
                    DaMstScannedDocument objvalues = new DaMstScannedDocument();
                    objvalues.DaGroupDocChecklistinfo(lsapplication_gid, values.institution_gid, employee_gid);

                    msSQL = "update ocs_trn_tcadinstitution2documentupload set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadinstitution2form60documentupload set institution_gid='" + values.institution_gid + "' where institution_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        msSQL = "select stakeholder_type from ocs_trn_tcadinstitution where institution_gid='" + values.institution_gid + "' ";
                        string lsstakeholders_type = objdbconn.GetExecuteScalar(msSQL);

                        if (lsstakeholders_type == "Applicant" || lsstakeholders_type == "Borrower")
                        {
                            msSQL = "select mobile_no from ocs_trn_tcadinstitution2mobileno where institution_gid='" + values.institution_gid + "' and primary_status='yes'";
                            string lsmobileno = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = "select email_address from ocs_trn_tcadinstitution2email where institution_gid='" + values.institution_gid + "' and primary_status='yes'";
                            lsemail_address = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = " select company_name,institution_gid,urn,stakeholder_type from ocs_trn_tcadinstitution where " +
                                    " application_gid='" + lsapplication_gid + "' and stakeholder_type in ('Applicant','Borrower')";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                lscustomer_name = objODBCDatareader["company_name"].ToString();
                                lsurn = objODBCDatareader["urn"].ToString();
                                lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();

                                //Region
                                msSQL = "select state from ocs_trn_tcadinstitution2address where primary_status='Yes' and institution_gid='" + objODBCDatareader["institution_gid"].ToString() + "'";
                                lsregion = objdbconn.GetExecuteScalar(msSQL);

                                //Main Table 
                                msSQL = " update ocs_trn_tcadapplication set customer_name='" + lscustomer_name.Replace("'", "\\'") + "'," +
                                        " mobile_no='" + lsmobile_no + "'," +
                                        " email_address='" + lsemail_address + "'," +
                                        " region='" + lsregion + "'," +
                                        " customer_urn='" + lsurn + "'," +
                                        " applicant_type='Institution'," +
                                        " updated_by='" + employee_gid + "'," +
                                        " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                                        " where application_gid='" + lsapplication_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            objODBCDatareader.Close();


                            //CadApplication table update and bank alert urn mismatch scenario start

                            string lsdepartmentgid = objdbconn.GetExecuteScalar("select businessunit_gid from osd_mst_tbusinessunit where businessunit_name='Business Process'");

                            msSQL = "select a.* from ocs_trn_tcadapplication a " +
                                    "where a.customer_urn = '" + lsurn + "' order by a.created_date desc limit 1";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {

                                msSQL = " select bankalert2notallocated_gid,ecollectionresponsefromsambtrn_gid,ecollectionresponsefromsambtrndtls_gid,kotakAPI_flag,ticketref_no,email_to,email_from," +
                                    " from_mailaddress,date_format(email_date,'%Y-%m-%d %h:%i:%s') as email_date,cc,bcc," +
                                    " email_subject,email_content,mailheader,document_name,document_path " +
                                    " from osd_trn_tbankalert2notallocated where " +
                                    " customer_urn='" + lsurn + "' and reason='URN Mismatch' and kotakAPI_flag='Y'";

                                dt_datatable = objdbconn.GetDataTable(msSQL);
                                if (dt_datatable.Rows.Count != 0)
                                {
                                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                                    {

                                        string MSGETGID = objcmnfunctions.GetMasterGID("ALDB");
                                        msSQL = "insert into osd_trn_tbankalert2allocated (" +
                                                   " bankalert2allocated_gid," +
                                                   " ecollectionresponsefromsambtrn_gid," +
                                                   " ecollectionresponsefromsambtrndtls_gid," +
                                                   " customer_name," +
                                                   " customer_urn," +
                                                   " kotakAPI_flag," +
                                                   " customer_gid," +
                                                   " relationshipmanager_name," +
                                                   " relationshipmanager_gid," +
                                                   " ticketref_no," +
                                                   " email_date," +
                                                   " created_by," +
                                                   " created_date," +
                                                 " relationshipmanagerlevel_name, relationshipmanagerlevel_gid," +
                                                 " drmlevel_gid, drmlevel_name, " +
                                                 " clustermanagerlevel_gid, clustermanagerlevel_name, " +
                                                 " zonalheadlevel_name, zonalheadlevel_gid," +
                                                 " regionalheadlevel_name, regionalheadlevel_gid," +
                                                 " businessheadlevel_name, businessheadlevel_gid," +
                                                   " mapping_to,department_gid,department_name) values(" +
                                                   " '" + MSGETGID + "'," +
                                                   " '" + dr_datarow["ecollectionresponsefromsambtrn_gid"].ToString() + "'," +
                                                   " '" + dr_datarow["ecollectionresponsefromsambtrndtls_gid"].ToString() + "'," +
                                                   " '" + lscustomer_name + "'," +
                                                   " '" + values.urn + "'," +
                                                   " '" + dr_datarow["kotakAPI_flag"].ToString() + "'," +
                                                   " '" + lscustomer_name + "'," +
                                                   " '" + objODBCDatareader["relationshipmanager_name"].ToString() + "'," +
                                                   " '" + objODBCDatareader["relationshipmanager_gid"].ToString() + "'," +
                                                   " '" + dr_datarow["ticketref_no"].ToString() + "'," +
                                                   " '" + dr_datarow["email_date"].ToString() + "'," +
                                                   " 'Re-Allocated from URN Mismatch'," +
                                                   " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                                     "'" + objODBCDatareader["relationshipmanager_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["relationshipmanager_gid"].ToString() + "'," +
                                                     "'" + objODBCDatareader["drm_gid"].ToString() + "'," +
                                                     "'" + objODBCDatareader["drm_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["clustermanager_gid"].ToString() + "'," +
                                                     "'" + objODBCDatareader["clustermanager_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["zonalhead_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["zonalhead_gid"].ToString() + "'," +
                                                     "'" + objODBCDatareader["regionalhead_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["regionalhead_gid"].ToString() + "'," +
                                                     "'" + objODBCDatareader["businesshead_name"].ToString() + "'," +
                                                     "'" + objODBCDatareader["businesshead_gid"].ToString() + "'," +
                                                     "'RM Enabled','" + lsdepartmentgid + "','Business Process')";
                                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                        if (mnResult == 1)
                                        {
                                            msSQL = "delete from osd_trn_tbankalert2notallocated where bankalert2notallocated_gid = '" + dr_datarow["bankalert2notallocated_gid"].ToString() + "'";
                                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                        }
                                    }
                                }
                                dt_datatable.Dispose();
                            }
                            objODBCDatareader.Close();
                            //CadApplication table update and bank alert urn mismatch scenario end

                            values.status = true;
                            values.message = "Institution Details Updated Successfully";
                            return true;
                        }
                        else
                        {

                        }
                    }
                    values.status = true;
                    values.message = "Institution Details Updated Successfully";
                    return true;
                }
                return true;
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Institution";
                return false;
            }
        }

        public void DaGetGroupList(string application_gid, MdlDropDown values)
        {
            msSQL = " SELECT group_name, group_gid from ocs_trn_tcadgroup where application_gid='" + application_gid + "' order by group_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroup = new List<grouplist>();
            if (dt_datatable.Rows.Count != 0)
            {
                getgroup.Add(new grouplist
                {
                    group_name = "NA",
                    group_gid = "NA",
                });
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroup.Add(new grouplist
                    {
                        group_name = (dr_datarow["group_name"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                    });
                }
                values.grouplist = getgroup;
            }
            dt_datatable.Dispose();
            if (dt_datatable.Rows.Count == 0)
            {
                getgroup.Add(new grouplist
                {
                    group_name = "NA",
                    group_gid = "NA",
                });
                values.grouplist = getgroup;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaGetCompanyList(string application_gid, MdlDropDown values)
        {
            msSQL = " SELECT company_name, institution_gid from ocs_trn_tcadinstitution where application_gid='" + application_gid + "' order by institution_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitution = new List<institutionlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                getinstitution.Add(new institutionlist
                {
                    institution_name = "NA",
                    institution_gid = "NA",
                });
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinstitution.Add(new institutionlist
                    {
                        institution_name = (dr_datarow["company_name"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                    });
                }
                values.institutionlist = getinstitution;
            }
            dt_datatable.Dispose();
            if (dt_datatable.Rows.Count == 0)
            {
                getinstitution.Add(new institutionlist
                {
                    institution_name = "NA",
                    institution_gid = "NA",
                });
                values.institutionlist = getinstitution;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaPANAbsenceReasonList(MdlPANAbsenceReason objMdlPANAbsenceReason)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tpanabsencereason";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getpanabsencereason_list = new List<panabsencereason_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    objMdlPANAbsenceReason.panabsencereason_list = dt_datatable.AsEnumerable().Select(row =>
                      new panabsencereason_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();
                objMdlPANAbsenceReason.status = true;
            }
            catch (Exception ex)
            {
                objMdlPANAbsenceReason.status = false;
            }

        }

        public bool DaMobileNumberAdd(string employee_gid, MdlContactMobileNo values)
        {
            msSQL = "select primary_status from ocs_trn_tcadcontact2mobileno where primary_status='Yes' and contact_gid='" + employee_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Mobile Number Added";
                objdbconn.CloseConn();
                return false;
            }

            msSQL = "select mobile_no from ocs_trn_tcadcontact2mobileno where mobile_no='" + values.mobile_no + "' and contact_gid='" + employee_gid + "'";
            string lsmobile_no = objdbconn.GetExecuteScalar(msSQL);
            if (lsmobile_no == (values.mobile_no))
            {

                values.status = false;
                values.message = "Already This Mobile Number Added";
                objdbconn.CloseConn();
                return false;
            }

            msGetGid = objcmnfunctions.GetMasterGID("C2MN");

            msSQL = " insert into ocs_trn_tcadcontact2mobileno(" +
                    " contact2mobileno_gid," +
                    " contact_gid," +
                    " mobile_no," +
                    " primary_status," +
                    " whatsapp_no," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.mobile_no + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.whatsapp_no + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            objdbconn.CloseConn();

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Mobile Number Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaGetMobileNoList(string employee_gid, MdlContactMobileNo values)
        {
            msSQL = "select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
              " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<contactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new contactmobileno_list
                    {
                        contact2mobileno_gid = (dr_datarow["contact2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
            }
            values.contactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }

        public void DaMobileNoDelete(string contact2mobileno_gid, MdlContactMobileNo values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2mobileno where contact2mobileno_gid='" + contact2mobileno_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Mobile Number Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaEmailAddressAdd(string employee_gid, MdlContactEmail values)
        {
            msSQL = "select primary_status from ocs_trn_tcadcontact2email where primary_status='Yes' and contact_gid='" + employee_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Email Address Added";
                objdbconn.CloseConn();
                return false;
            }

            msSQL = "select email_address from ocs_trn_tcadcontact2email where email_address='" + values.email_address + "' and contact_gid='" + employee_gid + "'";
            string lsemail_address = objdbconn.GetExecuteScalar(msSQL);
            if (lsemail_address == (values.email_address))
            {
                values.status = false;
                values.message = "Already This Email Address Added";
                objdbconn.CloseConn();
                return false;
            }

            msGetGid = objcmnfunctions.GetMasterGID("C2EA");
            msSQL = " insert into ocs_trn_tcadcontact2email(" +
                    " contact2email_gid," +
                    " contact_gid," +
                    " email_address," +
                    " primary_status," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.email_address + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            objdbconn.CloseConn();
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Email Address Added Sucessfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaGetEmailList(string employee_gid, MdlContactEmail values)
        {
            msSQL = "select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
              " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactemail_list = new List<contactemail_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactemail_list.Add(new contactemail_list
                    {
                        contact2email_gid = (dr_datarow["contact2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                    });
                }
            }
            values.contactemail_list = getcontactemail_list;
            dt_datatable.Dispose();
        }

        public void DaEmailAddressDelete(string contact2email_gid, MdlContactEmail values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2email where contact2email_gid='" + contact2email_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Email Address Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaIndividualProofDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsidproof_type = httpRequest.Form["idproof_type"].ToString();
            string lsidproof_no = httpRequest.Form["idproof_no"].ToString();
            string lsidproof_dob = httpRequest.Form["idproof_dob"].ToString();
            string lsfile_no = httpRequest.Form["file_no"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();

            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualProofDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        msGetGid = objcmnfunctions.GetMasterGID("C2IP");
                        msSQL = " insert into ocs_trn_tcadcontact2idproof(" +
                                " contact2idproof_gid," +
                                " contact_gid," +
                                " idproof_name," +
                                " idproof_no," +
                                " idproof_dob," +
                                " file_no," +
                                " document_name," +
                                " document_path," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                "'" + lsidproof_type + "'," +
                                "'" + lsidproof_no + "'," +
                                "'" + lsidproof_dob + "'," +
                                "'" + lsfile_no + "'," +
                                "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetIndividualProofList(string employee_gid, MdlContactIdProof values)
        {
            msSQL = "select contact2idproof_gid,idproof_name,idproof_no,idproof_dob,file_no,document_name, document_path from ocs_trn_tcadcontact2idproof where " +
              " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactidproof_list = new List<contactidproof_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactidproof_list.Add(new contactidproof_list
                    {
                        contact2idproof_gid = (dr_datarow["contact2idproof_gid"].ToString()),
                        idproof_name = (dr_datarow["idproof_name"].ToString()),
                        idproof_no = (dr_datarow["idproof_no"].ToString()),
                        idproof_dob = (dr_datarow["idproof_dob"].ToString()),
                        file_no = (dr_datarow["file_no"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        //document_path = (HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString())),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                    });

                    values.contactidproof_list = getcontactidproof_list;
                }
                dt_datatable.Dispose();
            }

        }

        public void DaIndividualProofDelete(string contact2idproof_gid, MdlContactIdProof values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2idproof where contact2idproof_gid='" + contact2idproof_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "ID Proof Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaGetAddressList(string employee_gid, MdlContactAddress values)
        {
            msSQL = " select contact2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude," +
                    " postal_code from ocs_trn_tcadcontact2address where contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactaddress_list = new List<contactaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactaddress_list.Add(new contactaddress_list
                    {
                        contact2address_gid = (dr_datarow["contact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString())
                    });
                }
                values.contactaddress_list = getcontactaddress_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaAddressAdd(string employee_gid, MdlContactAddress values)
        {
            msSQL = "select primary_status from ocs_trn_tcadcontact2address where primary_status='Yes' and contact_gid='" + employee_gid + "'";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Address Added";
                return false;
            }

            msSQL = "select contact2address_gid from ocs_trn_tcadcontact2address where addresstype_name='" + values.addresstype_name + "' and " +
                " contact_gid='" + employee_gid + "' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Address Type Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("C2AD");
            msSQL = " insert into ocs_trn_tcadcontact2address(" +
                    " contact2address_gid," +
                    " contact_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " primary_status," +
                    " addressline1," +
                    " addressline2," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.addresstype_gid + "'," +
                    "'" + values.addresstype_name + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.landmark + "'," +
                    "'" + values.postal_code + "'," +
                    "'" + values.city + "'," +
                    "'" + values.taluka + "'," +
                    "'" + values.district + "'," +
                    "'" + values.state + "'," +
                    "'" + values.country + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Address Details Added Sucessfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }

        }

        public void DaAddressDelete(string contact2address_gid, MdlContactAddress values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2address where contact2address_gid='" + contact2address_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Address Detail Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaIndividualDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            String path = lspath;
            string lsindividualdocument_gid = httpRequest.Form["individualdocument_gid"].ToString();
            string project_flag = httpRequest.Form["project_flag"].ToString();
            string lsdocumenttype_gid = httpRequest.Form["documenttype_gid"].ToString();
            string lsdocumenttype_name = httpRequest.Form["documenttype_name"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                        //ms.WriteTo(file);
                        //file.Close();
                        //ms.Close();
                        //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/IndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";


                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/IndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/IndividualDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msSQL = "select covenant_type from ocs_mst_tindividualdocument where individualdocument_gid='" + lsindividualdocument_gid + "'";
                        string lscovenant_type = objdbconn.GetExecuteScalar(msSQL);

                        msGetGid = objcmnfunctions.GetMasterGID("C2DO");
                        msGetDocumentGid = objcmnfunctions.GetMasterGID("BSDA");

                        msSQL = " insert into ocs_trn_tcadcontact2document( " +
                                    " contact2document_gid ," +
                                    " contact_gid ," +
                                    " document_gid ," +
                                    " document_title ," +
                                    " document_name ," +
                                    " document_path," +
                                    " individualdocument_gid, " +
                                    " covenant_type," +
                                    " documenttype_gid," +
                                    " documenttype_name," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + msGetDocumentGid + "'," +
                                    "'" + lsdocument_title.Replace("'", "") + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + lsindividualdocument_gid + "'," +
                                    "'" + lscovenant_type + "'," +
                                    "'" + lsdocumenttype_gid + "'," +
                                    "'" + lsdocumenttype_name + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetIndividualDocList(string employee_gid, MdlContactDocument values, string contact_gid)
        {
            msSQL = " select contact2document_gid,document_name,document_path,document_title,migration_flag, " +
                    " documenttype_name from ocs_trn_tcadcontact2document " +
                    " where contact_gid='" + employee_gid + "' or contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<uploadindividualdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new uploadindividualdoc_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        contact2document_gid = dt["contact2document_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        documenttype_name = dt["document_title"].ToString()
                    });
                    values.uploadindividualdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaIndividualDocDelete(string contact2document_gid, MdlContactDocument values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2document where contact2document_gid='" + contact2document_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult == 1)
            {
                msSQL = " select groupdocumentchecklist_gid from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + contact2document_gid + "'";
                string lsgroupdocumentchecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsgroupdocumentchecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcaddocumentchecktls " +
                            " where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupdocumentchecklist where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = " select groupcovdocumentchecklist_gid from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + contact2document_gid + "'";
                string lschecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lschecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcadcovanantdocumentcheckdtls " +
                      " where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupcovenantdocumentchecklist where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = "delete from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + contact2document_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "delete from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + contact2document_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            if (mnResult != 0)
            {

                values.message = "Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaSaveIndividualDtlAdd(string employee_gid, MdlMstContact values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("CTCT");

            msSQL = "select stakeholder_type from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            string lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholdertype_name)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholdertype_name)
            {

                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return;
            }
            msSQL = " insert into ocs_trn_tcadcontact(" +
                   " contact_gid," +
                   " application_gid," +
                   " application_no," +
                   " pan_status," +
                   " pan_no," +
                   " aadhar_no," +
                   " first_name," +
                   " middle_name," +
                   " last_name," +
                   " individual_dob," +
                   " age," +
                   " gender_gid," +
                   " gender_name," +
                   " designation_gid," +
                   " designation_name," +
                   " educationalqualification_gid," +
                   " educationalqualification_name," +
                   " main_occupation," +
                   " annual_income," +
                   " monthly_income," +
                   " pep_status," +
                   " pepverified_date," +
                   " stakeholdertype_gid," +
                   " stakeholder_type," +
                   " maritalstatus_gid," +
                   " maritalstatus_name," +
                   " father_firstname," +
                   " father_middlename," +
                   " father_lastname," +
                   " father_dob," +
                   " father_age," +
                   " mother_firstname," +
                   " mother_middlename," +
                   " mother_lastname," +
                   " mother_dob," +
                   " mother_age," +
                   " spouse_firstname," +
                   " spouse_middlename," +
                   " spouse_lastname," +
                   " spouse_dob," +
                   " spouse_age," +
                   " ownershiptype_gid," +
                   " ownershiptype_name," +
                   " propertyholder_gid," +
                   " propertyholder_name," +
                   " residencetype_gid," +
                   " residencetype_name," +
                   " incometype_gid," +
                   " incometype_name," +
                   " currentresidence_years," +
                   " branch_distance," +
                   " group_gid," +
                   " group_name," +
                   " profile," +
                   " urn_status," +
                   " urn," +
                   " fathernominee_status," +
                   " mothernominee_status," +
                   " spousenominee_status," +
                   " othernominee_status," +
                   " relationshiptype," +
                   " nomineefirst_name," +
                   " nominee_middlename," +
                   " nominee_lastname," +
                   " nominee_dob," +
                   " nominee_age," +
                   " totallandinacres," +
                   " cultivatedland," +
                   " previouscrop," +
                   " prposedcrop," +
                   " institution_gid," +
                   " institution_name," +
                   " contact_status," +
                   " nearsamunnatiabranch_gid," +
                   " nearsamunnatiabranch_name," +
                   " physicalstatus_gid," +
                   " physicalstatus_name," +
                   " internalrating_gid," +
                   " internalrating_name," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.application_gid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.pan_status + "'," +
                   "'" + values.pan_no + "'," +
                   "'" + values.aadhar_no + "',";
            if (values.first_name == "" || values.first_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.first_name.Replace("'", "") + "',";
            }
            if (values.middle_name == "" || values.middle_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.middle_name.Replace("'", "") + "',";
            }
            if (values.last_name == "" || values.last_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.last_name.Replace("'", "") + "',";
            }
            msSQL += "'" + values.individual_dob + "'," +
                     "'" + values.age + "'," +
                     "'" + values.gender_gid + "'," +
                     "'" + values.gender_name + "'," +
                     "'" + values.designation_gid + "'," +
                     "'" + values.designation_name + "'," +
                     "'" + values.educationalqualification_gid + "'," +
                     "'" + values.educationalqualification_name + "'," +
                     "'" + values.main_occupation + "'," +
                     "'" + values.annual_income + "'," +
                     "'" + values.monthly_income + "'," +
                     "'" + values.pep_status + "',";

            if ((values.pepverified_date == null) || (values.pepverified_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.pepverified_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }



            msSQL += "'" + values.stakeholdertype_gid + "'," +
                     "'" + values.stakeholdertype_name + "'," +
                     "'" + values.maritalstatus_gid + "'," +
                     "'" + values.maritalstatus_name + "',";
            if (values.father_firstname == "" || values.father_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_firstname.Replace("'", "") + "',";
            }
            if (values.father_middlename == "" || values.father_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_middlename.Replace("'", "") + "',";
            }
            if (values.father_lastname == "" || values.father_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.father_dob + "'," +
                     "'" + values.father_age + "',";
            if (values.mother_firstname == "" || values.mother_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_firstname.Replace("'", "") + "',";
            }
            if (values.mother_middlename == "" || values.mother_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_middlename.Replace("'", "") + "',";
            }
            if (values.mother_lastname == "" || values.mother_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.mother_dob + "'," +
                     "'" + values.mother_age + "',";
            if (values.spouse_firstname == "" || values.spouse_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_firstname.Replace("'", "") + "',";
            }
            if (values.spouse_middlename == "" || values.spouse_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_middlename.Replace("'", "") + "',";
            }
            if (values.spouse_lastname == "" || values.spouse_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.spouse_dob + "'," +
                     "'" + values.spouse_age + "'," +
                     "'" + values.ownershiptype_gid + "'," +
                     "'" + values.ownershiptype_name + "'," +
                     "'" + values.propertyholder_gid + "'," +
                     "'" + values.propertyholder_name + "'," +
                     "'" + values.residencetype_gid + "'," +
                     "'" + values.residencetype_name + "'," +
                     "'" + values.incometype_gid + "'," +
                     "'" + values.incometype_name + "'," +
                     "'" + values.currentresidence_years + "'," +
                     "'" + values.branch_distance + "'," +
                     "'" + values.group_gid + "'," +
                     "'" + values.group_name + "'," +
                     "'" + values.profile + "'," +
                     "'" + values.urn_status + "'," +
                     "'" + values.urn + "'," +
                     "'" + values.fathernominee_status + "'," +
                     "'" + values.mothernominee_status + "'," +
                     "'" + values.spousenominee_status + "'," +
                     "'" + values.othernominee_status + "'," +
                     "'" + values.relationshiptype + "',";
            if (values.nomineefirst_name == "" || values.nomineefirst_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nomineefirst_name.Replace("'", "") + "',";
            }
            if (values.nominee_middlename == "" || values.nominee_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nominee_middlename.Replace("'", "") + "',";
            }
            if (values.nominee_lastname == "" || values.nominee_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nominee_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.nominee_dob + "'," +
                      "'" + values.nominee_age + "'," +
                      "'" + values.totallandinacres + "'," +
                      "'" + values.cultivatedland + "'," +
                      "'" + values.previouscrop + "'," +
                      "'" + values.prposedcrop + "'," +
                      "'" + values.institution_gid + "'," +
                      "'" + values.institution_name + "'," +
                      "'Incomplete'," +
                      "'" + values.nearsamunnatiabranch_gid + "'," +
                      "'" + values.nearsamunnatiabranch_name + "'," +
                      "'" + values.physicalstatus_gid + "'," +
                      "'" + values.physicalstatus_name + "'," +
                      "'" + values.internalrating_gid + "'," +
                      "'" + values.internalrating_name + "'," +
                      "'" + employee_gid + "'," +
                      "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                // PAN Update
                foreach (string reason in values.panabsencereason_selectedlist)
                {
                    msGetGidpan = objcmnfunctions.GetMasterGID("C2PR");
                    msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                           " contact2panabsencereason_gid," +
                           " contact_gid," +
                           " panabsencereason," +
                           " created_date," +
                           " created_by)" +
                           " VALUES(" +
                           "'" + msGetGidpan + "'," +
                           "'" + msGetGid + "'," +
                           "'" + reason + "'," +
                           "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                           "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

                //Updates

                msSQL = "update ocs_trn_tcadcontact2mobileno set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2email set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2address set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2idproof set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2panform60 set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2panabsencereason set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2equipment set contact_gid='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2livestock set contact_gid='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select individualdocument_gid,contact2document_gid from ocs_trn_tcadcontact2document where contact_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select individualdocument_gid,documenttypes_gid,documenttype_name,individualdocument_name,covenant_type " +
                         " from ocs_mst_tindividualdocument where individualdocument_gid='" + dt["individualdocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["individualdocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " individualdocument_gid, " +
                            " documentuploaded_gid, " +
                            " documenttype_gid," +
                        " documenttype_code," +
                        " documenttype_name," +
                        " covenant_type, " +
                        " tagged_by, " +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetdefDocchecklistGID + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + msGetGid + "'," +
                        "'" + dt["individualdocument_gid"].ToString() + "'," +
                        "'" + dt["contact2document_gid"].ToString() + "'," +
                        "'" + lsdocumenttype_gid + "'," +
                        "'" + lsdocumenttype_name + "'," +
                        "'" + lscompanydocument_name.Replace("'", "") + "'," +
                        "'" + lscovenant_type + "'," +
                        "'N'," +
                        "current_timestamp," +
                        "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                       " covenantdocumentcheckdtl_gid," +
                       " application_gid," +
                       " credit_gid," +
                       " individualdocument_gid," +
                       " documentuploaded_gid, " +
                       " documenttype_gid," +
                       " documenttype_code," +
                       " documenttype_name," +
                       " covenant_type, " +
                       " tagged_by, " +
                       " created_date," +
                       " created_by)" +
                       " VALUES(" +
                       "'" + msGetDocchecklistGID + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + msGetGid + "'," +
                       "'" + dt["individualdocument_gid"].ToString() + "'," +
                       "'" + dt["contact2document_gid"].ToString() + "'," +
                       "'" + lsdocumenttype_gid + "'," +
                       "'" + lsdocumenttype_name + "'," +
                       "'" + lscompanydocument_name.Replace("'", "") + "'," +
                       "'" + lscovenant_type + "'," +
                       "'N'," +
                       "current_timestamp," +
                       "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();
                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, msGetGid, employee_gid);

                msSQL = "update ocs_trn_tcadcontact2document set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpanauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpanaadhaarlink set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycdlauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycepicauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpassportauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                values.status = true;
                values.message = "Individual Details Saved Sucessfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
            }
        }

        public void DaSubmitIndividualDtlAdd(string employee_gid, string user_gid, MdlMstContact values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("CTCT");

            msSQL = " select a.individualdocument_gid from ocs_mst_tindividualdocument a" +
                    " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                   " where a.documenttypes_gid = 'DOCT2022010611'  and " +
                   " status = 'Y' and b.program_gid ='" + values.program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmasterdocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmasterdocument_list.Add(dr_datarow["individualdocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            msSQL = " select distinct(a.individualdocument_gid) " +
                    " from ocs_trn_tcadcontact2document a where a.documenttype_gid = 'DOCT2022010611' and " +
                    " contact_gid = '" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gettransactiondocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gettransactiondocument_list.Add(dr_datarow["individualdocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            var set1 = new HashSet<string>(getmasterdocument_list);
            var set2 = new HashSet<string>(gettransactiondocument_list);

            if (set1.SetEquals(set2) == false)
            {
                values.status = false;
                values.message = "Upload All KYC Documents";
                return;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            string lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholdertype_name)
            {
                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return;
            }

            msSQL = "select stakeholder_type from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type in ('Borrower','Applicant')";
            lsstakeholder_type = objdbconn.GetExecuteScalar(msSQL);

            if (lsstakeholder_type == values.stakeholdertype_name)
            {
                values.status = false;
                values.message = "Applicant/Borrower Information Already Added";
                return;
            }

            msSQL = "select contact2mobileno_gid from ocs_trn_tcadcontact2mobileno where contact_gid='" + employee_gid + "' and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Mobile Number ";
                return;
            }
            objODBCDatareader.Close();
            msSQL = "select contact2email_gid from ocs_trn_tcadcontact2email where contact_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add primary Email Address";
                return;
            }
            objODBCDatareader.Close();
            msSQL = "select contact2address_gid from ocs_trn_tcadcontact2address where contact_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add primary Address";
                return;
            }
            objODBCDatareader.Close();

            msSQL = " insert into ocs_trn_tcadcontact(" +
                   " contact_gid," +
                   " application_gid," +
                   " application_no," +
                   " pan_status," +
                   " pan_no," +
                   " aadhar_no," +
                   " first_name," +
                   " middle_name," +
                   " last_name," +
                   " individual_dob," +
                   " age," +
                   " gender_gid," +
                   " gender_name," +
                   " designation_gid," +
                   " designation_name," +
                   " educationalqualification_gid," +
                   " educationalqualification_name," +
                   " main_occupation," +
                   " annual_income," +
                   " monthly_income," +
                   " pep_status," +
                   " pepverified_date," +
                   " stakeholdertype_gid," +
                   " stakeholder_type," +
                   " maritalstatus_gid," +
                   " maritalstatus_name," +
                   " father_firstname," +
                   " father_middlename," +
                   " father_lastname," +
                   " father_dob," +
                   " father_age," +
                   " mother_firstname," +
                   " mother_middlename," +
                   " mother_lastname," +
                   " mother_dob," +
                   " mother_age," +
                   " spouse_firstname," +
                   " spouse_middlename," +
                   " spouse_lastname," +
                   " spouse_dob," +
                   " spouse_age," +
                   " ownershiptype_gid," +
                   " ownershiptype_name," +
                   " propertyholder_gid," +
                   " propertyholder_name," +
                   " residencetype_gid," +
                   " residencetype_name," +
                   " incometype_gid," +
                   " incometype_name," +
                   " currentresidence_years," +
                   " branch_distance," +
                   " group_gid," +
                   " group_name," +
                   " profile," +
                   " urn_status," +
                   " urn," +
                   " fathernominee_status," +
                   " mothernominee_status," +
                   " spousenominee_status," +
                   " othernominee_status," +
                   " relationshiptype," +
                   " nomineefirst_name," +
                   " nominee_middlename," +
                   " nominee_lastname," +
                   " nominee_dob," +
                   " nominee_age," +
                   " totallandinacres," +
                   " cultivatedland," +
                   " previouscrop," +
                   " prposedcrop," +
                   " institution_gid," +
                   " institution_name," +
                   " contact_status," +
                   " nearsamunnatiabranch_gid," +
                   " nearsamunnatiabranch_name," +
                   " physicalstatus_gid," +
                   " physicalstatus_name," +
                   " internalrating_gid," +
                   " internalrating_name," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.application_gid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.pan_status + "'," +
                   "'" + values.pan_no + "'," +
                   "'" + values.aadhar_no + "',";
            if (values.first_name == "" || values.first_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.first_name.Replace("'", "") + "',";
            }
            if (values.middle_name == "" || values.middle_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.middle_name.Replace("'", "") + "',";
            }
            if (values.last_name == "" || values.last_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.last_name.Replace("'", "") + "',";
            }
            msSQL += "'" + values.individual_dob + "'," +
                     "'" + values.age + "'," +
                     "'" + values.gender_gid + "'," +
                     "'" + values.gender_name + "'," +
                     "'" + values.designation_gid + "'," +
                     "'" + values.designation_name + "'," +
                     "'" + values.educationalqualification_gid + "'," +
                     "'" + values.educationalqualification_name + "'," +
                     "'" + values.main_occupation + "'," +
                     "'" + values.annual_income + "'," +
                     "'" + values.monthly_income + "'," +
                     "'" + values.pep_status + "',";

            if ((values.pepverified_date == null) || (values.pepverified_date == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.pepverified_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }



            msSQL += "'" + values.stakeholdertype_gid + "'," +
                "'" + values.stakeholdertype_name + "'," +
                     "'" + values.maritalstatus_gid + "'," +
                     "'" + values.maritalstatus_name + "',";
            if (values.father_firstname == "" || values.father_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_firstname.Replace("'", "") + "',";
            }
            if (values.father_middlename == "" || values.father_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_middlename.Replace("'", "") + "',";
            }
            if (values.father_lastname == "" || values.father_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.father_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.father_dob + "'," +
                     "'" + values.father_age + "',";
            if (values.mother_firstname == "" || values.mother_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_firstname.Replace("'", "") + "',";
            }
            if (values.mother_middlename == "" || values.mother_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_middlename.Replace("'", "") + "',";
            }
            if (values.mother_lastname == "" || values.mother_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.mother_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.mother_dob + "'," +
                     "'" + values.mother_age + "',";
            if (values.spouse_firstname == "" || values.spouse_firstname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_firstname.Replace("'", "") + "',";
            }
            if (values.spouse_middlename == "" || values.spouse_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_middlename.Replace("'", "") + "',";
            }
            if (values.spouse_lastname == "" || values.spouse_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.spouse_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.spouse_dob + "'," +
                     "'" + values.spouse_age + "'," +
                     "'" + values.ownershiptype_gid + "'," +
                     "'" + values.ownershiptype_name + "'," +
                     "'" + values.propertyholder_gid + "'," +
                     "'" + values.propertyholder_name + "'," +
                     "'" + values.residencetype_gid + "'," +
                     "'" + values.residencetype_name + "'," +
                     "'" + values.incometype_gid + "'," +
                     "'" + values.incometype_name + "'," +
                     "'" + values.currentresidence_years + "'," +
                     "'" + values.branch_distance + "'," +
                     "'" + values.group_gid + "'," +
                     "'" + values.group_name + "'," +
                     "'" + values.profile + "'," +
                     "'" + values.urn_status + "'," +
                     "'" + values.urn + "'," +
                     "'" + values.fathernominee_status + "'," +
                     "'" + values.mothernominee_status + "'," +
                     "'" + values.spousenominee_status + "'," +
                     "'" + values.othernominee_status + "'," +
                     "'" + values.relationshiptype + "',";
            if (values.nomineefirst_name == "" || values.nomineefirst_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nomineefirst_name.Replace("'", "") + "',";
            }
            if (values.nominee_middlename == "" || values.nominee_middlename == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nominee_middlename.Replace("'", "") + "',";
            }
            if (values.nominee_lastname == "" || values.nominee_lastname == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.nominee_lastname.Replace("'", "") + "',";
            }
            msSQL += "'" + values.nominee_dob + "'," +
                     "'" + values.nominee_age + "'," +
                     "'" + values.totallandinacres + "'," +
                     "'" + values.cultivatedland + "'," +
                     "'" + values.previouscrop + "'," +
                     "'" + values.prposedcrop + "'," +
                     "'" + values.institution_gid + "'," +
                     "'" + values.institution_name.Replace("'", "\\'") + "'," +
                     "'Completed'," +
                     "'" + values.nearsamunnatiabranch_gid + "'," +
                     "'" + values.nearsamunnatiabranch_name + "'," +
                     "'" + values.physicalstatus_gid + "'," +
                     "'" + values.physicalstatus_name + "'," +
                     "'" + values.internalrating_gid + "'," +
                     "'" + values.internalrating_name + "'," +
                     "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


            if (mnResult != 0)
            {
                if (values.pan_status == "Customer Submitting Form 60")
                {
                    // PAN Update
                    foreach (string reason in values.panabsencereason_selectedlist)
                    {
                        msGetGidpan = objcmnfunctions.GetMasterGID("C2PR");
                        msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                               " contact2panabsencereason_gid," +
                               " contact_gid," +
                               " panabsencereason," +
                               " created_date," +
                               " created_by)" +
                               " VALUES(" +
                               "'" + msGetGidpan + "'," +
                               "'" + msGetGid + "'," +
                               "'" + reason + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                               "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                //Updates

                msSQL = "update ocs_trn_tcadcontact2mobileno set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2email set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2address set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2idproof set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2equipment set contact_gid='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2livestock set contact_gid='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select individualdocument_gid,contact2document_gid from ocs_trn_tcadcontact2document where contact_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select individualdocument_gid,documenttypes_gid,documenttype_name,individualdocument_name,covenant_type " +
                         " from ocs_mst_tindividualdocument where individualdocument_gid='" + dt["individualdocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["individualdocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " individualdocument_gid, " +
                             " documentuploaded_gid, " +
                            " documenttype_gid," +
                        " documenttype_code," +
                        " documenttype_name," +
                        " covenant_type, " +
                        " tagged_by, " +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetdefDocchecklistGID + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + msGetGid + "'," +
                        "'" + dt["individualdocument_gid"].ToString() + "'," +
                        "'" + dt["contact2document_gid"].ToString() + "'," +
                        "'" + lsdocumenttype_gid + "'," +
                        "'" + lsdocumenttype_name + "'," +
                        "'" + lscompanydocument_name.Replace("'", "") + "'," +
                        "'" + lscovenant_type + "'," +
                        "'N'," +
                        "current_timestamp," +
                        "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                       " covenantdocumentcheckdtl_gid," +
                       " application_gid," +
                       " credit_gid," +
                       " individualdocument_gid," +
                        " documentuploaded_gid, " +
                       " documenttype_gid," +
                       " documenttype_code," +
                       " documenttype_name," +
                       " covenant_type, " +
                       " tagged_by, " +
                       " created_date," +
                       " created_by)" +
                       " VALUES(" +
                       "'" + msGetDocchecklistGID + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + msGetGid + "'," +
                       "'" + dt["individualdocument_gid"].ToString() + "'," +
                       "'" + dt["contact2document_gid"].ToString() + "'," +
                       "'" + lsdocumenttype_gid + "'," +
                       "'" + lsdocumenttype_name + "'," +
                       "'" + lscompanydocument_name.Replace("'", "") + "'," +
                       "'" + lscovenant_type + "'," +
                       "'N'," +
                       "current_timestamp," +
                       "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();

                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, msGetGid, employee_gid);

                msSQL = "update ocs_trn_tcadcontact2document set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpanauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpanaadhaarlink set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycdlauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycepicauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycpassportauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select mobile_no from ocs_trn_tcadcontact2mobileno where contact_gid='" + msGetGid + "' and primary_status='yes'";
                string lsmobileno = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select email_address from ocs_trn_tcadcontact2email where contact_gid='" + msGetGid + "' and primary_status='yes'";
                lsemail_address = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "update ocs_trn_tcadcontact2panform60 set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadcontact2panabsencereason set contact_gid ='" + msGetGid + "' where contact_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msSQL = "select stakeholder_type from ocs_trn_tcadcontact where contact_gid='" + msGetGid + "'";
                    string lsstakeholders_type = objdbconn.GetExecuteScalar(msSQL);

                    if (lsstakeholders_type == "Applicant" || lsstakeholders_type == "Borrower")
                    {
                        msSQL = "select mobile_no from ocs_trn_tcadcontact2mobileno where contact_gid='" + msGetGid + "' and primary_status='yes'";
                        lsmobileno = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = "select email_address from ocs_trn_tcadcontact2email where contact_gid='" + msGetGid + "' and primary_status='yes'";
                        lsemail_address = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " select concat(first_name,middle_name,last_name) as customer_name,contact_gid,urn,stakeholder_type from ocs_trn_tcadcontact where" +
                                " application_gid='" + values.application_gid + "' and stakeholder_type in ('Applicant','Borrower')";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lscustomer_name = objODBCDatareader["customer_name"].ToString();
                            lsurn = objODBCDatareader["urn"].ToString();
                            lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();

                            //Region
                            msSQL = "select state from ocs_trn_tcadcontact2address where primary_status='Yes' and contact_gid='" + objODBCDatareader["contact_gid"].ToString() + "'";
                            lsregion = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = " update ocs_trn_tcadapplication set customer_name='" + lscustomer_name.Replace("'", "\\'") + "'," +
                                    " mobile_no='" + lsmobile_no + "'," +
                                    " email_address='" + lsemail_address + "'," +
                                    " region='" + lsregion + "'," +
                                    " customer_urn='" + lsurn + "'," +
                                    " applicant_type='Individual'," +
                                    " updated_by='" + employee_gid + "'," +
                                    " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                                    " where application_gid='" + values.application_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            msSQL = " update ocs_trn_tcadcontact set mobile_no='" + lsmobileno + "'," +
                                    " email_address='" + lsemail_address + "' where contact_gid='" + msGetGid + "' ";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        }
                        objODBCDatareader.Close();
                        values.status = true;
                        values.message = "Individual Details Submitted Successfully";
                    }
                    else
                    {
                    }
                }

                DaMstCADApplication objDaMstCADApplication = new DaMstCADApplication();
                objDaMstCADApplication.FnProgramBasedDcoument4Cadflow(values.application_gid, employee_gid, user_gid);

                values.status = true;
                values.message = "Individual Details Submitted Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
            }
        }

        public void DaGetPANForm60List(string employee_gid, MdlContactPANForm60 values)
        {
            msSQL = "select contact2panform60_gid,document_name, document_path from ocs_trn_tcadcontact2panform60 where " +
              " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60_list
                    {
                        contact2panform60_gid = (dr_datarow["contact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        //document_path = (HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString())),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                    });

                    values.contactpanform60_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }

        }

        public void DaPostPANAbsenceReasons(MdlPANAbsenceReason values, string employee_gid)
        {
            foreach (string reason in values.panabsencereason_selectedlist)
            {

                msGetGid = objcmnfunctions.GetMasterGID("C2PR");
                msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                        " contact2panabsencereason_gid," +
                        " contact_gid," +
                        " panabsencereason," +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetGid + "'," +
                        "'" + employee_gid + "'," +
                        "'" + reason + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                        "'" + employee_gid + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            }

            if (mnResult == 1)
            {
                values.status = true;
                values.message = "PAN Absence Reasons submitted successfully...";
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
            }
        }

        public bool DaPANForm60DocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string project_flag = httpRequest.Form["project_flag"].ToString();
            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month;

            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        //FileStream file = new FileStream(lspath + httpPostedFile.FileName, FileMode.Create, FileAccess.Write);
                        //ms.WriteTo(file);
                        //file.Close();
                        //ms.Close();
                        //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/PANForm60Document/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("CF60");
                        msSQL = " insert into ocs_trn_tcadcontact2panform60(" +
                                " contact2panform60_gid," +
                                " contact_gid," +
                                " document_name," +
                                " document_path," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                "'" + lspath + msdocument_gid + FileExtension.Replace("'", " ") + "'," +
                                "'" + employee_gid + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void PANForm60List(string contact_gid, MdlContactPANForm60 values)
        {
            msSQL = "select contact2panform60_gid,document_name, document_path from ocs_trn_tcadcontact2panform60 where " +
              " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60_list
                    {
                        contact2panform60_gid = (dr_datarow["contact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),

                    });

                    values.contactpanform60_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }

        }

        public void DaPANForm60Delete(string contact2panform60_gid, MdlContactPANForm60 values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2panform60 where contact2panform60_gid='" + contact2panform60_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Form-60 Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaGetIndividualMobileNoList(string contact_gid, MdlContactMobileNo values)
        {
            msSQL = "select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
              " contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<contactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new contactmobileno_list
                    {
                        contact2mobileno_gid = (dr_datarow["contact2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
            }
            values.contactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }

        public void DaGetIndividualEmailAddressList(string contact_gid, string employee_gid, MdlContactEmail values)
        {
            msSQL = "select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
              " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactemail_list = new List<contactemail_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactemail_list.Add(new contactemail_list
                    {
                        contact2email_gid = (dr_datarow["contact2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                    });
                }
            }
            values.contactemail_list = getcontactemail_list;
            dt_datatable.Dispose();
        }

        public void DaGetIndividualAddressList(string contact_gid, string employee_gid, MdlContactAddress values)
        {
            msSQL = " select contact2address_gid,addresstype_name,primary_status, addressline1, addressline2,landmark, taluka, district, state, country," +
                    " postal_code,latitude,longitude from ocs_trn_tcadcontact2address where contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactaddress_list = new List<contactaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactaddress_list.Add(new contactaddress_list
                    {
                        contact2address_gid = (dr_datarow["contact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString())
                    });
                }
                values.contactaddress_list = getcontactaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetIndividualProofList(string contact_gid, string employee_gid, MdlContactIdProof values)
        {
            msSQL = "select contact2idproof_gid,idproof_name,idproof_no,document_name, document_path,idproof_dob,file_no from ocs_trn_tcadcontact2idproof where " +
              " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactidproof_list = new List<contactidproof_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactidproof_list.Add(new contactidproof_list
                    {
                        contact2idproof_gid = (dr_datarow["contact2idproof_gid"].ToString()),
                        idproof_name = (dr_datarow["idproof_name"].ToString()),
                        idproof_no = (dr_datarow["idproof_no"].ToString()),
                        idproof_dob = (dr_datarow["idproof_dob"].ToString()),
                        file_no = (dr_datarow["file_no"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        //document_path = (HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString())),                        
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),

                    });

                    values.contactidproof_list = getcontactidproof_list;
                }
                dt_datatable.Dispose();
            }

        }

        public void IndividualDocList(string contact_gid, MdlContactDocument values)
        {
            msSQL = " select contact2document_gid,document_name,document_title,document_path,migration_flag from ocs_trn_tcadcontact2document " +
                                 " where contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<uploadindividualdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new uploadindividualdoc_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        contact2document_gid = dt["contact2document_gid"].ToString(),
                    });
                    values.uploadindividualdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetContactGroupList(string contact_gid, MdlDropDown values)
        {
            msSQL = " SELECT application_gid from ocs_trn_tcadcontact where contact_gid='" + contact_gid + "' order by contact_gid desc ";
            string lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " SELECT group_name, group_gid from ocs_trn_tcadgroup where application_gid='" + lsapplication_gid + "' order by group_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroup = new List<grouplist>();
            if (dt_datatable.Rows.Count != 0)
            {
                getgroup.Add(new grouplist
                {
                    group_name = "NA",
                    group_gid = "NA",
                });
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroup.Add(new grouplist
                    {
                        group_name = (dr_datarow["group_name"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                    });
                }
                values.grouplist = getgroup;
            }
            dt_datatable.Dispose();
            if (dt_datatable.Rows.Count == 0)
            {
                getgroup.Add(new grouplist
                {
                    group_name = "NA",
                    group_gid = "NA",
                });
                values.grouplist = getgroup;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaGetContactCompanyList(string contact_gid, MdlDropDown values)
        {
            msSQL = " SELECT application_gid from ocs_trn_tcadcontact where contact_gid='" + contact_gid + "' order by contact_gid desc ";
            string lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " SELECT company_name, institution_gid from ocs_trn_tcadinstitution where application_gid='" + lsapplication_gid + "' order by institution_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitution = new List<institutionlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                getinstitution.Add(new institutionlist
                {
                    institution_name = "NA",
                    institution_gid = "NA",
                });
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinstitution.Add(new institutionlist
                    {
                        institution_name = (dr_datarow["company_name"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                    });
                }
                values.institutionlist = getinstitution;
            }
            dt_datatable.Dispose();
            if (dt_datatable.Rows.Count == 0)
            {
                getinstitution.Add(new institutionlist
                {
                    institution_name = "NA",
                    institution_gid = "NA",
                });
                values.institutionlist = getinstitution;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaEditIndividual(string contact_gid, MdlMstContact values)
        {
            try
            {
                msSQL = " select pan_status,pan_no,aadhar_no,first_name,middle_name,last_name,individual_dob,age,gender_gid,gender_name,designation_gid,designation_name," +
                        " educationalqualification_gid,educationalqualification_name,main_occupation,annual_income,monthly_income," +
                        " pep_status,date_format(pepverified_date,'%d-%m-%Y') as pepverified_date,maritalstatus_gid,maritalstatus_name,stakeholdertype_gid,stakeholder_type," +
                        " father_firstname,father_middlename,father_lastname,father_dob,father_age," +
                        " mother_firstname,mother_middlename,mother_lastname,mother_dob,mother_age," +
                        " spouse_firstname,spouse_middlename,spouse_lastname,spouse_dob,spouse_age," +
                        " ownershiptype_gid,ownershiptype_name,residencetype_gid,residencetype_name,currentresidence_years,branch_distance, contact_status," +
                        " propertyholder_gid, propertyholder_name, incometype_gid, incometype_name, previouscrop, prposedcrop,institution_gid,institution_name," +
                        " group_gid, group_name, profile, urn_status, urn, fathernominee_status, mothernominee_status, spousenominee_status, othernominee_status," +
                        " relationshiptype, nomineefirst_name, nominee_middlename, nominee_lastname, nominee_dob, nominee_age, totallandinacres, cultivatedland, " +
                         " nearsamunnatiabranch_gid,nearsamunnatiabranch_name,physicalstatus_gid,physicalstatus_name,internalrating_gid,internalrating_name " +
                        " from ocs_trn_tcadcontact where contact_gid='" + contact_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.pan_status = objODBCDatareader["pan_status"].ToString();
                    values.pan_no = objODBCDatareader["pan_no"].ToString();
                    values.aadhar_no = objODBCDatareader["aadhar_no"].ToString();
                    values.first_name = objODBCDatareader["first_name"].ToString();
                    values.middle_name = objODBCDatareader["middle_name"].ToString();
                    values.last_name = objODBCDatareader["last_name"].ToString();
                    values.individual_dob = objODBCDatareader["individual_dob"].ToString();
                    values.age = objODBCDatareader["age"].ToString();
                    values.gender_gid = objODBCDatareader["gender_gid"].ToString();
                    values.gender_name = objODBCDatareader["gender_name"].ToString();
                    values.designation_gid = objODBCDatareader["designation_gid"].ToString();
                    values.designation_name = objODBCDatareader["designation_name"].ToString();

                    values.educationalqualification_gid = objODBCDatareader["educationalqualification_gid"].ToString();
                    values.educationalqualification_name = objODBCDatareader["educationalqualification_name"].ToString();
                    values.main_occupation = objODBCDatareader["main_occupation"].ToString();
                    values.annual_income = objODBCDatareader["annual_income"].ToString();
                    values.monthly_income = objODBCDatareader["monthly_income"].ToString();

                    values.pep_status = objODBCDatareader["pep_status"].ToString();
                    values.pepverified_date = objODBCDatareader["pepverified_date"].ToString();
                    values.maritalstatus_gid = objODBCDatareader["maritalstatus_gid"].ToString();
                    values.maritalstatus_name = objODBCDatareader["maritalstatus_name"].ToString();
                    values.stakeholdertype_gid = objODBCDatareader["stakeholdertype_gid"].ToString();
                    values.stakeholdertype_name = objODBCDatareader["stakeholder_type"].ToString();

                    values.father_firstname = objODBCDatareader["father_firstname"].ToString();
                    values.father_middlename = objODBCDatareader["father_middlename"].ToString();
                    values.father_lastname = objODBCDatareader["father_lastname"].ToString();
                    values.father_dob = objODBCDatareader["father_dob"].ToString();
                    values.father_age = objODBCDatareader["father_age"].ToString();

                    values.mother_firstname = objODBCDatareader["mother_firstname"].ToString();
                    values.mother_middlename = objODBCDatareader["mother_middlename"].ToString();
                    values.mother_lastname = objODBCDatareader["mother_lastname"].ToString();
                    values.mother_dob = objODBCDatareader["mother_dob"].ToString();
                    values.mother_age = objODBCDatareader["mother_age"].ToString();

                    values.spouse_firstname = objODBCDatareader["spouse_firstname"].ToString();
                    values.spouse_middlename = objODBCDatareader["spouse_middlename"].ToString();
                    values.spouse_lastname = objODBCDatareader["spouse_lastname"].ToString();
                    values.spouse_dob = objODBCDatareader["spouse_dob"].ToString();
                    values.spouse_age = objODBCDatareader["spouse_age"].ToString();

                    values.ownershiptype_gid = objODBCDatareader["ownershiptype_gid"].ToString();
                    values.ownershiptype_name = objODBCDatareader["ownershiptype_name"].ToString();
                    values.residencetype_gid = objODBCDatareader["residencetype_gid"].ToString();
                    values.residencetype_name = objODBCDatareader["residencetype_name"].ToString();
                    values.currentresidence_years = objODBCDatareader["currentresidence_years"].ToString();
                    values.branch_distance = objODBCDatareader["branch_distance"].ToString();
                    values.contact_status = objODBCDatareader["contact_status"].ToString();

                    values.propertyholder_gid = objODBCDatareader["propertyholder_gid"].ToString();
                    values.propertyholder_name = objODBCDatareader["propertyholder_name"].ToString();
                    values.incometype_gid = objODBCDatareader["incometype_gid"].ToString();
                    values.incometype_name = objODBCDatareader["incometype_name"].ToString();

                    values.group_gid = objODBCDatareader["group_gid"].ToString();
                    values.group_name = objODBCDatareader["group_name"].ToString();
                    values.profile = objODBCDatareader["profile"].ToString();
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                    values.fathernominee_status = objODBCDatareader["fathernominee_status"].ToString();
                    values.mothernominee_status = objODBCDatareader["mothernominee_status"].ToString();
                    values.spousenominee_status = objODBCDatareader["spousenominee_status"].ToString();
                    values.othernominee_status = objODBCDatareader["othernominee_status"].ToString();
                    values.relationshiptype = objODBCDatareader["relationshiptype"].ToString();
                    values.nomineefirst_name = objODBCDatareader["nomineefirst_name"].ToString();
                    values.nominee_middlename = objODBCDatareader["nominee_middlename"].ToString();
                    values.nominee_lastname = objODBCDatareader["nominee_lastname"].ToString();
                    values.nominee_dob = objODBCDatareader["nominee_dob"].ToString();
                    values.nominee_age = objODBCDatareader["nominee_age"].ToString();
                    values.totallandinacres = objODBCDatareader["totallandinacres"].ToString();
                    values.cultivatedland = objODBCDatareader["cultivatedland"].ToString();
                    values.previouscrop = objODBCDatareader["previouscrop"].ToString();
                    values.prposedcrop = objODBCDatareader["prposedcrop"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.institution_name = objODBCDatareader["institution_name"].ToString();
                    values.nearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                    values.nearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                    values.physicalstatus_gid = objODBCDatareader["physicalstatus_gid"].ToString();
                    values.physicalstatus_name = objODBCDatareader["physicalstatus_name"].ToString();
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaEditPANAbsenceReasonList(string contact_gid, MdlPANAbsenceReason values)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_mst_tpanabsencereason";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var panabsencereason_existinglist = new List<panabsencereason_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    values.panabsencereason_list = dt_datatable.AsEnumerable().Select(row =>
                     new panabsencereason_list
                     {
                         panabsencereason = row["panabsencereason"].ToString(),
                     }
                   ).ToList();
                }
                dt_datatable.Dispose();

                msSQL = " SELECT panabsencereason" +
                   " from ocs_trn_tcadcontact2panabsencereason where contact_gid = '" + contact_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var panabsencereason_contactlist = new List<panabsencereason_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    panabsencereason_contactlist = dt_datatable.AsEnumerable().Select(row =>
                      new panabsencereason_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();

                for (var i = 0; i < values.panabsencereason_list.Count; i++)
                {
                    for (var j = 0; j < panabsencereason_contactlist.Count; j++)
                    {
                        if (values.panabsencereason_list[i].panabsencereason == panabsencereason_contactlist[i].panabsencereason)
                        {
                            values.panabsencereason_list[i].check_status = true;
                            break;
                        }
                    }
                }

                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
            }

        }

        public void DaContactPANAbsenceReasonList(string contact_gid, string employee_gid, MdlPANAbsenceReason objMdlPANAbsenceReason)
        {
            try
            {
                msSQL = " SELECT panabsencereason" +
                   " from ocs_trn_tcadcontact2panabsencereason where contact_gid = '" + contact_gid + "' or contact_gid = '" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactpanabsencereason_list = new List<contactpanabsencereason_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    objMdlPANAbsenceReason.contactpanabsencereason_list = dt_datatable.AsEnumerable().Select(row =>
                      new contactpanabsencereason_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();
                objMdlPANAbsenceReason.status = true;
            }
            catch (Exception ex)
            {
                objMdlPANAbsenceReason.status = false;
            }

        }

        public void DaUpdatePANAbsenceReasons(MdlPANAbsenceReason values, string employee_gid)
        {
            try
            {
                matchCount1 = 0;
                matchCount2 = 0;

                msSQL = " select panabsencereason from ocs_trn_tcadcontact2panabsencereason" +
                        " where contact_gid='" + values.contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                if (dt_datatable.Rows.Count != 0)
                {
                    values.contactpanabsencereason_list = dt_datatable.AsEnumerable().Select(row =>
                     new contactpanabsencereason_list
                     {
                         panabsencereason = row["panabsencereason"].ToString(),
                     }
                   ).ToList();
                }
                dt_datatable.Dispose();

                for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                {
                    for (var j = 0; j < values.contactpanabsencereason_list.Count; j++)
                    {
                        if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereason_list[j].panabsencereason)
                        {
                            matchCount1++;
                        }
                    }
                    if (matchCount1 == 0)
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("C2PR");
                        msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                                " contact2panabsencereason_gid," +
                                " contact_gid," +
                                " panabsencereason," +
                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetGid + "'," +
                                "'" + employee_gid + "'," +
                                "'" + values.panabsencereason_selectedlist[i] + "'," +
                                "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    matchCount1 = 0;
                }

                for (var i = 0; i < values.contactpanabsencereason_list.Count; i++)
                {
                    for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                    {
                        if (values.contactpanabsencereason_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                        {
                            matchCount2++;
                        }
                    }
                    if (matchCount2 == 0)
                    {
                        msSQL = "delete from ocs_trn_tcadcontact2panabsencereason where panabsencereason='" + values.contactpanabsencereason_list[i].panabsencereason + "' and contact_gid = '" + values.contact_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                    matchCount2 = 0;
                }


                values.status = true;
                values.message = "PAN Absence Reasons Updated successfully...";
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured";
            }
        }

        public void DaGetPANForm60TempList(string contact_gid, string employee_gid, MdlContactPANForm60 values)
        {
            msSQL = "select contact2panform60_gid,document_name, document_path from ocs_trn_tcadcontact2panform60 where " +
             " contact_gid='" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactpanform60_list = new List<contactpanform60_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactpanform60_list.Add(new contactpanform60_list
                    {
                        contact2panform60_gid = (dr_datarow["contact2panform60_gid"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        //document_path = (HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString())),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                    });

                    values.contactpanform60_list = getcontactpanform60_list;
                }
                dt_datatable.Dispose();
            }
        }

        public void DaGetIndividualMobileNoTempList(string contact_gid, string employee_gid, MdlContactMobileNo values)
        {
            msSQL = "select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
              " contact_gid = '" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactmobileno_list = new List<contactmobileno_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactmobileno_list.Add(new contactmobileno_list
                    {
                        contact2mobileno_gid = (dr_datarow["contact2mobileno_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                    });
                }
            }
            values.contactmobileno_list = getcontactmobileno_list;
            dt_datatable.Dispose();
        }

        public void DaEditIndividualMobileNo(string contact2mobileno_gid, MdlContactMobileNo values)
        {
            try
            {
                msSQL = " select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
                        " contact2mobileno_gid='" + contact2mobileno_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.mobile_no = objODBCDatareader["mobile_no"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.whatsapp_no = objODBCDatareader["whatsapp_no"].ToString();
                    values.contact2mobileno_gid = objODBCDatareader["contact2mobileno_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateIndividualMobileNo(string employee_gid, MdlContactMobileNo values)
        {
            msSQL = " select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
                    " contact2mobileno_gid='" + values.contact2mobileno_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsmobile_no = objODBCDatareader["mobile_no"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lswhatsapp_no = objODBCDatareader["whatsapp_no"].ToString();
                lscontact2mobileno_gid = objODBCDatareader["contact2mobileno_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadcontact2mobileno set " +
                         " mobile_no='" + values.mobile_no + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " whatsapp_no='" + values.whatsapp_no + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where contact2mobileno_gid='" + values.contact2mobileno_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CMUL");

                    msSQL = "Insert into ocs_trn_tcadcontact2mobilenoupdatelog(" +
                   " contact2mobilenoupdatelog_gid, " +
                   " contact2mobileno_gid, " +
                   " contact_gid, " +
                   " mobile_no," +
                   " primary_status," +
                   " whatsapp_no," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.contact2mobileno_gid + "'," +
                   "'" + values.contact_gid + "'," +
                   "'" + lsmobile_no + "'," +
                   "'" + lsprimary_status + "'," +
                   "'" + lswhatsapp_no + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Individual Mobile Number Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Mobile Number";
            }
        }

        public void DaGetIndividualEmailAddressTempList(string contact_gid, string employee_gid, MdlContactEmail values)
        {
            msSQL = "select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
              " contact_gid='" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactemail_list = new List<contactemail_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactemail_list.Add(new contactemail_list
                    {
                        contact2email_gid = (dr_datarow["contact2email_gid"].ToString()),
                        email_address = (dr_datarow["email_address"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                    });
                }
            }
            values.contactemail_list = getcontactemail_list;
            dt_datatable.Dispose();
        }

        public void DaEditIndividualEmailAddress(string contact2email_gid, MdlContactEmail values)
        {
            try
            {
                msSQL = " select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
                        " contact2email_gid='" + contact2email_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.email_address = objODBCDatareader["email_address"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.contact2email_gid = objODBCDatareader["contact2email_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateIndividualEmailAddress(string employee_gid, MdlContactEmail values)
        {
            msSQL = " select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
                        " contact2email_gid='" + values.contact2email_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsemail_address = objODBCDatareader["email_address"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lscontact2email_gid = objODBCDatareader["contact2email_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadcontact2email set " +
                         " email_address='" + values.email_address + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where contact2email_gid='" + values.contact2email_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IEUL");

                    msSQL = "Insert into ocs_trn_tcadcontact2emailupdatelog(" +
                   " contact2emailaddressupdatelog_gid, " +
                   " contact2email_gid, " +
                   " contact_gid, " +
                   " email_address," +
                   " primary_status," +
                   " statusupdated_by," +
                   " created_by," +
                   " created_date)" +
                   " values (" +
                   "'" + msGetGid + "'," +
                   "'" + values.contact2email_gid + "'," +
                   "'" + values.contact_gid + "'," +
                   "'" + lsemail_address + "'," +
                   "'" + lsprimary_status + "'," +
                   "'" + values.statusupdated_by + "'," +
                   "'" + employee_gid + "'," +
                   "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    values.status = true;
                    values.message = "Individual Email Address Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Email Address";
            }
        }

        public void DaGetIndividualAddressTempList(string contact_gid, string employee_gid, MdlContactAddress values)
        {
            msSQL = " select contact2address_gid,addresstype_name,primary_status, addressline1, addressline2, landmark,taluka, district, state, country," +
                    " postal_code,latitude,longitude from ocs_trn_tcadcontact2address where contact_gid='" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactaddress_list = new List<contactaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactaddress_list.Add(new contactaddress_list
                    {
                        contact2address_gid = (dr_datarow["contact2address_gid"].ToString()),
                        addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString())
                    });
                }
                values.contactaddress_list = getcontactaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditIndividualAddress(string contact2address_gid, MdlContactAddress values)
        {
            try
            {
                msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, contact_gid, contact2address_gid,latitude,longitude " +
                    " from ocs_trn_tcadcontact2address where contact2address_gid='" + contact2address_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.addresstype_gid = objODBCDatareader["addresstype_gid"].ToString();
                    values.addresstype_name = objODBCDatareader["addresstype_name"].ToString();
                    values.addressline1 = objODBCDatareader["addressline1"].ToString();
                    values.addressline2 = objODBCDatareader["addressline2"].ToString();
                    values.landmark = objODBCDatareader["landmark"].ToString();
                    values.taluka = objODBCDatareader["taluka"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.postal_code = objODBCDatareader["postal_code"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.country = objODBCDatareader["country"].ToString();
                    values.contact_gid = objODBCDatareader["contact_gid"].ToString();
                    values.contact2address_gid = objODBCDatareader["contact2address_gid"].ToString();
                    values.latitude = objODBCDatareader["latitude"].ToString();
                    values.longitude = objODBCDatareader["longitude"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateIndividualAddress(string employee_gid, MdlContactAddress values)
        {
            msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, contact_gid, contact2address_gid,latitude,longitude " +
                    " from ocs_trn_tcadcontact2address where contact2address_gid='" + values.contact2address_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsaddress_typegid = objODBCDatareader["addresstype_gid"].ToString();
                lsaddress_type = objODBCDatareader["addresstype_name"].ToString();
                lsaddressline1 = objODBCDatareader["addressline1"].ToString();
                lsaddressline2 = objODBCDatareader["addressline2"].ToString();
                lslandmark = objODBCDatareader["landmark"].ToString();
                lstaluka = objODBCDatareader["taluka"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lspostal_code = objODBCDatareader["postal_code"].ToString();
                lscity = objODBCDatareader["city"].ToString();
                lsdistrict = objODBCDatareader["district"].ToString();
                lsstate = objODBCDatareader["state"].ToString();
                lscountry = objODBCDatareader["country"].ToString();
                lscontact_gid = objODBCDatareader["contact_gid"].ToString();
                lscontact2address_gid = objODBCDatareader["contact2address_gid"].ToString();
                lslatitude = objODBCDatareader["latitude"].ToString();
                lslongitude = objODBCDatareader["longitude"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadcontact2address set " +
                         " addresstype_gid='" + values.addresstype_gid + "'," +
                         " addresstype_name='" + values.addresstype_name + "'," +
                         " addressline1='" + values.addressline1 + "'," +
                         " addressline2='" + values.addressline2 + "'," +
                         " landmark='" + values.landmark + "'," +
                         " taluka='" + values.taluka + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " postal_code='" + values.postal_code + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +
                         " country='" + values.country + "'," +
                         " latitude='" + values.latitude + "'," +
                         " longitude='" + values.longitude + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where contact2address_gid='" + values.contact2address_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("IAUL");

                    msSQL = " insert into ocs_trn_tcadcontact2addressupdatelog(" +
                  " contact2addressupdatelog_gid," +
                  " contact2address_gid," +
                  " contact_gid," +
                  " addresstype_gid," +
                  " addresstype_name," +
                  " addressline1," +
                  " addressline2," +
                  " primary_status," +
                  " landmark," +
                  " postal_code," +
                  " city," +
                  " taluka," +
                  " district," +
                  " state," +
                  " country," +
                  " statusupdated_by," +
                  " latitude," +
                  " longitude, " +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.contact2address_gid + "'," +
                  "'" + values.contact_gid + "'," +
                  "'" + lsaddress_typegid + "'," +
                  "'" + lsaddress_type + "'," +
                  "'" + lsaddressline1 + "'," +
                  "'" + lsaddressline2 + "'," +
                  "'" + lsprimary_status + "'," +
                  "'" + lslandmark + "'," +
                  "'" + lspostal_code + "'," +
                  "'" + lscity + "'," +
                  "'" + lstaluka + "'," +
                  "'" + lsdistrict + "'," +
                  "'" + lsstate + "'," +
                  "'" + lscountry + "'," +
                  "'" + values.statusupdated_by + "'," +
                  "'" + lslatitude + "'," +
                  "'" + lslongitude + "'," +
                  "'" + employee_gid + "'," +
                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Address Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Address Details";
            }
        }

        public void DaGetIndividualProofTempList(string contact_gid, string employee_gid, MdlContactIdProof values)
        {
            msSQL = "select contact2idproof_gid,idproof_name,idproof_no,document_name, document_path,idproof_dob,file_no from ocs_trn_tcadcontact2idproof where " +
              " contact_gid='" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactidproof_list = new List<contactidproof_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactidproof_list.Add(new contactidproof_list
                    {
                        contact2idproof_gid = (dr_datarow["contact2idproof_gid"].ToString()),
                        idproof_name = (dr_datarow["idproof_name"].ToString()),
                        idproof_no = (dr_datarow["idproof_no"].ToString()),
                        idproof_dob = (dr_datarow["idproof_dob"].ToString()),
                        file_no = (dr_datarow["file_no"].ToString()),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                        //document_path = (HttpContext.Current.Server.MapPath(dr_datarow["document_path"].ToString())),
                    });

                    values.contactidproof_list = getcontactidproof_list;
                }
                dt_datatable.Dispose();
            }

        }

        public void DaGetIndividualDocTempList(string contact_gid, string employee_gid, MdlContactDocument values)
        {
            msSQL = " select contact2document_gid,document_name,document_title,document_path,migration_flag, " +
                    " documenttype_name from ocs_trn_tcadcontact2document " +
                    " where contact_gid='" + employee_gid + "' or contact_gid = '" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<uploadindividualdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new uploadindividualdoc_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        contact2document_gid = dt["contact2document_gid"].ToString(),
                        documenttype_name = dt["documenttype_name"].ToString()
                    });
                    values.uploadindividualdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public bool DaUpdateIndividual(string employee_gid, MdlMstContact values)
        {

            msSQL = " select a.individualdocument_gid from ocs_mst_tindividualdocument a" +
                   " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                   " where a.documenttypes_gid = 'DOCT2022010611' and " +
                   " status = 'Y' and  b.program_gid ='" + values.program_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmasterdocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmasterdocument_list.Add(dr_datarow["individualdocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            msSQL = " select distinct(a.individualdocument_gid) " +
                    " from ocs_trn_tcadcontact2document a where a.documenttype_gid = 'DOCT2022010611' and " +
            "  (contact_gid='" + values.contact_gid + "' or contact_gid = '" + employee_gid + "')";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gettransactiondocument_list = new List<string>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gettransactiondocument_list.Add(dr_datarow["individualdocument_gid"].ToString());
                }
            }
            dt_datatable.Dispose();

            var set1 = new HashSet<string>(getmasterdocument_list);
            var set2 = new HashSet<string>(gettransactiondocument_list);

            if (set1.SetEquals(set2) == false)
            {
                values.status = false;
                values.message = "Upload All KYC Documents";
                return false;
            }

            msSQL = "select contact2mobileno_gid from ocs_trn_tcadcontact2mobileno where (contact_gid='" + employee_gid + "' or  contact_gid='" + values.contact_gid + "') and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Mobile Number ";
                return false;
            }
            objODBCDatareader.Close();

            msSQL = "select contact2email_gid from ocs_trn_tcadcontact2email where contact_gid='" + employee_gid + "' or  contact_gid='" + values.contact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Email Address";
                return false;
            }
            objODBCDatareader.Close();
            msSQL = "select contact2address_gid from ocs_trn_tcadcontact2address where contact_gid='" + employee_gid + "' or contact_gid='" + values.contact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                values.status = false;
                values.message = "Add Primary Address";
                return false;
            }

            msSQL = "select pan_status from ocs_trn_tcadcontact where contact_gid='" + values.contact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (values.pan_status == "Customer Submitting PAN")
            {
                msSQL = "delete from ocs_trn_tcadcontact2panform60 where contact_gid='" + values.contact_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            objODBCDatareader.Close();

            msSQL = " select pan_status,pan_no,aadhar_no,first_name,middle_name,last_name,individual_dob,age,gender_gid,gender_name,designation_gid,designation_name," +
                        " educationalqualification_gid,educationalqualification_name,main_occupation,annual_income,monthly_income," +
                        " pep_status,pepverified_date,maritalstatus_gid,maritalstatus_name,stakeholdertype_gid,stakeholder_type," +
                        " father_firstname,father_middlename,father_lastname,father_dob,father_age," +
                        " mother_firstname,mother_middlename,mother_lastname,mother_dob,mother_age," +
                        " spouse_firstname,spouse_middlename,spouse_lastname,spouse_dob,spouse_age," +
                        " ownershiptype_gid,ownershiptype_name,residencetype_gid,residencetype_name,currentresidence_years,branch_distance," +
                        " propertyholder_gid, propertyholder_name, incometype_gid, incometype_name, previouscrop, prposedcrop,institution_gid,institution_name," +
                        " group_gid, group_name, profile, urn_status, urn, fathernominee_status, mothernominee_status, spousenominee_status, othernominee_status," +
                        " relationshiptype, nomineefirst_name, nominee_middlename, nominee_lastname, nominee_dob, nominee_age, totallandinacres, cultivatedland," +
                         " nearsamunnatiabranch_gid,nearsamunnatiabranch_name,physicalstatus_gid,physicalstatus_name,internalrating_gid,internalrating_name " +
                        " from ocs_trn_tcadcontact where contact_gid='" + values.contact_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                lspan_status = objODBCDatareader["pan_status"].ToString();
                lspan_no = objODBCDatareader["pan_no"].ToString();
                lsaadhar_no = objODBCDatareader["aadhar_no"].ToString();
                lsfirst_name = objODBCDatareader["first_name"].ToString();
                lsmiddle_name = objODBCDatareader["middle_name"].ToString();
                lslast_name = objODBCDatareader["last_name"].ToString();
                lsindividual_dob = objODBCDatareader["individual_dob"].ToString();
                lsage = objODBCDatareader["age"].ToString();

                lsgender_gid = objODBCDatareader["gender_gid"].ToString();
                lsgender_name = objODBCDatareader["gender_name"].ToString();
                lsdesignation_gid = objODBCDatareader["designation_gid"].ToString();
                lsdesignation_name = objODBCDatareader["designation_name"].ToString();
                lseducationalqualification_gid = objODBCDatareader["educationalqualification_gid"].ToString();
                lseducationalqualification_name = objODBCDatareader["educationalqualification_name"].ToString();

                lsmain_occupation = objODBCDatareader["main_occupation"].ToString();
                lsannual_income = objODBCDatareader["annual_income"].ToString();
                lsmonthly_income = objODBCDatareader["monthly_income"].ToString();
                lspep_status = objODBCDatareader["pep_status"].ToString();
                lspepverified_date = objODBCDatareader["pepverified_date"].ToString();

                lsmaritalstatus_gid = objODBCDatareader["maritalstatus_gid"].ToString();
                lsmaritalstatus_name = objODBCDatareader["maritalstatus_name"].ToString();
                lsstakeholdertype_gid = objODBCDatareader["stakeholdertype_gid"].ToString();
                lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();

                lsfather_firstname = objODBCDatareader["father_firstname"].ToString();
                lsfather_middlename = objODBCDatareader["father_middlename"].ToString();
                lsfather_lastname = objODBCDatareader["father_lastname"].ToString();
                lsfather_dob = objODBCDatareader["father_dob"].ToString();
                lsfather_age = objODBCDatareader["father_age"].ToString();

                lsmother_firstname = objODBCDatareader["mother_firstname"].ToString();
                lsmother_middlename = objODBCDatareader["mother_middlename"].ToString();
                lsmother_lastname = objODBCDatareader["mother_lastname"].ToString();
                lsmother_dob = objODBCDatareader["mother_dob"].ToString();
                lsmother_age = objODBCDatareader["mother_age"].ToString();

                lsspouse_firstname = objODBCDatareader["spouse_firstname"].ToString();
                lsspouse_middlename = objODBCDatareader["spouse_middlename"].ToString();
                lsspouse_lastname = objODBCDatareader["spouse_lastname"].ToString();
                lsspouse_dob = objODBCDatareader["spouse_dob"].ToString();
                lsspouse_age = objODBCDatareader["spouse_age"].ToString();

                lsownershiptype_gid = objODBCDatareader["ownershiptype_gid"].ToString();
                lsownershiptype_name = objODBCDatareader["ownershiptype_name"].ToString();
                lsresidencetype_gid = objODBCDatareader["residencetype_gid"].ToString();
                lsresidencetype_name = objODBCDatareader["residencetype_name"].ToString();
                lscurrentresidence_years = objODBCDatareader["currentresidence_years"].ToString();
                lsbranch_distance = objODBCDatareader["branch_distance"].ToString();

                lsresidencetype_gid = objODBCDatareader["residencetype_gid"].ToString();
                lsresidencetype_name = objODBCDatareader["residencetype_name"].ToString();
                lscurrentresidence_years = objODBCDatareader["currentresidence_years"].ToString();
                lsbranch_distance = objODBCDatareader["branch_distance"].ToString();

                lspropertyholder_gid = objODBCDatareader["propertyholder_gid"].ToString();
                lspropertyholder_name = objODBCDatareader["propertyholder_name"].ToString();
                lsincometype_gid = objODBCDatareader["incometype_gid"].ToString();
                lsincometype_name = objODBCDatareader["incometype_name"].ToString();

                lsgroup_gid = objODBCDatareader["group_gid"].ToString();
                lsgroup_name = objODBCDatareader["group_name"].ToString();
                lsprofile = objODBCDatareader["profile"].ToString();
                lsurn_status = objODBCDatareader["urn_status"].ToString();
                lsurn = objODBCDatareader["urn"].ToString();
                lsfathernominee_status = objODBCDatareader["fathernominee_status"].ToString();
                lsmothernominee_status = objODBCDatareader["mothernominee_status"].ToString();
                lsspousenominee_status = objODBCDatareader["spousenominee_status"].ToString();
                lsothernominee_status = objODBCDatareader["othernominee_status"].ToString();
                lsrelationshiptype = objODBCDatareader["relationshiptype"].ToString();
                lsnomineefirst_name = objODBCDatareader["nomineefirst_name"].ToString();
                lsnominee_middlename = objODBCDatareader["nominee_middlename"].ToString();
                lsnominee_lastname = objODBCDatareader["nominee_lastname"].ToString();
                lsnominee_dob = objODBCDatareader["nominee_dob"].ToString();
                lsnominee_age = objODBCDatareader["nominee_age"].ToString();
                lstotallandinacres = objODBCDatareader["totallandinacres"].ToString();
                lscultivatedland = objODBCDatareader["cultivatedland"].ToString();
                lspreviouscrop = objODBCDatareader["previouscrop"].ToString();
                lsprposedcrop = objODBCDatareader["prposedcrop"].ToString();
                lsinstitution_gid = objODBCDatareader["institution_gid"].ToString();
                lsinstitution_name = objODBCDatareader["institution_name"].ToString();
                lsnearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                lsnearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                lsphysicalstatus_gid = objODBCDatareader["physicalstatus_gid"].ToString();
                lsphysicalstatus_name = objODBCDatareader["physicalstatus_name"].ToString();
                lsinternalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                lsinternalrating_name = objODBCDatareader["institution_name"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadcontact set " +
                        " pan_status='" + values.pan_status + "'," +
                        " pan_no='" + values.pan_no + "'," +
                        " aadhar_no='" + values.aadhar_no + "',";
                if (values.first_name == "" || values.first_name == null)
                {

                }
                else
                {
                    msSQL += " first_name='" + values.first_name.Replace("'", "") + "',";
                }
                if (values.middle_name == "" || values.middle_name == null)
                {

                }
                else
                {
                    msSQL += " middle_name='" + values.middle_name.Replace("'", "") + "',";
                }
                if (values.last_name == "" || values.last_name == null)
                {

                }
                else
                {
                    msSQL += " last_name='" + values.last_name.Replace("'", "") + "',";
                }
                msSQL += " stakeholdertype_gid='" + values.stakeholdertype_gid + "'," +
                             " stakeholder_type='" + values.stakeholder_type + "'," +
                             " individual_dob='" + values.individual_dob + "'," +
                           " age='" + values.age + "'," +
                           " gender_gid='" + values.gender_gid + "'," +
                           " gender_name='" + values.gender_name + "'," +
                           " designation_gid='" + values.designation_gid + "'," +
                           " designation_name='" + values.designation_name + "'," +
                           " educationalqualification_gid='" + values.educationalqualification_gid + "'," +
                           " educationalqualification_name='" + values.educationalqualification_name + "'," +
                           " main_occupation='" + values.main_occupation + "'," +
                           " annual_income='" + values.annual_income + "'," +
                           " monthly_income='" + values.monthly_income + "'," +
                           " pep_status='" + values.pep_status + "',";
                if (Convert.ToDateTime(values.pepverifieddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                {

                }
                else
                {
                    msSQL += " pepverified_date='" + Convert.ToDateTime(values.pepverifieddate).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                msSQL += " user_type='" + values.user_type + "'," +
                         " maritalstatus_gid='" + values.maritalstatus_gid + "'," +
                         " maritalstatus_name='" + values.maritalstatus_name + "',";
                if (values.father_firstname == "" || values.father_firstname == null)
                {

                }
                else
                {
                    msSQL += " father_firstname='" + values.father_firstname.Replace("'", "") + "',";
                }
                if (values.father_middlename == "" || values.father_middlename == null)
                {

                }
                else
                {
                    msSQL += " father_middlename='" + values.father_middlename.Replace("'", "") + "',";
                }
                if (values.father_lastname == "" || values.father_lastname == null)
                {

                }
                else
                {
                    msSQL += " father_lastname='" + values.father_lastname.Replace("'", "") + "',";
                }
                msSQL += " father_dob='" + values.father_dob + "'," +
                         " father_age='" + values.father_age + "',";
                if (values.mother_firstname == "" || values.mother_firstname == null)
                {

                }
                else
                {
                    msSQL += " mother_firstname='" + values.mother_firstname.Replace("'", "") + "',";
                }
                if (values.mother_middlename == "" || values.mother_middlename == null)
                {

                }
                else
                {
                    msSQL += " mother_middlename='" + values.mother_middlename.Replace("'", "") + "',";
                }
                if (values.mother_lastname == "" || values.mother_lastname == null)
                {

                }
                else
                {
                    msSQL += " mother_lastname='" + values.mother_lastname.Replace("'", "") + "',";
                }
                msSQL += " mother_dob='" + values.mother_dob + "'," +
                         " mother_age='" + values.mother_age + "',";
                if (values.spouse_firstname == "" || values.spouse_firstname == null)
                {

                }
                else
                {
                    msSQL += " spouse_firstname='" + values.spouse_firstname.Replace("'", "") + "',";
                }
                if (values.spouse_middlename == "" || values.spouse_middlename == null)
                {

                }
                else
                {
                    msSQL += " spouse_middlename='" + values.spouse_middlename.Replace("'", "") + "',";
                }
                if (values.spouse_lastname == "" || values.spouse_lastname == null)
                {

                }
                else
                {
                    msSQL += " spouse_lastname='" + values.spouse_lastname.Replace("'", "") + "',";
                }
                msSQL += " spouse_dob='" + values.spouse_dob + "'," +
                         " spouse_age='" + values.spouse_age + "'," +
                       " ownershiptype_gid='" + values.ownershiptype_gid + "'," +
                       " ownershiptype_name='" + values.ownershiptype_name + "'," +
                       " propertyholder_gid='" + values.propertyholder_gid + "'," +
                       " propertyholder_name='" + values.propertyholder_name + "'," +
                       " residencetype_gid='" + values.residencetype_gid + "'," +
                       " residencetype_name='" + values.residencetype_name + "'," +
                       " incometype_gid='" + values.incometype_gid + "'," +
                       " incometype_name='" + values.incometype_name + "'," +
                       " currentresidence_years='" + values.currentresidence_years + "'," +
                       " branch_distance='" + values.branch_distance + "'," +
                        " group_gid='" + values.group_gid + "'," +
                       " group_name='" + values.group_name + "'," +
                       " profile='" + values.profile + "'," +
                       " urn_status='" + values.urn_status + "'," +
                       " urn='" + values.urn + "'," +
                       " fathernominee_status='" + values.fathernominee_status + "'," +
                       " mothernominee_status='" + values.mothernominee_status + "'," +
                       " spousenominee_status='" + values.spousenominee_status + "'," +
                       " othernominee_status='" + values.othernominee_status + "'," +
                       " relationshiptype='" + values.relationshiptype + "',";
                if (values.nomineefirst_name == "" || values.nomineefirst_name == null)
                {

                }
                else
                {
                    msSQL += " nomineefirst_name='" + values.nomineefirst_name.Replace("'", "") + "',";
                }
                if (values.nominee_middlename == "" || values.nominee_middlename == null)
                {

                }
                else
                {
                    msSQL += " nominee_middlename='" + values.nominee_middlename.Replace("'", "") + "',";
                }
                if (values.nominee_lastname == "" || values.nominee_lastname == null)
                {

                }
                else
                {
                    msSQL += " nominee_lastname='" + values.nominee_lastname.Replace("'", "") + "',";
                }

                msSQL += " nominee_dob='" + values.nominee_dob + "'," +
                       " nominee_age='" + values.nominee_age + "'," +
                       " totallandinacres='" + values.totallandinacres + "'," +
                       " cultivatedland='" + values.cultivatedland + "'," +
                       " previouscrop='" + values.previouscrop + "'," +
                       " prposedcrop='" + values.prposedcrop + "'," +
                       " institution_gid='" + values.institution_gid + "'," +
                       " institution_name='" + values.institution_name.Replace("'", "\\'") + "'," +
                       " nearsamunnatiabranch_gid ='" + values.nearsamunnatiabranch_gid + "'," +
                       " nearsamunnatiabranch_name ='" + values.nearsamunnatiabranch_name + "'," +
                       " physicalstatus_gid ='" + values.physicalstatus_gid + "'," +
                       " physicalstatus_name ='" + values.physicalstatus_name + "'," +
                       " internalrating_gid ='" + values.internalrating_gid + "'," +
                       " internalrating_name ='" + values.internalrating_name + "'," +
                       " updated_by='" + employee_gid + "'," +
                       " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where contact_gid='" + values.contact_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                objODBCDatareader.Close();

                if (mnResult != 0)
                {
                    if (values.pan_status == "Customer Submitting Form 60")
                    {
                        matchCount1 = 0;
                        matchCount2 = 0;

                        msSQL = " select panabsencereason from ocs_trn_tcadcontact2panabsencereason" +
                               " where contact_gid='" + values.contact_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        if (dt_datatable.Rows.Count != 0)
                        {
                            values.contactpanabsencereason_list = dt_datatable.AsEnumerable().Select(row =>
                             new contactpanabsencereason_list
                             {
                                 panabsencereason = row["panabsencereason"].ToString(),
                             }
                           ).ToList();
                        }
                        dt_datatable.Dispose();

                        if (values.contactpanabsencereason_list == null)
                        {
                            foreach (string reason in values.panabsencereason_selectedlist)
                            {
                                msGetGid = objcmnfunctions.GetMasterGID("C2PR");
                                msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                                        " contact2panabsencereason_gid," +
                                        " contact_gid," +
                                        " panabsencereason," +
                                        " created_date," +
                                        " created_by)" +
                                        " VALUES(" +
                                        "'" + msGetGid + "'," +
                                        "'" + employee_gid + "'," +
                                        "'" + reason + "'," +
                                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                        "'" + employee_gid + "')";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                        }
                        else
                        {
                            for (var i = 0; i < values.panabsencereason_selectedlist.Count; i++)
                            {
                                for (var j = 0; j < values.contactpanabsencereason_list.Count; j++)
                                {
                                    if (values.panabsencereason_selectedlist[i] == values.contactpanabsencereason_list[j].panabsencereason)
                                    {
                                        matchCount1++;
                                    }
                                }
                                if (matchCount1 == 0)
                                {
                                    msGetGid = objcmnfunctions.GetMasterGID("C2PR");
                                    msSQL = " INSERT INTO ocs_trn_tcadcontact2panabsencereason(" +
                                            " contact2panabsencereason_gid," +
                                            " contact_gid," +
                                            " panabsencereason," +
                                            " created_date," +
                                            " created_by)" +
                                            " VALUES(" +
                                            "'" + msGetGid + "'," +
                                            "'" + employee_gid + "'," +
                                            "'" + values.panabsencereason_selectedlist[i] + "'," +
                                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                            "'" + employee_gid + "')";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount1 = 0;
                            }

                            for (var i = 0; i < values.contactpanabsencereason_list.Count; i++)
                            {
                                for (var j = 0; j < values.panabsencereason_selectedlist.Count; j++)
                                {
                                    if (values.contactpanabsencereason_list[i].panabsencereason == values.panabsencereason_selectedlist[j])
                                    {
                                        matchCount2++;
                                    }
                                }
                                if (matchCount2 == 0)
                                {
                                    msSQL = "delete from ocs_trn_tcadcontact2panabsencereason where panabsencereason='" + values.contactpanabsencereason_list[i].panabsencereason + "' and contact_gid = '" + values.contact_gid + "'";
                                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                }
                                matchCount2 = 0;
                            }
                        }
                    }
                    msGetGid = objcmnfunctions.GetMasterGID("CTUL");

                    msSQL = " insert into ocs_trn_tcadcontactupdatelog(" +
                  " contactupdatelog_gid," +
                  " contact_gid," +
                  " application_gid," +
                  " application_no," +
                  " stakeholdertype_gid," +
                  " stakeholder_type," +
                  " pan_status," +
                  " pan_no," +
                  " aadhar_no," +
                  " first_name," +
                  " middle_name," +
                  " last_name," +
                  " individual_dob," +
                  " age," +

                  " gender_gid," +
                  " gender_name," +
                  " designation_gid," +
                  " designation_name," +
                  " educationalqualification_gid," +
                  " educationalqualification_name," +

                  " main_occupation," +
                  " annual_income," +
                  " monthly_income," +
                  " pep_status," +
                  " pepverified_date," +

                  " maritalstatus_gid," +
                  " maritalstatus_name," +

                  " father_firstname," +
                  " father_middlename," +
                  " father_lastname," +
                  " father_dob," +
                  " father_age," +

                  " mother_firstname," +
                  " mother_middlename," +
                  " mother_lastname," +
                  " mother_dob," +
                  " mother_age," +

                  " spouse_firstname," +
                  " spouse_middlename," +
                  " spouse_lastname," +
                  " spouse_dob," +
                  " spouse_age," +


                  " ownershiptype_gid," +
                  " ownershiptype_name," +
                  " residencetype_gid," +
                  " residencetype_name," +

                  " propertyholder_gid," +
                  " propertyholder_name," +
                  " incometype_gid," +
                  " incometype_name," +

                  " currentresidence_years," +
                  " branch_distance," +
                   " group_gid," +
                       " group_name," +
                       " profile," +
                       " urn_status," +
                       " urn," +
                       " fathernominee_status," +
                       " mothernominee_status," +
                       " spousenominee_status," +
                       " othernominee_status," +
                       " relationshiptype," +
                       " nomineefirst_name," +
                       " nominee_middlename," +
                       " nominee_lastname," +
                       " nominee_dob," +
                       " nominee_age," +
                       " totallandinacres," +
                       " cultivatedland," +
                       " previouscrop," +
                       " prposedcrop," +
                       " institution_gid," +
                       " institution_name," +
                       " statusupdated_by," +
                       " nearsamunnatiabranch_gid," +
                   " nearsamunnatiabranch_name," +
                   " physicalstatus_gid," +
                   " physicalstatus_name," +
                   " internalrating_gid," +
                   " internalrating_name," +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.contact_gid + "'," +
                  "'" + values.application_gid + "'," +
                  "'" + values.application_no + "'," +
                  "'" + lsstakeholdertype_gid + "'," +
                  "'" + lsstakeholder_type + "'," +
                  "'" + lspan_status + "'," +
                  "'" + lspan_no + "'," +
                  "'" + lsaadhar_no + "'," +
                  "'" + lsfirst_name + "'," +
                  "'" + lsmiddle_name + "'," +
                  "'" + lslast_name + "'," +
                  "'" + lsindividual_dob + "'," +
                  "'" + lsage + "'," +

                  "'" + lsgender_gid + "'," +
                  "'" + lsgender_name + "'," +
                  "'" + lsdesignation_gid + "'," +
                  "'" + lsdesignation_name + "'," +
                  "'" + lseducationalqualification_gid + "'," +
                  "'" + lseducationalqualification_name + "'," +

                  "'" + lsmain_occupation + "'," +
                  "'" + lsannual_income + "'," +
                  "'" + lsmonthly_income + "'," +
                  "'" + lspep_status + "',";

                    if ((lspepverified_date == null) || (lspepverified_date == ""))
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(lspepverified_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }

                    msSQL += "'" + lsmaritalstatus_gid + "'," +
                      "'" + lsmaritalstatus_name + "'," +

                      "'" + lsfather_firstname + "'," +
                      "'" + lsfather_middlename + "'," +
                      "'" + lsfather_lastname + "'," +
                      "'" + lsfather_dob + "'," +
                      "'" + lsfather_age + "'," +

                       "'" + lsmother_firstname + "'," +
                       "'" + lsmother_middlename + "'," +
                       "'" + lsmother_lastname + "'," +
                       "'" + lsmother_dob + "'," +
                       "'" + lsmother_age + "'," +

                      "'" + lsspouse_firstname + "'," +
                      "'" + lsspouse_middlename + "'," +
                      "'" + lsspouse_lastname + "'," +
                      "'" + lsspouse_dob + "'," +
                      "'" + lsspouse_age + "'," +
                     "'" + lsownershiptype_gid + "'," +
                     "'" + lsownershiptype_name + "'," +
                     "'" + lsresidencetype_gid + "'," +
                     "'" + lsresidencetype_name + "'," +
                     "'" + lspropertyholder_gid + "'," +
                     "'" + lspropertyholder_name + "'," +
                     "'" + lsincometype_gid + "'," +
                     "'" + lsincometype_name + "'," +
                     "'" + lscurrentresidence_years + "'," +
                     "'" + lsbranch_distance + "'," +
                     "'" + lsgroup_gid + "'," +
                         "'" + lsgroup_name + "'," +
                         "'" + lsprofile + "'," +
                         "'" + lsurn_status + "'," +
                         "'" + lsurn + "'," +
                         "'" + lsfathernominee_status + "'," +
                         "'" + lsmothernominee_status + "'," +
                         "'" + lsspousenominee_status + "'," +
                         "'" + lsothernominee_status + "'," +
                         "'" + lsrelationshiptype + "'," +
                       "'" + lsnomineefirst_name + "'," +
                       "'" + lsnominee_middlename + "'," +
                       "'" + lsnominee_lastname + "'," +
                       "'" + lsnominee_dob + "'," +
                             "'" + lsnominee_age + "'," +
                             "'" + lstotallandinacres + "'," +
                             "'" + lscultivatedland + "'," +
                             "'" + lspreviouscrop + "'," +
                             "'" + lsprposedcrop + "'," +
                         "'" + lsinstitution_gid + "',";
                    if (lsinstitution_name == null || lsinstitution_name == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + lsinstitution_name.Replace("'", "\\'") + "',";
                    }
                    msSQL += "'" + values.statusupdated_by + "'," +
                          "'" + lsnearsamunnatiabranch_gid + "'," +
                      "'" + lsnearsamunnatiabranch_name + "'," +
                      "'" + lsphysicalstatus_gid + "'," +
                      "'" + lsphysicalstatus_name + "'," +
                      "'" + lsinternalrating_gid + "'," +
                      "'" + lsinternalrating_name + "'," +
                         "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //Updates
                    msSQL = "update ocs_trn_tcadcontact2mobileno set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2email set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2address set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2idproof set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2panform60 set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2panabsencereason set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2equipment set contact_gid='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "update ocs_trn_tcadcontact2livestock set contact_gid='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = "select individualdocument_gid,contact2document_gid from ocs_trn_tcadcontact2document where contact_gid='" + employee_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                        string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                        msSQL = " select individualdocument_gid,documenttypes_gid,documenttype_name,individualdocument_name,covenant_type " +
                             " from ocs_mst_tindividualdocument where individualdocument_gid='" + dt["individualdocument_gid"].ToString() + "'";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                            lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                            lscompanydocument_name = objODBCDatareader["individualdocument_name"].ToString();
                            lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                        }
                        objODBCDatareader.Close();
                        msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                                " documentcheckdtl_gid," +
                                " application_gid," +
                                " credit_gid, " +
                                " individualdocument_gid, " +
                                 " documentuploaded_gid, " +
                                " documenttype_gid," +
                            " documenttype_code," +
                            " documenttype_name," +
                            " covenant_type, " +
                            " tagged_by, " +
                            " created_date," +
                            " created_by)" +
                            " VALUES(" +
                            "'" + msGetdefDocchecklistGID + "'," +
                            "'" + values.application_gid + "'," +
                            "'" + values.contact_gid + "'," +
                            "'" + dt["individualdocument_gid"].ToString() + "'," +
                            "'" + dt["contact2document_gid"].ToString() + "'," +
                            "'" + lsdocumenttype_gid + "'," +
                            "'" + lsdocumenttype_name + "'," +
                            "'" + lscompanydocument_name.Replace("'", "") + "'," +
                            "'" + lscovenant_type + "'," +
                            "'N'," +
                            "current_timestamp," +
                            "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (lscovenant_type == "Y")
                        {
                            string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                            msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                           " covenantdocumentcheckdtl_gid," +
                           " application_gid," +
                           " credit_gid," +
                           " individualdocument_gid," +
                            " documentuploaded_gid, " +
                           " documenttype_gid," +
                           " documenttype_code," +
                           " documenttype_name," +
                           " covenant_type, " +
                           " tagged_by, " +
                           " created_date," +
                           " created_by)" +
                           " VALUES(" +
                           "'" + msGetDocchecklistGID + "'," +
                           "'" + values.application_gid + "'," +
                           "'" + values.contact_gid + "'," +
                           "'" + dt["individualdocument_gid"].ToString() + "'," +
                           "'" + dt["contact2document_gid"].ToString() + "'," +
                           "'" + lsdocumenttype_gid + "'," +
                           "'" + lsdocumenttype_name + "'," +
                           "'" + lscompanydocument_name.Replace("'", "") + "'," +
                           "'" + lscovenant_type + "'," +
                           "'N'," +
                           "current_timestamp," +
                           "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                    }
                    dt_datatable.Dispose();

                    DaMstScannedDocument objvalues = new DaMstScannedDocument();
                    objvalues.DaGroupDocChecklistinfo(values.application_gid, values.contact_gid, employee_gid);

                    msSQL = "update ocs_trn_tcadcontact2document set contact_gid ='" + values.contact_gid + "' where contact_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        msSQL = "select stakeholder_type from ocs_trn_tcadcontact where contact_gid='" + values.contact_gid + "'";
                        string lsstakeholders_type = objdbconn.GetExecuteScalar(msSQL);

                        if (lsstakeholders_type == "Applicant" || lsstakeholders_type == "Borrower")
                        {
                            msSQL = "select mobile_no from ocs_trn_tcadcontact2mobileno where contact_gid='" + values.contact_gid + "' and primary_status='yes'";
                            string lsmobileno = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = "select email_address from ocs_trn_tcadcontact2email where contact_gid='" + values.contact_gid + "' and primary_status='yes'";
                            lsemail_address = objdbconn.GetExecuteScalar(msSQL);

                            msSQL = "select concat(first_name,middle_name,last_name) as customer_name,contact_gid,urn,stakeholder_type from ocs_trn_tcadcontact where" +
                                    " application_gid='" + values.application_gid + "' and stakeholder_type in ('Applicant','Borrower')";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                lscustomer_name = objODBCDatareader["customer_name"].ToString();
                                lsurn = objODBCDatareader["urn"].ToString();
                                lsstakeholder_type = objODBCDatareader["stakeholder_type"].ToString();

                                //Region
                                msSQL = "select state from ocs_trn_tcadcontact2address where primary_status='Yes' and contact_gid='" + objODBCDatareader["contact_gid"].ToString() + "'";
                                lsregion = objdbconn.GetExecuteScalar(msSQL);

                                msSQL = " update ocs_trn_tcadapplication set customer_name='" + lscustomer_name.Replace("'", "\\'") + "'," +
                                        " mobile_no='" + lsmobile_no + "'," +
                                        " email_address='" + lsemail_address + "'," +
                                        " region='" + lsregion + "'," +
                                        " customer_urn='" + lsurn + "'," +
                                        " applicant_type='Individual'," +
                                        " updated_by='" + employee_gid + "'," +
                                        " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                                        " where application_gid='" + values.application_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            }
                            objODBCDatareader.Close();

                            //CadApplication table update and bank alert urn mismatch scenario start

                            string lsdepartmentgid = objdbconn.GetExecuteScalar("select businessunit_gid from osd_mst_tbusinessunit where businessunit_name='Business Process'");

                            msSQL = "select a.* from ocs_trn_tcadapplication a " +
                                    "where a.customer_urn = '" + lsurn + "' order by a.created_date desc limit 1";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {

                                msSQL = " select bankalert2notallocated_gid,ecollectionresponsefromsambtrn_gid,ecollectionresponsefromsambtrndtls_gid,kotakAPI_flag,ticketref_no,email_to,email_from," +
                                    " from_mailaddress,date_format(email_date,'%Y-%m-%d %h:%i:%s') as email_date,cc,bcc," +
                                    " email_subject,email_content,mailheader,document_name,document_path " +
                                    " from osd_trn_tbankalert2notallocated where " +
                                    " customer_urn='" + lsurn + "' and reason='URN Mismatch' and kotakAPI_flag='Y'";

                                dt_datatable = objdbconn.GetDataTable(msSQL);
                                if (dt_datatable.Rows.Count != 0)
                                {
                                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                                    {

                                        string MSGETGID = objcmnfunctions.GetMasterGID("ALDB");
                                        msSQL = "insert into osd_trn_tbankalert2allocated (" +
                                                  " bankalert2allocated_gid," +
                                                  " ecollectionresponsefromsambtrn_gid," +
                                                  " ecollectionresponsefromsambtrndtls_gid," +
                                                  " customer_name," +
                                                  " customer_urn," +
                                                  " kotakAPI_flag," +
                                                  " customer_gid," +
                                                  " relationshipmanager_name," +
                                                  " relationshipmanager_gid," +
                                                  " ticketref_no," +
                                                  " email_date," +
                                                  " created_by," +
                                                  " created_date," +
                                                " relationshipmanagerlevel_name, relationshipmanagerlevel_gid," +
                                                " drmlevel_gid, drmlevel_name, " +
                                                " clustermanagerlevel_gid, clustermanagerlevel_name, " +
                                                " zonalheadlevel_name, zonalheadlevel_gid," +
                                                " regionalheadlevel_name, regionalheadlevel_gid," +
                                                " businessheadlevel_name, businessheadlevel_gid," +
                                                    " mapping_to,department_gid,department_name) values(" +
                                                  " '" + MSGETGID + "'," +
                                                  " '" + dr_datarow["ecollectionresponsefromsambtrn_gid"].ToString() + "'," +
                                                  " '" + dr_datarow["ecollectionresponsefromsambtrndtls_gid"].ToString() + "'," +
                                                  " '" + lscustomer_name + "'," +
                                                  " '" + values.urn + "'," +
                                                  " '" + dr_datarow["kotakAPI_flag"].ToString() + "'," +
                                                  " '" + lscustomer_name + "'," +
                                                  " '" + objODBCDatareader["relationshipmanager_name"].ToString() + "'," +
                                                  " '" + objODBCDatareader["relationshipmanager_gid"].ToString() + "'," +
                                                  " '" + dr_datarow["ticketref_no"].ToString() + "'," +
                                                  " '" + dr_datarow["email_date"].ToString() + "'," +
                                                  " 'Re-Allocated from URN Mismatch'," +
                                                  " '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                                    "'" + objODBCDatareader["relationshipmanager_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["relationshipmanager_gid"].ToString() + "'," +
                                                    "'" + objODBCDatareader["drm_gid"].ToString() + "'," +
                                                    "'" + objODBCDatareader["drm_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["clustermanager_gid"].ToString() + "'," +
                                                    "'" + objODBCDatareader["clustermanager_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["zonalhead_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["zonalhead_gid"].ToString() + "'," +
                                                    "'" + objODBCDatareader["regionalhead_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["regionalhead_gid"].ToString() + "'," +
                                                    "'" + objODBCDatareader["businesshead_name"].ToString() + "'," +
                                                    "'" + objODBCDatareader["businesshead_gid"].ToString() + "'," +
                                                    "'RM Enabled','" + lsdepartmentgid + "','Business Process')";
                                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                        if (mnResult == 1)
                                        {
                                            msSQL = "delete from osd_trn_tbankalert2notallocated where bankalert2notallocated_gid = '" + dr_datarow["bankalert2notallocated_gid"].ToString() + "'";
                                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                                        }
                                    }
                                }
                                dt_datatable.Dispose();
                            }
                            objODBCDatareader.Close();
                            //CadApplication table update and bank alert urn mismatch scenario end
                            values.status = true;
                            values.message = "Individual Details Updated Successfully";
                        }
                        else
                        {
                        }
                    }
                    values.status = true;
                    values.message = "Individual Details Updated Successfully";
                }
                return true;
            }
            catch
            {
                values.status = false;
                values.message = "Error Occured While Updating Institution";
                return false;
            }
        }

        public void DaGetGroupTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2address where group_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadgroup2bank where group_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadgroup2document where group_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadgroup2equipment where group_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadgroup2livestock where group_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            values.status = true;
        }

        public void DaGetGroupAddressList(string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select group2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude, landmark," +
                    " postal_code from ocs_trn_tcadgroup2address where group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        group2address_gid = (dr_datarow["group2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostGroupAddressDetail(string employee_gid, string user_gid, MdlMstAddressDetails values)
        {
            msSQL = "select primary_status from ocs_trn_tcadgroup2address where primary_status='Yes' and (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')";
            string lsprimary_status = objdbconn.GetExecuteScalar(msSQL);
            if (lsprimary_status == (values.primary_status))
            {
                values.status = false;
                values.message = "Already Primary Address Added";
                return false;
            }
            msSQL = "select group2address_gid from ocs_trn_tcadgroup2address where addresstype_name='" + values.address_type + "' and (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Address Type Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("G2AD");
            msSQL = " insert into ocs_trn_tcadgroup2address(" +
                    " group2address_gid," +
                    " group_gid," +
                    " addresstype_gid," +
                    " addresstype_name," +
                    " addressline1," +
                    " addressline2," +
                    " primary_status," +
                    " landmark," +
                    " postal_code," +
                    " city," +
                    " taluka," +
                    " district," +
                    " state," +
                    " country," +
                    " latitude," +
                    " longitude," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.address_typegid + "'," +
                    "'" + values.address_type + "'," +
                    "'" + values.addressline1 + "'," +
                    "'" + values.addressline2 + "'," +
                    "'" + values.primary_status + "'," +
                    "'" + values.landmark + "'," +
                    "'" + values.postal_code + "'," +
                    "'" + values.city + "'," +
                    "'" + values.taluka + "'," +
                    "'" + values.district + "'," +
                    "'" + values.state + "'," +
                    "'" + values.country + "'," +
                    "'" + values.latitude + "'," +
                    "'" + values.longitude + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Address Details Added Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }

        }

        public void DaDeleteGroupAddressDetail(string group2address_gid, string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2address where group2address_gid='" + group2address_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadgroup2addressupdatelog where group2address_gid='" + group2address_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Address Deatils Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public bool DaPostGroupBankDetail(string employee_gid, string user_gid, MdlMstBankDetails values)
        {

            msSQL = "select group2bank_gid from ocs_trn_tcadgroup2bank where ifsc_code='" + values.ifsc_code + "' and (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already Bank Added";
                return false;
            }
            objODBCDatareader.Close();
            msGetGid = objcmnfunctions.GetMasterGID("G2BK");
            msSQL = " insert into ocs_trn_tcadgroup2bank(" +
                    " group2bank_gid," +
                    " group_gid," +
                    " ifsc_code," +
                    " bank_accountno," +
                    " accountholder_name," +
                    " bank_name," +
                    " bank_branch," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.ifsc_code + "'," +
                    "'" + values.bank_accountno + "'," +
                    "'" + values.accountholder_name + "'," +
                    "'" + values.bank_name + "'," +
                    "'" + values.bank_branch + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Bank Details Added Successfully";
                return true;
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
                return false;
            }

        }

        public void DaDeleteGroupBankDetail(string group2bank_gid, string employee_gid, MdlMstBankDetails values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2bank where group2bank_gid='" + group2bank_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadgroup2bankupdatelog where group2bank_gid='" + group2bank_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Bank Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaGetGroupBankList(string employee_gid, MdlMstBankDetails values)
        {
            msSQL = "  select group2bank_gid,ifsc_code,bank_accountno, accountholder_name, bank_name, bank_branch " +
                    "  from ocs_trn_tcadgroup2bank where group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbank_list = new List<mstbank_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbank_list.Add(new mstbank_list
                    {
                        group2bank_gid = (dr_datarow["group2bank_gid"].ToString()),
                        ifsc_code = (dr_datarow["ifsc_code"].ToString()),
                        bank_accountno = (dr_datarow["bank_accountno"].ToString()),
                        accountholder_name = (dr_datarow["accountholder_name"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        bank_branch = (dr_datarow["bank_branch"].ToString()),
                    });
                }
                values.mstbank_list = getmstbank_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaGroupDocumentUpload(HttpRequest httpRequest, uploaddocument objfilename, string employee_gid)
        {
            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lsgroupdocument_gid = httpRequest.Form["groupdocument_gid"].ToString();
            String path = lspath;

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/GroupDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);
                        //lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Master/GroupDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                        //FileStream file = new FileStream(lspath + lsfile_gid, FileMode.Create, FileAccess.Write);
                        //ms.WriteTo(file);
                        //file.Close();
                        //ms.Close();
                        //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/GroupDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/GroupDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/GroupDocument/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("G2DO");
                        msGetDocumentGid = objcmnfunctions.GetMasterGID("GPDA");

                        msSQL = "select covenant_type from ocs_trn_tcadgroupdocument where groupdocument_gid='" + lsgroupdocument_gid + "'";
                        string lscovenant_type = objdbconn.GetExecuteScalar(msSQL);

                        msSQL = " insert into ocs_trn_tcadgroup2document( " +
                                    " group2document_gid ," +
                                    " group_gid ," +
                                    " document_gid ," +
                                    " document_title ," +
                                    " document_name ," +
                                    " document_path," +
                                    " groupdocument_gid, " +
                                    " covenant_type," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + msGetDocumentGid + "'," +
                                    "'" + lsdocument_title.Replace("'", "") + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                    "'" + lsgroupdocument_gid + "'," +
                                    "'" + lscovenant_type + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGetGroupDocumentList(string employee_gid, MdlGroupDocument values)
        {
            msSQL = " select group2document_gid,document_name,document_path,document_title from ocs_trn_tcadgroup2document " +
                                 " where group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<groupdocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new groupdocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        group2document_gid = dt["group2document_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                    });
                    values.groupdocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGroupDocumentDelete(string group2document_gid, MdlGroupDocument values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2document where group2document_gid='" + group2document_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult == 1)
            {
                msSQL = " select groupdocumentchecklist_gid from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + group2document_gid + "'";
                string lsgroupdocumentchecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsgroupdocumentchecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcaddocumentchecktls " +
                            " where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupdocumentchecklist where groupdocumentchecklist_gid='" + lsgroupdocumentchecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = " select groupcovdocumentchecklist_gid from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + group2document_gid + "'";
                string lschecklist_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lschecklist_gid != "")
                {
                    msSQL = " select count(*) as documentcount from ocs_trn_tcadcovanantdocumentcheckdtls " +
                      " where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                    string lsdocumentcount = objdbconn.GetExecuteScalar(msSQL);
                    if (lsdocumentcount == "1")
                    {
                        msSQL = "delete from ocs_trn_tcadgroupcovenantdocumentchecklist where groupcovdocumentchecklist_gid='" + lschecklist_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }

                msSQL = "delete from ocs_trn_tcadcovanantdocumentcheckdtls where documentuploaded_gid='" + group2document_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "delete from ocs_trn_tcaddocumentchecktls where documentuploaded_gid='" + group2document_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            if (mnResult != 0)
            {

                values.message = "Document Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaSubmitGroupDtlAdd(string employee_gid, MdlMstGroup values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("GRUP");

            msSQL = "select group2address_gid from ocs_trn_tcadgroup2address where group_gid='" + employee_gid + "' and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Primary Address ";
                return;
            }

            msSQL = "select group2bank_gid from ocs_trn_tcadgroup2bank where group_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Atleast one Bank detail ";
                return;
            }

            msSQL = "select group2document_gid from ocs_trn_tcadgroup2document where group_gid='" + employee_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Atleast one Document detail ";
                return;
            }

            msSQL = " insert into ocs_trn_tcadgroup(" +
                   " group_gid," +
                   " application_gid," +
                   " group_name," +
                   " date_of_formation," +
                   " group_type," +
                   " groupmember_count," +
                   " groupurn_status," +
                   " group_urn," +
                   " group_status," +
                   " male_count," +
                   " female_count," +
                   " internalrating_gid," +
                   " internalrating_name," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.application_gid + "',";

            if (values.group_name == "" || values.group_name == null)
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.group_name.Replace("'", "") + "',";
            }
            if ((values.date_of_formation == null) || (values.date_of_formation == ""))
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.date_of_formation).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL += "'" + values.group_type + "'," +
                     "'" + values.groupmember_count + "'," +
                     "'" + values.groupurn_status + "'," +
                     "'" + values.group_urn + "'," +
                     "'Completed'," +
                     "'" + values.male_count + "'," +
                     "'" + values.female_count + "'," +
                     "'" + values.internalrating_gid + "'," +
                     "'" + values.internalrating_name + "'," +
                     "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                //Updates

                msSQL = "update ocs_trn_tcadgroup2address set group_gid ='" + msGetGid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2bank set group_gid ='" + msGetGid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2equipment set group_gid ='" + msGetGid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2livestock set group_gid ='" + msGetGid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select groupdocument_gid,group2document_gid from ocs_trn_tcadgroup2document where group_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select groupdocument_gid,documenttypes_gid,documenttype_name,groupdocument_name,covenant_type " +
                           " from ocs_mst_tgroupdocument where groupdocument_gid='" + dt["groupdocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["groupdocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " groupdocument_gid, " +
                            " documentuploaded_gid, " +
                            " documenttype_gid," +
                        " documenttype_code," +
                        " documenttype_name," +
                        " covenant_type, " +
                        " tagged_by, " +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetdefDocchecklistGID + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + msGetGid + "'," +
                        "'" + dt["groupdocument_gid"].ToString() + "'," +
                        "'" + dt["group2document_gid"].ToString() + "'," +
                        "'" + lsdocumenttype_gid + "'," +
                        "'" + lsdocumenttype_name + "'," +
                        "'" + lscompanydocument_name.Replace("'", "") + "'," +
                        "'" + lscovenant_type + "'," +
                        "'N'," +
                        "current_timestamp," +
                        "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                       " covenantdocumentcheckdtl_gid," +
                       " application_gid," +
                       " credit_gid," +
                       " groupdocument_gid," +
                       " documentuploaded_gid, " +
                       " documenttype_gid," +
                       " documenttype_code," +
                       " documenttype_name," +
                       " covenant_type, " +
                       " tagged_by, " +
                       " created_date," +
                       " created_by)" +
                       " VALUES(" +
                       "'" + msGetDocchecklistGID + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + msGetGid + "'," +
                       "'" + dt["groupdocument_gid"].ToString() + "'," +
                       "'" + dt["group2document_gid"].ToString() + "'," +
                       "'" + lsdocumenttype_gid + "'," +
                       "'" + lsdocumenttype_name + "'," +
                       "'" + lscompanydocument_name.Replace("'", "") + "'," +
                       "'" + lscovenant_type + "'," +
                       "'N'," +
                       "current_timestamp," +
                       "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();

                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, msGetGid, employee_gid);

                msSQL = "update ocs_trn_tcadgroup2document set group_gid ='" + msGetGid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycifscauthentication set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_mst_tkycbankaccverification set function_gid ='" + values.application_gid + "' where function_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Group Details Submitted Sucessfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while submitting Group Details..!";
            }
        }

        public void DaGroupAddressTmpList(string employee_gid, string group_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select group2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, landmark," +
                    " postal_code from ocs_trn_tcadgroup2address where group_gid='" + group_gid + "' or group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        group2address_gid = (dr_datarow["group2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditGroupAddressDetail(string group2address_gid, MdlMstAddressDetails values)
        {
            try
            {
                msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, group_gid, group2address_gid " +
                    " from ocs_trn_tcadgroup2address where group2address_gid='" + group2address_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.address_typegid = objODBCDatareader["addresstype_gid"].ToString();
                    values.address_type = objODBCDatareader["addresstype_name"].ToString();
                    values.addressline1 = objODBCDatareader["addressline1"].ToString();
                    values.addressline2 = objODBCDatareader["addressline2"].ToString();
                    values.landmark = objODBCDatareader["landmark"].ToString();
                    values.taluka = objODBCDatareader["taluka"].ToString();
                    values.primary_status = objODBCDatareader["primary_status"].ToString();
                    values.postal_code = objODBCDatareader["postal_code"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.district = objODBCDatareader["district"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.country = objODBCDatareader["country"].ToString();
                    values.group_gid = objODBCDatareader["group_gid"].ToString();
                    values.group2address_gid = objODBCDatareader["group2address_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateGroupAddressDetail(string employee_gid, MdlMstAddressDetails values)
        {
            msSQL = "select addresstype_gid, addresstype_name, addressline1, addressline2, landmark, taluka, primary_status, postal_code, city," +
                    " district, state, country, group_gid, group2address_gid " +
                    " from ocs_trn_tcadgroup2address where group2address_gid='" + values.group2address_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsaddress_typegid = objODBCDatareader["addresstype_gid"].ToString();
                lsaddress_type = objODBCDatareader["addresstype_name"].ToString();
                lsaddressline1 = objODBCDatareader["addressline1"].ToString();
                lsaddressline2 = objODBCDatareader["addressline2"].ToString();
                lslandmark = objODBCDatareader["landmark"].ToString();
                lstaluka = objODBCDatareader["taluka"].ToString();
                lsprimary_status = objODBCDatareader["primary_status"].ToString();
                lspostal_code = objODBCDatareader["postal_code"].ToString();
                lscity = objODBCDatareader["city"].ToString();
                lsdistrict = objODBCDatareader["district"].ToString();
                lsstate = objODBCDatareader["state"].ToString();
                lscountry = objODBCDatareader["country"].ToString();
                lsgroup_gid = objODBCDatareader["group_gid"].ToString();
                lsgroup2address_gid = objODBCDatareader["group2address_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadgroup2address set " +
                         " addresstype_gid='" + values.address_typegid + "'," +
                         " addresstype_name='" + values.address_type + "'," +
                         " addressline1='" + values.addressline1 + "'," +
                         " addressline2='" + values.addressline2 + "'," +
                         " landmark='" + values.landmark + "'," +
                         " taluka='" + values.taluka + "'," +
                         " primary_status='" + values.primary_status + "'," +
                         " postal_code='" + values.postal_code + "'," +
                         " city='" + values.city + "'," +
                         " district='" + values.district + "'," +
                         " state='" + values.state + "'," +
                         " country='" + values.country + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where group2address_gid='" + values.group2address_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("GAUL");

                    msSQL = " insert into ocs_trn_tcadgroup2addressupdatelog(" +
                  " group2addressupdatelog_gid," +
                  " group2address_gid," +
                  " group_gid," +
                  " addresstype_gid," +
                  " addresstype_name," +
                  " addressline1," +
                  " addressline2," +
                  " primary_status," +
                  " landmark," +
                  " postal_code," +
                  " city," +
                  " taluka," +
                  " district," +
                  " state," +
                  " country," +
                  " statusupdated_by," +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.group2address_gid + "'," +
                  "'" + values.group_gid + "'," +
                  "'" + lsaddress_typegid + "'," +
                  "'" + lsaddress_type + "'," +
                  "'" + lsaddressline1 + "'," +
                  "'" + lsaddressline2 + "'," +
                  "'" + lsprimary_status + "'," +
                  "'" + lslandmark + "'," +
                  "'" + lspostal_code + "'," +
                  "'" + lscity + "'," +
                  "'" + lstaluka + "'," +
                  "'" + lsdistrict + "'," +
                  "'" + lsstate + "'," +
                  "'" + lscountry + "'," +
                  "'" + values.statusupdated_by + "'," +
                  "'" + employee_gid + "'," +
                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Address Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Address Details";
            }
        }

        public void DaGroupBankTmpList(string employee_gid, string group_gid, MdlMstBankDetails values)
        {
            msSQL = "  select group2bank_gid,ifsc_code,bank_accountno, accountholder_name, bank_name, bank_branch" +
                    " from ocs_trn_tcadgroup2bank where group_gid='" + group_gid + "' or group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbank_list = new List<mstbank_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbank_list.Add(new mstbank_list
                    {
                        group2bank_gid = (dr_datarow["group2bank_gid"].ToString()),
                        ifsc_code = (dr_datarow["ifsc_code"].ToString()),
                        bank_accountno = (dr_datarow["bank_accountno"].ToString()),
                        accountholder_name = (dr_datarow["accountholder_name"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        bank_branch = (dr_datarow["bank_branch"].ToString())
                    });
                }
                values.mstbank_list = getmstbank_list;
            }
            dt_datatable.Dispose();
        }

        public void DaEditGroupBankDetail(string group2bank_gid, MdlMstBankDetails values)
        {
            try
            {
                msSQL = "select ifsc_code, bank_accountno, accountholder_name, bank_name, bank_branch," +
                    " group_gid, group2bank_gid " +
                    " from ocs_trn_tcadgroup2bank where group2bank_gid='" + group2bank_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.ifsc_code = objODBCDatareader["ifsc_code"].ToString();
                    values.bank_accountno = objODBCDatareader["bank_accountno"].ToString();
                    values.accountholder_name = objODBCDatareader["accountholder_name"].ToString();
                    values.bank_name = objODBCDatareader["bank_name"].ToString();
                    values.bank_branch = objODBCDatareader["bank_branch"].ToString();
                    values.group_gid = objODBCDatareader["group_gid"].ToString();
                    values.group2bank_gid = objODBCDatareader["group2bank_gid"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaUpdateGroupBankDetail(string employee_gid, MdlMstBankDetails values)
        {
            msSQL = "select ifsc_code, bank_accountno, accountholder_name, bank_name, bank_branch," +
                    " group_gid, group2bank_gid " +
                    " from ocs_trn_tcadgroup2bank where group2bank_gid='" + values.group2bank_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsifsc_code = objODBCDatareader["ifsc_code"].ToString();
                lsbank_accountno = objODBCDatareader["bank_accountno"].ToString();
                lsaccountholder_name = objODBCDatareader["accountholder_name"].ToString();
                lsbank_name = objODBCDatareader["bank_name"].ToString();
                lsbank_branch = objODBCDatareader["bank_branch"].ToString();
                lsgroup_gid = objODBCDatareader["group_gid"].ToString();
                lsgroup2bank_gid = objODBCDatareader["group2bank_gid"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadgroup2bank set " +
                         " ifsc_code='" + values.ifsc_code + "'," +
                         " bank_accountno='" + values.bank_accountno + "'," +
                         " accountholder_name='" + values.accountholder_name + "'," +
                         " bank_name='" + values.bank_name + "'," +
                         " bank_branch='" + values.bank_branch + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where group2bank_gid='" + values.group2bank_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("GBUL");

                    msSQL = " insert into ocs_trn_tcadgroup2bankupdatelog(" +
                  " group2bankupdatelog_gid," +
                  " group2bank_gid," +
                  " group_gid," +
                  " ifsc_code," +
                  " bank_accountno," +
                  " accountholder_name," +
                  " bank_name," +
                  " bank_branch," +
                  " statusupdated_by," +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.group2bank_gid + "'," +
                  "'" + values.group_gid + "'," +
                  "'" + lsifsc_code + "'," +
                  "'" + lsbank_accountno + "'," +
                  "'" + lsaccountholder_name + "'," +
                  "'" + lsbank_name + "'," +
                  "'" + lsbank_branch + "'," +
                  "'" + values.statusupdated_by + "'," +
                  "'" + employee_gid + "'," +
                  "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Bank Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured While Updating Bank Details";
            }
        }

        public void DaGroupDocumentTmpList(string group_gid, string employee_gid, MdlGroupDocument values)
        {
            msSQL = " select group2document_gid,document_name,document_title,document_path from ocs_trn_tcadgroup2document " +
                                 " where group_gid='" + employee_gid + "' or group_gid = '" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<groupdocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new groupdocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        //document_path = (dt["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        group2document_gid = dt["group2document_gid"].ToString(),
                    });
                    values.groupdocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaUpdateGroupDtl(string employee_gid, MdlMstGroup values)
        {
            msSQL = "select group2address_gid from ocs_trn_tcadgroup2address where (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')" + " and primary_status='Yes'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Primary Address ";
                return;
            }

            msSQL = "select group2bank_gid from ocs_trn_tcadgroup2bank where group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Atleast one Bank detail ";
                return;
            }

            msSQL = "select group2document_gid from ocs_trn_tcadgroup2document where group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Add Atleast one Document detail ";
                return;
            }

            msSQL = " select group_name,date_format(date_of_formation,'%d-%m-%Y') as date_of_formation,group_type,groupmember_count,groupurn_status,group_urn,group_status" +
                       " from ocs_trn_tcadgroup where group_gid='" + values.group_gid + "'";

            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsgroup_name = objODBCDatareader["group_name"].ToString();
                lsdate_of_formation = objODBCDatareader["date_of_formation"].ToString();
                lsgroup_type = objODBCDatareader["group_type"].ToString();
                lsgroupmember_count = objODBCDatareader["groupmember_count"].ToString();
                lsgroupurn_status = objODBCDatareader["groupurn_status"].ToString();
                lsgroup_urn = objODBCDatareader["group_urn"].ToString();
                lsgroup_status = objODBCDatareader["group_status"].ToString();
            }
            objODBCDatareader.Close();

            msSQL = " update ocs_trn_tcadgroup set ";
            if (values.group_name == "" || values.group_name == null)
            {

            }
            else
            {
                msSQL += " group_name='" + values.group_name.Replace("'", "") + "',";
            }
            if (Convert.ToDateTime(values.dateofformation).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
            {

            }
            else
            {
                msSQL += " date_of_formation='" + Convert.ToDateTime(values.dateofformation).AddDays(1).ToString("yyyy-MM-dd 00:00:00") + "',";
            }
            msSQL += " group_type='" + values.group_type + "'," +
                     " groupmember_count='" + values.groupmember_count + "'," +
                     " groupurn_status='" + values.groupurn_status + "'," +
                   " group_urn='" + values.group_urn + "'," +
                   " group_status='Completed'," +
                   " internalrating_gid='" + values.internalrating_gid + "'," +
                   " internalrating_name='" + values.internalrating_name + "'," +
                   " male_count='" + values.male_count + "'," +
                   " female_count='" + values.female_count + "'," +
                   " updated_by='" + employee_gid + "'," +
                   " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                   " where group_gid='" + values.group_gid + "' ";

            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                //Updates
                msSQL = "update ocs_trn_tcadgroup2address set group_gid ='" + values.group_gid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2bank set group_gid ='" + values.group_gid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2livestock set group_gid ='" + values.group_gid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadgroup2equipment set group_gid ='" + values.group_gid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select groupdocument_gid,group2document_gid from ocs_trn_tcadgroup2document where group_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    string lscovenant_type = "", lsdocumenttype_gid = "", lsdocumenttype_name = "", lscompanydocument_name = "";

                    string msGetdefDocchecklistGID = objcmnfunctions.GetMasterGID("DOCG");
                    msSQL = " select groupdocument_gid,documenttypes_gid,documenttype_name,groupdocument_name,covenant_type " +
                           " from ocs_mst_tgroupdocument where groupdocument_gid='" + dt["groupdocument_gid"].ToString() + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        lsdocumenttype_gid = objODBCDatareader["documenttypes_gid"].ToString();
                        lsdocumenttype_name = objODBCDatareader["documenttype_name"].ToString();
                        lscompanydocument_name = objODBCDatareader["groupdocument_name"].ToString();
                        lscovenant_type = objODBCDatareader["covenant_type"].ToString();
                    }
                    objODBCDatareader.Close();
                    msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                            " documentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                            " groupdocument_gid, " +
                            " documentuploaded_gid, " +
                            " documenttype_gid," +
                        " documenttype_code," +
                        " documenttype_name," +
                        " covenant_type, " +
                        " tagged_by, " +
                        " created_date," +
                        " created_by)" +
                        " VALUES(" +
                        "'" + msGetdefDocchecklistGID + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + values.group_gid + "'," +
                        "'" + dt["groupdocument_gid"].ToString() + "'," +
                        "'" + dt["group2document_gid"].ToString() + "'," +
                        "'" + lsdocumenttype_gid + "'," +
                        "'" + lsdocumenttype_name + "'," +
                        "'" + lscompanydocument_name.Replace("'", "") + "'," +
                        "'" + lscovenant_type + "'," +
                        "'N'," +
                        "current_timestamp," +
                        "'" + employee_gid + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (lscovenant_type == "Y")
                    {
                        string msGetDocchecklistGID = objcmnfunctions.GetMasterGID("CDCL");
                        msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                       " covenantdocumentcheckdtl_gid," +
                       " application_gid," +
                       " credit_gid," +
                       " groupdocument_gid," +
                       " documentuploaded_gid, " +
                       " documenttype_gid," +
                       " documenttype_code," +
                       " documenttype_name," +
                       " covenant_type, " +
                       " tagged_by, " +
                       " created_date," +
                       " created_by)" +
                       " VALUES(" +
                       "'" + msGetDocchecklistGID + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + values.group_gid + "'," +
                       "'" + dt["groupdocument_gid"].ToString() + "'," +
                       "'" + dt["group2document_gid"].ToString() + "'," +
                       "'" + lsdocumenttype_gid + "'," +
                       "'" + lsdocumenttype_name + "'," +
                       "'" + lscompanydocument_name.Replace("'", "") + "'," +
                       "'" + lscovenant_type + "'," +
                       "'N'," +
                       "current_timestamp," +
                       "'" + employee_gid + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                    }
                }
                dt_datatable.Dispose();

                msSQL = "update ocs_trn_tcadgroup2document set group_gid ='" + values.group_gid + "' where group_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                DaMstScannedDocument objvalues = new DaMstScannedDocument();
                objvalues.DaGroupDocChecklistinfo(values.application_gid, values.group_gid, employee_gid);

                msGetGid = objcmnfunctions.GetMasterGID("CGUL");


                msSQL = " insert into ocs_trn_tcadgroupupdatelog(" +
                     " groupupdatelog_gid," +
                     " group_gid," +
                     " application_gid," +
                     " group_name," +
                     " date_of_formation," +
                     " group_type," +
                     " groupmember_count," +
                     " groupurn_status," +
                     " group_urn," +
                     " group_status," +
                     " statusupdated_by," +
                     " created_by," +
                     " created_date)" +
                     " values(" +
                     "'" + msGetGid + "'," +
                     "'" + values.group_gid + "'," +
                     "'" + values.application_gid + "'," +
                     "'" + lsgroup_name.Replace("'", "") + "'," +
                     "'" + lsdate_of_formation + "'," +
                     "'" + lsgroup_type + "'," +
                     "'" + lsgroupmember_count + "'," +
                     "'" + lsgroupurn_status + "'," +
                     "'" + lsgroup_urn + "'," +
                     "'" + lsgroup_status + "'," +
                     "'" + values.statusupdated_by + "'," +
                     "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Group Details Updated Successfully";
            }

            else
            {
                values.status = false;
                values.message = "Error Occured While Updating Group Details..!";
            }
        }

        public void DaGetProductChargesTempClear(string employee_gid, result values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2buyer where application2loan_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2loan where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2collateral where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2hypothecation where application_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcaduploadcollateraldocument where application2loan_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcaduploadhypothecationocument where application2hypothecation_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            msSQL = "delete from ocs_trn_tcadapplication2product where application2loan_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            values.status = true;
        }

        public void DaGetproductDropDown(string employee_gid, MdlProductDropDown values)
        {
            //Loan Product
            msSQL = " SELECT loanproduct_gid,loanproduct_name FROM ocs_mst_tloanproduct a" +
                       " where status='Y' order by a.loanproduct_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getloanproduct_list = new List<loanproductlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getloanproduct_list.Add(new loanproductlist
                    {
                        loanproduct_gid = (dr_datarow["loanproduct_gid"].ToString()),
                        loanproduct_name = (dr_datarow["loanproduct_name"].ToString()),
                    });
                }
                values.loanproductlist = getloanproduct_list;
            }
            dt_datatable.Dispose();
            //LoanType
            msSQL = " SELECT loantype_gid,loan_type FROM ocs_mst_tloantype a" +
                       " where status_log='Y' order by a.loantype_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getloantypelist = new List<loantypelist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getloantypelist.Add(new loantypelist
                    {
                        loantype_gid = (dr_datarow["loantype_gid"].ToString()),
                        loan_type = (dr_datarow["loan_type"].ToString()),
                    });
                }
                values.loantypelist = getloantypelist;
            }
            dt_datatable.Dispose();
            //Principal Frequency
            msSQL = " SELECT principalfrequency_gid,principalfrequency_name FROM ocs_mst_tprincipalfrequency a" +
                        " where status='Y' order by a.principalfrequency_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getprincipalfrequencylist = new List<principalfrequencylist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getprincipalfrequencylist.Add(new principalfrequencylist
                    {
                        principalfrequency_gid = (dr_datarow["principalfrequency_gid"].ToString()),
                        principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                    });
                }
                values.principalfrequencylist = getprincipalfrequencylist;
            }
            dt_datatable.Dispose();
            //Interest Frequency
            msSQL = " SELECT  interestfrequency_gid,interestfrequency_name FROM ocs_mst_tinterestfrequency a" +
                       " where status='Y' order by a.interestfrequency_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinterestfrequency = new List<interestfrequencylist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinterestfrequency.Add(new interestfrequencylist
                    {
                        interestfrequency_gid = (dr_datarow["interestfrequency_gid"].ToString()),
                        interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                    });
                }
                values.interestfrequencylist = getinterestfrequency;
            }
            dt_datatable.Dispose();

            //Buyer
            msSQL = " SELECT buyer_gid,concat(buyer_name,' / ',buyer_code) as buyer_name " +
                    " from ocs_mst_tbuyer where creditstatus_Approval in ('Y','N') and creditActive_status = 'Y' order by buyer_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getbuyerlist = new List<buyerlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getbuyerlist.Add(new buyerlist
                    {
                        buyer_name = (dr_datarow["buyer_name"].ToString()),
                        buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                    });
                }
                values.buyerlist = getbuyerlist;
            }
            dt_datatable.Dispose();
            //Security Type
            msSQL = " select securitytype_gid,security_type from ocs_trn_tsecuritytype a" +
                   " where status_log='Y' order by securitytype_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSecurity = new List<securitytype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSecurity.Add(new securitytype_list
                    {
                        securitytype_gid = (dr_datarow["securitytype_gid"].ToString()),
                        security_type = (dr_datarow["security_type"].ToString()),
                    });
                }
                values.securitytype_list = getSecurity;
            }
            dt_datatable.Dispose();

            //Program
            msSQL = " SELECT  program_gid,program FROM ocs_mst_tprogram a" +
                       " where status='Y' order by a.program_gid desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getprogramlist = new List<programlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getprogramlist.Add(new programlist
                    {
                        program_gid = (dr_datarow["program_gid"].ToString()),
                        program = (dr_datarow["program"].ToString()),
                    });
                }
                values.programlist = getprogramlist;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaGetEditLimit(string application_gid, MdlMstApplicationAdd values, string employee_gid)
        {

            msSQL = "select format(overalllimit_amount,2,'en_IN') from ocs_trn_tcadapplication where application_gid='" + application_gid + "'";
            values.overalllimit_amount = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select sum(loanfacility_amount) from ocs_trn_tcadapplication2loan where application_gid='" + employee_gid + "'" +
                " or application_gid='" + application_gid + "'";
            values.loanfacility_amount = objdbconn.GetExecuteScalar(msSQL);

        }

        public void DaGetEditLoanDtl(string application_gid, MdlMstLoanDtl values, string employee_gid)
        {


            msSQL = "select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                            " productsub_type, format(loanfacility_amount,0,'en_IN')as loanfacility_amount, loan_type, rate_interest,margin, penal_interest, facilityoverall_limit, " +
                            " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name,producttype_gid, " +
                            " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                            " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate,product_gid,variety_gid from ocs_trn_tcadapplication2loan " +
                            " where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstloan_list = new List<mstloan_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstloan_list.Add(new mstloan_list
                    {
                        facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                        producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                        productsub_type = (dr_datarow["productsub_type"].ToString()),
                        loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                        loan_type = (dr_datarow["loan_type"].ToString()),
                        rate_interest = (dr_datarow["rate_interest"].ToString()),
                        roi_margin = (dr_datarow["margin"].ToString()),
                        penal_interest = (dr_datarow["penal_interest"].ToString()),
                        facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                        tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                        facility_type = (dr_datarow["facility_type"].ToString()),
                        facility_mode = (dr_datarow["facility_mode"].ToString()),
                        principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                        interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                        interest_status = (dr_datarow["interest_status"].ToString()),
                        moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                        moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                        moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                        moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                        scheme_type = (dr_datarow["scheme_type"].ToString()),
                        application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        variety_gid = (dr_datarow["variety_gid"].ToString())

                    });
                }
                values.mstloan_list = getmstloan_list;
            }
            dt_datatable.Dispose();
            msSQL = " select application_gid,application2servicecharge_gid,format(processing_fee,0,'en_IN') as processing_fee,processing_collectiontype,format(doc_charges,0,'en_IN') as doc_charges," +
                    " doccharge_collectiontype,format(fieldvisit_charges,0,'en_IN') as fieldvisit_charge,fieldvisit_charges_collectiontype,format(adhoc_fee,0,'en_IN') as adhoc_fee,adhoc_collectiontype," +
                    " format(life_insurance,0,'en_IN') as life_insurance,lifeinsurance_collectiontype,format(acct_insurance,0,'en_IN') as acct_insurance, " +
                    " format(total_collect,0,'en_IN') as total_collect,format(total_deduct,0,'en_IN') as total_deduct," +
                    " product_type,acctinsurance_collectiontype, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                    " from ocs_trn_tcadapplicationservicecharge a " +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                    " where a.application_gid = '" + application_gid + "' order by application2servicecharge_gid desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproductcharges_list = new List<servicecharges_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproductcharges_list.Add(new servicecharges_list
                    {
                        application2servicecharge_gid = (dr_datarow["application2servicecharge_gid"].ToString()),
                        processing_fee = (dr_datarow["processing_fee"].ToString()),
                        processing_collectiontype = (dr_datarow["processing_collectiontype"].ToString()),
                        doc_charges = (dr_datarow["doc_charges"].ToString()),
                        doccharge_collectiontype = (dr_datarow["doccharge_collectiontype"].ToString()),
                        fieldvisit_charge = (dr_datarow["fieldvisit_charge"].ToString()),
                        fieldvisit_collectiontype = (dr_datarow["fieldvisit_charges_collectiontype"].ToString()),
                        adhoc_fee = (dr_datarow["adhoc_fee"].ToString()),
                        adhoc_collectiontype = (dr_datarow["adhoc_collectiontype"].ToString()),
                        life_insurance = (dr_datarow["life_insurance"].ToString()),
                        lifeinsurance_collectiontype = (dr_datarow["lifeinsurance_collectiontype"].ToString()),
                        acct_insurance = (dr_datarow["acct_insurance"].ToString()),
                        total_collect = (dr_datarow["total_collect"].ToString()),
                        total_deduct = (dr_datarow["total_deduct"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        acctinsurance_collectiontype = (dr_datarow["acctinsurance_collectiontype"].ToString()),
                    });
                }
                values.servicecharges_list = getproductcharges_list;
            }
            dt_datatable.Dispose();

            values.status = true;
        }

        public void DaLoanDetailList(string application_gid, MdlMstLoanDtl values, string employee_gid)
        {
            msSQL = "select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                               " productsub_type, loanfacility_amount, loan_type, rate_interest, penal_interest, facilityoverall_limit, " +
                               " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name, " +
                               " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                               " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate from ocs_trn_tcadapplication2loan " +
                               " where (application_gid='" + application_gid + "' or application_gid='" + employee_gid + "')";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstloan_list = new List<mstloan_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstloan_list.Add(new mstloan_list
                    {
                        facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                        productsub_type = (dr_datarow["productsub_type"].ToString()),
                        loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                        loan_type = (dr_datarow["loan_type"].ToString()),
                        rate_interest = (dr_datarow["rate_interest"].ToString()),
                        penal_interest = (dr_datarow["penal_interest"].ToString()),
                        facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                        tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                        facility_type = (dr_datarow["facility_type"].ToString()),
                        facility_mode = (dr_datarow["facility_mode"].ToString()),
                        principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                        interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                        interest_status = (dr_datarow["interest_status"].ToString()),
                        moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                        moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                        moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                        moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                        scheme_type = (dr_datarow["scheme_type"].ToString()),
                        application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),

                    });
                }
                values.mstloan_list = getmstloan_list;
            }
            dt_datatable.Dispose();
            msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where product_type='Agri Receivable Finance (ARF)' and " +
            " (application_gid='" + application_gid + "' or application_gid='" + employee_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.buyer_status = "Y";
            }
            objODBCDatareader.Close();

            msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where loan_type='Secured' and" +
            " (application_gid='" + application_gid + "' or application_gid='" + employee_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.collateral_status = "Y";
            }
            objODBCDatareader.Close();
            values.status = true;
        }

        public void DaBuyerDetailsList(string application2loan_gid, MdlMstBuyer values)
        {
            msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                    " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + application2loan_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbuyer_list = new List<mstbuyer_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbuyer_list.Add(new mstbuyer_list
                    {
                        application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                        buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                        buyer_name = (dr_datarow["buyer_name"].ToString()),
                        buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                        availed_limit = (dr_datarow["availed_limit"].ToString()),
                        balance_limit = (dr_datarow["balance_limit"].ToString()),
                        bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                        margin = (dr_datarow["margin"].ToString())
                    });
                }
                values.mstbuyer_list = getmstbuyer_list;
            }
            dt_datatable.Dispose();
        }

        public void DaCollateralDetailsList(string employee_gid, string application_gid, MdlMstCollatertal values)
        {
            msSQL = "select application2collateral_gid,source_type,guideline_value,market_value,forcedsource_value,collateralSSV_value," +
                    " date_format(guideline_date,'%d-%m-%Y') as guideline_date,date_format(forcedvalueassessed_on,'%d-%m-%Y') as forcedvalueassessed_on," +
                    " date_format(marketvalue_date,'%d-%m-%Y') as marketvalue_date,collateralobservation_summary " +
                    " from ocs_trn_tcadapplication2collateral where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcollatertal_list = new List<collatertal_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcollatertal_list.Add(new collatertal_list
                    {
                        application2collateral_gid = (dr_datarow["application2collateral_gid"].ToString()),
                        source_type = (dr_datarow["source_type"].ToString()),
                        guideline_value = (dr_datarow["guideline_value"].ToString()),
                        market_value = (dr_datarow["market_value"].ToString()),
                        forcedsource_value = (dr_datarow["forcedsource_value"].ToString()),
                        collateralSSV_value = (dr_datarow["collateralSSV_value"].ToString()),
                        collateralobservation_summary = (dr_datarow["collateralobservation_summary"].ToString()),
                        guideline_date = (dr_datarow["guideline_date"].ToString()),
                        forcedvalueassessed_on = (dr_datarow["forcedvalueassessed_on"].ToString()),
                        marketvalue_date = (dr_datarow["marketvalue_date"].ToString()),
                    });
                }
                values.collatertal_list = getcollatertal_list;
            }
            dt_datatable.Dispose();
            msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                    " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                    " and b.user_gid = c.user_gid and application2collateral_gid='" + employee_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_filename = new List<DocumentList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    get_filename.Add(new DocumentList
                    {
                        //document_path = (dr_datarow["document_path"].ToString()),
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                        uploaded_by = dr_datarow["uploaded_by"].ToString(),
                        updated_date = dr_datarow["uploaded_date"].ToString(),
                        document_title = dr_datarow["document_title"].ToString()
                    });
                }
                values.DocumentList = get_filename;
            }
        }

        public void DaHypothecationDetailsList(string application_gid, MdlMstHypothecation values)
        {
            msSQL = "select application2hypothecation_gid,securitytype_gid,security_type,security_description,security_value," +
                    " date_format(securityassessed_date,'%d-%m-%Y') as securityassessed_date,asset_id,roc_fillingid,CERSAI_fillingid," +
                    " hypoobservation_summary,primary_security " +
                    " from ocs_trn_tcadapplication2hypothecation where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gethypothecation_list = new List<hypothecation_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gethypothecation_list.Add(new hypothecation_list
                    {
                        application2hypothecation_gid = (dr_datarow["application2hypothecation_gid"].ToString()),
                        securitytype_gid = (dr_datarow["securitytype_gid"].ToString()),
                        security_type = (dr_datarow["security_type"].ToString()),
                        security_description = (dr_datarow["security_description"].ToString()),
                        security_value = (dr_datarow["security_value"].ToString()),
                        securityassessed_date = (dr_datarow["securityassessed_date"].ToString()),
                        asset_id = (dr_datarow["asset_id"].ToString()),
                        roc_fillingid = (dr_datarow["roc_fillingid"].ToString()),
                        CERSAI_fillingid = (dr_datarow["CERSAI_fillingid"].ToString()),
                        hypoobservation_summary = (dr_datarow["hypoobservation_summary"].ToString()),
                        primary_security = (dr_datarow["primary_security"].ToString()),
                    });
                }
                values.hypothecation_list = gethypothecation_list;
            }
            dt_datatable.Dispose();

        }

        public void DaGetEditproduct(string application_gid, MdlList values, string employee_gid)
        {

            msSQL = " select a.producttype_gid,a.product_type from ocs_trn_tcadapplication2loan a" +
                    " where a.application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment = new List<product_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new product_list
                    {
                        producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                    });
                }
                values.product_list = getSegment;
            }
            dt_datatable.Dispose();
            values.status = true;

        }

        public void DaGetProductChargesEdit(string application_gid, MdlProductCharges values)
        {
            try
            {
                msSQL = " select application_gid, overalllimit_amount, validityoveralllimit_year, validityoveralllimit_month, validityoveralllimit_days, calculationoveralllimit_validity," +
                        " enduse_purpose, processing_fee, processing_collectiontype, doc_charges, doccharge_collectiontype, fieldvisit_charge, fieldvisit_collectiontype, " +
                        " adhoc_fee, adhoc_collectiontype, life_insurance, lifeinsurance_collectiontype, acct_insurance, total_collect, total_deduct, productcharges_status, " +
                        " csa_applicability,csaactivity_gid,csaactivity_name,percentageoftotal_limit " +
                        " from ocs_trn_tcadapplication where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.overalllimit_amount = objODBCDatareader["overalllimit_amount"].ToString();
                    values.validityoveralllimit_year = objODBCDatareader["validityoveralllimit_year"].ToString();
                    values.validityoveralllimit_month = objODBCDatareader["validityoveralllimit_month"].ToString();
                    values.validityoveralllimit_days = objODBCDatareader["validityoveralllimit_days"].ToString();
                    values.calculationoveralllimit_validity = objODBCDatareader["calculationoveralllimit_validity"].ToString();
                    values.enduse_purpose = objODBCDatareader["enduse_purpose"].ToString();
                    values.processing_fee = objODBCDatareader["processing_fee"].ToString();
                    values.processing_collectiontype = objODBCDatareader["processing_collectiontype"].ToString();
                    values.doc_charges = objODBCDatareader["doc_charges"].ToString();
                    values.doccharge_collectiontype = objODBCDatareader["doccharge_collectiontype"].ToString();
                    values.fieldvisit_charge = objODBCDatareader["fieldvisit_charge"].ToString();
                    values.fieldvisit_collectiontype = objODBCDatareader["fieldvisit_collectiontype"].ToString();
                    values.adhoc_fee = objODBCDatareader["adhoc_fee"].ToString();
                    values.adhoc_collectiontype = objODBCDatareader["adhoc_collectiontype"].ToString();
                    values.life_insurance = objODBCDatareader["life_insurance"].ToString();
                    values.lifeinsurance_collectiontype = objODBCDatareader["lifeinsurance_collectiontype"].ToString();
                    values.acct_insurance = objODBCDatareader["acct_insurance"].ToString();
                    values.total_collect = objODBCDatareader["total_collect"].ToString();
                    values.total_deduct = objODBCDatareader["total_deduct"].ToString();
                    values.productcharges_status = objODBCDatareader["productcharges_status"].ToString();
                    values.csa_applicability = objODBCDatareader["csa_applicability"].ToString();
                    values.csaactivity_gid = objODBCDatareader["csaactivity_gid"].ToString();
                    values.csaactivity_name = objODBCDatareader["csaactivity_name"].ToString();
                    values.percentageoftotal_limit = objODBCDatareader["percentageoftotal_limit"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetLoanSubProduct(string loanproduct_gid, string application_gid, string application2loan_gid, MdlMstApplication360 values)
        {
            msSQL = "select loansubproduct_gid,loansubproduct_name from ocs_mst_tloansubproduct where loanproduct_gid='" + loanproduct_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getapplication_list = new List<application_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getapplication_list.Add(new application_list
                    {
                        loansubproduct_gid = (dr_datarow["loansubproduct_gid"].ToString()),
                        loansubproduct_name = (dr_datarow["loansubproduct_name"].ToString()),
                    });
                }
                values.application_list = getapplication_list;
            }
            dt_datatable.Dispose();
            msSQL = "select producttype_gid from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
            string producttype_gid = objdbconn.GetExecuteScalar(msSQL);
            msSQL = "select application2servicecharge_gid from ocs_trn_tcadapplicationservicecharge where application_gid='" + application_gid + "' and producttype_gid='" + producttype_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.charge_flag = "Y";
            }
            else
            {
                values.charge_flag = "N";
            }
            objODBCDatareader.Close();
        }

        public void DaPostLoanEditDtl(string employee_gid, MdlMstLoanDtl values)
        {
            //string fsprimaryvaluechain_gid = string.Empty;
            //string fsprimaryvaluechain_name = string.Empty;
            //if (values.primaryvaluechain_list != null)
            //{
            //    for (var i = 0; i < values.primaryvaluechain_list.Count; i++)
            //    {
            //        fsprimaryvaluechain_gid += values.primaryvaluechain_list[i].valuechain_gid + ",";
            //        fsprimaryvaluechain_name += values.primaryvaluechain_list[i].valuechain_name + ",";

            //    }
            //    fsprimaryvaluechain_gid = fsprimaryvaluechain_gid.TrimEnd(',');
            //    fsprimaryvaluechain_name = fsprimaryvaluechain_name.TrimEnd(',');
            //}

            //string fssecondaryvaluechain_gid = string.Empty;
            //string fssecondaryvaluechain_name = string.Empty;
            //if (values.secondaryvaluechain_list != null)
            //{
            //    for (var i = 0; i < values.secondaryvaluechain_list.Count; i++)
            //    {
            //        fssecondaryvaluechain_gid += values.secondaryvaluechain_list[i].valuechain_gid + ",";
            //        fssecondaryvaluechain_name += values.secondaryvaluechain_list[i].valuechain_name + ",";

            //    }
            //    fssecondaryvaluechain_gid = fssecondaryvaluechain_gid.TrimEnd(',');
            //    fssecondaryvaluechain_name = fssecondaryvaluechain_name.TrimEnd(',');
            //}
            msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where producttype_gid='" + values.producttype_gid + "' and " +
               " productsubtype_gid='" + values.productsubtype_gid + "' and application_gid='" + values.application_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == false)
            {
                objODBCDatareader.Close();
                if (values.product_type == "Agri Receivable Finance (ARF)")
                {
                    msSQL = "select application2buyer_gid from ocs_trn_tcadapplication2buyer  where application2loan_gid='" + employee_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == false)
                    {
                        values.message = "Kindly add atleast one Buyer";
                        values.status = false;
                        return;
                    }
                    else
                    {
                        msGetGid = objcmnfunctions.GetMasterGID("AP2L");
                        msSQL = " insert into ocs_trn_tcadapplication2loan(" +
                                " application2loan_gid ," +
                                " application_gid," +
                                " facilityrequested_date," +
                                " product_type," +
                                " producttype_gid," +
                                " productsub_type," +
                                " productsubtype_gid," +
                                " loantype_gid," +
                                " loan_type ," +
                                " loanfacility_amount," +
                                " rate_interest," +
                                " penal_interest," +
                                " facilityvalidity_year," +
                                " facilityvalidity_month," +
                                " facilityvalidity_days," +
                                " facilityoverall_limit ," +
                                " tenureproduct_year," +
                                " tenureproduct_month," +
                                " tenureproduct_days," +
                                " tenureoverall_limit ," +
                                " facility_type," +
                                " facility_mode," +
                                " principalfrequency_name," +
                                " principalfrequency_gid," +
                                " interestfrequency_name," +
                                " interestfrequency_gid," +
                                " program_gid," +
                                " program," +
                                //" primaryvaluechain_gid," +
                                //" primaryvaluechain_name," +
                                //" secondaryvaluechain_gid," +
                                //" secondaryvaluechain_name," +
                                " interest_status," +
                                " moratorium_status," +
                                " moratorium_type," +
                                " moratorium_startdate," +
                                " moratorium_enddate," +
                                " source_type," +
                                " guideline_value," +
                                " guideline_date," +
                                " marketvalue_date ," +
                                " market_value," +
                                " forcedsource_value," +
                                " collateralSSV_value," +
                                " forcedvalueassessed_on," +
                                " collateralobservation_summary," +
                                " enduse_purpose," +
                                " product_gid," +
                                " product_name," +
                                " variety_gid," +
                                " variety_name," +
                                " sector_name," +
                                " category_name," +
                                " botanical_name," +
                                " alternative_name," +
                                " created_by," +
                                " created_date)" +
                                " values(" +
                                "'" + msGetGid + "'," +
                                "'" + values.application_gid + "'," +
                                "'" + Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                "'" + values.product_type + "'," +
                                "'" + values.producttype_gid + "'," +
                                "'" + values.productsub_type + "'," +
                                "'" + values.productsubtype_gid + "'," +
                                "'" + values.loantype_gid + "'," +
                                "'" + values.loan_type + "'," +
                                "'" + values.facilityloan_amount.Replace(",", "") + "'," +
                                "'" + values.rate_interest + "'," +
                                "'" + values.penal_interest + "'," +
                                "'" + values.facilityvalidity_year + "'," +
                                "'" + values.facilityvalidity_month + "'," +
                                "'" + values.facilityvalidity_days + "'," +
                                "'" + values.facilityoverall_limit + "'," +
                                "'" + values.tenureproduct_year + "'," +
                                "'" + values.tenureproduct_month + "'," +
                                "'" + values.tenureproduct_days + "'," +
                                "'" + values.tenureoverall_limit + "'," +
                                "'" + values.facility_type + "'," +
                                "'" + values.facility_mode + "'," +
                                 "'" + values.principalfrequency_name + "'," +
                                "'" + values.principalfrequency_gid + "'," +
                                "'" + values.interestfrequency_name + "'," +
                                "'" + values.interestfrequency_gid + "'," +
                                "'" + values.program_gid + "'," +
                                "'" + values.program + "'," +
                                //"'" + fsprimaryvaluechain_gid + "'," +
                                //"'" + fsprimaryvaluechain_name + "'," +
                                //"'" + fssecondaryvaluechain_gid + "'," +
                                //"'" + fssecondaryvaluechain_name + "'," +
                                "'" + values.interest_status + "'," +
                                "'" + values.moratorium_status + "'," +
                                "'" + values.moratorium_type + "',";
                        if (values.moratorium_startdate == null || values.moratorium_startdate == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.moratorium_enddate == null || values.moratorium_enddate == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        msSQL += "'" + values.source_type + "',";
                        if (values.guideline_value == null || values.guideline_value == "")
                        {
                            msSQL += "'0.00',";
                        }
                        else
                        {
                            msSQL += "'" + values.guideline_value.Replace(",", "") + "',";
                        }
                        if (values.guideline_date == null || values.guideline_date == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.marketvalue_date == null || values.marketvalue_date == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.market_value == null || values.market_value == "")
                        {
                            msSQL += "'0.00',";
                        }
                        else
                        {
                            msSQL += "'" + values.market_value.Replace(",", "") + "',";
                        }
                        if (values.forcedsource_value == null || values.forcedsource_value == "")
                        {
                            msSQL += "'0.00',";
                        }
                        else
                        {
                            msSQL += "'" + values.forcedsource_value.Replace(",", "") + "',";
                        }
                        if (values.collateralSSV_value == null || values.collateralSSV_value == "")
                        {
                            msSQL += "'0.00',";
                        }
                        else
                        {
                            msSQL += "'" + values.collateralSSV_value.Replace(",", "") + "',";
                        }
                        if (values.forcedvalueassessed_on == null || values.forcedvalueassessed_on == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.collateralobservation_summary == null || values.collateralobservation_summary == "")
                        {
                            msSQL += "'',";
                        }
                        else
                        {
                            msSQL += "'" + values.collateralobservation_summary.Replace("'", "") + "',";
                        }
                        if (values.enduse_purpose == null || values.enduse_purpose == "")
                        {
                            msSQL += "'',";
                        }
                        else
                        {
                            msSQL += "'" + values.enduse_purpose.Replace("'", "") + "',";
                        }
                        msSQL += "'" + values.product_gid + "'," +
                                 "'" + values.product_name + "'," +
                                 "'" + values.variety_gid + "'," +
                                 "'" + values.variety_name + "'," +
                                 "'" + values.sector_name + "'," +
                                 "'" + values.category_name + "'," +
                                 "'" + values.botanical_name + "'," +
                                 "'" + values.alternative_name + "'," +
                                 "'" + employee_gid + "'," +
                               "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult != 0)
                        {
                            msSQL = "update ocs_trn_tcadapplication2buyer set application2loan_gid='" + msGetGid + "' where application2loan_gid='" + employee_gid + "'";

                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            msSQL = "update ocs_trn_tcadapplication set productcharges_status='Completed',productcharge_flag='Y' where application_gid = '" + values.application_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            values.status = true;


                            values.message = "Loan details Added successfully";
                            msSQL = " select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                                    " productsub_type, loanfacility_amount, loan_type, rate_interest, penal_interest, facilityoverall_limit, " +
                                    " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name,producttype_gid, " +
                                    " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                                    " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate,product_gid,product_name,variety_gid,variety_name,  " +
                                    " sector_name, category_name, botanical_name, alternative_name from ocs_trn_tcadapplication2loan " +
                                    " where application_gid='" + values.application_gid + "'";
                            dt_datatable = objdbconn.GetDataTable(msSQL);
                            var getmstloan_list = new List<mstloan_list>();
                            if (dt_datatable.Rows.Count != 0)
                            {
                                foreach (DataRow dr_datarow in dt_datatable.Rows)
                                {
                                    getmstloan_list.Add(new mstloan_list
                                    {
                                        facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                                        producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                                        product_type = (dr_datarow["product_type"].ToString()),
                                        productsub_type = (dr_datarow["productsub_type"].ToString()),
                                        loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                                        loan_type = (dr_datarow["loan_type"].ToString()),
                                        rate_interest = (dr_datarow["rate_interest"].ToString()),
                                        penal_interest = (dr_datarow["penal_interest"].ToString()),
                                        facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                                        tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                                        facility_type = (dr_datarow["facility_type"].ToString()),
                                        facility_mode = (dr_datarow["facility_mode"].ToString()),
                                        principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                                        interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                                        interest_status = (dr_datarow["interest_status"].ToString()),
                                        moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                                        moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                                        moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                                        moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                                        scheme_type = (dr_datarow["scheme_type"].ToString()),
                                        application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                                        product_gid = (dr_datarow["product_gid"].ToString()),
                                        product_name = (dr_datarow["product_name"].ToString()),
                                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                                        variety_name = (dr_datarow["variety_name"].ToString()),
                                        sector_name = (dr_datarow["sector_name"].ToString()),
                                        category_name = (dr_datarow["category_name"].ToString()),
                                        botanical_name = (dr_datarow["botanical_name"].ToString()),
                                        alternative_name = (dr_datarow["alternative_name"].ToString()),

                                    });
                                }
                                values.mstloan_list = getmstloan_list;
                            }
                            dt_datatable.Dispose();

                            msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2loan_gid='" + msGetGid + "' where application2loan_gid='" + employee_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                                                " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                                                " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                                                " and b.user_gid = c.user_gid and application2loan_gid='" + msGetGid + "'";

                            dt_datatable = objdbconn.GetDataTable(msSQL);
                            var get_filename = new List<DocumentList>();
                            if (dt_datatable.Rows.Count != 0)
                            {
                                foreach (DataRow dr_datarow in dt_datatable.Rows)
                                {
                                    get_filename.Add(new DocumentList
                                    {
                                        //document_path = (dr_datarow["document_path"].ToString()),
                                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                                        document_name = (dr_datarow["document_name"].ToString()),
                                        document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                                        uploaded_by = dr_datarow["uploaded_by"].ToString(),
                                        updated_date = dr_datarow["uploaded_date"].ToString(),
                                        document_title = dr_datarow["document_title"].ToString()
                                    });
                                }
                                values.DocumentList = get_filename;
                            }
                            dt_datatable.Dispose();
                            msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where product_type='Agri Receivable Finance (ARF)' and " +
                                 " (application_gid='" + employee_gid + "' or  application_gid='" + values.application_gid + "' )";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                values.buyer_status = "Y";
                            }
                            objODBCDatareader.Close();

                            msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where loan_type='Secured' and " +
                                    " (application_gid='" + employee_gid + "' or  application_gid='" + values.application_gid + "' )";
                            objODBCDatareader = objdbconn.GetDataReader(msSQL);
                            if (objODBCDatareader.HasRows == true)
                            {
                                values.collateral_status = "Y";
                            }
                            objODBCDatareader.Close();

                        }
                        else
                        {
                            values.status = false;
                            values.message = "Error Occured while Adding Loan";
                        }
                    }
                }
                else
                {
                    msGetGid = objcmnfunctions.GetMasterGID("AP2L");
                    msSQL = " insert into ocs_trn_tcadapplication2loan(" +
                            " application2loan_gid ," +
                            " application_gid," +
                            " facilityrequested_date," +
                            " product_type," +
                            " producttype_gid," +
                            " productsub_type," +
                            " productsubtype_gid," +
                            " loantype_gid," +
                            " loan_type ," +
                            " loanfacility_amount," +
                            " rate_interest," +
                            " penal_interest," +
                            " facilityvalidity_year," +
                            " facilityvalidity_month," +
                            " facilityvalidity_days," +
                            " facilityoverall_limit ," +
                            " tenureproduct_year," +
                            " tenureproduct_month," +
                            " tenureproduct_days," +
                            " tenureoverall_limit ," +
                            " facility_type," +
                            " facility_mode," +
                            " principalfrequency_name," +
                            " principalfrequency_gid," +
                            " interestfrequency_name," +
                            " interestfrequency_gid," +
                            " program_gid," +
                            " program," +
                            //" primaryvaluechain_gid," +
                            //" primaryvaluechain_name," +
                            //" secondaryvaluechain_gid," +
                            //" secondaryvaluechain_name," +
                            " interest_status," +
                            " moratorium_status," +
                            " moratorium_type," +
                            " moratorium_startdate," +
                            " moratorium_enddate," +
                            " source_type," +
                            " guideline_value," +
                            " guideline_date," +
                            " marketvalue_date ," +
                            " market_value," +
                            " forcedsource_value," +
                            " collateralSSV_value," +
                            " forcedvalueassessed_on," +
                            " collateralobservation_summary," +
                            " enduse_purpose," +
                            " product_gid," +
                            " product_name," +
                            " variety_gid," +
                            " variety_name," +
                            " sector_name," +
                            " category_name," +
                            " botanical_name," +
                            " alternative_name," +
                            " created_by," +
                            " created_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + values.application_gid + "'," +
                            "'" + Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                            "'" + values.product_type + "'," +
                            "'" + values.producttype_gid + "'," +
                            "'" + values.productsub_type + "'," +
                            "'" + values.productsubtype_gid + "'," +
                            "'" + values.loantype_gid + "'," +
                            "'" + values.loan_type + "'," +
                            "'" + values.facilityloan_amount.Replace(",", "") + "'," +
                            "'" + values.rate_interest + "'," +
                            "'" + values.penal_interest + "'," +
                            "'" + values.facilityvalidity_year + "'," +
                            "'" + values.facilityvalidity_month + "'," +
                            "'" + values.facilityvalidity_days + "'," +
                            "'" + values.facilityoverall_limit + "'," +
                            "'" + values.tenureproduct_year + "'," +
                            "'" + values.tenureproduct_month + "'," +
                            "'" + values.tenureproduct_days + "'," +
                            "'" + values.tenureoverall_limit + "'," +
                            "'" + values.facility_type + "'," +
                            "'" + values.facility_mode + "'," +
                            "'" + values.principalfrequency_name + "'," +
                            "'" + values.principalfrequency_gid + "'," +
                            "'" + values.interestfrequency_name + "'," +
                            "'" + values.interestfrequency_gid + "'," +
                            "'" + values.program_gid + "'," +
                            "'" + values.program + "'," +
                            //"'" + fsprimaryvaluechain_gid + "'," +
                            //"'" + fsprimaryvaluechain_name + "'," +
                            //"'" + fssecondaryvaluechain_gid + "'," +
                            //"'" + fssecondaryvaluechain_name + "'," +
                            "'" + values.interest_status + "'," +
                            "'" + values.moratorium_status + "'," +
                            "'" + values.moratorium_type + "',";
                    if (values.moratorium_startdate == null || values.moratorium_startdate == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.moratorium_enddate == null || values.moratorium_enddate == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    msSQL += "'" + values.source_type + "',";
                    if (values.guideline_value == null || values.guideline_value == "")
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + values.guideline_value.Replace(",", "") + "',";
                    }
                    if (values.guideline_date == null || values.guideline_date == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.marketvalue_date == null || values.marketvalue_date == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.market_value == null || values.market_value == "")
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + values.market_value.Replace(",", "") + "',";
                    }
                    if (values.forcedsource_value == null || values.forcedsource_value == "")
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + values.forcedsource_value.Replace(",", "") + "',";
                    }
                    if (values.collateralSSV_value == null || values.collateralSSV_value == "")
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + values.collateralSSV_value.Replace(",", "") + "',";
                    }
                    if (values.forcedvalueassessed_on == null || values.forcedvalueassessed_on == "")
                    {
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.collateralobservation_summary == null || values.collateralobservation_summary == "")
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + values.collateralobservation_summary.Replace("'", "") + "',";
                    }
                    if (values.enduse_purpose == null || values.enduse_purpose == "")
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + values.enduse_purpose.Replace("'", "") + "',";
                    }
                    msSQL += "'" + values.product_gid + "'," +
                             "'" + values.product_name + "'," +
                             "'" + values.variety_gid + "'," +
                             "'" + values.variety_name + "'," +
                             "'" + values.sector_name + "'," +
                             "'" + values.category_name + "'," +
                             "'" + values.botanical_name + "'," +
                             "'" + values.alternative_name + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        msSQL = "update ocs_trn_tcadapplication2buyer set application2loan_gid='" + msGetGid + "' where application2loan_gid='" + employee_gid + "'";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        msSQL = "update ocs_trn_tcadapplication set productcharges_status='Completed',productcharge_flag='Y' where application_gid = '" + values.application_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        values.status = true;


                        values.message = "Loan details Added successfully";
                        msSQL = "select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                                  " productsub_type, loanfacility_amount, loan_type, rate_interest, penal_interest, facilityoverall_limit, " +
                                  " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name,producttype_gid, " +
                                  " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                                  " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate,product_gid,product_name, " +
                                  " variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name from ocs_trn_tcadapplication2loan " +
                                  " where application_gid='" + values.application_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getmstloan_list = new List<mstloan_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dr_datarow in dt_datatable.Rows)
                            {
                                getmstloan_list.Add(new mstloan_list
                                {
                                    facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                                    producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                                    product_type = (dr_datarow["product_type"].ToString()),
                                    productsub_type = (dr_datarow["productsub_type"].ToString()),
                                    loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                                    loan_type = (dr_datarow["loan_type"].ToString()),
                                    rate_interest = (dr_datarow["rate_interest"].ToString()),
                                    penal_interest = (dr_datarow["penal_interest"].ToString()),
                                    facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                                    tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                                    facility_type = (dr_datarow["facility_type"].ToString()),
                                    facility_mode = (dr_datarow["facility_mode"].ToString()),
                                    principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                                    interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                                    interest_status = (dr_datarow["interest_status"].ToString()),
                                    moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                                    moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                                    moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                                    moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                                    scheme_type = (dr_datarow["scheme_type"].ToString()),
                                    application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                                    product_gid = (dr_datarow["product_gid"].ToString()),
                                    product_name = (dr_datarow["product_name"].ToString()),
                                    variety_gid = (dr_datarow["variety_gid"].ToString()),
                                    variety_name = (dr_datarow["variety_name"].ToString()),
                                    sector_name = (dr_datarow["sector_name"].ToString()),
                                    category_name = (dr_datarow["category_name"].ToString()),
                                    botanical_name = (dr_datarow["botanical_name"].ToString()),
                                    alternative_name = (dr_datarow["alternative_name"].ToString()),

                                });
                            }
                            values.mstloan_list = getmstloan_list;
                        }
                        dt_datatable.Dispose();

                        msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2loan_gid='" + msGetGid + "' where application2loan_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                                            " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                                            " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                                            " and b.user_gid = c.user_gid and application2loan_gid='" + msGetGid + "'";

                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var get_filename = new List<DocumentList>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dr_datarow in dt_datatable.Rows)
                            {
                                get_filename.Add(new DocumentList
                                {
                                    document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                                    document_name = (dr_datarow["document_name"].ToString()),
                                    document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                                    uploaded_by = dr_datarow["uploaded_by"].ToString(),
                                    updated_date = dr_datarow["uploaded_date"].ToString(),
                                    document_title = dr_datarow["document_title"].ToString()
                                });
                            }
                            values.DocumentList = get_filename;
                        }
                        dt_datatable.Dispose();
                        msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where product_type='Agri Receivable Finance (ARF)' and " +
                            "(application_gid = '" + employee_gid + "' or  application_gid = '" + values.application_gid + "')";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            values.buyer_status = "Y";
                        }
                        objODBCDatareader.Close();

                        msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where loan_type='Secured' and " +
                            "(application_gid = '" + employee_gid + "' or  application_gid = '" + values.application_gid + "')";
                        objODBCDatareader = objdbconn.GetDataReader(msSQL);
                        if (objODBCDatareader.HasRows == true)
                        {
                            values.collateral_status = "Y";
                        }
                        objODBCDatareader.Close();

                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error Occured while Adding Loan";
                    }
                }
            }
            else
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already this product sub type added.";
            }
        }

        public void DaLoanTempDetailList(string employee_gid, string application_gid, MdlMstLoanDtl values)
        {
            msSQL = "select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                               " productsub_type, loanfacility_amount, loan_type, rate_interest, penal_interest, facilityoverall_limit, " +
                               " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name, " +
                               " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                               " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate" +
                               " from ocs_trn_tcadapplication2loan where application_gid='" + application_gid + "' or application_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstloan_list = new List<mstloan_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstloan_list.Add(new mstloan_list
                    {
                        facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                        productsub_type = (dr_datarow["productsub_type"].ToString()),
                        loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                        loan_type = (dr_datarow["loan_type"].ToString()),
                        rate_interest = (dr_datarow["rate_interest"].ToString()),
                        penal_interest = (dr_datarow["penal_interest"].ToString()),
                        facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                        tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                        facility_type = (dr_datarow["facility_type"].ToString()),
                        facility_mode = (dr_datarow["facility_mode"].ToString()),
                        principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                        interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                        interest_status = (dr_datarow["interest_status"].ToString()),
                        moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                        moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                        moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                        moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                        scheme_type = (dr_datarow["scheme_type"].ToString()),
                        application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                    });
                }
                values.mstloan_list = getmstloan_list;
            }
            dt_datatable.Dispose();
        }

        public void DaDeleteLoanDetail(string application2loan_gid, MdlMstLoanDtl values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadapplication2loanupdateLOG where application2loan_gid='" + application2loan_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.message = "Loan Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaGetBuyerInfo(string buyer_gid, MdlMstBuyer values)
        {
            msSQL = "select buyer_limit from ocs_mst_tbuyer where buyer_gid='" + buyer_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.buyer_limit = objODBCDatareader["buyer_limit"].ToString();
                //values.buyer_limit = objODBCDatareader["buyer_limit"].ToString();
                //values.buyer_limit = objODBCDatareader["buyer_limit"].ToString();
            }
            objODBCDatareader.Close();
            values.status = true;
        }

        public void DaPostBuyer(string employee_gid, MdlMstBuyer values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2B");
            msSQL = " insert into ocs_trn_tcadapplication2buyer(" +
                   " application2buyer_gid ," +
                   " application2loan_gid," +
                   " buyer_gid," +
                   " buyer_name," +
                   " buyer_limit," +
                   " availed_limit," +
                   " balance_limit ," +
                   " bill_tenure," +
                   " margin," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.buyer_gid + "'," +
                   "'" + values.buyer_name + "',";
            if (values.buyer_limit == null || values.buyer_limit == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.buyer_limit.Replace(",", "") + "',";
            }
            if (values.availed_limit == null || values.availed_limit == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.availed_limit.Replace(",", "") + "',";
            }


            if (values.balance_limit == null || values.balance_limit == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.balance_limit.Replace(",", "") + "',";
            }
            msSQL += "'" + values.bill_tenure + "'," +
                     "'" + values.margin + "'," +
                     "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Buyer details Added successfully";

                msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                    " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstbuyer_list = new List<mstbuyer_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstbuyer_list.Add(new mstbuyer_list
                        {
                            application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                            buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                            buyer_name = (dr_datarow["buyer_name"].ToString()),
                            buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                            availed_limit = (dr_datarow["availed_limit"].ToString()),
                            balance_limit = (dr_datarow["balance_limit"].ToString()),
                            bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                            margin = (dr_datarow["margin"].ToString())
                        });
                    }
                    values.mstbuyer_list = getmstbuyer_list;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while Adding Buyer";
            }
        }

        public void DaBuyerTempDetailsList(string employee_gid, string application2loan_gid, MdlMstBuyer values)
        {
            msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                    " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + application2loan_gid + "' or application2loan_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbuyer_list = new List<mstbuyer_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbuyer_list.Add(new mstbuyer_list
                    {
                        application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                        buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                        buyer_name = (dr_datarow["buyer_name"].ToString()),
                        buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                        availed_limit = (dr_datarow["availed_limit"].ToString()),
                        balance_limit = (dr_datarow["balance_limit"].ToString()),
                        bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                        margin = (dr_datarow["margin"].ToString())
                    });
                }
                values.mstbuyer_list = getmstbuyer_list;
            }
            dt_datatable.Dispose();
        }

        public void DaBuyerDetailsEdit(string application2buyer_gid, MdlMstBuyer values)
        {
            try
            {
                msSQL = " select application2buyer_gid, application2loan_gid, buyer_gid,buyer_name,buyer_limit,availed_limit,balance_limit,bill_tenure,margin" +
              " from ocs_trn_tcadapplication2buyer where application2buyer_gid='" + application2buyer_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2buyer_gid = objODBCDatareader["application2buyer_gid"].ToString();
                    values.application2loan_gid = objODBCDatareader["application2loan_gid"].ToString();
                    values.buyer_gid = objODBCDatareader["buyer_gid"].ToString();
                    values.buyer_name = objODBCDatareader["buyer_name"].ToString();
                    values.buyer_limit = objODBCDatareader["buyer_limit"].ToString();
                    values.availed_limit = objODBCDatareader["availed_limit"].ToString();
                    values.balance_limit = objODBCDatareader["balance_limit"].ToString();
                    values.bill_tenure = objODBCDatareader["bill_tenure"].ToString();
                    values.margin = objODBCDatareader["margin"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DBuyerDetailsUpdate(string employee_gid, MdlMstBuyer values)
        {
            msSQL = " select application2buyer_gid, application2loan_gid, buyer_gid,buyer_name,buyer_limit,availed_limit,balance_limit,bill_tenure,margin" +
             " from ocs_trn_tcadapplication2buyer where application2buyer_gid='" + values.application2buyer_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication2buyer_gid = objODBCDatareader["application2buyer_gid"].ToString();
                lsapplication2loan_gid = objODBCDatareader["application2loan_gid"].ToString();
                lsbuyer_gid = objODBCDatareader["buyer_gid"].ToString();
                lsbuyer_name = objODBCDatareader["buyer_name"].ToString();
                lsbuyer_limit = objODBCDatareader["buyer_limit"].ToString();
                lsavailed_limit = objODBCDatareader["availed_limit"].ToString();
                lsbalance_limit = objODBCDatareader["balance_limit"].ToString();
                lsbill_tenure = objODBCDatareader["bill_tenure"].ToString();
                lsmargin = objODBCDatareader["margin"].ToString();
            }
            try
            {
                msSQL = " update ocs_trn_tcadapplication2buyer set " +
                        " buyer_gid='" + values.buyer_gid + "'," +
                         " buyer_name='" + values.buyer_name + "',";
                if (values.buyer_limit == null)
                {
                    msSQL += " buyer_limit='0.00',";
                }
                else
                {
                    msSQL += " buyer_limit='" + values.buyer_limit.Replace(",", "") + "',";
                }
                if (values.availed_limit == null)
                {
                    msSQL += " availed_limit='0.00',";
                }
                else
                {
                    msSQL += " availed_limit='" + values.availed_limit.Replace(",", "") + "',";
                }


                if (values.balance_limit == null)
                {
                    msSQL += " balance_limit='0.00',";
                }
                else
                {
                    msSQL += " balance_limit='" + values.balance_limit.Replace(",", "") + "',";
                }
                msSQL += " bill_tenure='" + values.bill_tenure + "'," +
                         " margin='" + values.margin + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2buyer_gid='" + values.application2buyer_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("A2BU");
                    msSQL = " insert into ocs_trn_tcadapplication2buyerUpdateLog(" +
                   " application2buyerUpdateLOG_gid ," +
                   " application2buyer_gid ," +
                   " application2loan_gid," +
                   " buyer_gid," +
                   " buyer_name," +
                   " buyer_limit," +
                   " availed_limit," +
                   " balance_limit ," +
                   " bill_tenure," +
                   " margin," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.application2buyer_gid + "'," +
                   "'" + values.application2loan_gid + "'," +
                   "'" + lsbuyer_gid + "'," +
                   "'" + lsbuyer_name + "',";
                    if (lsbuyer_limit == null)
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + lsbuyer_limit.Replace(",", "") + "',";
                    }
                    if (values.availed_limit == null)
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + lsavailed_limit.Replace(",", "") + "',";
                    }


                    if (lsbalance_limit == null)
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + lsbalance_limit.Replace(",", "") + "',";
                    }
                    msSQL += "'" + lsbill_tenure + "'," +
                             "'" + lsmargin + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Buyer Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaDeleteBuyerDetails(string application2buyer_gid, MdlMstBuyer values, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadapplication2buyer where application2buyer_gid='" + application2buyer_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                msSQL = "delete from ocs_trn_tcadapplication2buyerUpdateLog where application2buyer_gid='" + application2buyer_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                    " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstbuyer_list = new List<mstbuyer_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstbuyer_list.Add(new mstbuyer_list
                        {
                            application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                            buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                            buyer_name = (dr_datarow["buyer_name"].ToString()),
                            buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                            availed_limit = (dr_datarow["availed_limit"].ToString()),
                            balance_limit = (dr_datarow["balance_limit"].ToString()),
                            bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                            margin = (dr_datarow["margin"].ToString())
                        });
                    }
                    values.mstbuyer_list = getmstbuyer_list;
                }
                dt_datatable.Dispose();

                values.message = "Buyer Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        public void DaPostCollateral(string employee_gid, MdlMstCollatertal values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2C");
            msSQL = " insert into ocs_trn_tcadapplication2collateral(" +
                   " application2collateral_gid ," +
                   " application_gid," +
                   " source_type," +
                   " guideline_value," +
                   " guideline_date," +
                   " marketvalue_date ," +
                   " market_value," +
                   " forcedsource_value," +
                   " collateralSSV_value," +
                   " forcedvalueassessed_on," +
                   " collateralobservation_summary," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + employee_gid + "'," +
                   "'" + values.source_type + "',";
            if (values.guideline_value == null || values.guideline_value == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.guideline_value.Replace(",", "") + "',";
            }
            if (values.guideline_date == null || values.guideline_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if (values.marketvalue_date == null || values.marketvalue_date == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if (values.market_value == null || values.market_value == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.market_value.Replace(",", "") + "',";
            }
            if (values.forcedsource_value == null || values.forcedsource_value == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.forcedsource_value.Replace(",", "") + "',";
            }
            if (values.collateralSSV_value == null || values.collateralSSV_value == "")
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.collateralSSV_value.Replace(",", "") + "',";
            }
            if (values.forcedvalueassessed_on == null || values.forcedvalueassessed_on == "")
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }
            if (values.collateralobservation_summary == null || values.collateralobservation_summary == "")
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.collateralobservation_summary.Replace("'", "") + "',";
            }
            msSQL += "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Collateral details Added successfully";

                msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2collateral_gid='" + msGetGid + "' where application2collateral_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select application2collateral_gid,source_type,guideline_value,market_value,forcedsource_value,collateralSSV_value," +
                    " date_format(guideline_date,'%d-%m-%Y') as guideline_date,date_format(forcedvalueassessed_on,'%d-%m-%Y') as forcedvalueassessed_on," +
                    " date_format(marketvalue_date,'%d-%m-%Y') as marketvalue_date,collateralobservation_summary " +
                    " from ocs_trn_tcadapplication2collateral where application_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcollatertal_list = new List<collatertal_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcollatertal_list.Add(new collatertal_list
                        {
                            application2collateral_gid = (dr_datarow["application2collateral_gid"].ToString()),
                            source_type = (dr_datarow["source_type"].ToString()),
                            guideline_value = (dr_datarow["guideline_value"].ToString()),
                            market_value = (dr_datarow["market_value"].ToString()),
                            forcedsource_value = (dr_datarow["forcedsource_value"].ToString()),
                            collateralSSV_value = (dr_datarow["collateralSSV_value"].ToString()),
                            collateralobservation_summary = (dr_datarow["collateralobservation_summary"].ToString()),
                            guideline_date = (dr_datarow["guideline_date"].ToString()),
                            forcedvalueassessed_on = (dr_datarow["forcedvalueassessed_on"].ToString()),
                            marketvalue_date = (dr_datarow["marketvalue_date"].ToString()),
                        });
                    }
                    values.collatertal_list = getcollatertal_list;
                }
                dt_datatable.Dispose();
                msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                      " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                      " and b.user_gid = c.user_gid and application2collateral_gid='" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<DocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new DocumentList
                        {
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.DocumentList = get_filename;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while Adding";
            }
        }

        public void DaCollateralTempDetailsList(string employee_gid, string application_gid, MdlMstCollatertal values)
        {
            msSQL = "select application2collateral_gid,source_type,guideline_value,market_value,forcedsource_value,collateralSSV_value," +
                    " date_format(guideline_date,'%d-%m-%Y') as guideline_date,date_format(forcedvalueassessed_on,'%d-%m-%Y') as forcedvalueassessed_on," +
                    " date_format(marketvalue_date,'%d-%m-%Y') as marketvalue_date,collateralobservation_summary " +
                    " from ocs_trn_tcadapplication2collateral where application_gid='" + employee_gid + "' or application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcollatertal_list = new List<collatertal_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcollatertal_list.Add(new collatertal_list
                    {
                        application2collateral_gid = (dr_datarow["application2collateral_gid"].ToString()),
                        source_type = (dr_datarow["source_type"].ToString()),
                        guideline_value = (dr_datarow["guideline_value"].ToString()),
                        market_value = (dr_datarow["market_value"].ToString()),
                        forcedsource_value = (dr_datarow["forcedsource_value"].ToString()),
                        collateralSSV_value = (dr_datarow["collateralSSV_value"].ToString()),
                        collateralobservation_summary = (dr_datarow["collateralobservation_summary"].ToString()),
                        guideline_date = (dr_datarow["guideline_date"].ToString()),
                        forcedvalueassessed_on = (dr_datarow["forcedvalueassessed_on"].ToString()),
                        marketvalue_date = (dr_datarow["marketvalue_date"].ToString()),
                    });
                }
                values.collatertal_list = getcollatertal_list;
            }
            dt_datatable.Dispose();
        }

        public void DaCollateralDetailsEdit(string application2collateral_gid, MdlMstCollatertal values)
        {
            try
            {
                msSQL = " select application2collateral_gid, application_gid, source_type,guideline_value,market_value," +
                    " date_format(guideline_date, '%Y-%m-%d') as guideline_dateedit,date_format(marketvalue_date, '%Y-%m-%d') as marketvalue_dateedit,forcedsource_value," +
                    " collateralSSV_value,date_format(forcedvalueassessed_on, '%Y-%m-%d') as forcedvalueassessed_onedit,collateralobservation_summary " +
                    " from ocs_trn_tcadapplication2collateral where application2collateral_gid='" + application2collateral_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2collateral_gid = objODBCDatareader["application2collateral_gid"].ToString();
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.source_type = objODBCDatareader["source_type"].ToString();
                    values.guideline_value = objODBCDatareader["guideline_value"].ToString();
                    values.guideline_date = objODBCDatareader["guideline_dateedit"].ToString();
                    values.marketvalue_date = objODBCDatareader["marketvalue_dateedit"].ToString();
                    values.market_value = objODBCDatareader["market_value"].ToString();
                    values.forcedsource_value = objODBCDatareader["forcedsource_value"].ToString();
                    values.collateralSSV_value = objODBCDatareader["collateralSSV_value"].ToString();
                    values.forcedvalueassessed_on = objODBCDatareader["forcedvalueassessed_onedit"].ToString();
                    values.collateralobservation_summary = objODBCDatareader["collateralobservation_summary"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaCollateralDocumentTempList(string employee_gid, string application2loan_gid, Documentname objfilename)
        {
            msSQL = " select application2loan_gid,collateraldocument_gid,document_name,document_path,document_title,migration_flag from ocs_trn_tcaduploadcollateraldocument " +
                            " where application2loan_gid='" + employee_gid + "' or application2loan_gid='" + application2loan_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_filename = new List<DocumentList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_filename.Add(new DocumentList
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        document_gid = dt["collateraldocument_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        application2loan_gid = dt["application2loan_gid"].ToString(),
                        migration_flag = dt["migration_flag"].ToString()
                    });
                    objfilename.DocumentList = get_filename;
                }
            }
            dt_datatable.Dispose();
        }

        public bool DaEditcollateraldocument(HttpRequest httpRequest, Documentname objfilename, string employee_gid)
        {
            DocumentList objdocumentmodel = new DocumentList();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms = new MemoryStream();
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string pdfFilName = string.Empty;
            Stream ls_readStream;
            string lsdocumenttype_gid = string.Empty;
            String path = lspath;


            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";

            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = HttpContext.Current.Server.MapPath("erpdocument" + "/" + lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month);
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
            string lsfirstdocument_filepath = string.Empty;
            string document_title = httpRequest.Form["document_title"].ToString();
            string lsapplication2collateral_gid = httpRequest.Form["application2collateral_gid"].ToString();
            httpFileCollection = httpRequest.Files;

            httpPostedFile = httpFileCollection[0];
            string FileExtension = httpPostedFile.FileName;
            //string lsfile_gid = msdocument_gid + FileExtension;
            string lsfile_gid = msdocument_gid;
            FileExtension = Path.GetExtension(FileExtension).ToLower();
            lsfile_gid = lsfile_gid + FileExtension;
            if ((FileExtension == ".xls") || (FileExtension == ".xlsx") || (FileExtension == ".doc") || (FileExtension == ".docx") || (FileExtension == ".pdf") || (FileExtension == ".zip") || (FileExtension == ".msg") || (FileExtension == ".oft") || (FileExtension == ".txt") || (FileExtension == ".txtx"))
            {
                ls_readStream = httpPostedFile.InputStream;
                ls_readStream.CopyTo(ms);

                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                ms.Close();
                lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                msGetGid = objcmnfunctions.GetMasterGID("CAMD");
                msSQL = " insert into ocs_trn_tcaduploadcollateraldocument( " +
                             " collateraldocument_gid," +
                             " document_name, " +
                             " document_title," +
                             " document_path, " +
                             " application2collateral_gid," +
                             " created_by ," +
                             " created_date " +
                             " )values(" +
                             "'" + msGetGid + "'," +
                             "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                             "'" + document_title.Replace("'", "") + "'," +
                             "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                             "'" + employee_gid + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msSQL = " select collateraldocument_gid,document_name,document_path,document_title from ocs_trn_tcaduploadcollateraldocument " +
                            " where application2collateral_gid='" + employee_gid + "' or application2collateral_gid='" + lsapplication2collateral_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    var get_filename = new List<DocumentList>();
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dt in dt_datatable.Rows)
                        {
                            get_filename.Add(new DocumentList
                            {
                                document_name = dt["document_name"].ToString(),
                                document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                                document_gid = dt["collateraldocument_gid"].ToString(),
                                document_title = dt["document_title"].ToString(),
                            });
                            objfilename.DocumentList = get_filename;
                        }
                    }
                    dt_datatable.Dispose();

                    objfilename.status = true;
                    objfilename.message = "Collateral Document uploaded successfully";
                    return true;
                }
                else
                {
                    objfilename.status = false;
                    objfilename.message = "Error Occured while uploading Collateral document";
                    return false;
                }
            }
            else
            {
                objfilename.status = false;
                objfilename.message = "File format is not supported";
                return false;
            }
        }

        public void Dadeletecollateraldoc(string document_gid, Documentname values, string employee_gid)
        {
            msSQL = "delete from  ocs_trn_tcaduploadcollateraldocument where collateraldocument_gid='" + document_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Document deleted successfully";
                values.status = true;

                msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                      " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                      " and b.user_gid = c.user_gid and application2loan_gid='" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<DocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new DocumentList
                        {
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.DocumentList = get_filename;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.message = "Error Occrued while deleting document";
                values.status = false;
            }
        }

        public void DaCollateralDetailsUpdate(string employee_gid, MdlMstCollatertal values)
        {
            msSQL = " select application2collateral_gid, application_gid, source_type,guideline_value,guideline_date,marketvalue_date,market_value," +
                    " forcedsource_value,collateralSSV_value,forcedvalueassessed_on,collateralobservation_summary " +
                    " from ocs_trn_tcadapplication2collateral where application2collateral_gid='" + values.application2collateral_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication2collateral_gid = objODBCDatareader["application2collateral_gid"].ToString();
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                lssource_type = objODBCDatareader["source_type"].ToString();
                lsguideline_value = objODBCDatareader["guideline_value"].ToString();
                if (objODBCDatareader["guideline_date"].ToString() == "")
                {
                }
                else
                {
                    lsguideline_date = Convert.ToDateTime(objODBCDatareader["guideline_date"]).ToString("dd-MM-yyyy");
                }
                if (objODBCDatareader["marketvalue_date"].ToString() == "")
                {
                }
                else
                {
                    lsmarketvalue_date = Convert.ToDateTime(objODBCDatareader["marketvalue_date"]).ToString("dd-MM-yyyy");
                }
                lsmarket_value = objODBCDatareader["market_value"].ToString();
                lsforcedsource_value = objODBCDatareader["forcedsource_value"].ToString();
                lscollateralSSV_value = objODBCDatareader["collateralSSV_value"].ToString();
                if (objODBCDatareader["forcedvalueassessed_on"].ToString() == "")
                {
                }
                else
                {
                    lsforcedvalueassessed_on = Convert.ToDateTime(objODBCDatareader["forcedvalueassessed_on"]).ToString("dd-MM-yyyy");
                }
                lscollateralobservation_summary = objODBCDatareader["collateralobservation_summary"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplication2collateral set " +
                        " source_type='" + values.source_type + "'," +
                         " guideline_value='" + values.guideline_value + "',";
                if (values.guideline_date == null)
                {
                    msSQL += " guideline_date='null',";
                }
                else
                {
                    msSQL += " guideline_date='" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                if (values.marketvalue_date == null)
                {
                    msSQL += " marketvalue_date='null',";
                }
                else
                {
                    msSQL += " marketvalue_date='" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                msSQL += " market_value='" + values.market_value + "'," +
                         " forcedsource_value='" + values.forcedsource_value + "'," +
                         " collateralSSV_value='" + values.collateralSSV_value + "',";
                if (values.forcedvalueassessed_on == null)
                {
                    msSQL += " forcedvalueassessed_on='null',";
                }
                else
                {
                    msSQL += " forcedvalueassessed_on='" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                }
                msSQL += " collateralobservation_summary='" + values.collateralobservation_summary + "'," +
                         " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2collateral_gid='" + values.application2collateral_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2collateral_gid='" + values.application2collateral_gid + "'" +
                        " where application2collateral_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msGetGid = objcmnfunctions.GetMasterGID("A2CU");
                    msSQL = " insert into ocs_trn_tcadapplication2collateralUpdate_LOG(" +
                    " application2collateral_UpdateLOGgid ," +
                    " application2collateral_gid ," +
                    " application_gid," +
                    " source_type," +
                    " guideline_value," +
                    " guideline_date," +
                    " marketvalue_date ," +
                    " market_value," +
                    " forcedsource_value," +
                    " collateralSSV_value," +
                    " forcedvalueassessed_on," +
                    " collateralobservation_summary," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.application2collateral_gid + "'," +
                    "'" + values.application_gid + "'," +
                    "'" + lssource_type + "'," +
                    "'" + lsguideline_value + "'," +
                    "'" + lsguideline_date + "'," +
                    "'" + lsmarketvalue_date + "'," +
                    "'" + lsmarket_value + "'," +
                   "'" + lsforcedsource_value + "'," +
                   "'" + lscollateralSSV_value + "'," +
                   "'" + lsforcedvalueassessed_on + "'," +
                   "'" + lscollateralobservation_summary + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Collateral Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaDeleteCollateralDetails(string application2collateral_gid, MdlMstCollatertal values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2collateral where application2collateral_gid='" + application2collateral_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Collateral Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }

        public void DaPostHypothecation(string employee_gid, MdlMstHypothecation values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2C");
            msSQL = " insert into ocs_trn_tcadapplication2hypothecation(" +
                  " application2hypothecation_gid ," +
                  " application_gid," +
                  " securitytype_gid," +
                  " security_type," +
                  " security_description," +
                  " security_value ," +
                  " securityassessed_date," +
                  " asset_id," +
                  " roc_fillingid," +
                  " CERSAI_fillingid," +
                  " hypoobservation_summary," +
                  " primary_security," +
                  " created_by," +
                  " created_date)" +
                  " values(" +
                  "'" + msGetGid + "'," +
                  "'" + values.application_gid + "'," +
                  "'" + values.securitytype_gid + "'," +
                  "'" + values.security_type.Replace("'", "") + "',";
            if (values.security_description == null || values.security_description == "")
            {
                //msSQL += "'0.00',";
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + values.security_description.Replace("'", "") + "',";
            }

            if (values.security_value == null || values.security_value == "")
            {
                msSQL += "'0.00',";
                //msSQL += " security_value= '0.00',";
            }
            else
            {
                msSQL += "'" + values.security_value.Replace(",", "") + "',";
            }
            if (values.securityassessed_date == null)
            {
                msSQL += "null,";
            }
            else
            {
                msSQL += "'" + Convert.ToDateTime(values.securityassessed_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
            }

            msSQL += "'" + values.asset_id + "'," +
                     "'" + values.roc_fillingid + "'," +
                     "'" + values.CERSAI_fillingid + "',";
            if (values.hypoobservation_summary == null || values.hypoobservation_summary == "")
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.hypoobservation_summary.Replace("'", "") + "',";
            }
            if (values.primary_security == null || values.primary_security == "")
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.primary_security.Replace("'", "") + "',";
            }
            //"'" + values.primary_security.Replace("'", "") + "'," +
            msSQL += "'" + employee_gid + "'," +
                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Hypothecation details Added successfully";

                msSQL = "update ocs_trn_tcaduploadhypothecationocument set application2hypothecation_gid='" + msGetGid + "' where application2hypothecation_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "update ocs_trn_tcadapplication set hypothecation_flag='Y' where application_gid='" + values.application_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = "select application2hypothecation_gid,securitytype_gid,security_type,security_description,security_value," +
                    " date_format(securityassessed_date,'%d-%m-%Y') as securityassessed_date,asset_id,roc_fillingid,CERSAI_fillingid," +
                    " hypoobservation_summary,primary_security " +
                    " from ocs_trn_tcadapplication2hypothecation where application_gid='" + employee_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var gethypothecation_list = new List<hypothecation_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        gethypothecation_list.Add(new hypothecation_list
                        {
                            application2hypothecation_gid = (dr_datarow["application2hypothecation_gid"].ToString()),
                            securitytype_gid = (dr_datarow["securitytype_gid"].ToString()),
                            security_type = (dr_datarow["security_type"].ToString()),
                            security_description = (dr_datarow["security_description"].ToString()),
                            security_value = (dr_datarow["security_value"].ToString()),
                            securityassessed_date = (dr_datarow["securityassessed_date"].ToString()),
                            asset_id = (dr_datarow["asset_id"].ToString()),
                            roc_fillingid = (dr_datarow["roc_fillingid"].ToString()),
                            CERSAI_fillingid = (dr_datarow["CERSAI_fillingid"].ToString()),
                            hypoobservation_summary = (dr_datarow["hypoobservation_summary"].ToString()),
                            primary_security = (dr_datarow["primary_security"].ToString()),
                        });
                    }
                    values.hypothecation_list = gethypothecation_list;
                }
                dt_datatable.Dispose();
                msSQL = " select hypothecationdocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                       " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                       " from ocs_trn_tcaduploadhypothecationocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                       " and b.user_gid = c.user_gid and application2hypothecation_gid='" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<DocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new DocumentList
                        {
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["hypothecationdocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.DocumentList = get_filename;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occured while Adding";
            }
        }

        public void DaHypothecationTempDetailsList(string employee_gid, string application_gid, MdlMstHypothecation values)
        {
            msSQL = "select application2hypothecation_gid,securitytype_gid,security_type,security_description,security_value," +
                    " date_format(securityassessed_date,'%d-%m-%Y') as securityassessed_date,asset_id,roc_fillingid,CERSAI_fillingid," +
                    " hypoobservation_summary,primary_security " +
                    " from ocs_trn_tcadapplication2hypothecation where application_gid='" + employee_gid + "' or application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var gethypothecation_list = new List<hypothecation_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    gethypothecation_list.Add(new hypothecation_list
                    {
                        application2hypothecation_gid = (dr_datarow["application2hypothecation_gid"].ToString()),
                        securitytype_gid = (dr_datarow["securitytype_gid"].ToString()),
                        security_type = (dr_datarow["security_type"].ToString()),
                        security_description = (dr_datarow["security_description"].ToString()),
                        security_value = (dr_datarow["security_value"].ToString()),
                        securityassessed_date = (dr_datarow["securityassessed_date"].ToString()),
                        asset_id = (dr_datarow["asset_id"].ToString()),
                        roc_fillingid = (dr_datarow["roc_fillingid"].ToString()),
                        CERSAI_fillingid = (dr_datarow["CERSAI_fillingid"].ToString()),
                        hypoobservation_summary = (dr_datarow["hypoobservation_summary"].ToString()),
                        primary_security = (dr_datarow["primary_security"].ToString()),
                    });
                }
                values.hypothecation_list = gethypothecation_list;
            }
            dt_datatable.Dispose();
            msSQL = " select hypothecationdocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                      " from ocs_trn_tcaduploadhypothecationocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                      " and b.user_gid = c.user_gid and application2hypothecation_gid='" + employee_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_filename = new List<DocumentList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    get_filename.Add(new DocumentList
                    {
                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                        document_name = (dr_datarow["document_name"].ToString()),
                        document_gid = (dr_datarow["hypothecationdocument_gid"].ToString()),
                        uploaded_by = dr_datarow["uploaded_by"].ToString(),
                        updated_date = dr_datarow["uploaded_date"].ToString(),
                        document_title = dr_datarow["document_title"].ToString()
                    });
                }
                values.DocumentList = get_filename;
            }
            dt_datatable.Dispose();
        }

        public void DaHypothecationDetailsEdit(string application_gid, MdlMstHypothecation values, string employee_gid)
        {
            try
            {
                msSQL = " select application2hypothecation_gid, application_gid, securitytype_gid,security_type,security_description,security_value," +
                    " date_format(securityassessed_date, '%Y-%m-%d') as securityassessed_dateedit," +
                    " asset_id,roc_fillingid,CERSAI_fillingid,hypoobservation_summary,primary_security " +
                    " from ocs_trn_tcadapplication2hypothecation where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    lsapplication2hypothecation_gid = objODBCDatareader["application2hypothecation_gid"].ToString();
                    values.application2hypothecation_gid = objODBCDatareader["application2hypothecation_gid"].ToString();
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.securitytype_gid = objODBCDatareader["securitytype_gid"].ToString();
                    values.security_type = objODBCDatareader["security_type"].ToString();
                    values.security_description = objODBCDatareader["security_description"].ToString();
                    values.security_value = objODBCDatareader["security_value"].ToString();
                    values.securityassessed_date = objODBCDatareader["securityassessed_dateedit"].ToString();
                    values.asset_id = objODBCDatareader["asset_id"].ToString();
                    values.roc_fillingid = objODBCDatareader["roc_fillingid"].ToString();
                    values.CERSAI_fillingid = objODBCDatareader["CERSAI_fillingid"].ToString();
                    values.hypoobservation_summary = objODBCDatareader["hypoobservation_summary"].ToString();
                    values.primary_security = objODBCDatareader["primary_security"].ToString();
                }

                objODBCDatareader.Close();
                msSQL = " select application2hypothecation_gid,hypothecationdocument_gid,document_name,document_path,document_title from ocs_trn_tcaduploadhypothecationocument " +
                          " where application2hypothecation_gid='" + employee_gid + "' or application2hypothecation_gid='" + lsapplication2hypothecation_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<DocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        get_filename.Add(new DocumentList
                        {
                            document_name = dt["document_name"].ToString(),
                            document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                            document_gid = dt["hypothecationdocument_gid"].ToString(),
                            document_title = dt["document_title"].ToString(),
                            application2hypothecation_gid = dt["application2hypothecation_gid"].ToString(),
                        });
                        values.DocumentList = get_filename;
                    }
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaHypothecationDocumentTempList(string employee_gid, string application2hypothecation_gid, Documentname objfilename)
        {
            msSQL = " select application2hypothecation_gid,hypothecationdocument_gid,document_name,document_path,document_title from ocs_trn_tcaduploadhypothecationocument " +
                           " where application2hypothecation_gid='" + employee_gid + "' or application2hypothecation_gid='" + application2hypothecation_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_filename = new List<DocumentList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_filename.Add(new DocumentList
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        document_gid = dt["hypothecationdocument_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        application2hypothecation_gid = dt["application2hypothecation_gid"].ToString(),
                    });
                    objfilename.DocumentList = get_filename;
                }
            }
            dt_datatable.Dispose();
            objfilename.status = true;
        }

        public bool DaEditHypoDoc(HttpRequest httpRequest, Documentname objfilename, string employee_gid)
        {
            DocumentList objdocumentmodel = new DocumentList();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms = new MemoryStream();
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string pdfFilName = string.Empty;
            Stream ls_readStream;
            string lsdocumenttype_gid = string.Empty;
            String path = lspath;


            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";

            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = HttpContext.Current.Server.MapPath("erpdocument" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month);
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
            string lsfirstdocument_filepath = string.Empty;
            string document_title = httpRequest.Form["document_title"].ToString();
            string lsapplication2hypothecation_gid = httpRequest.Form["application2hypothecation_gid"].ToString();
            httpFileCollection = httpRequest.Files;

            httpPostedFile = httpFileCollection[0];
            string FileExtension = httpPostedFile.FileName;
            //string lsfile_gid = msdocument_gid + FileExtension;
            string lsfile_gid = msdocument_gid;
            FileExtension = Path.GetExtension(FileExtension).ToLower();
            lsfile_gid = lsfile_gid + FileExtension;
            if ((FileExtension == ".xls") || (FileExtension == ".xlsx") || (FileExtension == ".doc") || (FileExtension == ".docx") || (FileExtension == ".pdf") || (FileExtension == ".zip") || (FileExtension == ".msg") || (FileExtension == ".oft") || (FileExtension == ".txt") || (FileExtension == ".txtx"))
            {
                ls_readStream = httpPostedFile.InputStream;
                ls_readStream.CopyTo(ms);
                //lspath = HttpContext.Current.Server.MapPath("../../erp_documents" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/");
                //objcmnfunctions.uploadFile(lspath, lsfile_gid);
                //lspath = "../../erp_documents" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                ms.Close();
                lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                msGetGid = objcmnfunctions.GetMasterGID("HYPD");
                msSQL = " insert into ocs_trn_tcaduploadhypothecationocument( " +
                             " hypothecationdocument_gid," +
                             " document_name, " +
                             " document_title," +
                             " document_path, " +
                             " application2hypothecation_gid," +
                             " created_by ," +
                             " created_date " +
                             " )values(" +
                             "'" + msGetGid + "'," +
                             "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                             "'" + document_title.Replace("'", "") + "'," +
                             "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                             "'" + employee_gid + "'," +
                             "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    msSQL = " select hypothecationdocument_gid,document_name,document_path,document_title from ocs_trn_tcaduploadhypothecationocument " +
                           " where application2hypothecation_gid='" + employee_gid + "' or application2hypothecation_gid='" + lsapplication2hypothecation_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    var get_filename = new List<DocumentList>();
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dt in dt_datatable.Rows)
                        {
                            get_filename.Add(new DocumentList
                            {
                                document_name = dt["document_name"].ToString(),
                                document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                                document_gid = dt["hypothecationdocument_gid"].ToString(),
                                document_title = dt["document_title"].ToString(),
                            });
                            objfilename.DocumentList = get_filename;
                        }
                    }
                    dt_datatable.Dispose();

                    objfilename.status = true;
                    objfilename.message = "Hypothecation Document uploaded successfully";
                    return true;
                }
                else
                {
                    objfilename.status = false;
                    objfilename.message = "Error Occured while uploading document";
                    return false;
                }
            }
            else
            {
                objfilename.status = false;
                objfilename.message = "File format is not supported";
                return false;
            }
        }

        public void DadeleteHypoDoc(string document_gid, Documentname values, string employee_gid)
        {
            msSQL = "delete from  ocs_trn_tcaduploadhypothecationocument where hypothecationdocument_gid='" + document_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Document deleted successfully";
                values.status = true;

                msSQL = " select hypothecationdocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                      " from ocs_trn_tcaduploadhypothecationocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                      " and b.user_gid = c.user_gid and application2hypothecation_gid='" + employee_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<DocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new DocumentList
                        {
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_gid = (dr_datarow["hypothecationdocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.DocumentList = get_filename;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.message = "Error Occrued while deleting document";
                values.status = false;
            }
        }

        public void DaHypothecationDetailsUpdate(string employee_gid, MdlMstHypothecation values)
        {
            msSQL = " select application2hypothecation_gid, application_gid, securitytype_gid,security_type,security_description,security_value,securityassessed_date," +
                    " asset_id,roc_fillingid,CERSAI_fillingid,hypoobservation_summary,primary_security " +
                    " from ocs_trn_tcadapplication2hypothecation where application2hypothecation_gid='" + values.application2hypothecation_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication2hypothecation_gid = objODBCDatareader["application2hypothecation_gid"].ToString();
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                lssecuritytype_gid = objODBCDatareader["securitytype_gid"].ToString();
                lssecurity_type = objODBCDatareader["security_type"].ToString();
                lssecurity_description = objODBCDatareader["security_description"].ToString();
                lssecurity_value = objODBCDatareader["security_value"].ToString();
                if (objODBCDatareader["securityassessed_date"].ToString() == "")
                {
                    lssecurityassessed_date = "";
                }
                else
                {
                    lssecurityassessed_date = Convert.ToDateTime(objODBCDatareader["securityassessed_date"]).ToString("yyyy-MM-dd HH:mm:ss");
                }
                lsasset_id = objODBCDatareader["asset_id"].ToString();
                lsroc_fillingid = objODBCDatareader["roc_fillingid"].ToString();
                lsCERSAI_fillingid = objODBCDatareader["CERSAI_fillingid"].ToString();
                lshypoobservation_summary = objODBCDatareader["hypoobservation_summary"].ToString();
                lsprimary_security = objODBCDatareader["primary_security"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplication2hypothecation set " +
                        " securitytype_gid='" + values.securitytype_gid + "'," +
                         " security_type='" + values.security_type + "',";
                if (values.security_description == null || values.security_description == "")
                {

                }
                else
                {
                    msSQL += " security_description='" + values.security_description.Replace("'", " ") + "',";
                }
                if (values.security_value == null || values.security_value == "")
                {
                    msSQL += " security_value= '0.00',";
                }
                else
                {
                    msSQL += " security_value='" + values.security_value.Replace("'", "") + "',";
                }
                if (lssecurityassessed_date == values.securityassessed_date)
                {

                }
                else
                {
                    msSQL += " securityassessed_date='" + Convert.ToDateTime(values.securityassessed_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                }
                if (values.asset_id == null || values.asset_id == "")
                {

                }
                else
                {
                    msSQL += " asset_id='" + values.asset_id.Replace("'", " ") + "',";
                }
                if (values.roc_fillingid == null || values.roc_fillingid == "")
                {

                }
                else
                {
                    msSQL += " roc_fillingid='" + values.roc_fillingid.Replace("'", " ") + "',";
                }
                if (values.CERSAI_fillingid == null || values.CERSAI_fillingid == "")
                {

                }
                else
                {
                    msSQL += " CERSAI_fillingid='" + values.CERSAI_fillingid.Replace("'", " ") + "',";
                }
                if (values.hypoobservation_summary == null || values.hypoobservation_summary == "")
                {

                }
                else
                {
                    msSQL += " hypoobservation_summary='" + values.hypoobservation_summary.Replace("'", " ") + "',";
                }
                if (values.primary_security == null || values.primary_security == "")
                {

                }
                else
                {
                    msSQL += " primary_security='" + values.primary_security.Replace("'", " ") + "',";
                }
                msSQL += " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2hypothecation_gid='" + values.application2hypothecation_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msSQL = "update ocs_trn_tcaduploadhypothecationocument set application2hypothecation_gid='" + values.application2hypothecation_gid + "'" +
                       " where application2hypothecation_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msGetGid = objcmnfunctions.GetMasterGID("A2HU");
                    msSQL = " insert into ocs_trn_tcadapplication2hypothecationUpdateLOG(" +
                   " application2hypothecation_UpdateLOGgid ," +
                   " application2hypothecation_gid ," +
                   " application_gid," +
                   " securitytype_gid," +
                   " security_type," +
                   " security_description," +
                   " security_value ," +
                   " securityassessed_date," +
                   " asset_id," +
                   " roc_fillingid," +
                   " CERSAI_fillingid," +
                   " hypoobservation_summary," +
                   " primary_security," +
                   " created_by," +
                   " created_date)" +
                   " values(" +
                   "'" + msGetGid + "'," +
                   "'" + values.application2hypothecation_gid + "'," +
                   "'" + values.application_gid + "'," +
                   "'" + lssecuritytype_gid + "'," +
                   "'" + lssecurity_type.Replace("'", @"\'") + "',";
                  
                    if (lssecurity_description == null || lssecurity_description == "")
                    {
                        //msSQL += "'0.00',";
                        msSQL += "null,";
                    }
                    else
                    {
                        msSQL += "'" + lssecurity_description.Replace("'", "") + "',";
                    }
                    if (lssecurity_value == null || lssecurity_value == "")
                    {
                        msSQL += "'0.00',";
                    }
                    else
                    {
                        msSQL += "'" + lssecurity_value.Replace("'", "") + "',";
                    }

                    msSQL += "'" + lssecurityassessed_date  + "'," +
                             "'" + lsasset_id + "'," +
                             "'" + lsroc_fillingid + "'," +
                             "'" + lsCERSAI_fillingid + "',";
                    if (lshypoobservation_summary == null || lshypoobservation_summary == "")
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + lshypoobservation_summary.Replace("'", "") + "',";
                    }
                    if (lsprimary_security == null || lsprimary_security == "")
                    {
                        msSQL += "'',";
                    }
                    else
                    {
                        msSQL += "'" + lsprimary_security.Replace("'", "") + "',";
                    }

                    msSQL += "'" + employee_gid + "'," +
                             "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Hypothecation Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaDeleteHypothecationDetails(string application2hypothecation_gid, MdlMstHypothecation values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2hypothecation where application2hypothecation_gid='" + application2hypothecation_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Hypothecation Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;
            }
        }

        public bool Dapostcollateraldocument(HttpRequest httpRequest, Documentname objfilename, string employee_gid)
        {
            DocumentList objdocumentmodel = new DocumentList();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;

            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string pdfFilName = string.Empty;
            Stream ls_readStream;
            string lsdocumenttype_gid = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";

            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = HttpContext.Current.Server.MapPath("erpdocument" + "/" + lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month);
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }


            string document_title = httpRequest.Form["document_title"].ToString();
            //string lsapplication2loan_gid = httpRequest.Form["application2loan_gid"].ToString();
            if (httpRequest.Files.Count > 0)
            {
                string lsfirstdocument_filepath = string.Empty;
                httpFileCollection = httpRequest.Files;
                for (int i = 0; i < httpFileCollection.Count; i++)
                {
                    string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                    httpPostedFile = httpFileCollection[i];
                    string FileExtension = httpPostedFile.FileName;
                    //string lsfile_gid = msdocument_gid + FileExtension;
                    string lsfile_gid = msdocument_gid;
                    FileExtension = Path.GetExtension(FileExtension).ToLower();
                    lsfile_gid = lsfile_gid + FileExtension;
                    if ((FileExtension == ".xls") || (FileExtension == ".xlsx") || (FileExtension == ".doc") || (FileExtension == ".docx") || (FileExtension == ".pdf") || (FileExtension == ".zip") || (FileExtension == ".msg") || (FileExtension == ".oft") || (FileExtension == ".txt") || (FileExtension == ".txtx"))
                    {
                        MemoryStream ms = new MemoryStream();
                        ls_readStream = httpPostedFile.InputStream;
                        ls_readStream.CopyTo(ms);

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/CollateralDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("CAMD");
                        msSQL = " insert into ocs_trn_tcaduploadcollateraldocument( " +
                                     " collateraldocument_gid," +
                                     " document_name, " +
                                     " document_title," +
                                     " document_path, " +
                                     " application2loan_gid," +
                                     " created_by ," +
                                     " created_date " +
                                     " )values(" +
                                     "'" + msGetGid + "'," +
                                     "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                     "'" + document_title.Replace("'", "") + "'," +
                                     "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                     "'" + employee_gid + "'," +
                                     "'" + employee_gid + "'," +
                                     "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult != 0)
                        {
                            msSQL = " select collateraldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                               " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                               " from ocs_trn_tcaduploadcollateraldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                               " and b.user_gid = c.user_gid and application2loan_gid='" + employee_gid + "'";

                            dt_datatable = objdbconn.GetDataTable(msSQL);
                            var get_filename = new List<DocumentList>();
                            if (dt_datatable.Rows.Count != 0)
                            {
                                foreach (DataRow dr_datarow in dt_datatable.Rows)
                                {
                                    get_filename.Add(new DocumentList
                                    {
                                        document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                                        document_name = (dr_datarow["document_name"].ToString()),
                                        document_gid = (dr_datarow["collateraldocument_gid"].ToString()),
                                        uploaded_by = dr_datarow["uploaded_by"].ToString(),
                                        updated_date = dr_datarow["uploaded_date"].ToString(),
                                        document_title = dr_datarow["document_title"].ToString()
                                    });
                                }
                                objfilename.DocumentList = get_filename;
                            }
                            dt_datatable.Dispose();

                            objfilename.status = true;
                            objfilename.message = "Collateral Document uploaded successfully";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured while uploading Collateral document";
                        }
                    }
                    else
                    {
                        objfilename.status = false;
                        objfilename.message = "File format is not supported";
                    }
                }
            }
            return true;
        }

        public bool DaPostHypoDoc(HttpRequest httpRequest, Documentname objfilename, string employee_gid)
        {
            DocumentList objdocumentmodel = new DocumentList();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;

            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string pdfFilName = string.Empty;
            Stream ls_readStream;
            string lsdocumenttype_gid = string.Empty;
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();


            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";

            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = HttpContext.Current.Server.MapPath("erpdocument" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month);
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }

            string document_title = httpRequest.Form["document_title"].ToString();


            if (httpRequest.Files.Count > 0)
            {
                string lsfirstdocument_filepath = string.Empty;
                httpFileCollection = httpRequest.Files;
                for (int i = 0; i < httpFileCollection.Count; i++)
                {
                    MemoryStream ms = new MemoryStream();
                    string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                    httpPostedFile = httpFileCollection[i];
                    string FileExtension = httpPostedFile.FileName;
                    //string lsfile_gid = msdocument_gid + FileExtension;
                    string lsfile_gid = msdocument_gid;
                    FileExtension = Path.GetExtension(FileExtension).ToLower();
                    lsfile_gid = lsfile_gid + FileExtension;
                    //if ((FileExtension == ".xls") || (FileExtension == ".xlsx") || (FileExtension == ".doc") || (FileExtension == ".docx") || (FileExtension == ".pdf") || (FileExtension == ".zip") || (FileExtension == ".msg") || (FileExtension == ".oft") || (FileExtension == ".txt") || (FileExtension == ".txtx") || (FileExtension == ".PPT") || (FileExtension == ".PPTX") || (FileExtension == ".HTML") || (FileExtension == ".ODT") || (FileExtension == ".CSV") || (FileExtension == ".PNG") || (FileExtension == ".JPG") || (FileExtension == ".Jpeg"))
                    //{
                    ls_readStream = httpPostedFile.InputStream;
                    ls_readStream.CopyTo(ms);

                    // Check Document validation;

                    byte[] bytes = ms.ToArray();
                    if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                    {
                        objfilename.message = "File format is not supported";
                        return false;
                    }

                    bool status;
                    status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                    ms.Close();
                    lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/HypothecationDoc/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                    msGetGid = objcmnfunctions.GetMasterGID("HYPD");
                    msSQL = " insert into ocs_trn_tcaduploadhypothecationocument( " +
                                 " hypothecationdocument_gid," +
                                 " document_name, " +
                                 " document_title," +
                                 " document_path, " +
                                 " application2hypothecation_gid," +
                                 " created_by ," +
                                 " created_date " +
                                 " )values(" +
                                 "'" + msGetGid + "'," +
                                 "'" + httpPostedFile.FileName.Replace("'", "") + "'," +
                                 "'" + document_title.Replace("'", "") + "'," +
                                 "'" + lspath + msdocument_gid + FileExtension.Replace("'", "") + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + employee_gid + "'," +
                                 "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        msSQL = " select hypothecationdocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                           " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                           " from ocs_trn_tcaduploadhypothecationocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                           " and b.user_gid = c.user_gid and application2hypothecation_gid='" + employee_gid + "'";

                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var get_filename = new List<DocumentList>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dr_datarow in dt_datatable.Rows)
                            {
                                get_filename.Add(new DocumentList
                                {
                                    document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                                    document_name = (dr_datarow["document_name"].ToString()),
                                    document_gid = (dr_datarow["hypothecationdocument_gid"].ToString()),
                                    uploaded_by = dr_datarow["uploaded_by"].ToString(),
                                    updated_date = dr_datarow["uploaded_date"].ToString(),
                                    document_title = dr_datarow["document_title"].ToString()
                                });
                            }
                            objfilename.DocumentList = get_filename;
                        }
                        dt_datatable.Dispose();

                        objfilename.status = true;
                        objfilename.message = "Hypothecation Document uploaded successfully";
                    }
                    else
                    {
                        objfilename.status = false;
                        objfilename.message = "Error Occured while uploading document";
                    }
                    //}
                    //else
                    //{
                    //    objfilename.status = false;
                    //    objfilename.message = "File format is not supported";
                    //}
                }
            }
            return true;
        }

        public void DaUpdateProductCharges(string employee_gid, MdlProductCharges values)
        {
            msSQL = " select application_gid, overalllimit_amount, validityoveralllimit_year, validityoveralllimit_month, validityoveralllimit_days, calculationoveralllimit_validity," +
                   " enduse_purpose, processing_fee, processing_collectiontype, doc_charges, doccharge_collectiontype, fieldvisit_charge, fieldvisit_collectiontype, " +
                  " adhoc_fee, adhoc_collectiontype, life_insurance, lifeinsurance_collectiontype, acct_insurance, total_collect, total_deduct " +
                   " from ocs_trn_tcadapplication where application_gid='" + values.application_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                lsoveralllimit_amount = objODBCDatareader["overalllimit_amount"].ToString();
                lsvalidityoveralllimit_year = objODBCDatareader["validityoveralllimit_year"].ToString();
                lsvalidityoveralllimit_month = objODBCDatareader["validityoveralllimit_month"].ToString();
                lsvalidityoveralllimit_days = objODBCDatareader["validityoveralllimit_days"].ToString();
                lscalculationoveralllimit_validity = objODBCDatareader["calculationoveralllimit_validity"].ToString();
                lsenduse_purpose = objODBCDatareader["enduse_purpose"].ToString();
                lsprocessing_fee = objODBCDatareader["processing_fee"].ToString();
                lsprocessing_collectiontype = objODBCDatareader["processing_collectiontype"].ToString();
                lsdoc_charges = objODBCDatareader["doc_charges"].ToString();
                lsdoccharge_collectiontype = objODBCDatareader["doccharge_collectiontype"].ToString();
                lsfieldvisit_charge = objODBCDatareader["fieldvisit_charge"].ToString();
                lsfieldvisit_collectiontype = objODBCDatareader["fieldvisit_collectiontype"].ToString();
                lsadhoc_fee = objODBCDatareader["adhoc_fee"].ToString();
                lsadhoc_collectiontype = objODBCDatareader["adhoc_collectiontype"].ToString();
                lslife_insurance = objODBCDatareader["life_insurance"].ToString();
                lslifeinsurance_collectiontype = objODBCDatareader["lifeinsurance_collectiontype"].ToString();
                lsacct_insurance = objODBCDatareader["acct_insurance"].ToString();
                lstotal_collect = objODBCDatareader["total_collect"].ToString();
                lstotal_deduct = objODBCDatareader["total_deduct"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplication set " +
                      " overalllimit_amount='" + values.overalllimit_amount + "'," +
                      " validityoveralllimit_year='" + values.validityoveralllimit_year + "'," +
                      " validityoveralllimit_month='" + values.validityoveralllimit_month + "'," +
                      " validityoveralllimit_days='" + values.validityoveralllimit_days + "'," +
                      " calculationoveralllimit_validity='" + values.calculationoveralllimit_validity + "'," +
                      " enduse_purpose='" + values.enduse_purpose + "'," +
                       " processing_fee='" + values.processing_fee + "'," +
                       " processing_collectiontype='" + values.processing_collectiontype + "'," +
                       " doc_charges='" + values.doc_charges + "'," +
                       " doccharge_collectiontype='" + values.doccharge_collectiontype + "'," +
                       " fieldvisit_charge='" + values.fieldvisit_charge + "'," +
                       " fieldvisit_collectiontype='" + values.fieldvisit_collectiontype + "'," +
                       " adhoc_fee='" + values.adhoc_fee + "'," +
                       " adhoc_collectiontype='" + values.adhoc_collectiontype + "'," +
                       " life_insurance='" + values.life_insurance + "'," +
                       " lifeinsurance_collectiontype='" + values.lifeinsurance_collectiontype + "'," +
                       " acct_insurance='" + values.acct_insurance + "'," +
                       " total_collect='" + values.total_collect + "'," +
                       " total_deduct='" + values.total_deduct + "'," +
                       " updated_by='" + employee_gid + "'," +
                       " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where application_gid='" + values.application_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult == 1)
                {
                    msSQL = " update ocs_trn_tcadapplication2loan set application_gid='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    //msSQL = " update ocs_trn_tcadapplication2buyer set application_gid='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                    //mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = " update ocs_trn_tcadapplication2collateral set application_gid='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msSQL = " update ocs_trn_tcadapplication2hypothecation set application_gid='" + values.application_gid + "' where application_gid='" + employee_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    msGetGid = objcmnfunctions.GetMasterGID("APUL");
                    msSQL = " insert into ocs_trn_tcadapplicationUpdateLOG(" +
                          " application_UpdateLOGgid," +
                           " application_gid," +
                           " overalllimit_amount," +
                           " validityoveralllimit_year," +
                           " validityoveralllimit_month," +
                           " validityoveralllimit_days," +
                           " calculationoveralllimit_validity," +
                           " enduse_purpose," +
                            " processing_fee," +
                            " processing_collectiontype," +
                            " doc_charges," +
                            " doccharge_collectiontype," +
                            " fieldvisit_charge," +
                            " fieldvisit_collectiontype," +
                            " adhoc_fee," +
                            " adhoc_collectiontype," +
                            " life_insurance," +
                            " lifeinsurance_collectiontype," +
                            " acct_insurance," +
                            " total_collect," +
                            " total_deduct," +
                            " created_by," +
                       " created_date)" +
                       " values(" +
                       "'" + msGetGid + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + lsoveralllimit_amount + "'," +
                       "'" + lsvalidityoveralllimit_year + "'," +
                       "'" + lsvalidityoveralllimit_month + "'," +
                       "'" + lsvalidityoveralllimit_days + "'," +
                       "'" + lscalculationoveralllimit_validity + "'," +
                       "'" + lsenduse_purpose + "'," +
                       "'" + lsprocessing_fee + "'," +
                       "'" + lsprocessing_collectiontype + "'," +
                       "'" + lsdoc_charges + "'," +
                       "'" + lsdoccharge_collectiontype + "'," +
                       "'" + lsfieldvisit_charge + "'," +
                       "'" + lsfieldvisit_collectiontype + "'," +
                       "'" + lsadhoc_fee + "'," +
                       "'" + lsadhoc_collectiontype + "'," +
                       "'" + lslife_insurance + "'," +
                       "'" + lslifeinsurance_collectiontype + "'," +
                       "'" + lsacct_insurance + "'," +
                       "'" + lstotal_collect + "'," +
                       "'" + lstotal_deduct + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    values.status = true;
                    values.message = "Product&Charges Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaUpdateOverallLimit(string employee_gid, MdlProductCharges values)
        {


            msSQL = " update ocs_trn_tcadapplication set " +
                  " overalllimit_amount='" + values.overalllimit_amount + "'," +
                  " validityoveralllimit_year='" + values.validityoveralllimit_year + "'," +
                  " validityoveralllimit_month='" + values.validityoveralllimit_month + "'," +
                  " validityoveralllimit_days='" + values.validityoveralllimit_days + "'," +
                  " calculationoveralllimit_validity='" + values.calculationoveralllimit_validity + "'," +
                  " productcharge_flag='Y'," +
                  " productcharges_status='Incomplete'," +
                  " csa_applicability='" + values.csa_applicability + "'," +
                  " csaactivity_gid='" + values.csaactivity_gid + "'," +
                  " csaactivity_name='" + values.csaactivity_name + "'," +
                  " percentageoftotal_limit='" + values.percentageoftotal_limit + "'," +
                  " updated_by='" + employee_gid + "'," +
                  " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                  " where application_gid='" + values.application_gid + "' ";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Overall Limit Updated Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
            }


        }

        public void DaDeleteLoan(MdlMstLoanDtl values, string employee_gid)
        {

            msSQL = "select application2servicecharge_gid from ocs_trn_tcadapplicationservicecharge where producttype_gid like '%" + values.producttype_gid + "%' and " +
                " application_gid='" + values.application_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Can't able to delete because already service charges added against this product type";

            }
            else
            {
                objODBCDatareader.Close();

                msSQL = "delete from ocs_trn_tcadapplication2loan where application2loan_gid='" + values.application2loan_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Loan details Deleted successfully";
                    msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan  where application_gid = '" + values.application_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == false)
                    {

                        msSQL = "update ocs_trn_tcadapplication set productcharges_status='Incomplete',productcharge_flag='N' where application_gid = '" + values.application_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                    objODBCDatareader.Close();
                    msSQL = "select date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,facilityrequested_date,scheme_type, " +
                               " productsub_type, loanfacility_amount, loan_type, rate_interest, penal_interest, facilityoverall_limit, " +
                               " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name,producttype_gid, " +
                               " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate,application2loan_gid, " +
                               " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate from ocs_trn_tcadapplication2loan " +
                               " where application_gid='" + values.application_gid + "'";
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    var getmstloan_list = new List<mstloan_list>();
                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            getmstloan_list.Add(new mstloan_list
                            {
                                facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                                producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                                product_type = (dr_datarow["product_type"].ToString()),
                                productsub_type = (dr_datarow["productsub_type"].ToString()),
                                loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                                loan_type = (dr_datarow["loan_type"].ToString()),
                                rate_interest = (dr_datarow["rate_interest"].ToString()),
                                penal_interest = (dr_datarow["penal_interest"].ToString()),
                                facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                                tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                                facility_type = (dr_datarow["facility_type"].ToString()),
                                facility_mode = (dr_datarow["facility_mode"].ToString()),
                                principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                                interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                                interest_status = (dr_datarow["interest_status"].ToString()),
                                moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                                moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                                moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                                moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                                scheme_type = (dr_datarow["scheme_type"].ToString()),
                                application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),

                            });
                        }
                        values.mstloan_list = getmstloan_list;
                    }
                    dt_datatable.Dispose();

                }
                else
                {
                    values.status = false;
                    values.message = "Error Occurred while deleting";
                }
            }
        }

        public void DaDeleteCharge(string application2servicecharge_gid, MdlProductCharges values, string employee_gid)
        {
            msSQL = "select application_gid from tmp_application where employee_gid='" + employee_gid + "'";
            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);
            msSQL = "delete from ocs_trn_tcadapplicationservicecharge where application2servicecharge_gid='" + application2servicecharge_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            msSQL = "delete from ocs_trn_tlsafeescharge where application2servicecharge_gid='" + application2servicecharge_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Service Charges Deleted successfully";

                msSQL = " select application_gid,application2servicecharge_gid,format(processing_fee,0,'en_IN') as processing_fee,processing_collectiontype,format(doc_charges,0,'en_IN') as doc_charges," +
                        " doccharge_collectiontype,format(fieldvisit_charges,0,'en_IN') as fieldvisit_charge,fieldvisit_charges_collectiontype,format(adhoc_fee,0,'en_IN') as adhoc_fee,adhoc_collectiontype," +
                        " format(life_insurance,0,'en_IN') as life_insurance,lifeinsurance_collectiontype,format(acct_insurance,0,'en_IN') as acct_insurance, " +
                        " format(total_collect,0,'en_IN') as total_collect,format(total_deduct,0,'en_IN') as total_deduct," +
                        " product_type,acctinsurance_collectiontype, " +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " from ocs_mst_tapplicationservicecharge a " +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                        " where a.application_gid = '" + lsapplication_gid + "' order by application2servicecharge_gid desc";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getproductcharges_list = new List<servicecharges_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getproductcharges_list.Add(new servicecharges_list
                        {
                            application2servicecharge_gid = (dr_datarow["application2servicecharge_gid"].ToString()),
                            processing_fee = (dr_datarow["processing_fee"].ToString()),
                            processing_collectiontype = (dr_datarow["processing_collectiontype"].ToString()),
                            doc_charges = (dr_datarow["doc_charges"].ToString()),
                            doccharge_collectiontype = (dr_datarow["doccharge_collectiontype"].ToString()),
                            fieldvisit_charge = (dr_datarow["fieldvisit_charge"].ToString()),
                            fieldvisit_collectiontype = (dr_datarow["fieldvisit_charges_collectiontype"].ToString()),
                            adhoc_fee = (dr_datarow["adhoc_fee"].ToString()),
                            adhoc_collectiontype = (dr_datarow["adhoc_collectiontype"].ToString()),
                            life_insurance = (dr_datarow["life_insurance"].ToString()),
                            lifeinsurance_collectiontype = (dr_datarow["lifeinsurance_collectiontype"].ToString()),
                            acct_insurance = (dr_datarow["acct_insurance"].ToString()),
                            total_collect = (dr_datarow["total_collect"].ToString()),
                            total_deduct = (dr_datarow["total_deduct"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            acctinsurance_collectiontype = (dr_datarow["acctinsurance_collectiontype"].ToString()),
                        });
                    }
                    values.servicecharges_list = getproductcharges_list;
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred while deleting";
            }
        }

        public void DaPostEditServiceCharges(string employee_gid, MdlProductCharges values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2C");

            string producttypegid = string.Empty;
            string producttype = string.Empty;
            string lsproducttypecheck_gid = string.Empty;
            if (values.producttypelist != null)
            {

                var productTypeListCounter = values.producttypelist.GroupBy(item => item.producttype_gid);

               

                for (var i = 0; i < values.producttypelist.Count; i++)
                {
                    foreach (var item in productTypeListCounter)
                    {
                        string producttypelist_gid = item.Key;
                        int count_gid = item.Count();
                        msSQL = "select producttype_gid from ocs_trn_tcadapplicationservicecharge where application_gid='" + values.application_gid + "'";
                        //lsproducttypecheck_gid = objdbconn.GetExecuteScalar(msSQL);
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        if (dt_datatable.Rows.Count != 0)
                        {
                            int servicecount = 0;

                            foreach (DataRow dr_datarow in dt_datatable.Rows)
                            {
                                lsproducttypecheck_gid = dr_datarow["producttype_gid"].ToString();
                                if (lsproducttypecheck_gid.Contains(",") == false)
                                {
                                    msSQL = "select COUNT(application2servicecharge_gid) from ocs_trn_tcadapplicationservicecharge where producttype_gid ='" + producttypelist_gid + "' and  application_gid='" + values.application_gid + "'";
                                    string application2servicechargelist_count1 = objdbconn.GetExecuteScalar(msSQL);
                                    int lsapplication2servicechargelist_count1 = Convert.ToInt16(application2servicechargelist_count1);
                                    msSQL = "select COUNT(application2loan_gid) from ocs_trn_tcadapplication2loan where producttype_gid ='" + producttypelist_gid + "' and application_gid='" + values.application_gid + "'";
                                    application2loan_count = objdbconn.GetExecuteScalar(msSQL);
                                    int total_count1 = count_gid + lsapplication2servicechargelist_count1;

         
                                    if ((total_count1 > int.Parse(application2loan_count)))
                                    {
                                        
                                        values.status = false;
                                        values.message = "Product Type Already Added in Service Charges";
                                        return;
                                    }
                                }
                                else
                                {
                                    string[] producttypegid_array = lsproducttypecheck_gid.Split(',');

                                    foreach (var item1 in producttypegid_array)
                                    {
                                        if (item1 == values.producttypelist[i].producttype_gid)
                                        {
                                            servicecount += 1;
                                        }
                                    }

                                    msSQL = "select COUNT(application2loan_gid) from ocs_trn_tcadapplication2loan where producttype_gid ='" + values.producttypelist[i].producttype_gid + "' and application_gid='" + values.application_gid + "'";
                                    application2loan_count = objdbconn.GetExecuteScalar(msSQL);
                                    int total_count1 = count_gid + servicecount;
                                    if (total_count1 > int.Parse(application2loan_count))
                                    {
                                        values.status = false;
                                        values.message = "Product Type " + values.producttypelist[i].product_type + " Already Added in Service Charges";
                                        return;
                                    }


                                }
                            }
                        }

                    }

                    msSQL = "select producttype_gid from ocs_trn_tcadapplicationservicecharge where application_gid='" + values.application_gid + "'";
                    //lsproducttypecheck_gid = objdbconn.GetExecuteScalar(msSQL);
                    dt_datatable = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable.Rows.Count != 0)
                    {
                        int servicecount = 0;
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {

                            
                            //lsproducttypecheck_gid = dr_datarow["producttype_gid"].ToString();
                            //string[] producttypegid_array1 = lsproducttypecheck_gid.Split(',');
                            //if (lsproducttypecheck_gid.Contains(",") == false)
                            //{
                            //}
                            if (lsproducttypecheck_gid.Contains(",") == false)
                            {
                                msSQL = "select COUNT(application2servicecharge_gid) from ocs_trn_tcadapplicationservicecharge where producttype_gid ='" + values.producttypelist[i].producttype_gid + "' and  application_gid='" + values.application_gid + "'";
                                application2servicecharge_count = objdbconn.GetExecuteScalar(msSQL);
                                msSQL = "select COUNT(application2loan_gid) from ocs_trn_tcadapplication2loan where producttype_gid ='" + values.producttypelist[i].producttype_gid + "' and application_gid='" + values.application_gid + "'";
                                application2loan_count = objdbconn.GetExecuteScalar(msSQL);

                                if (int.Parse(application2servicecharge_count) >= int.Parse(application2loan_count))
                                {
                                    values.status = false;
                                    values.message = "Product Type " + values.producttypelist[i].product_type + " Already Added in Service Charges";
                                    return;
                                }
                            }
                            else
                            {
                                string[] producttypegid_array = lsproducttypecheck_gid.Split(',');
                                
                                foreach (var item in producttypegid_array)
                                {
                                    if (item == values.producttypelist[i].producttype_gid)
                                    {
                                        servicecount += 1;
                                    }
                                }

                                msSQL = "select COUNT(application2loan_gid) from ocs_trn_tcadapplication2loan where producttype_gid ='" + values.producttypelist[i].producttype_gid + "' and application_gid='" + values.application_gid + "'";
                                application2loan_count = objdbconn.GetExecuteScalar(msSQL);

                                if (servicecount >= int.Parse(application2loan_count))
                                {
                                    values.status = false;
                                    values.message = "Product Type " + values.producttypelist[i].product_type + " Already Added in Service Charges";
                                    return;
                                }


                            }

                        }
                    }
                    producttypegid += values.producttypelist[i].producttype_gid + ",";
                    producttype += values.producttypelist[i].product_type + ",";

                }
                producttypegid = producttypegid.TrimEnd(',');
                producttype = producttype.TrimEnd(',');
            }

            msSQL = "insert into ocs_trn_tcadapplicationservicecharge(" +
                " application2servicecharge_gid," +
                " application_gid," +
                " processing_fee," +
                " processing_collectiontype," +
                " doc_charges," +
                " doccharge_collectiontype," +
                " fieldvisit_charges," +
                " fieldvisit_charges_collectiontype," +
                " adhoc_fee," +
                " adhoc_collectiontype," +
                " life_insurance," +
                " lifeinsurance_collectiontype," +
                " acct_insurance," +
                " acctinsurance_collectiontype," +
                " total_collect," +
                " total_deduct," +
                " product_type," +
                " producttype_gid," +
                " created_by," +
                " created_date) values(" +
                 "'" + msGetGid + "'," +
                       "'" + values.application_gid + "'," +
                       "'" + values.processing_fee + "'," +
                       "'" + values.processing_collectiontype + "'," +
                       "'" + values.doc_charges + "'," +
                       "'" + values.doccharge_collectiontype + "'," +
                       "'" + values.fieldvisit_charge + "'," +
                       "'" + values.fieldvisit_collectiontype + "'," +
                       "'" + values.adhoc_fee + "'," +
                       "'" + values.adhoc_collectiontype + "'," +
                       "'" + values.life_insurance + "'," +
                       "'" + values.lifeinsurance_collectiontype + "'," +
                       "'" + values.acct_insurance + "'," +
                       "'" + values.acctinsurance_collectiontype + "'," +
                       "'" + values.total_collect + "'," +
                       "'" + values.total_deduct + "'," +
                       "'" + producttype + "'," +
                       "'" + producttypegid + "'," +
                       "'" + employee_gid + "'," +
                       "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



            msSQL = " select application_gid,application2servicecharge_gid,format(processing_fee,0,'en_IN') as processing_fee,processing_collectiontype,format(doc_charges,0,'en_IN') as doc_charges," +
                        " doccharge_collectiontype,format(fieldvisit_charges,0,'en_IN') as fieldvisit_charge,fieldvisit_charges_collectiontype,format(adhoc_fee,0,'en_IN') as adhoc_fee,adhoc_collectiontype," +
                        " format(life_insurance,0,'en_IN') as life_insurance,lifeinsurance_collectiontype,format(acct_insurance,0,'en_IN') as acct_insurance, " +
                        " format(total_collect,0,'en_IN') as total_collect,format(total_deduct,0,'en_IN') as total_deduct," +
                        " product_type,acctinsurance_collectiontype, " +
                        " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date," +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by" +
                        " from ocs_trn_tcadapplicationservicecharge a " +
                        " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid" +
                        " where a.application_gid = '" + values.application_gid + "' order by application2servicecharge_gid desc";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getproductcharges_list = new List<servicecharges_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getproductcharges_list.Add(new servicecharges_list
                    {
                        application2servicecharge_gid = (dr_datarow["application2servicecharge_gid"].ToString()),
                        processing_fee = (dr_datarow["processing_fee"].ToString()),
                        processing_collectiontype = (dr_datarow["processing_collectiontype"].ToString()),
                        doc_charges = (dr_datarow["doc_charges"].ToString()),
                        doccharge_collectiontype = (dr_datarow["doccharge_collectiontype"].ToString()),
                        fieldvisit_charge = (dr_datarow["fieldvisit_charge"].ToString()),
                        fieldvisit_collectiontype = (dr_datarow["fieldvisit_charges_collectiontype"].ToString()),
                        adhoc_fee = (dr_datarow["adhoc_fee"].ToString()),
                        adhoc_collectiontype = (dr_datarow["adhoc_collectiontype"].ToString()),
                        life_insurance = (dr_datarow["life_insurance"].ToString()),
                        lifeinsurance_collectiontype = (dr_datarow["lifeinsurance_collectiontype"].ToString()),
                        acct_insurance = (dr_datarow["acct_insurance"].ToString()),
                        total_collect = (dr_datarow["total_collect"].ToString()),
                        total_deduct = (dr_datarow["total_deduct"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        acctinsurance_collectiontype = (dr_datarow["acctinsurance_collectiontype"].ToString()),
                    });
                }
                values.servicecharges_list = getproductcharges_list;
            }
            dt_datatable.Dispose();


            msSQL = " select generatelsa_gid from ocs_trn_tgeneratelsa a " +
                    " left join ocs_trn_tprocesstype_assign b on b.application_gid = a.application_gid " +
                    " where a.application_gid = '" + values.application_gid + "' and b.menu_gid = '" + getMenuClass.LSA + "' and maker_approvalflag = 'N'";
            string generatelsa_gid = objdbconn.GetExecuteScalar(msSQL);
            if (generatelsa_gid != "")
            {
                string msgetfeechargeGid = objcmnfunctions.GetMasterGID("LFCG");

                msSQL = " insert into ocs_trn_tlsafeescharge(" +
                        " lsafeescharge_gid, " +
                        " application2servicecharge_gid," +
                        " application_gid," +
                        " generatelsa_gid, " +
                        " processing_fee," +
                        " processing_collectiontype," +
                        " doc_charges," +
                        " doccharge_collectiontype," +
                        " fieldvisit_charges," +
                        " fieldvisit_charges_collectiontype," +
                        " adhoc_fee," +
                        " adhoc_collectiontype," +
                        " life_insurance," +
                        " lifeinsurance_collectiontype," +
                        " acct_insurance," +
                        " acctinsurance_collectiontype," +
                        " total_collect," +
                        " total_deduct," +
                        " product_type," +
                        " created_by," +
                        " created_date) values(" +
                        "'" + msgetfeechargeGid + "'," +
                        "'" + msGetGid + "'," +
                        "'" + values.application_gid + "'," +
                        "'" + generatelsa_gid + "'," +
                        "'" + values.processing_fee + "'," +
                        "'" + values.processing_collectiontype + "'," +
                        "'" + values.doc_charges + "'," +
                        "'" + values.doccharge_collectiontype + "'," +
                        "'" + values.fieldvisit_charge + "'," +
                        "'" + values.fieldvisit_collectiontype + "'," +
                        "'" + values.adhoc_fee + "'," +
                        "'" + values.adhoc_collectiontype + "'," +
                        "'" + values.life_insurance + "'," +
                        "'" + values.lifeinsurance_collectiontype + "'," +
                        "'" + values.acct_insurance + "'," +
                        "'" + values.acctinsurance_collectiontype + "'," +
                        "'" + values.total_collect + "'," +
                        "'" + values.total_deduct + "'," +
                        "'" + producttype + "'," +
                        "'" + employee_gid + "'," +
                        "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            }
            if (mnResult != 0)
            {
                msSQL = "update ocs_trn_tcadapplication set productcharges_status='Completed' where application_gid = '" + values.application_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                values.status = true;
                values.message = "Service Details added Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
            }
        }

        public void GetEditLoanLimit(MdlMstLoanDtl values, string employee_gid)
        {

            msSQL = "select format(overalllimit_amount,2,'en_IN') from ocs_trn_tcadapplication where application_gid='" + values.application_gid + "'";
            values.overalllimit_amount = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select sum(loanfacility_amount) from ocs_trn_tcadapplication2loan where ( application_gid='" + employee_gid + "'" +
                " or application_gid='" + values.application_gid + "') and application2loan_gid <>'" + values.application2loan_gid + "'";
            values.loanfacility_amount = objdbconn.GetExecuteScalar(msSQL);
            values.status = true;
        }

        public void DaGetproduct(string application_gid, MdlList values, string employee_gid)
        {

            msSQL = "select producttype_gid,product_type from ocs_trn_tcadapplication2loan where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getSegment = new List<product_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getSegment.Add(new product_list
                    {
                        producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                        product_type = (dr_datarow["product_type"].ToString()),
                    });
                }
                values.product_list = getSegment;
            }
            dt_datatable.Dispose();
            values.status = true;

        }

        public void DaLoanDetailsEdit(string application2loan_gid, MdlMstLoanDtl values)
        {
            try
            {
                msSQL = " select application2loan_gid, application_gid, date_format(facilityrequested_date,'%Y-%m-%d') as facilityrequested_dateedit, product_type, producttype_gid, productsub_type, productsubtype_gid," +
              " loantype_gid, loan_type, loanfacility_amount, rate_interest,margin,penal_interest, facilityvalidity_year, facilityvalidity_month, facilityvalidity_days," +
              " facilityoverall_limit, tenureproduct_year, tenureproduct_month, tenureproduct_days, tenureoverall_limit, facility_type,facility_mode, " +
              " scheme_type, principalfrequency_name, principalfrequency_gid, interestfrequency_name, interestfrequency_gid, program, program_gid, primaryvaluechain_gid, primaryvaluechain_name, secondaryvaluechain_gid, secondaryvaluechain_name, interest_status, moratorium_status, enduse_purpose, " +
              " moratorium_type, date_format(moratorium_startdate,'%Y-%m-%d') as moratorium_startdateedit, date_format(moratorium_enddate,'%Y-%m-%d') as moratorium_enddateedit, " +
              " source_type, guideline_value, date_format(guideline_date,'%Y-%m-%d') as guideline_dateedit, date_format(marketvalue_date,'%Y-%m-%d') as marketvalue_dateedit," +
              " market_value, forcedsource_value, collateralSSV_value, date_format(forcedvalueassessed_on,'%Y-%m-%d') as forcedvalueassessed_onedit, collateralobservation_summary," +
              " product_gid,product_name,variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name " +
              " from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2loan_gid = objODBCDatareader["application2loan_gid"].ToString();
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.facilityrequested_date = objODBCDatareader["facilityrequested_dateedit"].ToString();
                    values.product_type = objODBCDatareader["product_type"].ToString();
                    values.producttype_gid = objODBCDatareader["producttype_gid"].ToString();
                    values.productsub_type = objODBCDatareader["productsub_type"].ToString();
                    values.productsubtype_gid = objODBCDatareader["productsubtype_gid"].ToString();
                    values.loantype_gid = objODBCDatareader["loantype_gid"].ToString();
                    values.loan_type = objODBCDatareader["loan_type"].ToString();
                    values.facilityloan_amount = objODBCDatareader["loanfacility_amount"].ToString();
                    values.rate_interest = objODBCDatareader["rate_interest"].ToString();
                    values.roi_margin = (objODBCDatareader["margin"].ToString());
                    values.penal_interest = objODBCDatareader["penal_interest"].ToString();
                    values.facilityvalidity_year = objODBCDatareader["facilityvalidity_year"].ToString();
                    values.facilityvalidity_month = objODBCDatareader["facilityvalidity_month"].ToString();
                    values.facilityvalidity_days = objODBCDatareader["facilityvalidity_days"].ToString();
                    values.facilityoverall_limit = objODBCDatareader["facilityoverall_limit"].ToString();
                    values.tenureproduct_year = objODBCDatareader["tenureproduct_year"].ToString();
                    values.tenureproduct_month = objODBCDatareader["tenureproduct_month"].ToString();
                    values.tenureproduct_days = objODBCDatareader["tenureproduct_days"].ToString();
                    values.tenureoverall_limit = objODBCDatareader["tenureoverall_limit"].ToString();
                    values.facility_type = objODBCDatareader["facility_type"].ToString();
                    values.facility_mode = objODBCDatareader["facility_mode"].ToString();
                    values.scheme_type = objODBCDatareader["scheme_type"].ToString();
                    values.principalfrequency_name = objODBCDatareader["principalfrequency_name"].ToString();
                    values.principalfrequency_gid = objODBCDatareader["principalfrequency_gid"].ToString();
                    values.interestfrequency_name = objODBCDatareader["interestfrequency_name"].ToString();
                    values.interestfrequency_gid = objODBCDatareader["interestfrequency_gid"].ToString();
                    values.program = objODBCDatareader["program"].ToString();
                    values.program_gid = objODBCDatareader["program_gid"].ToString();

                    //String[] privalchaingid_list = objODBCDatareader["primaryvaluechain_gid"].ToString().Split(',');
                    //String[] privalchainname_list = objODBCDatareader["primaryvaluechain_name"].ToString().Split(',');

                    //var getprimaryvaluechainList = new List<primaryvaluechain_list>();

                    //for (var i = 0; i < privalchaingid_list.Length; i++)
                    //{
                    //    getprimaryvaluechainList.Add(new primaryvaluechain_list
                    //    {
                    //        valuechain_gid = privalchaingid_list[i],
                    //        valuechain_name = privalchainname_list[i],
                    //    });

                    //}
                    //values.primaryvaluechain_list = getprimaryvaluechainList;

                    //String[] secvalchaingid_list = objODBCDatareader["secondaryvaluechain_gid"].ToString().Split(',');
                    //String[] secvalchainname_list = objODBCDatareader["secondaryvaluechain_name"].ToString().Split(',');

                    //var getsecondaryvaluechainList = new List<secondaryvaluechain_list>();

                    //for (var i = 0; i < secvalchaingid_list.Length; i++)
                    //{
                    //    getsecondaryvaluechainList.Add(new secondaryvaluechain_list
                    //    {
                    //        valuechain_gid = secvalchaingid_list[i],
                    //        valuechain_name = secvalchainname_list[i],
                    //    });

                    //}
                    //values.secondaryvaluechain_list = getsecondaryvaluechainList;


                    values.interest_status = objODBCDatareader["interest_status"].ToString();
                    values.moratorium_status = objODBCDatareader["moratorium_status"].ToString();
                    values.moratorium_type = objODBCDatareader["moratorium_type"].ToString();
                    values.moratorium_startdate = objODBCDatareader["moratorium_startdateedit"].ToString();
                    values.moratorium_enddate = objODBCDatareader["moratorium_enddateedit"].ToString();
                    values.enduse_purpose = objODBCDatareader["enduse_purpose"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();

                    if (values.loan_type == "Secured")
                    {
                        values.source_type = objODBCDatareader["source_type"].ToString();
                        values.guideline_value = objODBCDatareader["guideline_value"].ToString();
                        values.guideline_date = objODBCDatareader["guideline_dateedit"].ToString();
                        values.marketvalue_date = objODBCDatareader["marketvalue_dateedit"].ToString();
                        values.market_value = objODBCDatareader["market_value"].ToString();
                        values.forcedsource_value = objODBCDatareader["forcedsource_value"].ToString();
                        values.collateralSSV_value = objODBCDatareader["collateralSSV_value"].ToString();
                        values.forcedvalueassessed_on = objODBCDatareader["forcedvalueassessed_onedit"].ToString();
                        values.collateralobservation_summary = objODBCDatareader["collateralobservation_summary"].ToString();
                    }

                }

                //Value Chain
                msSQL = " SELECT valuechain_gid,valuechain_name from ocs_mst_tvaluechain a" +
                        " where status_log='Y' order by valuechain_gid desc ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getvaluechain = new List<valuechainlist>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getvaluechain.Add(new valuechainlist
                        {
                            valuechain_gid = (dr_datarow["valuechain_gid"].ToString()),
                            valuechain_name = (dr_datarow["valuechain_name"].ToString()),
                        });
                    }
                    values.valuechainlist = getvaluechain;
                }
                dt_datatable.Dispose();

                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaCollateralDocumentList(string application2loan_gid, Documentname objfilename)
        {
            msSQL = " select application2loan_gid,collateraldocument_gid,document_name,document_path,document_title from ocs_trn_tcaduploadcollateraldocument " +
                            " where application2loan_gid='" + application2loan_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var get_filename = new List<DocumentList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    get_filename.Add(new DocumentList
                    {
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        document_gid = dt["collateraldocument_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        application2loan_gid = dt["application2loan_gid"].ToString(),
                    });
                    objfilename.DocumentList = get_filename;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaLoanDetailsUpdate(string employee_gid, MdlMstLoanDtl values)
        {
            //string fsprimaryvaluechain_gid = string.Empty;
            //string fsprimaryvaluechain_name = string.Empty;
            //if (values.primaryvaluechain_list != null)
            //{
            //    for (var i = 0; i < values.primaryvaluechain_list.Count; i++)
            //    {
            //        fsprimaryvaluechain_gid += values.primaryvaluechain_list[i].valuechain_gid + ",";
            //        fsprimaryvaluechain_name += values.primaryvaluechain_list[i].valuechain_name + ",";

            //    }
            //    fsprimaryvaluechain_gid = fsprimaryvaluechain_gid.TrimEnd(',');
            //    fsprimaryvaluechain_name = fsprimaryvaluechain_name.TrimEnd(',');
            //}

            //string fssecondaryvaluechain_gid = string.Empty;
            //string fssecondaryvaluechain_name = string.Empty;
            //if (values.secondaryvaluechain_list != null)
            //{
            //    for (var i = 0; i < values.secondaryvaluechain_list.Count; i++)
            //    {
            //        fssecondaryvaluechain_gid += values.secondaryvaluechain_list[i].valuechain_gid + ",";
            //        fssecondaryvaluechain_name += values.secondaryvaluechain_list[i].valuechain_name + ",";

            //    }
            //    fssecondaryvaluechain_gid = fssecondaryvaluechain_gid.TrimEnd(',');
            //    fssecondaryvaluechain_name = fssecondaryvaluechain_name.TrimEnd(',');
            //}

            msSQL = " select application2loan_gid, application_gid, facilityrequested_date, product_type, producttype_gid, productsub_type, productsubtype_gid," +
               " loantype_gid, loan_type, loanfacility_amount, rate_interest,margin, penal_interest, facilityvalidity_year, facilityvalidity_month, facilityvalidity_days," +
               " facilityoverall_limit, tenureproduct_year, tenureproduct_month, tenureproduct_days, tenureoverall_limit, facility_type,facility_mode, " +
               " scheme_type, principalfrequency_name, principalfrequency_gid, interestfrequency_name, interestfrequency_gid, program, program_gid, primaryvaluechain_gid, primaryvaluechain_name, secondaryvaluechain_gid, secondaryvaluechain_name, interest_status, moratorium_status, " +
               " moratorium_type, moratorium_startdate, moratorium_enddate, enduse_purpose,product_gid,product_name," +
               " variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name " +
               " from ocs_trn_tcadapplication2loan where application2loan_gid='" + values.application2loan_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication2loan_gid = objODBCDatareader["application2loan_gid"].ToString();
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                if (objODBCDatareader["facilityrequested_date"].ToString() == "")
                {
                }
                else
                {
                    lsfacilityrequested_date = Convert.ToDateTime(objODBCDatareader["facilityrequested_date"]).ToString("yyyy-MM-dd HH:mm:ss");
                }
                lsproduct_type = objODBCDatareader["product_type"].ToString();
                lsproducttype_gid = objODBCDatareader["producttype_gid"].ToString();
                lsproductsub_type = objODBCDatareader["productsub_type"].ToString();
                lsproductsubtype_gid = objODBCDatareader["productsubtype_gid"].ToString();
                lsloantype_gid = objODBCDatareader["loantype_gid"].ToString();
                lsloan_type = objODBCDatareader["loan_type"].ToString();
                lsfacilityloan_amount = objODBCDatareader["loanfacility_amount"].ToString();
                lsrate_interest = objODBCDatareader["rate_interest"].ToString();
                lsratemargin = objODBCDatareader["margin"].ToString();
                lspenal_interest = objODBCDatareader["penal_interest"].ToString();
                lsfacilityvalidity_year = objODBCDatareader["facilityvalidity_year"].ToString();
                lsfacilityvalidity_month = objODBCDatareader["facilityvalidity_month"].ToString();
                lsfacilityvalidity_days = objODBCDatareader["facilityvalidity_days"].ToString();
                lsfacilityoverall_limit = objODBCDatareader["facilityoverall_limit"].ToString();
                lstenureproduct_year = objODBCDatareader["tenureproduct_year"].ToString();
                lstenureproduct_month = objODBCDatareader["tenureproduct_month"].ToString();
                lstenureproduct_days = objODBCDatareader["tenureproduct_days"].ToString();
                lstenureoverall_limit = objODBCDatareader["tenureoverall_limit"].ToString();
                lsfacility_type = objODBCDatareader["facility_type"].ToString();
                lsfacility_mode = objODBCDatareader["facility_mode"].ToString();
                lsscheme_type = objODBCDatareader["scheme_type"].ToString();
                lsprincipalfrequency_name = objODBCDatareader["principalfrequency_name"].ToString();
                lsprincipalfrequency_gid = objODBCDatareader["principalfrequency_gid"].ToString();
                lsinterestfrequency_name = objODBCDatareader["interestfrequency_name"].ToString();
                lsinterestfrequency_gid = objODBCDatareader["interestfrequency_gid"].ToString();
                lsprogram = objODBCDatareader["interestfrequency_name"].ToString();
                lsprogram_gid = objODBCDatareader["interestfrequency_gid"].ToString();
                lsproduct_gid = objODBCDatareader["product_gid"].ToString();
                lsproduct_name = objODBCDatareader["product_name"].ToString();
                lsvariety_gid = objODBCDatareader["variety_gid"].ToString();
                lsvariety_name = objODBCDatareader["variety_name"].ToString();
                lssector_name = objODBCDatareader["sector_name"].ToString();
                lscategory_name = objODBCDatareader["category_name"].ToString();
                lsbotanical_name = objODBCDatareader["botanical_name"].ToString();
                lsalternative_name = objODBCDatareader["alternative_name"].ToString();
                //lsprimaryvaluechain_gid = objODBCDatareader["primaryvaluechain_gid"].ToString();
                //lsprimaryvaluechain_name = objODBCDatareader["primaryvaluechain_name"].ToString();
                //lssecondaryvaluechain_gid = objODBCDatareader["secondaryvaluechain_gid"].ToString();
                //lssecondaryvaluechain_name = objODBCDatareader["secondaryvaluechain_name"].ToString();
                lsinterest_status = objODBCDatareader["interest_status"].ToString();
                lsmoratorium_status = objODBCDatareader["moratorium_status"].ToString();
                lsmoratorium_type = objODBCDatareader["moratorium_type"].ToString();
                if (objODBCDatareader["moratorium_startdate"].ToString() == "")
                {
                }
                else
                {
                    lsmoratorium_startdate = Convert.ToDateTime(objODBCDatareader["moratorium_startdate"]).ToString("yyyy-MM-dd HH:mm:ss");
                }
                if (objODBCDatareader["moratorium_enddate"].ToString() == "")
                {
                }
                else
                {
                    lsmoratorium_enddate = Convert.ToDateTime(objODBCDatareader["moratorium_enddate"]).ToString("yyyy-MM-dd HH:mm:ss");
                }
                lsenduse_purpose = objODBCDatareader["enduse_purpose"].ToString();
            }
            try
            {
                // msSQL = "select application2loan_gid from ocs_trn_tcadapplication2loan where producttype_gid='" + values.producttype_gid + "' and " +
                //" productsubtype_gid='" + values.productsubtype_gid + "' and application_gid='" + values.application_gid + "' and  " +
                //" application2loan_gid<>'" + values.application2loan_gid + "'"; ;
                // objODBCDatareader = objdbconn.GetDataReader(msSQL);
                // if (objODBCDatareader.HasRows == false)
                // {
                //     objODBCDatareader.Close();

                msSQL = "select producttype_gid from ocs_trn_tcadapplication2loan where  application2loan_gid='" + values.application2loan_gid + "' ";
                string application2loanlist_count1 = objdbconn.GetExecuteScalar(msSQL);
                if (application2loanlist_count1 != values.producttype_gid)
                {
                    msSQL = "select COUNT(application2servicecharge_gid) from ocs_trn_tcadapplicationservicecharge where producttype_gid like '%" + application2loanlist_count1 + "%' and  application_gid='" + values.application_gid + "'";
                string application2servicechargelist_count1 = objdbconn.GetExecuteScalar(msSQL);

                if (application2servicechargelist_count1 != "0")
                {
                    values.status = false;
                    values.message = "Product Type Already Added in Service Charges";
                    return;
                }
            }
                if (values.product_type == "Agri Receivable Finance (ARF)")
                {
                    msSQL = "select application2buyer_gid from ocs_trn_tcadapplication2buyer  where application2loan_gid='" + employee_gid + "' or " +
                        " application2loan_gid='" + values.application2loan_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == false)
                    {
                        values.message = "Kindly add atleast one Buyer";
                        values.status = false;
                        return;
                    }
                    else
                    {

                        // Product Loan Details With Encore Master Validation - Started
                        FnSamFinEncoreLoanAccount objFnSamFinEncoreLoanAccount = new FnSamFinEncoreLoanAccount();

                        MdlProductLoanDetails objMdlProductLoanDetails = new MdlProductLoanDetails();

                        objMdlProductLoanDetails.product = values.producttype_gid;
                        objMdlProductLoanDetails.sub_product = values.productsubtype_gid;
                        objMdlProductLoanDetails.principal_frequency = values.principalfrequency_gid;
                        objMdlProductLoanDetails.interest_frequency = values.interestfrequency_gid;
                        objMdlProductLoanDetails.interestdeduction_upfront = values.interest_status;
                        objMdlProductLoanDetails.moratorium_status = values.moratorium_status;
                        objMdlProductLoanDetails.moratorium_type = values.moratorium_type;

                        objMdlProductLoanDetails.facilityvalidity_days = values.facilityvalidity_days;
                        objMdlProductLoanDetails.facilityvalidity_month = values.facilityvalidity_month;
                        objMdlProductLoanDetails.facilityvalidity_year = values.facilityvalidity_year;

                        string ProductLoanDetails = JsonConvert.SerializeObject(objMdlProductLoanDetails);

                        objFnSamFinEncoreLoanAccount.LogForAuditProductLoanDetails("DaMstCADApplication - Function : DaLoanDetailsUpdate - MstCADLoanDtlEdit . Log Time - " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + " " + ProductLoanDetails);

                        ProductLoanDetailsWithEncoreMasterValidationResponse objProductLoanDetailsWithEncoreMasterValidationResponse = new ProductLoanDetailsWithEncoreMasterValidationResponse();

                        objProductLoanDetailsWithEncoreMasterValidationResponse = objFnSamFinEncoreLoanAccount.ProductLoanDetailsWithEncoreMasterValidation(objMdlProductLoanDetails);

                        if (objProductLoanDetailsWithEncoreMasterValidationResponse.status == false && objProductLoanDetailsWithEncoreMasterValidationResponse.message == "InValid")
                        {
                            values.status = false;
                            values.message = "Invalid Tenure Units";
                            return;
                        }

                        if (objProductLoanDetailsWithEncoreMasterValidationResponse.status == false)
                        {
                            values.status = false;
                            values.message = "Product Terms doesn't match with those available in Encore Master";
                            return;
                        }
                        // Product Loan Details With Encore Master Validation - Ended


                        msSQL = " update ocs_trn_tcadapplication2loan set " +
                    " product_type='" + values.product_type + "'," +
                     " producttype_gid='" + values.producttype_gid + "',";
                        if (Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                        {

                        }
                        else
                        {
                            msSQL += " facilityrequested_date='" + Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                        }
                        msSQL += " productsub_type='" + values.productsub_type + "'," +
                                 " productsubtype_gid='" + values.productsubtype_gid + "'," +
                                 " loantype_gid='" + values.loantype_gid + "'," +
                                 " loan_type='" + values.loan_type + "'," +
                                 " loanfacility_amount='" + values.facilityloan_amount.Replace(",", "") + "'," +
                                 " rate_interest='" + values.rate_interest + "'," +
                                   " margin='" + values.margin + "'," +
                                 " penal_interest='" + values.penal_interest + "'," +
                                 " facilityvalidity_year='" + values.facilityvalidity_year + "'," +
                                 " facilityvalidity_month='" + values.facilityvalidity_month + "'," +
                                 " facilityvalidity_days='" + values.facilityvalidity_days + "'," +
                                 " facilityoverall_limit='" + values.facilityoverall_limit + "'," +
                                 " tenureproduct_year='" + values.tenureproduct_year + "'," +
                                 " tenureproduct_month='" + values.tenureproduct_month + "'," +
                                 " tenureproduct_days='" + values.tenureproduct_days + "'," +
                                 " tenureoverall_limit='" + values.tenureoverall_limit + "'," +
                                 " facility_type='" + values.facility_type + "'," +
                                 " facility_mode='" + values.facility_mode + "'," +
                                 " principalfrequency_name='" + values.principalfrequency_name + "'," +
                                 " principalfrequency_gid='" + values.principalfrequency_gid + "'," +
                                 " interestfrequency_name='" + values.interestfrequency_name + "'," +
                                 " interestfrequency_gid='" + values.interestfrequency_gid + "'," +
                                 " program_gid='" + values.program_gid + "'," +
                                 " program='" + values.program + "'," +
                                 //" primaryvaluechain_gid='" + fsprimaryvaluechain_gid + "'," +
                                 //" primaryvaluechain_name='" + fsprimaryvaluechain_name + "'," +
                                 //" secondaryvaluechain_gid='" + fssecondaryvaluechain_gid + "'," +
                                 //" secondaryvaluechain_name='" + fssecondaryvaluechain_name + "'," +
                                 " interest_status='" + values.interest_status + "'," +
                                 " moratorium_status='" + values.moratorium_status + "',";
                        if (values.moratorium_status == "Yes")
                        {
                            msSQL += " moratorium_type='" + values.moratorium_type + "',";
                            if (Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                            {

                            }
                            else
                            {
                                msSQL += " moratorium_startdate='" + Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd 00:00:00") + "',";
                            }
                            if (Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                            {

                            }
                            else
                            {
                                msSQL += " moratorium_enddate='" + Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                            }
                        }
                        else
                        {
                            msSQL += " moratorium_type= null," +
                                    " moratorium_startdate = null," +
                                    " moratorium_enddate = null,";
                        }


                        msSQL += " enduse_purpose='" + values.enduse_purpose.Replace("'", "") + "'," +

                                 " source_type='" + values.source_type + "'," +
                                 " guideline_value='" + values.guideline_value + "',";
                        if (values.guideline_date == null || values.guideline_date == "")
                        {
                            msSQL += " guideline_date=null,";
                        }
                        else
                        {
                            msSQL += " guideline_date='" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.marketvalue_date == null || values.marketvalue_date == "")
                        {
                            msSQL += " marketvalue_date=null,";
                        }
                        else
                        {
                            msSQL += " marketvalue_date='" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.market_value == null || values.market_value == "")
                        {
                            msSQL += " market_value='0.00',";
                        }
                        else
                        {
                            msSQL += " market_value='" + values.market_value.Replace(",", "") + "',";
                        }
                        if (values.forcedsource_value == null || values.forcedsource_value == "")
                        {
                            msSQL += " forcedsource_value='0.00',";
                        }
                        else
                        {
                            msSQL += " forcedsource_value='" + values.forcedsource_value.Replace(",", "") + "',";
                        }
                        if (values.collateralSSV_value == null || values.collateralSSV_value == "")
                        {
                            msSQL += " collateralSSV_value='0.00',";
                        }
                        else
                        {
                            msSQL += " collateralSSV_value='" + values.collateralSSV_value.Replace(",", "") + "',";
                        }
                        if (values.forcedvalueassessed_on == null || values.forcedvalueassessed_on == "")
                        {
                            msSQL += " forcedvalueassessed_on=null,";
                        }
                        else
                        {
                            msSQL += " forcedvalueassessed_on='" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (values.collateralobservation_summary == null)
                        {
                            msSQL += " collateralobservation_summary=null,";
                        }
                        else
                        {
                            msSQL += " collateralobservation_summary='" + values.collateralobservation_summary.Replace("'", " ") + "',";
                        }

                        msSQL += " product_gid='" + values.product_gid + "'," +
                                 " product_name='" + values.product_name + "'," +
                                 " variety_gid='" + values.variety_gid + "'," +
                                 " variety_name='" + values.variety_name + "'," +
                                 " sector_name='" + values.sector_name + "'," +
                                 " category_name='" + values.category_name + "'," +
                                 " botanical_name='" + values.botanical_name + "'," +
                                 " alternative_name='" + values.alternative_name + "'," +
                                 " updated_by='" + employee_gid + "'," +
                                 " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                                 " where application2loan_gid='" + values.application2loan_gid + "' ";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        if (mnResult == 1)
                        {
                            msSQL = "update ocs_trn_tcadapplication2product set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            if (values.product_type == "Agri Receivable Finance (ARF)")
                            {
                                msSQL = "update ocs_trn_tcadapplication2buyer set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            else
                            {
                                msSQL = "delete from  ocs_trn_tcadapplication2buyer  where application2loan_gid='" + employee_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            }
                            if (values.loan_type == "Secured")
                            {
                                msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            else
                            {
                                msSQL = "delete from ocs_trn_tcaduploadcollateraldocument where application2loan_gid='" + employee_gid + "' or application2loan_gid='" + values.application2loan_gid + "'";
                                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                            }
                            msGetGid = objcmnfunctions.GetMasterGID("A2LU");
                            msSQL = " insert into ocs_trn_tcadapplication2loanupdateLOG(" +
                                   " application2loanupdateLOG_gid ," +
                                   " application2loan_gid ," +
                                   " application_gid," +
                                   " facilityrequested_date," +
                                   " product_type," +
                                   " producttype_gid," +
                                   " productsub_type," +
                                   " productsubtype_gid," +
                                   " loantype_gid," +
                                   " loan_type ," +
                                   " loanfacility_amount," +
                                   " rate_interest," +
                                     " margin," +
                                   " penal_interest," +
                                   " facilityvalidity_year," +
                                   " facilityvalidity_month," +
                                   " facilityvalidity_days," +
                                   " facilityoverall_limit ," +
                                   " tenureproduct_year," +
                                   " tenureproduct_month," +
                                   " tenureproduct_days," +
                                   " tenureoverall_limit ," +
                                   " facility_type," +
                                   " facility_mode," +
                                       " principalfrequency_name," +
                                       " principalfrequency_gid," +
                                       " interestfrequency_name," +
                                       " interestfrequency_gid," +
                                       " program_gid," +
                                       " program," +
                                       //" primaryvaluechain_gid," +
                                       //" primaryvaluechain_name," +
                                       //" secondaryvaluechain_gid," +
                                       //" secondaryvaluechain_name," +
                                       " interest_status," +
                                       " moratorium_status," +
                                       " moratorium_type," +
                                       " moratorium_startdate," +
                                       " moratorium_enddate," +
                                       " product_gid," +
                                       " product_name," +
                                       " variety_gid," +
                                       " variety_name," +
                                       " sector_name," +
                                       " category_name," +
                                       " botanical_name," +
                                       " alternative_name," +
                                   " created_by," +
                                   " created_date)" +
                                   " values(" +
                                   "'" + msGetGid + "'," +
                                   "'" + values.application2loan_gid + "'," +
                                   "'" + values.application_gid + "'," +
                                   "'" + lsfacilityrequested_date + "'," +
                                   "'" + lsproduct_type + "'," +
                                   "'" + lsproducttype_gid + "'," +
                                   "'" + lsproductsub_type + "'," +
                                   "'" + lsproductsubtype_gid + "'," +
                                   "'" + lsloantype_gid + "'," +
                                   "'" + lsloan_type + "'," +
                                   "'" + lsfacilityloan_amount + "'," +
                                   "'" + lsrate_interest + "'," +
                                   "'" + lsratemargin + "'," +
                                   "'" + lspenal_interest + "'," +
                                   "'" + lsfacilityvalidity_year + "'," +
                                   "'" + lsfacilityvalidity_month + "'," +
                                   "'" + lsfacilityvalidity_days + "'," +
                                   "'" + lsfacilityoverall_limit + "'," +
                                   "'" + lstenureproduct_year + "'," +
                                   "'" + lstenureproduct_month + "'," +
                                   "'" + lstenureproduct_days + "'," +
                                   "'" + lstenureoverall_limit + "'," +
                                   "'" + lsfacility_type + "'," +
                                   "'" + values.facility_mode + "'," +
                                   "'" + lsprincipalfrequency_name + "'," +
                                   "'" + lsprincipalfrequency_gid + "'," +
                                   "'" + lsinterestfrequency_name + "'," +
                                   "'" + lsinterestfrequency_gid + "'," +
                                   "'" + lsprogram_gid + "'," +
                                   "'" + lsprogram + "'," +
                                   //"'" + lsprimaryvaluechain_gid + "'," +
                                   //"'" + lsprimaryvaluechain_name + "'," +
                                   //"'" + lssecondaryvaluechain_gid + "'," +
                                   //"'" + lssecondaryvaluechain_name + "'," +
                                   "'" + lsinterest_status + "'," +
                                   "'" + lsmoratorium_status + "'," +
                                   "'" + lsmoratorium_type + "',";
                            if (lsmoratorium_startdate == null || lsmoratorium_startdate == "")
                            {
                                msSQL += "null,";
                            }
                            else
                            {
                                msSQL += "'" + lsmoratorium_startdate + "',";
                            }
                            if (lsmoratorium_enddate == null || lsmoratorium_enddate == "")
                            {
                                msSQL += "null,";
                            }
                            else
                            {
                                msSQL += "'" + lsmoratorium_enddate + "',";
                            }

                            msSQL += "'" + values.product_gid + "'," +
                            "'" + values.product_name + "'," +
                            "'" + values.variety_gid + "'," +
                            "'" + values.variety_name + "'," +
                            "'" + values.sector_name + "'," +
                            "'" + values.category_name + "'," +
                            "'" + values.botanical_name + "'," +
                            "'" + values.alternative_name + "'," +
                            "'" + employee_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            values.status = true;
                            values.message = "Loan Details Updated Successfully";


                        }
                    }
                }
                else
                {
                    // Product Loan Details With Encore Master Validation - Started
                    FnSamFinEncoreLoanAccount objFnSamFinEncoreLoanAccount = new FnSamFinEncoreLoanAccount();

                    MdlProductLoanDetails objMdlProductLoanDetails = new MdlProductLoanDetails();

                    objMdlProductLoanDetails.product = values.producttype_gid;
                    objMdlProductLoanDetails.sub_product = values.productsubtype_gid;
                    objMdlProductLoanDetails.principal_frequency = values.principalfrequency_gid;
                    objMdlProductLoanDetails.interest_frequency = values.interestfrequency_gid;
                    objMdlProductLoanDetails.interestdeduction_upfront = values.interest_status;
                    objMdlProductLoanDetails.moratorium_status = values.moratorium_status;
                    objMdlProductLoanDetails.moratorium_type = values.moratorium_type;

                    objMdlProductLoanDetails.facilityvalidity_days = values.facilityvalidity_days;
                    objMdlProductLoanDetails.facilityvalidity_month = values.facilityvalidity_month;
                    objMdlProductLoanDetails.facilityvalidity_year = values.facilityvalidity_year;

                    string ProductLoanDetails = JsonConvert.SerializeObject(objMdlProductLoanDetails);

                    objFnSamFinEncoreLoanAccount.LogForAuditProductLoanDetails("DaMstCADApplication - Function : DaLoanDetailsUpdate - MstCADLoanDtlEdit . Log Time - " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + " " + ProductLoanDetails);

                    ProductLoanDetailsWithEncoreMasterValidationResponse objProductLoanDetailsWithEncoreMasterValidationResponse = new ProductLoanDetailsWithEncoreMasterValidationResponse();

                    objProductLoanDetailsWithEncoreMasterValidationResponse = objFnSamFinEncoreLoanAccount.ProductLoanDetailsWithEncoreMasterValidation(objMdlProductLoanDetails);

                    if (objProductLoanDetailsWithEncoreMasterValidationResponse.status == false && objProductLoanDetailsWithEncoreMasterValidationResponse.message == "InValid")
                    {
                        values.status = false;
                        values.message = "Invalid Tenure Units";
                        return;
                    }

                    if (objProductLoanDetailsWithEncoreMasterValidationResponse.status == false)
                    {
                        values.status = false;
                        values.message = "Product Terms doesn't match with those available in Encore Master";
                        return;
                    }
                    // Product Loan Details With Encore Master Validation - Ended

                    if (objProductLoanDetailsWithEncoreMasterValidationResponse.status == false)
                    {
                        values.status = false;
                        values.message = "Product Terms doesn't match with those available in Encore Master";
                        return;
                    }

                    msSQL = " update ocs_trn_tcadapplication2loan set " +
                    " product_type='" + values.product_type + "'," +
                     " producttype_gid='" + values.producttype_gid + "',";
                    if (Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                    {

                    }
                    else
                    {
                        msSQL += " facilityrequested_date='" + Convert.ToDateTime(values.facilityrequested_date).ToString("yyyy-MM-dd 00:00:00") + "',";
                    }
                    msSQL += " productsub_type='" + values.productsub_type + "'," +
                             " productsubtype_gid='" + values.productsubtype_gid + "'," +
                             " loantype_gid='" + values.loantype_gid + "'," +
                             " loan_type='" + values.loan_type + "'," +
                             " loanfacility_amount='" + values.facilityloan_amount.Replace(",", "") + "'," +
                             " rate_interest='" + values.rate_interest + "'," +
                             " margin='" + values.margin + "'," +
                             " penal_interest='" + values.penal_interest + "'," +
                             " facilityvalidity_year='" + values.facilityvalidity_year + "'," +
                             " facilityvalidity_month='" + values.facilityvalidity_month + "'," +
                             " facilityvalidity_days='" + values.facilityvalidity_days + "'," +
                             " facilityoverall_limit='" + values.facilityoverall_limit + "'," +
                             " tenureproduct_year='" + values.tenureproduct_year + "'," +
                             " tenureproduct_month='" + values.tenureproduct_month + "'," +
                             " tenureproduct_days='" + values.tenureproduct_days + "'," +
                             " tenureoverall_limit='" + values.tenureoverall_limit + "'," +
                             " facility_type='" + values.facility_type + "'," +
                             " facility_mode='" + values.facility_mode + "'," +
                             " principalfrequency_name='" + values.principalfrequency_name + "'," +
                             " principalfrequency_gid='" + values.principalfrequency_gid + "'," +
                             " interestfrequency_name='" + values.interestfrequency_name + "'," +
                             " interestfrequency_gid='" + values.interestfrequency_gid + "'," +
                             " program_gid='" + values.program_gid + "'," +
                             " program='" + values.program + "'," +
                             //" primaryvaluechain_gid='" + fsprimaryvaluechain_gid + "'," +
                             //" primaryvaluechain_name='" + fsprimaryvaluechain_name + "'," +
                             //" secondaryvaluechain_gid='" + fssecondaryvaluechain_gid + "'," +
                             //" secondaryvaluechain_name='" + fssecondaryvaluechain_name + "'," +
                             " interest_status='" + values.interest_status + "'," +
                             " moratorium_status='" + values.moratorium_status + "',";
                    if (values.moratorium_status == "Yes")
                    {
                        msSQL += " moratorium_type='" + values.moratorium_type + "',";
                        if (Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                        {

                        }
                        else
                        {
                            msSQL += " moratorium_startdate='" + Convert.ToDateTime(values.moratorium_startdate).ToString("yyyy-MM-dd 00:00:00") + "',";
                        }
                        if (Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd HH:mm:ss") == "0001-01-01 00:00:00")
                        {

                        }
                        else
                        {
                            msSQL += " moratorium_enddate='" + Convert.ToDateTime(values.moratorium_enddate).ToString("yyyy-MM-dd 00:00:00") + "',";
                        }
                    }
                    else
                    {
                        msSQL += " moratorium_type= null," +
                                " moratorium_startdate = null," +
                                " moratorium_enddate = null,";
                    }
                    msSQL += " source_type='" + values.source_type + "'," +
                                 " guideline_value='" + values.guideline_value + "',";
                    if (values.guideline_date == null || values.guideline_date == "")
                    {
                        msSQL += " guideline_date=null,";
                    }
                    else
                    {
                        msSQL += " guideline_date='" + Convert.ToDateTime(values.guideline_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.marketvalue_date == null || values.marketvalue_date == "")
                    {
                        msSQL += " marketvalue_date=null,";
                    }
                    else
                    {
                        msSQL += " marketvalue_date='" + Convert.ToDateTime(values.marketvalue_date).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.market_value == null || values.market_value == "")
                    {
                        msSQL += " market_value='0.00',";
                    }
                    else
                    {
                        msSQL += " market_value='" + values.market_value.Replace(",", "") + "',";
                    }
                    if (values.forcedsource_value == null || values.forcedsource_value == "")
                    {
                        msSQL += " forcedsource_value='0.00',";
                    }
                    else
                    {
                        msSQL += " forcedsource_value='" + values.forcedsource_value.Replace(",", "") + "',";
                    }
                    if (values.collateralSSV_value == null || values.collateralSSV_value == "")
                    {
                        msSQL += " collateralSSV_value='0.00',";
                    }
                    else
                    {
                        msSQL += " collateralSSV_value='" + values.collateralSSV_value.Replace(",", "") + "',";
                    }
                    if (values.forcedvalueassessed_on == null || values.forcedvalueassessed_on == "")
                    {
                        msSQL += " forcedvalueassessed_on=null,";
                    }
                    else
                    {
                        msSQL += " forcedvalueassessed_on='" + Convert.ToDateTime(values.forcedvalueassessed_on).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    }
                    if (values.collateralobservation_summary == null)
                    {
                        msSQL += " collateralobservation_summary=null,";
                    }
                    else
                    {
                        msSQL += " collateralobservation_summary='" + values.collateralobservation_summary.Replace("'", " ") + "',";
                    }

                    msSQL += " enduse_purpose='" + values.enduse_purpose.Replace("'", "") + "'," +
                           " product_gid= '" + values.product_gid + "'," +
                         " product_name='" + values.product_name + "'," +
                         " variety_gid= '" + values.variety_gid + "'," +
                         " variety_name='" + values.variety_name + "'," +
                         " sector_name= '" + values.sector_name + "'," +
                         " category_name='" + values.category_name + "'," +
                         " botanical_name= '" + values.botanical_name + "'," +
                         " alternative_name='" + values.alternative_name + "'," +
                           " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2loan_gid='" + values.application2loan_gid + "' ";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult == 1)
                    {
                        msSQL = "update ocs_trn_tcadapplication2product set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (values.product_type == "Agri Receivable Finance (ARF)")
                        {
                            msSQL = "update ocs_trn_tcadapplication2buyer set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                        else
                        {
                            msSQL = "delete from  ocs_trn_tcadapplication2buyer  where application2loan_gid='" + employee_gid + "' or application2loan_gid='" + values.application2loan_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                        if (values.loan_type == "Secured")
                        {
                            msSQL = "update ocs_trn_tcaduploadcollateraldocument set application2loan_gid='" + values.application2loan_gid + "' where application2loan_gid='" + employee_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                        else
                        {
                            msSQL = "delete from ocs_trn_tcaduploadcollateraldocument where application2loan_gid='" + employee_gid + "' or application2loan_gid='" + values.application2loan_gid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }
                        msGetGid = objcmnfunctions.GetMasterGID("A2LU");
                        msSQL = " insert into ocs_trn_tcadapplication2loanupdateLOG(" +
                               " application2loanupdateLOG_gid ," +
                               " application2loan_gid ," +
                               " application_gid," +
                               " facilityrequested_date," +
                               " product_type," +
                               " producttype_gid," +
                               " productsub_type," +
                               " productsubtype_gid," +
                               " loantype_gid," +
                               " loan_type ," +
                               " loanfacility_amount," +
                               " rate_interest," +
                               " margin," +
                               " penal_interest," +
                               " facilityvalidity_year," +
                               " facilityvalidity_month," +
                               " facilityvalidity_days," +
                               " facilityoverall_limit ," +
                               " tenureproduct_year," +
                               " tenureproduct_month," +
                               " tenureproduct_days," +
                               " tenureoverall_limit ," +
                               " facility_type," +
                               " facility_mode," +
                                   " principalfrequency_name," +
                                   " principalfrequency_gid," +
                                   " interestfrequency_name," +
                                   " interestfrequency_gid," +
                                   " program_gid," +
                                   " program," +
                                   //" primaryvaluechain_gid," +
                                   //" primaryvaluechain_name," +
                                   //" secondaryvaluechain_gid," +
                                   //" secondaryvaluechain_name," +
                                   " interest_status," +
                                   " moratorium_status," +
                                   " moratorium_type," +
                                   " moratorium_startdate," +
                                   " moratorium_enddate," +
                                    " product_gid," +
                                       " product_name," +
                                       " variety_gid," +
                                       " variety_name," +
                                       " sector_name," +
                                       " category_name," +
                                       " botanical_name," +
                                       " alternative_name," +
                               " created_by," +
                               " created_date)" +
                               " values(" +
                               "'" + msGetGid + "'," +
                               "'" + values.application2loan_gid + "'," +
                               "'" + values.application_gid + "'," +
                                "'" + Convert.ToDateTime(lsfacilityrequested_date).ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                                "'" + lsproduct_type + "'," +
                               "'" + lsproducttype_gid + "'," +
                               "'" + lsproductsub_type + "'," +
                               "'" + lsproductsubtype_gid + "'," +
                               "'" + lsloantype_gid + "'," +
                               "'" + lsloan_type + "'," +
                               "'" + lsfacilityloan_amount + "'," +
                               "'" + lsrate_interest + "'," +
                               "'" + lsratemargin + "'," +
                               "'" + lspenal_interest + "'," +
                               "'" + lsfacilityvalidity_year + "'," +
                               "'" + lsfacilityvalidity_month + "'," +
                               "'" + lsfacilityvalidity_days + "'," +
                               "'" + lsfacilityoverall_limit + "'," +
                               "'" + lstenureproduct_year + "'," +
                               "'" + lstenureproduct_month + "'," +
                               "'" + lstenureproduct_days + "'," +
                               "'" + lstenureoverall_limit + "'," +
                               "'" + lsfacility_type + "'," +
                               "'" + values.facility_mode + "'," +
                               "'" + lsprincipalfrequency_name + "'," +
                               "'" + lsprincipalfrequency_gid + "'," +
                               "'" + lsinterestfrequency_name + "'," +
                               "'" + lsinterestfrequency_gid + "'," +
                               "'" + lsprogram_gid + "'," +
                               "'" + lsprogram + "'," +
                               //"'" + lsprimaryvaluechain_gid + "'," +
                               //"'" + lsprimaryvaluechain_name + "'," +
                               //"'" + lssecondaryvaluechain_gid + "'," +
                               //"'" + lssecondaryvaluechain_name + "'," +
                               "'" + lsinterest_status + "'," +
                               "'" + lsmoratorium_status + "'," +
                               "'" + lsmoratorium_type + "',";
                        if (lsmoratorium_startdate == null || lsmoratorium_startdate == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(lsmoratorium_startdate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        if (lsmoratorium_enddate == null || lsmoratorium_enddate == "")
                        {
                            msSQL += "null,";
                        }
                        else
                        {
                            msSQL += "'" + Convert.ToDateTime(lsmoratorium_enddate).ToString("yyyy-MM-dd HH:mm:ss") + "',";
                        }
                        msSQL += "'" + values.product_gid + "'," +
                                   "'" + values.product_name + "'," +
                                   "'" + values.variety_gid + "'," +
                                   "'" + values.variety_name + "'," +
                                   "'" + values.sector_name + "'," +
                                   "'" + values.category_name + "'," +
                                   "'" + values.botanical_name + "'," +
                                   "'" + values.alternative_name + "'," +
                              "'" + employee_gid + "'," +
                              "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        values.status = true;
                        values.message = "Loan Details Updated Successfully";
                    }
                }
                //}
                //else
                //{
                //    objODBCDatareader.Close();
                //    values.status = false;
                //    values.message = "Already this product sub type added.";
                //}
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaServicechargeEdit(string application2servicecharge_gid, MdlProductCharges values, string employee_gid)
        {
            try
            {
                msSQL = " select application2servicecharge_gid,application_gid,processing_fee,processing_collectiontype,doc_charges,doccharge_collectiontype," +
                        " fieldvisit_charges,fieldvisit_charges_collectiontype,adhoc_fee,adhoc_collectiontype,life_insurance,lifeinsurance_collectiontype," +
                        " acct_insurance,total_collect,total_deduct,product_type,producttype_gid,acctinsurance_collectiontype " +
                        " from ocs_trn_tcadapplicationservicecharge where application2servicecharge_gid ='" + application2servicecharge_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2servicecharge_gid = objODBCDatareader["application2servicecharge_gid"].ToString();
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.processing_fee = objODBCDatareader["processing_fee"].ToString();
                    values.processing_collectiontype = objODBCDatareader["processing_collectiontype"].ToString();
                    values.doc_charges = objODBCDatareader["doc_charges"].ToString();
                    values.doccharge_collectiontype = objODBCDatareader["doccharge_collectiontype"].ToString();
                    values.fieldvisit_charge = objODBCDatareader["fieldvisit_charges"].ToString();
                    values.fieldvisit_charges_collectiontype = objODBCDatareader["fieldvisit_charges_collectiontype"].ToString();
                    values.adhoc_fee = objODBCDatareader["adhoc_fee"].ToString();
                    values.adhoc_collectiontype = objODBCDatareader["adhoc_collectiontype"].ToString();
                    values.life_insurance = objODBCDatareader["life_insurance"].ToString();
                    values.lifeinsurance_collectiontype = objODBCDatareader["lifeinsurance_collectiontype"].ToString();
                    values.acct_insurance = objODBCDatareader["acct_insurance"].ToString();
                    values.total_collect = objODBCDatareader["total_collect"].ToString();
                    values.total_deduct = objODBCDatareader["total_deduct"].ToString();
                    values.product_type = objODBCDatareader["product_type"].ToString();
                    values.producttype_gid = objODBCDatareader["producttype_gid"].ToString();
                    values.acctinsurance_collectiontype = objODBCDatareader["acctinsurance_collectiontype"].ToString();
                }

                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaServicechargeUpdate(string employee_gid, MdlProductCharges values)
        {

            msSQL = " select application2servicecharge_gid,application_gid,processing_fee,processing_collectiontype,doc_charges,doccharge_collectiontype," +
                          " fieldvisit_charges,fieldvisit_charges_collectiontype,adhoc_fee,adhoc_collectiontype,life_insurance,lifeinsurance_collectiontype," +
                          " acct_insurance,total_collect,total_deduct,product_type,producttype_gid,acctinsurance_collectiontype " +
                          " from ocs_trn_tcadapplicationservicecharge where application2servicecharge_gid ='" + values.application2servicecharge_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                lsapplication_gid = objODBCDatareader["application_gid"].ToString();
                lsprocessing_fee = objODBCDatareader["processing_fee"].ToString();
                lsprocessing_collectiontype = objODBCDatareader["processing_collectiontype"].ToString();
                lsdoc_charges = objODBCDatareader["doc_charges"].ToString();
                lsdoccharge_collectiontype = objODBCDatareader["doccharge_collectiontype"].ToString();
                lsfieldvisit_charge = objODBCDatareader["fieldvisit_charges"].ToString();
                lsfieldvisit_charges_collectiontype = objODBCDatareader["fieldvisit_charges_collectiontype"].ToString();
                lsadhoc_fee = objODBCDatareader["adhoc_fee"].ToString();
                lsadhoc_collectiontype = objODBCDatareader["adhoc_collectiontype"].ToString();
                lslife_insurance = objODBCDatareader["life_insurance"].ToString();
                lslifeinsurance_collectiontype = objODBCDatareader["lifeinsurance_collectiontype"].ToString();
                lsacct_insurance = objODBCDatareader["acct_insurance"].ToString();
                lstotal_collect = objODBCDatareader["total_collect"].ToString();
                lstotal_deduct = objODBCDatareader["total_deduct"].ToString();
                lsproduct_type = objODBCDatareader["product_type"].ToString();
                lsproducttype_gid = objODBCDatareader["producttype_gid"].ToString();
                lsacctinsurance_collectiontype = objODBCDatareader["acctinsurance_collectiontype"].ToString();
            }
            objODBCDatareader.Close();
            try
            {
                msSQL = " update ocs_trn_tcadapplicationservicecharge set " +
                        " processing_fee='" + values.processing_fee.Replace(",", "") + "'," +
                         " processing_collectiontype='" + values.processing_collectiontype + "'," +
                         " doc_charges='" + values.doc_charges.Replace(",", "") + "'," +
                         " doccharge_collectiontype='" + values.doccharge_collectiontype + "'," +
                         " fieldvisit_charges='" + values.fieldvisit_charge.Replace(",", "") + "'," +
                         " fieldvisit_charges_collectiontype='" + values.fieldvisit_collectiontype + "'," +
                         " adhoc_fee='" + values.adhoc_fee.Replace(",", "") + "'," +
                         " adhoc_collectiontype='" + values.adhoc_collectiontype + "'," +
                         " life_insurance='" + values.life_insurance.Replace(",", "") + "'," +
                         " lifeinsurance_collectiontype='" + values.lifeinsurance_collectiontype + "'," +
                         " acct_insurance='" + values.acct_insurance.Replace(",", "") + "'," +
                         " acctinsurance_collectiontype='" + values.acctinsurance_collectiontype + "'," +
                         " total_collect='" + values.total_collect + "'," +
                         " total_deduct='" + values.total_deduct + "'," +
                          " updated_by='" + employee_gid + "'," +
                         " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                         " where application2servicecharge_gid='" + values.application2servicecharge_gid + "' ";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = " select generatelsa_gid from ocs_trn_tgeneratelsa a " +
                   " left join ocs_trn_tprocesstype_assign b on b.application_gid = a.application_gid " +
                   " where a.application_gid = '" + lsapplication_gid + "' and b.menu_gid = '" + getMenuClass.LSA + "' and maker_approvalflag = 'N'";
                string generatelsa_gid = objdbconn.GetExecuteScalar(msSQL);
                if (generatelsa_gid != "")
                {
                    msSQL = " update ocs_trn_tlsafeescharge set " +
                       " processing_fee='" + values.processing_fee.Replace(",", "") + "'," +
                       " processing_collectiontype='" + values.processing_collectiontype + "'," +
                       " doc_charges='" + values.doc_charges.Replace(",", "") + "'," +
                       " doccharge_collectiontype='" + values.doccharge_collectiontype + "'," +
                       " fieldvisit_charges='" + values.fieldvisit_charge.Replace(",", "") + "'," +
                       " fieldvisit_charges_collectiontype='" + values.fieldvisit_collectiontype + "'," +
                       " adhoc_fee='" + values.adhoc_fee.Replace(",", "") + "'," +
                       " adhoc_collectiontype='" + values.adhoc_collectiontype + "'," +
                       " life_insurance='" + values.life_insurance.Replace(",", "") + "'," +
                       " lifeinsurance_collectiontype='" + values.lifeinsurance_collectiontype + "'," +
                       " acct_insurance='" + values.acct_insurance.Replace(",", "") + "'," +
                       " acctinsurance_collectiontype='" + values.acctinsurance_collectiontype + "'," +
                       " total_collect='" + values.total_collect + "'," +
                       " total_deduct='" + values.total_deduct + "'," +
                        " updated_by='" + employee_gid + "'," +
                       " updated_date='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                       " where application2servicecharge_gid='" + values.application2servicecharge_gid + "' and generatelsa_gid ='" + generatelsa_gid + "'";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                }

                if (mnResult == 1)
                {

                    values.status = true;
                    values.message = "Service Charge Details Updated Successfully";
                }
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Error Occured..";
            }
        }

        public void DaGetCadApplicationBasicView(string application_gid, MdlMstApplicationView values)
        {
            try
            {
                msSQL = " select a.application_gid, a.application_no, customer_urn, customer_name, vertical_name, verticaltaggs_name, " +
                        " constitution_name, businessunit_name, vernacular_language, sa_status, sa_id, sa_name, a.social_capital, a.trade_capital," +
                        " designation_type, landline_no, concat_ws(' ', contactpersonfirst_name, contactpersonmiddle_name, contactpersonlast_name) as contactperson_name," +
                        " a.region,momapproval_flag,approval_status,creditgroup_name, " +
                        " docchecklist_makerflag,docchecklist_checkerflag,docchecklist_approvalflag,product_gid,product_name, " +
                        " sector_name,category_name,variety_gid,variety_name,botanical_name,alternative_name,program_gid,program_name " +
                        " from ocs_trn_tcadapplication a" +
                        " left join ocs_trn_tcadinstitution d on d.application_gid = a.application_gid " +
                        " left join ocs_trn_tcadcontact e on e.application_gid = a.application_gid " +
                        " where a.application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.application_no = objODBCDatareader["application_no"].ToString();
                    values.customer_urn = objODBCDatareader["customer_urn"].ToString();
                    values.customer_name = objODBCDatareader["customer_name"].ToString();
                    values.vertical_name = objODBCDatareader["vertical_name"].ToString();
                    values.verticaltaggs_name = objODBCDatareader["verticaltaggs_name"].ToString();
                    values.constitution_name = objODBCDatareader["constitution_name"].ToString();
                    values.businessunit_name = objODBCDatareader["businessunit_name"].ToString();
                    values.vernacular_language = objODBCDatareader["vernacular_language"].ToString();
                    values.sa_status = objODBCDatareader["sa_status"].ToString();
                    values.sa_id = objODBCDatareader["sa_id"].ToString();
                    values.sa_name = objODBCDatareader["sa_name"].ToString();
                    values.landline_no = objODBCDatareader["landline_no"].ToString();
                    values.designation_type = objODBCDatareader["designation_type"].ToString();
                    values.contactperson_name = objODBCDatareader["contactperson_name"].ToString();
                    values.primaryvaluechain_name = objODBCDatareader["primaryvaluechain_name"].ToString();
                    values.secondaryvaluechain_name = objODBCDatareader["secondaryvaluechain_name"].ToString();
                    values.social_capital = objODBCDatareader["social_capital"].ToString();
                    values.trade_capital = objODBCDatareader["trade_capital"].ToString();
                    values.momapproval_flag = objODBCDatareader["momapproval_flag"].ToString();
                    values.approval_status = objODBCDatareader["approval_status"].ToString();
                    values.creditgroup_name = objODBCDatareader["creditgroup_name"].ToString();
                    values.businessapproved_date = objODBCDatareader["businessapproved_date"].ToString();
                    values.ccapproved_date = objODBCDatareader["ccapproved_date"].ToString();
                    values.region = objODBCDatareader["region"].ToString();
                    values.docchecklist_makerflag = objODBCDatareader["docchecklist_makerflag"].ToString();
                    values.docchecklist_checkerflag = objODBCDatareader["docchecklist_checkerflag"].ToString();
                    values.docchecklist_approvalflag = objODBCDatareader["docchecklist_approvalflag"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();
                    values.program_gid = objODBCDatareader["program_gid"].ToString();
                    values.program_name = objODBCDatareader["program_name"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();

                msSQL = " select application_gid from ocs_trn_tcadinstitution " +
                        " where application_gid='" + application_gid + "' and (stakeholder_type='Applicant' or stakeholder_type='Borrower')";
                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                if (lsapplication_gid != "")
                {
                    values.borrower_flag = "Y";
                    values.borrower_type = "Institution";
                }
                else
                {
                    msSQL = " select application_gid from ocs_trn_tcadcontact " +
                            " where application_gid='" + application_gid + "' and (stakeholder_type='Applicant' or stakeholder_type='Borrower')";
                    lsapplication_gidcontact = objdbconn.GetExecuteScalar(msSQL);
                    if (lsapplication_gidcontact != "")
                    {
                        values.borrower_flag = "N";
                        values.borrower_type = "Individual";
                    }
                    else
                    {
                        values.borrower_type = "";
                        values.borrower_flag = "";
                    }
                }

                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadGeneticDetailsView(string application_gid, MdlMstApplicationView values)
        {
            try
            {
                msSQL = " select geneticcode_name, genetic_status, genetic_remarks, application_gid, geneticcode_gid " +
                        " from ocs_trn_tcadapplication2geneticcode " +
                        " where application_gid = '" + application_gid + "' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getgenetic_list = new List<geneticdetails_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getgenetic_list.Add(new geneticdetails_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                            genetic_status = (dr_datarow["genetic_status"].ToString()),
                            genetic_remarks = (dr_datarow["genetic_remarks"].ToString()),

                        });
                    }
                    values.geneticdetails_list = getgenetic_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetCadMobileMailDetailsView(string application_gid, MdlMstApplicationView values)
        {
            msSQL = "select mobile_no from ocs_trn_tcadapplication2contactno where application_gid='" + application_gid + "' and primary_mobileno = 'Yes'";
            values.primary_mobileno = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select email_address from ocs_trn_tcadapplication2email where application_gid='" + application_gid + "' and primary_emailaddress = 'Yes'";
            values.primary_email = objdbconn.GetExecuteScalar(msSQL);
            try
            {
                msSQL = " select application2contact_gid, application_gid, mobile_no, whatsapp_mobileno " +
                        " from ocs_trn_tcadapplication2contactno " +
                        " where application_gid = '" + application_gid + "' and primary_mobileno = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<mobilenumber_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new mobilenumber_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            mobile_no = (dr_datarow["mobile_no"].ToString()),
                            whatsapp_mobileno = (dr_datarow["whatsapp_mobileno"].ToString()),

                        });
                    }
                    values.mobilenumber_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

                msSQL = " select application2email_gid, application_gid, email_address " +
                        " from ocs_trn_tcadapplication2email " +
                        " where application_gid = '" + application_gid + "' and primary_emailaddress = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmail_list = new List<mail_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmail_list.Add(new mail_list
                        {
                            application_gid = (dr_datarow["application_gid"].ToString()),
                            application2email_gid = (dr_datarow["application2email_gid"].ToString()),
                            email_address = (dr_datarow["email_address"].ToString()),

                        });
                    }
                    values.mail_list = getmail_list;
                }
                dt_datatable.Dispose();
                values.status = true;
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetCadProductChargesDtl(string application_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select application2loan_gid,date_format(facilityrequested_date, '%d-%m-%Y') as facilityrequested_date, product_type,limit_product, " +
                        " productsub_type, loanfacility_amount, loan_type, rate_interest,margin,penal_interest, facilityoverall_limit, " +
                        " tenureoverall_limit, facility_type, facility_mode, principalfrequency_name, interestfrequency_name, " +
                        " interest_status, moratorium_type, moratorium_status, date_format(moratorium_startdate, '%d-%m-%Y') as moratorium_startdate, " +
                        " date_format(moratorium_enddate, '%d-%m-%Y') as moratorium_enddate,scheme_type,tenureproduct_month,tenureproduct_days, " +
                        " product_gid,product_name,sector_name,category_name,variety_gid,variety_name,botanical_name,alternative_name,program_gid,program " +
                        " from ocs_trn_tcadapplication2loan " +
                        " where application_gid='" + application_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstloansummary_list = new List<mstLoan_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstloansummary_list.Add(new mstLoan_list
                        {
                            application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                            facilityrequested_date = (dr_datarow["facilityrequested_date"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            productsub_type = (dr_datarow["productsub_type"].ToString()),
                            loanfacility_amount = (dr_datarow["loanfacility_amount"].ToString()),
                            loan_type = (dr_datarow["loan_type"].ToString()),
                            rate_interest = (dr_datarow["rate_interest"].ToString()),
                            roi_margin = (dr_datarow["margin"].ToString()),
                            penal_interest = (dr_datarow["penal_interest"].ToString()),
                            facilityoverall_limit = (dr_datarow["facilityoverall_limit"].ToString()),
                            tenureoverall_limit = (dr_datarow["tenureoverall_limit"].ToString()),
                            facility_type = (dr_datarow["facility_type"].ToString()),
                            facility_mode = (dr_datarow["facility_mode"].ToString()),
                            principalfrequency_name = (dr_datarow["principalfrequency_name"].ToString()),
                            interestfrequency_name = (dr_datarow["interestfrequency_name"].ToString()),
                            interest_status = (dr_datarow["interest_status"].ToString()),
                            moratorium_status = (dr_datarow["moratorium_status"].ToString()),
                            moratorium_type = (dr_datarow["moratorium_type"].ToString()),
                            moratorium_startdate = (dr_datarow["moratorium_startdate"].ToString()),
                            moratorium_enddate = (dr_datarow["moratorium_enddate"].ToString()),
                            scheme_type = (dr_datarow["scheme_type"].ToString()),
                            tenureproduct_days = (dr_datarow["tenureproduct_days"].ToString()),
                            tenureproduct_month = (dr_datarow["tenureproduct_month"].ToString()),
                            limit_product = (dr_datarow["limit_product"].ToString()),
                            product_gid = (dr_datarow["product_gid"].ToString()),
                            product_name = (dr_datarow["product_name"].ToString()),
                            sector_name = (dr_datarow["sector_name"].ToString()),
                            category_name = (dr_datarow["category_name"].ToString()),
                            variety_gid = (dr_datarow["variety_gid"].ToString()),
                            variety_name = (dr_datarow["variety_name"].ToString()),
                            botanical_name = (dr_datarow["botanical_name"].ToString()),
                            alternative_name = (dr_datarow["alternative_name"].ToString()),
                            program_gid = (dr_datarow["program_gid"].ToString()),
                            program = (dr_datarow["program"].ToString())
                        });
                    }
                    values.mstLoan_list = getmstloansummary_list;
                }
                dt_datatable.Dispose();

                msSQL = " select overalllimit_amount, validityoveralllimit_year, validityoveralllimit_month, validityoveralllimit_days, " +
                                " calculationoveralllimit_validity from ocs_trn_tcadapplication " +
                                " where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.overalllimit_amount = objODBCDatareader["overalllimit_amount"].ToString();
                    values.validityoveralllimit_year = objODBCDatareader["validityoveralllimit_year"].ToString();
                    values.validityoveralllimit_month = objODBCDatareader["validityoveralllimit_month"].ToString();
                    values.validityoveralllimit_days = objODBCDatareader["validityoveralllimit_days"].ToString();
                    values.calculationoveralllimit_validity = objODBCDatareader["calculationoveralllimit_validity"].ToString();
                }
                objODBCDatareader.Close();


                msSQL = " select application2loan_gid, source_type, guideline_value, date_format(guideline_date, '%d-%m-%Y') as guideline_date, " +
                        " date_format(marketvalue_date, '%d-%m-%Y') as marketvalue_date, market_value, forcedsource_value, " +
                        " collateralSSV_value, date_format(forcedvalueassessed_on, '%d-%m-%Y') as forcedvalueassessed_on, " +
                        " collateralobservation_summary,product_type,productsub_type from ocs_trn_tcadapplication2loan  " +
                        " where application_gid='" + application_gid + "' and loan_type ='Secured'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstcollateral_list = new List<mstcollateral_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstcollateral_list.Add(new mstcollateral_list
                        {
                            application2loan_gid = (dr_datarow["application2loan_gid"].ToString()),
                            source_type = (dr_datarow["source_type"].ToString()),
                            guideline_value = (dr_datarow["guideline_value"].ToString()),
                            guideline_date = (dr_datarow["guideline_date"].ToString()),
                            marketvalue_date = (dr_datarow["marketvalue_date"].ToString()),
                            market_value = (dr_datarow["market_value"].ToString()),
                            forcedsource_value = (dr_datarow["forcedsource_value"].ToString()),
                            collateralSSV_value = (dr_datarow["collateralSSV_value"].ToString()),
                            forcedvalueassessed_on = (dr_datarow["forcedvalueassessed_on"].ToString()),
                            collateralobservation_summary = (dr_datarow["collateralobservation_summary"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            productsub_type = (dr_datarow["productsub_type"].ToString()),
                        });
                    }
                    values.mstcollateral_list = getmstcollateral_list;
                }
                dt_datatable.Dispose();

                msSQL = "select processing_fee, processing_collectiontype, doc_charges, doccharge_collectiontype, fieldvisit_charges," +
                        " fieldvisit_charges_collectiontype, adhoc_fee, adhoc_collectiontype, life_insurance, lifeinsurance_collectiontype, " +
                        " acct_insurance, total_collect, total_deduct,product_type,producttype_gid,acctinsurance_collectiontype from ocs_trn_tcadapplicationservicecharge " +
                        " where application_gid='" + application_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstservicecharge_list = new List<servicecharge_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstservicecharge_list.Add(new servicecharge_List
                        {
                            producttype_gid = (dr_datarow["producttype_gid"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            processing_fee = (dr_datarow["processing_fee"].ToString()),
                            processing_collectiontype = (dr_datarow["processing_collectiontype"].ToString()),
                            doc_charges = (dr_datarow["doc_charges"].ToString()),
                            doccharge_collectiontype = (dr_datarow["doccharge_collectiontype"].ToString()),
                            fieldvisit_charge = (dr_datarow["fieldvisit_charges"].ToString()),
                            fieldvisit_collectiontype = (dr_datarow["fieldvisit_charges_collectiontype"].ToString()),
                            adhoc_fee = (dr_datarow["adhoc_fee"].ToString()),
                            adhoc_collectiontype = (dr_datarow["adhoc_collectiontype"].ToString()),
                            life_insurance = (dr_datarow["life_insurance"].ToString()),
                            lifeinsurance_collectiontype = (dr_datarow["lifeinsurance_collectiontype"].ToString()),
                            acct_insurance = (dr_datarow["acct_insurance"].ToString()),
                            acctinsurance_collectiontype = (dr_datarow["acctinsurance_collectiontype"].ToString()),
                            total_collect = (dr_datarow["total_collect"].ToString()),
                            total_deduct = (dr_datarow["total_deduct"].ToString())
                        });
                    }
                    values.servicecharge_List = getmstservicecharge_list;
                }
                dt_datatable.Dispose();

                msSQL = " select application2hypothecation_gid, security_type, security_description, security_value, " +
                        " date_format(securityassessed_date, '%d-%m-%Y') as securityassessed_date, asset_id, roc_fillingid, " +
                        " CERSAI_fillingid, hypoobservation_summary, primary_security " +
                        " from ocs_trn_tcadapplication2hypothecation " +
                        " where application_gid='" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application2hypothecation_gid = objODBCDatareader["application2hypothecation_gid"].ToString();
                    values.security_type = objODBCDatareader["security_type"].ToString();
                    values.security_description = objODBCDatareader["security_description"].ToString();
                    values.security_value = objODBCDatareader["security_value"].ToString();
                    values.securityassessed_date = objODBCDatareader["securityassessed_date"].ToString();
                    values.asset_id = objODBCDatareader["asset_id"].ToString();
                    values.roc_fillingid = objODBCDatareader["roc_fillingid"].ToString();
                    values.CERSAI_fillingid = objODBCDatareader["CERSAI_fillingid"].ToString();
                    values.hypoobservation_summary = objODBCDatareader["hypoobservation_summary"].ToString();
                    values.primary_security = objODBCDatareader["primary_security"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetCadInstitutionList(string application_gid, MdlCreditView values)
        {
            msSQL = " select a.institution_gid, a.application_gid, a.cin_no, a.companytype_name, " +
                     " a.company_name, a.companypan_no, date_format(a.date_incorporation, '%d-%m-%Y') as date_incorporation,d.crimecheck_flag,e.crimecheck_flag as rtcrimecheck_flag," +
                     " date_format(a.created_date, '%d-%m-%Y') as created_date," +
                     " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.stakeholder_type,a.credit_status, " +
                     " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                     " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                     " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                     " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.institution_gid " +
                     " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc, f.vertical_gid, f.vertical_name " +
                     " from ocs_trn_tcadinstitution a" +
                     " left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                     " left join adm_mst_tuser c on b.user_gid = c.user_gid" +
                     " left join ocs_trn_tcadcrimechecksearchrecord d on a.institution_gid = d.institution_gid" +
                     " left join ocs_trn_tcadcrimecheckrtsearchrecord e on a.institution_gid = e.institution_gid" +
                     " left join ocs_mst_tapplication f on f.application_gid = a.application_gid" +
                     " where a.application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitutionList = new List<institution_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinstitutionList.Add(new institution_List
                    {
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        crimecheck_flag = (dr_datarow["crimecheck_flag"].ToString()),
                        rtcrimecheck_flag = (dr_datarow["rtcrimecheck_flag"].ToString()),
                        company_name = (dr_datarow["company_name"].ToString()),
                        companypan_no = (dr_datarow["companypan_no"].ToString()),
                        cin_no = (dr_datarow["cin_no"].ToString()),
                        companytype_name = (dr_datarow["companytype_name"].ToString()),
                        date_incorporation = (dr_datarow["date_incorporation"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                    });
                }
                values.institution_List = getinstitutionList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetCadIndividualList(string application_gid, MdlCreditView values)
        {
            msSQL = " select a.contact_gid, a.application_gid, concat_ws(' ', first_name, last_name, middle_name) as individual_name,d.crimecheck_flag,e.crimecheck_flag as rtcrimecheck_flag," +
                      " a.pan_no, a.aadhar_no, date_format(individual_dob, '%d-%m-%Y') as individual_dob,a.age,a.designation_name," +
                      " a.main_occupation, date_format(a.created_date, '%d-%m-%Y') as created_date," +
                      " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,a.stakeholder_type,a.institution_name,a.credit_status, " +
                      " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                      " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                      " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                      " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                      " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc, f.vertical_gid, f.vertical_name " +
                      " from ocs_trn_tcadcontact a" +
                      " left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                      " left join adm_mst_tuser c on b.user_gid = c.user_gid" +
                      " left join ocs_trn_tcadcrimechecksearchrecord d on a.contact_gid = d.contact_gid" +
                      " left join ocs_trn_tcadcrimecheckrtsearchrecord e on a.contact_gid = e.contact_gid" +
                      " left join ocs_mst_tapplication f on f.application_gid = a.application_gid" +
                      " where a.application_gid = '" + application_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getindividualList = new List<individual_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getindividualList.Add(new individual_List
                    {
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        crimecheck_flag = (dr_datarow["crimecheck_flag"].ToString()),
                        rtcrimecheck_flag = (dr_datarow["rtcrimecheck_flag"].ToString()),
                        individual_name = (dr_datarow["individual_name"].ToString()),
                        pan_no = (dr_datarow["pan_no"].ToString()),
                        aadhar_no = (dr_datarow["aadhar_no"].ToString()),
                        individual_dob = (dr_datarow["individual_dob"].ToString()),
                        main_occupation = (dr_datarow["main_occupation"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        company_name = (dr_datarow["institution_name"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        age = (dr_datarow["age"].ToString()),
                        designation_name = (dr_datarow["designation_name"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                        vertical_gid = (dr_datarow["vertical_gid"].ToString()),
                        vertical_name = (dr_datarow["vertical_name"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                    });
                }
                values.individual_List = getindividualList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetCadGroupSummary(string application_gid, MdlMstGroup values)
        {
            msSQL = " select a.group_gid,a.group_name,date_format(a.date_of_formation,'%d-%m-%Y') as date_of_formation,a.group_status, a.group_type," +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by,date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date,credit_status," +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.group_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc " +
                    " from ocs_trn_tcadgroup a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by " +
                    " left join adm_mst_tuser c on c.user_gid=b.user_gid" +
                    " where application_gid='" + application_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroup_list = new List<group_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroup_list.Add(new group_list
                    {
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        group_name = (dr_datarow["group_name"].ToString()),
                        date_of_formation = (dr_datarow["date_of_formation"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        group_status = (dr_datarow["group_status"].ToString()),
                        group_type = (dr_datarow["group_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                    });
                }
            }
            values.group_list = getgroup_list;
            dt_datatable.Dispose();
        }

        public void DaGetCadGrouptoMemberList(string group_gid, MdlMstGroupMember values)
        {
            msSQL = "select a.contact_gid,a.pan_no,a.aadhar_no,concat(first_name, ' ',middle_name,' ',last_name) as individual_name,stakeholder_type,credit_status," +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid =a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as OverallDeferralcount, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N')) as overallCovenantCount, " +
                    " (select count(*) from ocs_trn_tcadgroupdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified')) as verifieddeferraldoc, " +
                    " (select count(*) from ocs_trn_tcadgroupcovenantdocumentchecklist where credit_gid = a.contact_gid " +
                    " and(untagged_type is null or untagged_type = 'N') and overall_docstatus in ('Waived','Document Verified'))  as verifiedcovenantdoc " +
                    " from ocs_trn_tcadcontact a " +
                    " where group_gid='" + group_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgroupmember_list = new List<groupmember_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgroupmember_list.Add(new groupmember_list
                    {
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        individual_name = (dr_datarow["individual_name"].ToString()),
                        pan_no = (dr_datarow["pan_no"].ToString()),
                        aadhar_no = (dr_datarow["aadhar_no"].ToString()),
                        stakeholder_type = (dr_datarow["stakeholder_type"].ToString()),
                        credit_status = (dr_datarow["credit_status"].ToString()),
                        overallCovenantCount = (dr_datarow["overallCovenantCount"].ToString()),
                        OverallDeferralcount = (dr_datarow["OverallDeferralcount"].ToString()),
                        verifieddeferraldoc = (dr_datarow["verifieddeferraldoc"].ToString()),
                        verifiedcovenantdoc = (dr_datarow["verifiedcovenantdoc"].ToString()),
                    });
                }
            }
            values.groupmember_list = getgroupmember_list;
            dt_datatable.Dispose();
        }

        public void DaGetCadRMDetailsView(string application_gid, MdlRMDtlView values)
        {
            try
            {
                msSQL = " select d.department_name,concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as RM_Name, " +
                        " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as applicationinitiated_date,date_format(a.ccsubmitted_date, '%d-%m-%Y %h:%i %p') as ccsubmitted_date, " +
                        " concat(f.user_firstname, ' ', f.user_lastname, ' / ', f.user_code) as ccsubmitted_by from ocs_trn_tcadapplication a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " left join hrm_mst_tdepartment d on d.department_gid = b.department_gid " +
                        " left join hrm_mst_temployee e on e.employee_gid = a.ccsubmitted_by " +
                        " left join adm_mst_tuser f on f.user_gid = e.user_gid " +
                        " where application_gid = '" + application_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.department_name = objODBCDatareader["department_name"].ToString();
                    values.RM_Name = objODBCDatareader["RM_Name"].ToString();
                    values.applicationinitiated_date = objODBCDatareader["applicationinitiated_date"].ToString();
                    values.ccsubmitted_date = objODBCDatareader["ccsubmitted_date"].ToString();
                    values.ccsubmitted_by = objODBCDatareader["ccsubmitted_by"].ToString();
                }
                objODBCDatareader.Close();

                msSQL = " select approval_name, date_format(approved_date, '%d-%m-%Y %h:%i %p') as approved_date " +
                        " from ocs_trn_tappcreditapproval " +
                        " where application_gid = '" + application_gid + "' and hierary_level = '0'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.creditunderwritten_by = objODBCDatareader["approval_name"].ToString();
                    values.creditunderwritten_date = objODBCDatareader["approved_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        public void DaGetCadVisitReportList(string application_gid, string statusupdated_by, MdlMstVisitPersonView values)
        {
            msSQL = "select concat(e.user_firstname,' ',e.user_lastname,' / ',e.user_code) as created_by, date_format(a.created_date,'%d-%m-%Y') as created_date, " +
                " date_format(a.applicationvisit_date,'%d-%m-%Y') as applicationvisit_date,a.visitreport_id,a.applicationvisit_gid " +
                " from ocs_trn_tcadapplicationvisitreport a " +
                " left join hrm_mst_temployee d on d.employee_gid = a.created_by" +
                " left join adm_mst_tuser e on d.user_gid = e.user_gid" +
                " where application_gid='" + application_gid + "' and a.statusupdated_by='" + statusupdated_by + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getVisitReportList = new List<VisitReport_List>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getVisitReportList.Add(new VisitReport_List
                    {

                        visitreport_gid = (dr_datarow["applicationvisit_gid"].ToString()),
                        visitreport_date = (dr_datarow["applicationvisit_date"].ToString()),
                        visitreport_id = (dr_datarow["visitreport_id"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                    });
                }
                values.VisitReport_List = getVisitReportList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetCadGradingToolDtls(string application_gid, string statusupdated_by, MdlMstGradeToolView values)
        {
            try
            {
                msSQL = " select fpo_acscore, date_format(dateofsurvey, '%d-%m-%Y') as dateofsurvey, overallfporating, overallfpograde, application2gradingtool_gid," +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, date_format(a.created_date,'%d-%m-%Y') as created_date  " +
                        " from ocs_trn_tcadapplication2gradingtool a" +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by" +
                        " left join adm_mst_tuser c on b.user_gid = c.user_gid" +
                        " where application_gid='" + application_gid + "' and a.statusupdated_by='" + statusupdated_by + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstgradetoolsummary_list = new List<mstgradetoolsummary_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstgradetoolsummary_list.Add(new mstgradetoolsummary_list
                        {
                            fpo_acscore = (dr_datarow["fpo_acscore"].ToString()),
                            dateofsurvey = (dr_datarow["dateofsurvey"].ToString()),
                            overallfporating = (dr_datarow["overallfporating"].ToString()),
                            overallfpograde = (dr_datarow["overallfpograde"].ToString()),
                            created_by = (dr_datarow["created_by"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString()),
                            application2gradingtool_gid = (dr_datarow["application2gradingtool_gid"].ToString()),

                        });
                    }
                    values.mstgradetoolsummary_list = getmstgradetoolsummary_list;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaCadGetGradingTool(string application_gid, string statusupdated_by, Mdlgradingtool values)
        {
            msSQL = "select a.application2gradingtool_gid,a.application_gid, a.overallfporating, a.overallfpograde, " +
                 "date_format(a.dateofsurvey,'%d-%m-%Y') as dateofsurvey,concat(b.user_firstname,' ',b.user_lastname,'/',b.user_code) as created_by,date_format(a.created_date,'%d-%m-%Y %H:%m:%s') as created_date" +
                " from ocs_trn_tcadapplication2gradingtool a  " +
                " left join hrm_mst_temployee d on a.created_by=d.employee_gid " +
                " left join adm_mst_tuser b on d.user_gid=b.user_gid " +
                " where a.application_gid ='" + application_gid + "' and a.statusupdated_by='" + statusupdated_by + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);

            var getgrading_list = new List<grading_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgrading_list.Add(new grading_list
                    {
                        application2gradingtool_gid = (dr_datarow["application2gradingtool_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        dateofsurvey = (dr_datarow["dateofsurvey"].ToString()),
                        Created_by = (dr_datarow["created_by"].ToString()),
                        Created_date = (dr_datarow["created_date"].ToString()),
                        overallfporating = (dr_datarow["overallfporating"].ToString()),
                        overallfpograde = (dr_datarow["overallfpograde"].ToString())
                    });
                }
                values.grading_list = getgrading_list;
            }
            dt_datatable.Dispose();


        }

        public void DaGetCadCreditVisitReportList(string application_gid, string statusupdated_by, MdlMstVisitPerson values)
        {
            msSQL = " select concat(c.user_firstname,' ',c.user_lastname,'/',c.user_code) as created_by,draft_flag, a.visitreport_id," +
                    " date_format(a.created_date,'%d-%m-%Y %H:%m:%s') as created_date, date_format(a.applicationvisit_date,'%d-%m-%Y') as applicationvisit_date, " +
                    " a.applicationvisit_gid  from ocs_trn_tcadapplicationvisitreport a " +
                    " left join hrm_mst_temployee b on b.employee_gid=a.created_by " +
                    " left join  adm_mst_tuser c on c.user_gid=b.user_gid " +
                    " where application_gid='" + application_gid + "' and a.statusupdated_by='" + statusupdated_by + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getVisitReportList = new List<VisitReportList>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getVisitReportList.Add(new VisitReportList
                    {

                        draft_flag = (dr_datarow["draft_flag"]).ToString(),
                        visitreport_id = (dr_datarow["visitreport_id"].ToString()),
                        visitreport_gid = (dr_datarow["applicationvisit_gid"].ToString()),
                        visitreport_date = (dr_datarow["applicationvisit_date"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString())
                    });
                }
                values.VisitReportList = getVisitReportList;
            }
            dt_datatable.Dispose();
            values.status = true;
        }

        public void DaGetCadLoantoBuyerList(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = "select application2buyer_gid,buyer_name,buyer_gid,buyer_limit,availed_limit,balance_limit,margin,bill_tenure " +
                   " from ocs_trn_tcadapplication2buyer where application2loan_gid='" + application2loan_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstbuyer_list = new List<mstbuyer_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstbuyer_list.Add(new mstbuyer_list
                        {
                            application2buyer_gid = (dr_datarow["application2buyer_gid"].ToString()),
                            buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                            buyer_name = (dr_datarow["buyer_name"].ToString()),
                            buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                            availed_limit = (dr_datarow["availed_limit"].ToString()),
                            balance_limit = (dr_datarow["balance_limit"].ToString()),
                            bill_tenure = (dr_datarow["bill_tenure"].ToString()),
                            margin = (dr_datarow["margin"].ToString())
                        });
                    }
                    values.mstbuyer_list = getmstbuyer_list;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetCadLoanProgramValueChain(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select program, primaryvaluechain_name, secondaryvaluechain_name,product_gid,product_name, " +
                        " variety_gid,variety_name,sector_name,category_name,botanical_name,alternative_name from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.program = objODBCDatareader["program"].ToString();
                    values.primaryvaluechain_name = objODBCDatareader["primaryvaluechain_name"].ToString();
                    values.secondaryvaluechain_name = objODBCDatareader["secondaryvaluechain_name"].ToString();
                    values.product_gid = objODBCDatareader["product_gid"].ToString();
                    values.product_name = objODBCDatareader["product_name"].ToString();
                    values.variety_gid = objODBCDatareader["variety_gid"].ToString();
                    values.variety_name = objODBCDatareader["variety_name"].ToString();
                    values.sector_name = objODBCDatareader["sector_name"].ToString();
                    values.category_name = objODBCDatareader["category_name"].ToString();
                    values.botanical_name = objODBCDatareader["botanical_name"].ToString();
                    values.alternative_name = objODBCDatareader["alternative_name"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetCadPurposeofLoan(string application2loan_gid, MdlMstProductChargesView values)
        {
            try
            {
                msSQL = " select enduse_purpose from ocs_trn_tcadapplication2loan where application2loan_gid='" + application2loan_gid + "'";
                values.enduse_purpose = objdbconn.GetExecuteScalar(msSQL);
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetCadAppLimitInfoDtl(limitandproductslist values, string application_gid)
        {
            try
            {
                msSQL = " select limitproductinfodtl_gid,interchangeability,report_structure_gid,product_type,productsub_type, " +
                       " report_structure,format(odlim_amount,2,'en_IN') as odlim_amount,odlim_condition,format(existing_limit,2,'en_IN') as existing_limit , " +
                       " format(limit_released,2,'en_IN') as limit_released,format(documented_limit,2,'en_IN') as documented_limit, " +
                       " date_format(dateof_Expiry,'%d-%m-%Y') as dateof_Expiry, " +
                       " limitinfo_remarks,created_by,created_date from ocs_trn_tlimitproductinfo " +
                       " where application_gid='" + application_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getlimit_info = new List<limitandproducts>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getlimit_info.Add(new limitandproducts
                        {
                            limitproductinfodtl_gid = dr_datarow["limitproductinfodtl_gid"].ToString(),
                            existing_limit = (dr_datarow["existing_limit"].ToString()),
                            limit_released = (dr_datarow["limit_released"].ToString()),
                            interchangeability = (dr_datarow["interchangeability"].ToString()),
                            report_structuregid = (dr_datarow["report_structure_gid"].ToString()),
                            report_structure = (dr_datarow["report_structure"].ToString()),
                            odlim_amount = (dr_datarow["odlim_amount"].ToString()),
                            odlim_condition = (dr_datarow["odlim_condition"].ToString()),
                            limitinfo_remarks = (dr_datarow["limitinfo_remarks"].ToString()),
                            product_type = (dr_datarow["product_type"].ToString()),
                            productsub_type = (dr_datarow["productsub_type"].ToString()),
                            documented_limit = (dr_datarow["documented_limit"].ToString()),
                            dateof_Expiry = (dr_datarow["dateof_Expiry"].ToString()),
                        });
                    }
                    values.limitandproducts = getlimit_info;
                    dt_datatable.Dispose();
                }

                //msSQL = " select format(sum(limit_released),2,'en_IN') from ocs_trn_tlimitproductinfo  a " +
                //        " where generatelsa_gid='" + generatelsa_gid + "'";
                //values.total_limitreleased = objdbconn.GetExecuteScalar(msSQL);

                //msSQL = " select format(sum(existing_limit),2,'en_IN') from ocs_trn_tlimitproductinfo  a " +
                //       " where generatelsa_gid='" + generatelsa_gid + "'";
                //values.total_existinglimit = objdbconn.GetExecuteScalar(msSQL);
                values.status = true;
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = ex.ToString();
            }
        }

        public void DaGetCadGurantorInstitutionView(string institution_gid, MdlMstInstitutionDtlView values)
        {
            try
            {
                msSQL = " select institution_gid, application_gid, company_name, companypan_no, date_format(date_incorporation, '%d-%m-%Y') as date_incorporation, " +
                        " year_business, month_business, cin_no, official_telephoneno, officialemail_address, companytype_name, escrow, " +
                        " lastyear_turnover, date_format(start_date, '%d-%m-%Y') as start_date, " +
                        " date_format(end_date, '%d-%m-%Y') as end_date, assessmentagency_name, " +
                        " assessmentagencyrating_name, date_format(ratingas_on, '%d-%m-%Y') as ratingas_on, " +
                        " amlcategory_name, businesscategory_name, urn_status, urn, " +
                        " contactperson_firstname,contactperson_middlename,contactperson_lastname,designation, " +
                        " date_format(businessstart_date, '%d-%m-%Y') as businessstart_date, " +
                        " nearsamunnatiabranch_gid,nearsamunnatiabranch_name,udhayam_registration,tan_number,business_description, " +
                        " tanstate_gid,tanstate_name,internalrating_gid,internalrating_name, " +
                        " sales, purchase, credit_summation, cheque_bounce, numberof_boardmeetings, farmer_count, crop_cycle,calamities_prone " +
                        " from ocs_trn_tcadinstitution " +
                        " where institution_gid = '" + institution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.company_name = objODBCDatareader["company_name"].ToString();
                    values.companypan_no = objODBCDatareader["companypan_no"].ToString();
                    values.date_incorporation = objODBCDatareader["date_incorporation"].ToString();
                    values.year_business = objODBCDatareader["year_business"].ToString();
                    values.month_business = objODBCDatareader["month_business"].ToString();
                    values.cin_no = objODBCDatareader["cin_no"].ToString();
                    values.official_telephoneno = objODBCDatareader["official_telephoneno"].ToString();
                    values.officialemail_address = objODBCDatareader["officialemail_address"].ToString();
                    values.companytype_name = objODBCDatareader["companytype_name"].ToString();
                    values.escrow = objODBCDatareader["escrow"].ToString();
                    values.lastyear_turnover = objODBCDatareader["lastyear_turnover"].ToString();
                    values.start_date = objODBCDatareader["start_date"].ToString();
                    values.end_date = objODBCDatareader["end_date"].ToString();
                    values.assessmentagency_name = objODBCDatareader["assessmentagency_name"].ToString();
                    values.assessmentagencyrating_name = objODBCDatareader["assessmentagencyrating_name"].ToString();
                    values.ratingas_on = objODBCDatareader["ratingas_on"].ToString();
                    values.amlcategory_name = objODBCDatareader["amlcategory_name"].ToString();
                    values.businesscategory_name = objODBCDatareader["businesscategory_name"].ToString();
                    values.borrower_type = "Institution";
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                    values.contactperson_firstname = objODBCDatareader["contactperson_firstname"].ToString();
                    values.contactperson_middlename = objODBCDatareader["contactperson_middlename"].ToString();
                    values.contactperson_lastname = objODBCDatareader["contactperson_lastname"].ToString();
                    values.designation = objODBCDatareader["designation"].ToString();
                    values.businessstart_date = objODBCDatareader["businessstart_date"].ToString();
                    values.nearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                    values.nearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                    values.udhayam_registration = objODBCDatareader["udhayam_registration"].ToString();
                    values.tan_number = objODBCDatareader["tan_number"].ToString();
                    values.business_description = objODBCDatareader["business_description"].ToString();
                    values.tanstate_gid = objODBCDatareader["tanstate_gid"].ToString();
                    values.tanstate_name = objODBCDatareader["tanstate_name"].ToString();
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                    values.crop_cycle = objODBCDatareader["crop_cycle"].ToString();
                    values.calamities_prone = objODBCDatareader["calamities_prone"].ToString();
                    values.sales = objODBCDatareader["sales"].ToString();
                    values.purchase = objODBCDatareader["purchase"].ToString();
                    values.credit_summation = objODBCDatareader["credit_summation"].ToString();
                    values.cheque_bounce = objODBCDatareader["cheque_bounce"].ToString();
                    values.numberof_boardmeetings = objODBCDatareader["numberof_boardmeetings"].ToString();
                    values.farmer_count = objODBCDatareader["farmer_count"].ToString();
                }

                objODBCDatareader.Close();

                msSQL = " select GROUP_CONCAT(distinct(b.city_name) SEPARATOR ', ') as city_name " +
                        " from ocs_trn_tcadinstitution a" +
                        " left join ocs_trn_tcadinstitution2fpocacity b on b.institution_gid = a.institution_gid " +
                        " where a.institution_gid='" + values.institution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {

                    values.city_name = objODBCDatareader["city_name"].ToString();

                }
                objODBCDatareader.Close();

                msSQL = " select institution2receivable_gid,institution_gid,receivable_date,onetothirty_days, " +
                       " thirtyonetosixty_days,sixtyonetoninety_days,ninety_days from ocs_trn_tcadinstitution2receivable " +
                       " where institution_gid='" + values.institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstreceivable_list = new List<mstreceivable_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstreceivable_list.Add(new mstreceivable_list
                        {
                            institution2receivable_gid = (dr_datarow["institution2receivable_gid"].ToString()),
                            institution_gid = (dr_datarow["institution_gid"].ToString()),
                            receivable_date = (dr_datarow["receivable_date"].ToString()),
                            onetothirty_days = (dr_datarow["onetothirty_days"].ToString()),
                            thirtyonetosixty_days = (dr_datarow["thirtyonetosixty_days"].ToString()),
                            sixtyonetoninety_days = (dr_datarow["sixtyonetoninety_days"].ToString()),
                            ninety_days = (dr_datarow["ninety_days"].ToString())
                        });
                    }
                    values.mstreceivable_list = getmstreceivable_list;
                }
                dt_datatable.Dispose();

                msSQL = " select institution2equipment_gid,institution_gid,equipment_gid,equipment_name,availablerenthire, " +
                        " quantity,description,insurance_status,insurance_details from ocs_trn_tcadinstitution2equipment where " +
                        " institution_gid='" + values.institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstequipmentholding_list = new List<mstequipmentholding_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstequipmentholding_list.Add(new mstequipmentholding_list
                        {
                            institution2equipment_gid = (dr_datarow["institution2equipment_gid"].ToString()),
                            institution_gid = (dr_datarow["institution_gid"].ToString()),
                            equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                            equipment_name = (dr_datarow["equipment_name"].ToString()),
                            availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                            quantity = (dr_datarow["quantity"].ToString()),
                            description = (dr_datarow["description"].ToString()),
                            insurance_status = (dr_datarow["insurance_status"].ToString()),
                            insurance_details = (dr_datarow["insurance_details"].ToString()),
                        });
                    }
                    values.mstequipmentholding_list = getmstequipmentholding_list;
                }
                dt_datatable.Dispose();

                msSQL = " select institution2livestock_gid,institution_gid,livestock_gid,livestock_name,count,Breed, " +
                       " insurance_status,insurance_details from ocs_trn_tcadinstitution2livestock where " +
                       " institution_gid='" + values.institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstlivestockholding_list = new List<mstlivestockholding_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstlivestockholding_list.Add(new mstlivestockholding_list
                        {
                            institution2livestock_gid = (dr_datarow["institution2livestock_gid"].ToString()),
                            institution_gid = (dr_datarow["institution_gid"].ToString()),
                            livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                            livestock_name = (dr_datarow["livestock_name"].ToString()),
                            count = (dr_datarow["count"].ToString()),
                            Breed = (dr_datarow["Breed"].ToString()),
                            insurance_status = (dr_datarow["insurance_status"].ToString()),
                            insurance_details = (dr_datarow["insurance_details"].ToString()),
                        });
                    }
                    values.mstlivestockholding_list = getmstlivestockholding_list;
                }
                dt_datatable.Dispose();

                msSQL = "select institution2branch_gid,gst_state,gst_no, gst_registered,headoffice_status from ocs_trn_tcadinstitution2branch where institution_gid='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstgst_list = new List<mstgst_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstgst_list.Add(new mstgst_list
                        {
                            institution2branch_gid = (dr_datarow["institution2branch_gid"].ToString()),
                            gst_state = (dr_datarow["gst_state"].ToString()),
                            gst_no = (dr_datarow["gst_no"].ToString()),
                            gst_registered = (dr_datarow["gst_registered"].ToString()),
                            headoffice_status = (dr_datarow["headoffice_status"].ToString())
                        });
                    }
                    values.mstgst_list = getmstgst_list;
                }
                dt_datatable.Dispose();

                msSQL = "  select institution2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, landmark," +
                    " postal_code, city from ocs_trn_tcadinstitution2address where institution_gid='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstaddress_list = new List<mstaddress_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstaddress_list.Add(new mstaddress_list
                        {
                            institution2address_gid = (dr_datarow["institution2address_gid"].ToString()),
                            address_type = (dr_datarow["addresstype_name"].ToString()),
                            primary_status = (dr_datarow["primary_status"].ToString()),
                            addressline1 = (dr_datarow["addressline1"].ToString()),
                            addressline2 = (dr_datarow["addressline2"].ToString()),
                            taluka = (dr_datarow["taluka"].ToString()),
                            district = (dr_datarow["district"].ToString()),
                            state = (dr_datarow["state"].ToString()),
                            country = (dr_datarow["country"].ToString()),
                            postal_code = (dr_datarow["postal_code"].ToString()),
                            city = (dr_datarow["city"].ToString()),
                            landmark = (dr_datarow["landmark"].ToString())
                        });
                    }
                    values.mstaddress_list = getmstaddress_list;
                }
                dt_datatable.Dispose();


                msSQL = "select mobile_no from ocs_trn_tcadinstitution2mobileno where institution_gid='" + institution_gid + "' and primary_status = 'Yes'";
                values.primaryinstitution_mobileno = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select email_address from ocs_trn_tcadinstitution2email where institution_gid='" + institution_gid + "' and primary_status = 'Yes'";
                values.primaryinstitution_email = objdbconn.GetExecuteScalar(msSQL);

                msSQL = " select institution_gid, mobile_no, whatsapp_no " +
                        " from ocs_trn_tcadinstitution2mobileno " +
                        " where institution_gid = '" + institution_gid + "' and primary_status = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getapplication_list = new List<instituionmobilenumber_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getapplication_list.Add(new instituionmobilenumber_list
                        {
                            institution_gid = (dr_datarow["institution_gid"].ToString()),
                            mobile_no = (dr_datarow["mobile_no"].ToString()),
                            whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),

                        });
                    }
                    values.instituionmobilenumber_list = getapplication_list;
                }
                dt_datatable.Dispose();
                values.status = true;

                msSQL = " select institution_gid, email_address " +
                        " from ocs_trn_tcadinstitution2email " +
                        " where institution_gid = '" + institution_gid + "' and primary_status = 'No' ";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmail_list = new List<instituionmail_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmail_list.Add(new instituionmail_list
                        {
                            email_address = (dr_datarow["email_address"].ToString()),

                        });
                    }
                    values.instituionmail_list = getmail_list;
                }
                dt_datatable.Dispose();


                msSQL = " select institution2form60documentupload_gid,form60document_name,form60document_path from ocs_trn_tcadinstitution2form60documentupload " +
                               " where institution_gid ='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumentdtlList = new List<institutionform60_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getdocumentdtlList.Add(new institutionform60_list
                        {
                            document_name = dt["form60document_name"].ToString(),
                            document_path = objcmnstorage.EncryptData((dt["form60document_path"].ToString())),
                            institution2form60documentupload_gid = dt["institution2form60documentupload_gid"].ToString()
                        });
                        values.institutionform60_list = getdocumentdtlList;
                    }
                }
                dt_datatable.Dispose();

                msSQL = " select institution2documentupload_gid,institution_gid,document_name,document_path,document_title,document_id,migration_flag from ocs_trn_tcadinstitution2documentupload " +
                        " where institution_gid='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumentList = new List<institutiondoc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getdocumentList.Add(new institutiondoc_list
                        {
                            migration_flag = dt["migration_flag"].ToString(),
                            document_name = dt["document_name"].ToString(),
                            document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                            institution2documentupload_gid = dt["institution2documentupload_gid"].ToString(),
                            document_title = dt["document_title"].ToString(),
                            document_id = dt["document_id"].ToString(),
                        });
                        values.institutiondoc_list = getdocumentList;
                    }
                }
                dt_datatable.Dispose();

                msSQL = " select institution2licensedtl_gid,licensetype_gid,licensetype_name,license_no,date_format(issue_date,'%d-%m-%Y') as issue_date," +
                        " date_format(expiry_date,'%d-%m-%Y') as expiry_date from ocs_trn_tcadinstitution2licensedtl" +
                        " where institution_gid='" + institution_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstlicense_list = new List<mstlicense_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstlicense_list.Add(new mstlicense_list
                        {
                            institution2licensedtl_gid = (dr_datarow["institution2licensedtl_gid"].ToString()),
                            licensetype_gid = (dr_datarow["licensetype_gid"].ToString()),
                            licensetype_name = (dr_datarow["licensetype_name"].ToString()),
                            license_number = (dr_datarow["license_no"].ToString()),
                            licenseissue_date = (dr_datarow["issue_date"].ToString()),
                            licenseexpiry_date = (dr_datarow["expiry_date"].ToString())
                        });
                    }
                    values.mstlicense_list = getmstlicense_list;
                }
                dt_datatable.Dispose();


                msSQL = " select bureauname_gid,bureauname_name, bureau_score,date_format(bureauscore_date,'%d-%m-%Y') as bureauscore_date, observations, bureau_response " +
                        "from ocs_trn_tcadinstitution where institution_gid='" + institution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.bureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.observations = objODBCDatareader["observations"].ToString();
                    values.bureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.bureauscore_date = objODBCDatareader["bureauscore_date"].ToString();

                }
                objODBCDatareader.Close();
                msSQL = "select cicdocument_name,cicdocument_path from ocs_trn_tcadinstitution2cicdocumentupload" +
                        " where institution_gid='" + values.institution_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.cicdocument_name = objODBCDatareader["cicdocument_name"].ToString();
                    values.cicdocument_path = objcmnstorage.EncryptData((objODBCDatareader["cicdocument_path"].ToString()));
                }

                objODBCDatareader.Close();
                values.status = true;
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadInstitutionBureauList(string institution_gid, MdlInstitutionBureau values)
        {
            msSQL = "select institution2bureau_gid,bureauname_name,bureau_score,date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_trn_tcadinstitution2bureau where " +
              " institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinstitutionbureau_list = new List<institutionbureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getinstitutionbureau_list.Add(new institutionbureau_list
                    {
                        institution2bureau_gid = (dr_datarow["institution2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.institutionbureau_list = getinstitutionbureau_list;
            dt_datatable.Dispose();
        }

        public void DaGetCadCreditOperationsView(string credit_gid, string applicant_type, MdlMstAppCreditUnderWriting values)
        {
            if (applicant_type == "Institution")
            {
                msSQL = " select company_name,stakeholder_type,urn_status, urn from ocs_trn_tcadinstitution where institution_gid='" + credit_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.company_name = objODBCDatareader["company_name"].ToString();
                    values.stakeholder_type = objODBCDatareader["stakeholder_type"].ToString();
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                }
                objODBCDatareader.Close();
            }
            else if (applicant_type == "Individual")
            {
                msSQL = " select first_name,stakeholder_type,urn_status, urn from ocs_trn_tcadcontact where contact_gid='" + credit_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.individual_name = objODBCDatareader["first_name"].ToString();
                    values.stakeholder_type = objODBCDatareader["stakeholder_type"].ToString();
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                }
                objODBCDatareader.Close();
            }
            else if (applicant_type == "Group")
            {
                msSQL = " select group_name,group_type,groupurn_status, group_urn from ocs_trn_tcadgroup where group_gid='" + credit_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.group_name = objODBCDatareader["group_name"].ToString();
                    values.group_type = objODBCDatareader["group_type"].ToString();
                    values.urn_status = objODBCDatareader["groupurn_status"].ToString();
                    values.urn = objODBCDatareader["group_urn"].ToString();
                }
                objODBCDatareader.Close();
                values.status = true;
            }
            values.message = "success";
        }

        public void DaGetCadGeneticCodeList(string credit_gid, string employee_gid, MdlMstCUWGeneticCode values)
        {
            msSQL = " select creditgeneticcode_gid,geneticcode_gid,geneticcode_name,geneticcode_status,geneticcode_remarks,application_gid, credit_gid, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                    " from ocs_trn_tcadcreditgeneticcode a " +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                    " where credit_gid = '" + credit_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getgeneticcode_list = new List<mstcuwgeneticcode_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getgeneticcode_list.Add(new mstcuwgeneticcode_list
                    {
                        creditgeneticcode_gid = (dr_datarow["creditgeneticcode_gid"].ToString()),
                        geneticcode_gid = (dr_datarow["geneticcode_gid"].ToString()),
                        geneticcode_name = (dr_datarow["geneticcode_name"].ToString()),
                        geneticcode_status = (dr_datarow["geneticcode_status"].ToString()),
                        geneticcode_remarks = (dr_datarow["geneticcode_remarks"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        credit_gid = (dr_datarow["credit_gid"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                    });
                }
                values.mstcuwgeneticcode_list = getgeneticcode_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadSocialAndTradeCapital(string credit_gid, string applicant_type, MdlMstAppCreditUnderWriting values)
        {
            try
            {
                if (applicant_type == "Institution")
                {
                    msSQL = " select social_capital, trade_capital, economical_flag from ocs_trn_tcadinstitution where institution_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.social_capital = objODBCDatareader["social_capital"].ToString();
                        values.trade_capital = objODBCDatareader["trade_capital"].ToString();
                        values.economical_flag = objODBCDatareader["economical_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                else if (applicant_type == "Individual")
                {
                    msSQL = " select social_capital, trade_capital,economical_flag from ocs_trn_tcadcontact where contact_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.social_capital = objODBCDatareader["social_capital"].ToString();
                        values.trade_capital = objODBCDatareader["trade_capital"].ToString();
                        values.economical_flag = objODBCDatareader["economical_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                else if (applicant_type == "Group")
                {
                    msSQL = " select social_capital, trade_capital, economical_flag from ocs_trn_tcadgroup where group_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.social_capital = objODBCDatareader["social_capital"].ToString();
                        values.trade_capital = objODBCDatareader["trade_capital"].ToString();
                        values.economical_flag = objODBCDatareader["economical_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadPSLDataFlagging(string credit_gid, string applicant_type, MdlMstAppCreditUnderWriting values)
        {
            try
            {
                if (applicant_type == "Institution")
                {
                    msSQL = " select startupasofloansanction_date, occupation_gid, occupation, lineofactivity_gid, lineofactivity, bsrcode_gid, clientdtl_gid, client_dtl, " +
                        " bsrcode, pslcategory_gid, pslcategory, weakersection_gid, weakersection, pslpurpose_gid, pslpurpose, totalsanction_financialinstitution, " +
                        " pslsanction_limit, natureofentity_gid, natureofentity, indulgeinmarketing_activity, plantandmachineryinvestment_gid, hq_metropolitancity," +
                        " plantandmachineryinvestment, turnover_gid, turnover, msmeclassification_gid, msmeclassification, psltagging_flag," +
                        " date_format(loansanction_date, '%d-%m-%Y') loansanction_date, date_format(entityincorporation_date, '%d-%m-%Y') entityincorporation_date " +
                        " from ocs_trn_tcadinstitution where institution_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.startupasofloansanction_date = objODBCDatareader["startupasofloansanction_date"].ToString();
                        values.occupation_gid = objODBCDatareader["occupation_gid"].ToString();
                        values.occupation = objODBCDatareader["occupation"].ToString();
                        values.lineofactivity_gid = objODBCDatareader["lineofactivity_gid"].ToString();
                        values.lineofactivity = objODBCDatareader["lineofactivity"].ToString();
                        values.bsrcode_gid = objODBCDatareader["bsrcode_gid"].ToString();
                        values.clientdtl_gid = objODBCDatareader["clientdtl_gid"].ToString();
                        values.clientdtl_name = objODBCDatareader["client_dtl"].ToString();
                        values.bsrcode = objODBCDatareader["bsrcode"].ToString();
                        values.pslcategory_gid = objODBCDatareader["pslcategory_gid"].ToString();
                        values.pslcategory = objODBCDatareader["pslcategory"].ToString();
                        values.weakersection_gid = objODBCDatareader["weakersection_gid"].ToString();
                        values.weakersection = objODBCDatareader["weakersection"].ToString();
                        values.pslpurpose_gid = objODBCDatareader["pslpurpose_gid"].ToString();
                        values.pslpurpose = objODBCDatareader["pslpurpose"].ToString();
                        values.totalsanction_financialinstitution = objODBCDatareader["totalsanction_financialinstitution"].ToString();
                        values.pslsanction_limit = objODBCDatareader["pslsanction_limit"].ToString();
                        values.natureofentity_gid = objODBCDatareader["natureofentity_gid"].ToString();
                        values.natureofentity = objODBCDatareader["natureofentity"].ToString();
                        values.indulgeinmarketing_activity = objODBCDatareader["indulgeinmarketing_activity"].ToString();
                        values.plantandmachineryinvestment_gid = objODBCDatareader["plantandmachineryinvestment_gid"].ToString();
                        values.hq_metropolitancity = objODBCDatareader["hq_metropolitancity"].ToString();
                        values.plantandmachineryinvestment = objODBCDatareader["plantandmachineryinvestment"].ToString();
                        values.turnover_gid = objODBCDatareader["turnover_gid"].ToString();
                        values.turnover = objODBCDatareader["turnover"].ToString();
                        values.msmeclassification_gid = objODBCDatareader["msmeclassification_gid"].ToString();
                        values.msmeclassification = objODBCDatareader["msmeclassification"].ToString();
                        values.loansanction_date = objODBCDatareader["loansanction_date"].ToString();
                        values.entityincorporation_date = objODBCDatareader["entityincorporation_date"].ToString();
                        values.psltagging_flag = objODBCDatareader["psltagging_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                else if (applicant_type == "Individual")
                {
                    msSQL = " select startupasofloansanction_date, occupation_gid, occupation, lineofactivity_gid, lineofactivity, bsrcode_gid, clientdtl_gid, client_dtl, " +
                       " bsrcode, pslcategory_gid, pslcategory, weakersection_gid, weakersection, pslpurpose_gid, pslpurpose, totalsanction_financialinstitution, " +
                       " pslsanction_limit, natureofentity_gid, natureofentity, indulgeinmarketing_activity, plantandmachineryinvestment_gid, hq_metropolitancity," +
                       " plantandmachineryinvestment, turnover_gid, turnover, msmeclassification_gid, msmeclassification, psltagging_flag," +
                       " date_format(loansanction_date, '%d-%m-%Y') loansanction_date, date_format(entityincorporation_date, '%d-%m-%Y') entityincorporation_date " +
                       " from ocs_trn_tcadcontact where contact_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.startupasofloansanction_date = objODBCDatareader["startupasofloansanction_date"].ToString();
                        values.occupation_gid = objODBCDatareader["occupation_gid"].ToString();
                        values.occupation = objODBCDatareader["occupation"].ToString();
                        values.lineofactivity_gid = objODBCDatareader["lineofactivity_gid"].ToString();
                        values.lineofactivity = objODBCDatareader["lineofactivity"].ToString();
                        values.bsrcode_gid = objODBCDatareader["bsrcode_gid"].ToString();
                        values.clientdtl_gid = objODBCDatareader["clientdtl_gid"].ToString();
                        values.clientdtl_name = objODBCDatareader["client_dtl"].ToString();
                        values.bsrcode = objODBCDatareader["bsrcode"].ToString();
                        values.pslcategory_gid = objODBCDatareader["pslcategory_gid"].ToString();
                        values.pslcategory = objODBCDatareader["pslcategory"].ToString();
                        values.weakersection_gid = objODBCDatareader["weakersection_gid"].ToString();
                        values.weakersection = objODBCDatareader["weakersection"].ToString();
                        values.pslpurpose_gid = objODBCDatareader["pslpurpose_gid"].ToString();
                        values.pslpurpose = objODBCDatareader["pslpurpose"].ToString();
                        values.totalsanction_financialinstitution = objODBCDatareader["totalsanction_financialinstitution"].ToString();
                        values.pslsanction_limit = objODBCDatareader["pslsanction_limit"].ToString();
                        values.natureofentity_gid = objODBCDatareader["natureofentity_gid"].ToString();
                        values.natureofentity = objODBCDatareader["natureofentity"].ToString();
                        values.indulgeinmarketing_activity = objODBCDatareader["indulgeinmarketing_activity"].ToString();
                        values.plantandmachineryinvestment_gid = objODBCDatareader["plantandmachineryinvestment_gid"].ToString();
                        values.hq_metropolitancity = objODBCDatareader["hq_metropolitancity"].ToString();
                        values.plantandmachineryinvestment = objODBCDatareader["plantandmachineryinvestment"].ToString();
                        values.turnover_gid = objODBCDatareader["turnover_gid"].ToString();
                        values.turnover = objODBCDatareader["turnover"].ToString();
                        values.msmeclassification_gid = objODBCDatareader["msmeclassification_gid"].ToString();
                        values.msmeclassification = objODBCDatareader["msmeclassification"].ToString();
                        values.loansanction_date = objODBCDatareader["loansanction_date"].ToString();
                        values.entityincorporation_date = objODBCDatareader["entityincorporation_date"].ToString();
                        values.psltagging_flag = objODBCDatareader["psltagging_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                else if (applicant_type == "Group")
                {
                    msSQL = " select startupasofloansanction_date, occupation_gid, occupation, lineofactivity_gid, lineofactivity, bsrcode_gid, clientdtl_gid, client_dtl, " +
                    " bsrcode, pslcategory_gid, pslcategory, weakersection_gid, weakersection, pslpurpose_gid, pslpurpose, totalsanction_financialinstitution, " +
                    " pslsanction_limit, natureofentity_gid, natureofentity, indulgeinmarketing_activity, plantandmachineryinvestment_gid, hq_metropolitancity," +
                    " plantandmachineryinvestment, turnover_gid, turnover, msmeclassification_gid, msmeclassification, psltagging_flag," +
                    " date_format(loansanction_date, '%d-%m-%Y') loansanction_date, date_format(entityincorporation_date, '%d-%m-%Y') entityincorporation_date " +
                    " from ocs_trn_tcadgroup where group_gid='" + credit_gid + "'";
                    objODBCDatareader = objdbconn.GetDataReader(msSQL);
                    if (objODBCDatareader.HasRows == true)
                    {
                        values.startupasofloansanction_date = objODBCDatareader["startupasofloansanction_date"].ToString();
                        values.occupation_gid = objODBCDatareader["occupation_gid"].ToString();
                        values.occupation = objODBCDatareader["occupation"].ToString();
                        values.lineofactivity_gid = objODBCDatareader["lineofactivity_gid"].ToString();
                        values.lineofactivity = objODBCDatareader["lineofactivity"].ToString();
                        values.bsrcode_gid = objODBCDatareader["bsrcode_gid"].ToString();
                        values.clientdtl_gid = objODBCDatareader["clientdtl_gid"].ToString();
                        values.clientdtl_name = objODBCDatareader["client_dtl"].ToString();
                        values.bsrcode = objODBCDatareader["bsrcode"].ToString();
                        values.pslcategory_gid = objODBCDatareader["pslcategory_gid"].ToString();
                        values.pslcategory = objODBCDatareader["pslcategory"].ToString();
                        values.weakersection_gid = objODBCDatareader["weakersection_gid"].ToString();
                        values.weakersection = objODBCDatareader["weakersection"].ToString();
                        values.pslpurpose_gid = objODBCDatareader["pslpurpose_gid"].ToString();
                        values.pslpurpose = objODBCDatareader["pslpurpose"].ToString();
                        values.totalsanction_financialinstitution = objODBCDatareader["totalsanction_financialinstitution"].ToString();
                        values.pslsanction_limit = objODBCDatareader["pslsanction_limit"].ToString();
                        values.natureofentity_gid = objODBCDatareader["natureofentity_gid"].ToString();
                        values.natureofentity = objODBCDatareader["natureofentity"].ToString();
                        values.indulgeinmarketing_activity = objODBCDatareader["indulgeinmarketing_activity"].ToString();
                        values.plantandmachineryinvestment_gid = objODBCDatareader["plantandmachineryinvestment_gid"].ToString();
                        values.hq_metropolitancity = objODBCDatareader["hq_metropolitancity"].ToString();
                        values.plantandmachineryinvestment = objODBCDatareader["plantandmachineryinvestment"].ToString();
                        values.turnover_gid = objODBCDatareader["turnover_gid"].ToString();
                        values.turnover = objODBCDatareader["turnover"].ToString();
                        values.msmeclassification_gid = objODBCDatareader["msmeclassification_gid"].ToString();
                        values.msmeclassification = objODBCDatareader["msmeclassification"].ToString();
                        values.loansanction_date = objODBCDatareader["loansanction_date"].ToString();
                        values.entityincorporation_date = objODBCDatareader["entityincorporation_date"].ToString();
                        values.psltagging_flag = objODBCDatareader["psltagging_flag"].ToString();
                    }
                    objODBCDatareader.Close();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadCreditSupplierList(string credit_gid, string employee_gid, MdlMstSupplier values)
        {
            msSQL = " select creditsupplier_gid,credit_gid,application_gid,supplier_gid,supplier_name,relationship_vintage_year,relationship_vintage_month," +
                     " format(purchase_amount,'en-IN') as purchase_amount,format(bankdebit_amount,'en-IN')as bankdebit_amount,relationship_supplier," +
                     " date_format(start_date,'%d-%m-%Y') as start_date,date_format(end_date,'%d-%m-%Y') as end_date, " +
                     " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                     " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                     " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                     " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                     " from ocs_trn_tcadcreditsupplier a " +
                     " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                     " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                     " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                     " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                     " where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getsupplier_list = new List<supplier_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getsupplier_list.Add(new supplier_list
                    {
                        creditsupplier_gid = (dr_datarow["creditsupplier_gid"].ToString()),
                        credit_gid = (dr_datarow["credit_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        supplier_gid = (dr_datarow["supplier_gid"].ToString()),
                        supplier_name = (dr_datarow["supplier_name"].ToString()),
                        relationship_vintage_year = (dr_datarow["relationship_vintage_year"].ToString()),
                        relationship_vintage_month = (dr_datarow["relationship_vintage_month"].ToString()),
                        purchase_amount = (dr_datarow["purchase_amount"].ToString()),
                        bankdebit_amount = (dr_datarow["bankdebit_amount"].ToString()),
                        relationship_supplier = (dr_datarow["relationship_supplier"].ToString()),
                        start_date = (dr_datarow["start_date"].ToString()),
                        end_date = (dr_datarow["end_date"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                    });
                }
                values.supplier_list = getsupplier_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadCreditBuyerList(string credit_gid, string employee_gid, MdlMstCreditBuyer values)
        {
            msSQL = " select creditbuyer_gid,credit_gid,application_gid,buyer_gid,buyer_name,relationship_vintage_year,relationship_vintage_month," +
                    " format(purchase_amount,'en-IN') as purchase_amount,format(buyer_limit,'en-IN')as buyer_limit,format(availed_limit,'en-IN')as availed_limit," +
                    " format(balance_limit,'en-IN')as balance_limit,top_buyer,bill_tenuredays,margin,bankcredit_value,source_deduction,relationship_borrower," +
                    " enduse_monitoring, date_format(start_date,'%d-%m-%Y') as start_date,date_format(end_date,'%d-%m-%Y') as end_date," +
                    " date_format(bankcredit_date,'%d-%m-%Y') as bankcredit_date, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                    " from ocs_trn_tcadcreditbuyer a " +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                    " where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditbuyer_list = new List<creditbuyer_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcreditbuyer_list.Add(new creditbuyer_list
                    {
                        creditbuyer_gid = (dr_datarow["creditbuyer_gid"].ToString()),
                        credit_gid = (dr_datarow["credit_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        buyer_gid = (dr_datarow["buyer_gid"].ToString()),
                        buyer_name = (dr_datarow["buyer_name"].ToString()),
                        relationship_vintage_year = (dr_datarow["relationship_vintage_year"].ToString()),
                        relationship_vintage_month = (dr_datarow["relationship_vintage_month"].ToString()),
                        purchase_amount = (dr_datarow["purchase_amount"].ToString()),
                        buyer_limit = (dr_datarow["buyer_limit"].ToString()),
                        availed_limit = (dr_datarow["availed_limit"].ToString()),
                        balance_limit = (dr_datarow["balance_limit"].ToString()),
                        top_buyer = (dr_datarow["top_buyer"].ToString()),
                        bill_tenuredays = (dr_datarow["bill_tenuredays"].ToString()),
                        margin = (dr_datarow["margin"].ToString()),
                        bankcredit_value = (dr_datarow["bankcredit_value"].ToString()),
                        source_deduction = (dr_datarow["source_deduction"].ToString()),
                        relationship_borrower = (dr_datarow["relationship_borrower"].ToString()),
                        enduse_monitoring = (dr_datarow["enduse_monitoring"].ToString()),
                        start_date = (dr_datarow["start_date"].ToString()),
                        end_date = (dr_datarow["end_date"].ToString()),
                        bankcredit_date = (dr_datarow["bankcredit_date"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                    });
                }
                values.creditbuyer_list = getcreditbuyer_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadCrediBankAcctList(string credit_gid, string employee_gid, MdlCreditBankAcc values)
        {
            msSQL = "select creditbankdtl_gid,credit_gid,application_gid,bank_name,branch_name,bank_address,micr_code,ifsc_code,bankaccount_name," +
                 " bankaccounttype_gid,bankaccounttype_name,bankaccount_number,confirmbankaccountnumber,joinaccount_status,joinaccount_name," +
                 " chequebook_status,DATE_FORMAT(accountopen_date,'%d-%m-%Y') as accountopen_date, bankaccount_name as accountholder_name, " +
                 " joinaccount_name as jointaccountholder_name" +
                 " from ocs_trn_tcadcreditbankdtl where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditbankacc_list = new List<creditbankacc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getcreditbankacc_list.Add(new creditbankacc_list
                    {
                        creditbankdtl_gid = dt["creditbankdtl_gid"].ToString(),
                        bank_name = dt["bank_name"].ToString(),
                        branch_name = dt["branch_name"].ToString(),
                        bank_address = dt["bank_address"].ToString(),
                        micr_code = dt["micr_code"].ToString(),
                        ifsc_code = dt["ifsc_code"].ToString(),
                        bankaccount_name = dt["bankaccount_name"].ToString(),
                        bankaccounttype_name = dt["bankaccounttype_name"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        confirmbankaccountnumber = dt["confirmbankaccountnumber"].ToString(),
                        joinaccount_status = dt["joinaccount_status"].ToString(),
                        joinaccount_name = dt["joinaccount_name"].ToString(),
                        chequebook_status = dt["chequebook_status"].ToString(),
                        accountopen_date = dt["accountopen_date"].ToString(),
                        accountholder_name = dt["accountholder_name"].ToString(),
                        jointaccountholder_name = dt["jointaccountholder_name"].ToString(),
                    });
                    values.creditbankacc_list = getcreditbankacc_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadExistingBankFacility(string credit_gid, string employee_gid, MdlMstCUWExistingBankFacility values)
        {
            msSQL = " select existingbankfacility_gid,credit_gid,application_gid,a.bank_gid,bank_name,date_format(facilitysanctioned_on, '%d-%m-%Y') as facilitysanctioned_on, " +
                    " sanctioned_limit, instalmentfrequency_gid, instalmentfrequency_name, instalment_amount, outstanding_amount, " +
                    " date_format(record_date, '%d-%m-%Y') as record_date, overdue_amount, fundedtypeindicator_gid,fundedtypeindicator_name," +
                    " overdue_dpd, accountclassification_gid, account_classification, a.remarks, facilitytype_gid, facility_type, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                    " from ocs_trn_tcadcreditbankfacilitydtl a " +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                    " where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcuwexistingbankfacility_list = new List<cuwexistingbankfacility_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcuwexistingbankfacility_list.Add(new cuwexistingbankfacility_list
                    {
                        existingbankfacility_gid = (dr_datarow["existingbankfacility_gid"].ToString()),
                        credit_gid = (dr_datarow["credit_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        bank_gid = (dr_datarow["bank_gid"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        facilitysanctioned_on = (dr_datarow["facilitysanctioned_on"].ToString()),
                        fundedtypeindicator_gid = (dr_datarow["fundedtypeindicator_gid"].ToString()),
                        fundedtypeindicator_name = (dr_datarow["fundedtypeindicator_name"].ToString()),
                        sanctioned_limit = (dr_datarow["sanctioned_limit"].ToString()),
                        instalmentfrequency_gid = (dr_datarow["instalmentfrequency_gid"].ToString()),
                        instalmentfrequency_name = (dr_datarow["instalmentfrequency_name"].ToString()),
                        instalment_amount = (dr_datarow["instalment_amount"].ToString()),
                        outstanding_amount = (dr_datarow["outstanding_amount"].ToString()),
                        record_date = (dr_datarow["record_date"].ToString()),
                        overdue_amount = (dr_datarow["overdue_amount"].ToString()),
                        overdue_dpd = (dr_datarow["overdue_dpd"].ToString()),
                        accountclassification_gid = (dr_datarow["accountclassification_gid"].ToString()),
                        account_classification = (dr_datarow["account_classification"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                        facilitytype_gid = (dr_datarow["facilitytype_gid"].ToString()),
                        facility_type = (dr_datarow["facility_type"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                    });
                }
                values.cuwexistingbankfacility_list = getcuwexistingbankfacility_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadRepaymentTrack(string credit_gid, string employee_gid, MdlMstCUWRepaymentTrack values)
        {
            msSQL = " select creditrepaymentdtl_gid,lendertype_gid,lender_type,ifsc_code,bank_name,nbfc_name, branch_name,facility_type, sanctionreference_id," +
                    " date_format(sanctioned_on, '%d-%m-%Y') as sanctioned_on, sanction_amount, date_format(accountstatus_on, '%d-%m-%Y') as accountstatus_on, " +
                    " currentoutsatnding_amount, instalment_frequency, instalment_amount, date_format(demanddue_date, '%d-%m-%Y') as demanddue_date," +
                    " oringinaltenure_year, oringinaltenure_month, oringinaltenure_days, balancetenure_year, balancetenure_month, balancetenure_days, " +
                    " accountclassification_gid, account_classification, overdue_amount, numberofdays_overdue, a.remarks, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                    " from ocs_trn_tcadcreditrepaymentdtl a " +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                    " where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcuwrepaymenttrack_list = new List<cuwrepaymenttrack_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcuwrepaymenttrack_list.Add(new cuwrepaymenttrack_list
                    {
                        creditrepaymentdtl_gid = (dr_datarow["creditrepaymentdtl_gid"].ToString()),
                        lendertype_gid = (dr_datarow["lendertype_gid"].ToString()),
                        lender_type = (dr_datarow["lender_type"].ToString()),
                        ifsc_code = (dr_datarow["ifsc_code"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        nbfc_name = (dr_datarow["nbfc_name"].ToString()),
                        branch_name = (dr_datarow["branch_name"].ToString()),
                        facility_type = (dr_datarow["facility_type"].ToString()),
                        sanctionreference_id = (dr_datarow["sanctionreference_id"].ToString()),
                        sanctioned_on = (dr_datarow["sanctioned_on"].ToString()),
                        sanction_amount = (dr_datarow["sanction_amount"].ToString()),
                        accountstatus_on = (dr_datarow["accountstatus_on"].ToString()),
                        currentoutsatnding_amount = (dr_datarow["currentoutsatnding_amount"].ToString()),
                        instalment_frequency = (dr_datarow["instalment_frequency"].ToString()),
                        instalment_amount = (dr_datarow["instalment_amount"].ToString()),
                        demanddue_date = (dr_datarow["demanddue_date"].ToString()),
                        oringinaltenure_year = (dr_datarow["oringinaltenure_year"].ToString()),
                        oringinaltenure_month = (dr_datarow["oringinaltenure_month"].ToString()),
                        oringinaltenure_days = (dr_datarow["oringinaltenure_days"].ToString()),
                        balancetenure_year = (dr_datarow["balancetenure_year"].ToString()),
                        balancetenure_month = (dr_datarow["balancetenure_month"].ToString()),
                        balancetenure_days = (dr_datarow["balancetenure_days"].ToString()),
                        accountclassification_gid = (dr_datarow["accountclassification_gid"].ToString()),
                        account_classification = (dr_datarow["account_classification"].ToString()),
                        overdue_amount = (dr_datarow["overdue_amount"].ToString()),
                        numberofdays_overdue = (dr_datarow["numberofdays_overdue"].ToString()),
                        remarks = (dr_datarow["remarks"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                    });
                }
                values.cuwrepaymenttrack_list = getcuwrepaymenttrack_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadCreditObservationList(string credit_gid, string employee_gid, MdlMstCreditObservation values)
        {
            msSQL = " select creditobservation_gid,credit_gid,application_gid,creditpolicy_gid,credit_policy,complied_status,observation, " +
                    " date_format(a.created_date,'%d-%m-%Y %h:%i %p') as created_date, " +
                    " date_format(a.updated_date, '%d-%m-%Y %h:%i %p') as updated_date, " +
                    " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as created_by, " +
                    " concat(e.user_firstname, ' ', e.user_lastname, ' / ', e.user_code) as updated_by " +
                    " from ocs_trn_tcadcreditobservation a" +
                    " left join hrm_mst_temployee b on a.created_by = b.employee_gid " +
                    " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                    " left join hrm_mst_temployee d on a.updated_by = d.employee_gid " +
                    " left join adm_mst_tuser e on e.user_gid = d.user_gid " +
                    "  where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getCreditObservation_list = new List<CreditObservation_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getCreditObservation_list.Add(new CreditObservation_list
                    {
                        creditobservation_gid = (dr_datarow["creditobservation_gid"].ToString()),
                        credit_gid = (dr_datarow["credit_gid"].ToString()),
                        application_gid = (dr_datarow["application_gid"].ToString()),
                        creditpolicy_gid = (dr_datarow["creditpolicy_gid"].ToString()),
                        credit_policy = (dr_datarow["credit_policy"].ToString()),
                        complied_status = (dr_datarow["complied_status"].ToString()),
                        observation = (dr_datarow["observation"].ToString()),
                        created_date = (dr_datarow["created_date"].ToString()),
                        created_by = (dr_datarow["created_by"].ToString()),
                        updated_date = (dr_datarow["updated_date"].ToString()),
                        updated_by = (dr_datarow["updated_by"].ToString()),
                    });
                }
                values.CreditObservation_list = getCreditObservation_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadCreditRepaymentDtlRemarks(string creditrepaymentdtl_gid, MdlMstRepaymentRemarks values)
        {
            msSQL = " select credit_gid, application_gid, creditrepaymentdtl_gid, remarks " +
                     " from ocs_trn_tcadcreditrepaymentdtl where creditrepaymentdtl_gid='" + creditrepaymentdtl_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.credit_gid = objODBCDatareader["credit_gid"].ToString();
                values.application_gid = objODBCDatareader["application_gid"].ToString();
                values.creditrepaymentdtl_gid = objODBCDatareader["creditrepaymentdtl_gid"].ToString();
                values.Repayment_remarks = objODBCDatareader["remarks"].ToString();
            }
            values.status = true;
            values.message = "success";
            objODBCDatareader.Close();
        }

        public void DaGetCadCreditExistingBankDtlRemarks(string existingbankfacility_gid, MdlMstExistingRemarks values)
        {
            msSQL = " select credit_gid, application_gid, existingbankfacility_gid, remarks " +
                     " from ocs_trn_tcadcreditbankfacilitydtl where existingbankfacility_gid='" + existingbankfacility_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.credit_gid = objODBCDatareader["credit_gid"].ToString();
                values.application_gid = objODBCDatareader["application_gid"].ToString();
                values.existingbankfacility_gid = objODBCDatareader["existingbankfacility_gid"].ToString();
                values.Existingbank_remarks = objODBCDatareader["remarks"].ToString();
            }
            values.status = true;
            values.message = "success";
            objODBCDatareader.Close();
        }

        public void DaGetCadCreditSupplierTextData(string creditsupplier_gid, MdlMstSupplier values)
        {
            msSQL = " select creditsupplier_gid,credit_gid,application_gid, relationship_supplier" +
                     " from ocs_trn_tcadcreditsupplier where creditsupplier_gid='" + creditsupplier_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.creditsupplier_gid = objODBCDatareader["creditsupplier_gid"].ToString();
                values.credit_gid = objODBCDatareader["credit_gid"].ToString();
                values.application_gid = objODBCDatareader["application_gid"].ToString();
                values.relationship_supplier = objODBCDatareader["relationship_supplier"].ToString();
            }
            values.status = true;
            values.message = "success";
            objODBCDatareader.Close();
        }

        public void DaGetCadCreditBuyerTextData(string creditbuyer_gid, MdlMstCreditBuyer values)
        {
            msSQL = " select creditbuyer_gid,credit_gid,application_gid,relationship_borrower, enduse_monitoring " +
                    " from ocs_trn_tcadcreditbuyer where creditbuyer_gid='" + creditbuyer_gid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                values.creditbuyer_gid = objODBCDatareader["creditbuyer_gid"].ToString();
                values.credit_gid = objODBCDatareader["credit_gid"].ToString();
                values.application_gid = objODBCDatareader["application_gid"].ToString();
                values.relationship_borrower = objODBCDatareader["relationship_borrower"].ToString();
                values.enduse_monitoring = objODBCDatareader["enduse_monitoring"].ToString();
            }
            values.status = true;
            values.message = "success";
            objODBCDatareader.Close();
        }

        public void DaGetCadCreditBankDocumentUpload(string creditbankdtl_gid, credituploaddocument values)
        {
            msSQL = " select creditbankdtl2cheque_gid,creditbankdtl_gid,chequeleaf_name,chequeleaf_path,document_title, " +
                " CONCAT(c.user_firstname, ' / ', c.user_code) as uploaded_by, DATE_FORMAT(a.created_date,'%d-%m-%Y') as updated_date " +
                " from ocs_trn_tcadcreditbankdtl2cheque a left join hrm_mst_temployee b on a.created_by=b.employee_gid" +
                " left join adm_mst_tuser c on b.user_gid=c.user_gid where creditbankdtl_gid='" + creditbankdtl_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<credituploaddocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new credituploaddocument_list
                    {
                        chequeleaf_name = dt["chequeleaf_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        chequeleaf_path = objcmnstorage.EncryptData((dt["chequeleaf_path"].ToString())),
                        creditbankdtl_gid = dt["creditbankdtl_gid"].ToString(),
                        creditbankdtl2cheque_gid = dt["creditbankdtl2cheque_gid"].ToString(),
                        uploaded_by = dt["uploaded_by"].ToString(),
                        updated_date = dt["updated_date"].ToString(),
                    });
                    values.credituploaddocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadCICInstitutionDtl(string institution2bureau_gid, MdlCICInstitution values)
        {
            try
            {
                msSQL = " select institution2bureau_gid, bureauname_gid,bureauname_name, bureau_score,date_format(bureauscore_date,'%d-%m-%Y') as bureauscore_date, " +
                    " observations, bureau_response" +
                        " from ocs_trn_tcadinstitution2bureau where institution2bureau_gid='" + institution2bureau_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.institution2bureau_gid = objODBCDatareader["institution2bureau_gid"].ToString();
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.bureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.observations = objODBCDatareader["observations"].ToString();
                    values.bureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.bureauscore_date = objODBCDatareader["bureauscore_date"].ToString();
                    if (objODBCDatareader["bureauscore_date"].ToString() != "")
                    {
                        values.bureauscoredate_edit = Convert.ToDateTime(objODBCDatareader["bureauscore_date"].ToString());
                    }
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaCadCICUploadInstitutionDocList(string institution2bureau_gid, string employee_gid, MdlCICInstitution values)
        {
            msSQL = " select institution2cicdocumentupload_gid, institution2bureau_gid,cicdocument_name,cicdocument_path,document_content,migration_flag from ocs_trn_tcadinstitution2cicdocumentupload " +
                                 " where institution2bureau_gid='" + institution2bureau_gid + "' or institution2bureau_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<cicuploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new cicuploaddoc_list
                    {
                        document_name = dt["cicdocument_name"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["cicdocument_path"].ToString())),
                        institution2bureau_gid = dt["institution2bureau_gid"].ToString(),
                        tmpcicdocument_gid = dt["institution2cicdocumentupload_gid"].ToString(),
                        document_content = dt["document_content"].ToString(),
                        migration_flag = dt["migration_flag"].ToString(),
                    });
                    values.cicuploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadGurantorIndividualView(string contact_gid, MdlMstIndividualDtlView values)
        {
            try
            {
                msSQL = " select contact_gid, application_gid, concat_ws(' ', first_name, last_name, middle_name) as individual_name, " +
                        " pan_no, aadhar_no, individual_dob," +
                        " age, gender_name, designation_name, main_occupation, pep_status, date_format(pepverified_date, '%d-%m-%Y') as pepverified_date, " +
                        " maritalstatus_name, concat_ws(' ', father_firstname, father_middlename, father_lastname) as father_name, " +
                        " father_dob, father_age, " +
                        " concat_ws(' ', mother_firstname, mother_middlename, mother_lastname) as mother_name, " +
                        " mother_dob, mother_age, " +
                        " concat_ws(' ', spouse_firstname, spouse_middlename, spouse_lastname) as spouse_name, " +
                        " spouse_dob, spouse_age, educationalqualification_name, " +
                        " annual_income, monthly_income, user_type, ownershiptype_name, propertyholder_name, residencetype_name, " +
                        " currentresidence_years, branch_distance, bureauname_name, bureau_score, observations, " +
                        " date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date, bureau_response,pan_status, " +
                        " group_name, profile, urn_status, urn, fathernominee_status, mothernominee_status, spousenominee_status, othernominee_status,institution_name," +
                        " relationshiptype, nomineefirst_name, nominee_middlename, nominee_lastname, nominee_dob, nominee_age, totallandinacres, cultivatedland, previouscrop, prposedcrop, " +
                        " nearsamunnatiabranch_gid,nearsamunnatiabranch_name,physicalstatus_gid,physicalstatus_name,internalrating_gid,internalrating_name,incometype_name " +
                        " from ocs_trn_tcadcontact " +
                        " where contact_gid = '" + contact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.contact_gid = objODBCDatareader["contact_gid"].ToString();
                    values.individual_name = objODBCDatareader["individual_name"].ToString();
                    values.pan_no = objODBCDatareader["pan_no"].ToString();
                    values.aadhar_no = objODBCDatareader["aadhar_no"].ToString();
                    values.individual_dob = objODBCDatareader["individual_dob"].ToString();
                    values.age = objODBCDatareader["age"].ToString();
                    values.gender_name = objODBCDatareader["gender_name"].ToString();
                    values.designation_name = objODBCDatareader["designation_name"].ToString();
                    values.main_occupation = objODBCDatareader["main_occupation"].ToString();
                    values.pep_status = objODBCDatareader["pep_status"].ToString();
                    values.pepverified_date = objODBCDatareader["pepverified_date"].ToString();
                    values.maritalstatus_name = objODBCDatareader["maritalstatus_name"].ToString();
                    values.father_name = objODBCDatareader["father_name"].ToString();
                    values.father_dob = objODBCDatareader["father_dob"].ToString();
                    values.father_age = objODBCDatareader["father_age"].ToString();
                    values.mother_name = objODBCDatareader["mother_name"].ToString();
                    values.mother_dob = objODBCDatareader["mother_dob"].ToString();
                    values.mother_age = objODBCDatareader["mother_age"].ToString();
                    values.spouse_name = objODBCDatareader["spouse_name"].ToString();
                    values.spouse_dob = objODBCDatareader["spouse_dob"].ToString();
                    values.spouse_age = objODBCDatareader["spouse_age"].ToString();
                    values.educationalqualification_name = objODBCDatareader["educationalqualification_name"].ToString();
                    values.annual_income = objODBCDatareader["annual_income"].ToString();
                    values.monthly_income = objODBCDatareader["monthly_income"].ToString();
                    values.user_type = objODBCDatareader["user_type"].ToString();
                    values.ownershiptype_name = objODBCDatareader["ownershiptype_name"].ToString();
                    values.propertyholder_name = objODBCDatareader["propertyholder_name"].ToString();
                    values.residencetype_name = objODBCDatareader["residencetype_name"].ToString();
                    values.currentresidence_years = objODBCDatareader["currentresidence_years"].ToString();
                    values.branch_distance = objODBCDatareader["branch_distance"].ToString();
                    values.indbureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.indbureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.indobservations = objODBCDatareader["observations"].ToString();
                    values.indbureauscore_date = objODBCDatareader["bureauscore_date"].ToString();
                    values.indbureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.borrower_type = "Individual";

                    values.group_name = objODBCDatareader["group_name"].ToString();
                    values.profile = objODBCDatareader["profile"].ToString();
                    values.urn_status = objODBCDatareader["urn_status"].ToString();
                    values.urn = objODBCDatareader["urn"].ToString();
                    values.fathernominee_status = objODBCDatareader["fathernominee_status"].ToString();
                    values.mothernominee_status = objODBCDatareader["mothernominee_status"].ToString();
                    values.spousenominee_status = objODBCDatareader["spousenominee_status"].ToString();
                    values.othernominee_status = objODBCDatareader["othernominee_status"].ToString();
                    values.relationshiptype = objODBCDatareader["relationshiptype"].ToString();
                    values.nomineefirst_name = objODBCDatareader["nomineefirst_name"].ToString();
                    values.nominee_middlename = objODBCDatareader["nominee_middlename"].ToString();
                    values.nominee_lastname = objODBCDatareader["nominee_lastname"].ToString();
                    values.nominee_dob = objODBCDatareader["nominee_dob"].ToString();
                    values.nominee_age = objODBCDatareader["nominee_age"].ToString();
                    values.totallandinacres = objODBCDatareader["totallandinacres"].ToString();
                    values.cultivatedland = objODBCDatareader["cultivatedland"].ToString();
                    values.previouscrop = objODBCDatareader["previouscrop"].ToString();
                    values.prposedcrop = objODBCDatareader["prposedcrop"].ToString();
                    values.institution_name = objODBCDatareader["institution_name"].ToString();
                    values.pan_status = objODBCDatareader["pan_status"].ToString();
                    values.nearsamunnatiabranch_gid = objODBCDatareader["nearsamunnatiabranch_gid"].ToString();
                    values.nearsamunnatiabranch_name = objODBCDatareader["nearsamunnatiabranch_name"].ToString();
                    values.physicalstatus_gid = objODBCDatareader["physicalstatus_gid"].ToString();
                    values.physicalstatus_name = objODBCDatareader["physicalstatus_name"].ToString();
                    values.internalrating_gid = objODBCDatareader["internalrating_gid"].ToString();
                    values.internalrating_name = objODBCDatareader["internalrating_name"].ToString();
                    values.incometype_name = objODBCDatareader["incometype_name"].ToString();
                }

                objODBCDatareader.Close();

                msSQL = " select contact2equipment_gid,contact_gid,equipment_gid,equipment_name,availablerenthire, " +
                       " quantity,description,insurance_status,insurance_details from ocs_trn_tcadcontact2equipment where " +
                       " contact_gid='" + values.contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstequipmentholding_list = new List<mstequipmentholding_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstequipmentholding_list.Add(new mstequipmentholding_list
                        {
                            contact2equipment_gid = (dr_datarow["contact2equipment_gid"].ToString()),
                            contact_gid = (dr_datarow["contact_gid"].ToString()),
                            equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                            equipment_name = (dr_datarow["equipment_name"].ToString()),
                            availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                            quantity = (dr_datarow["quantity"].ToString()),
                            description = (dr_datarow["description"].ToString()),
                            insurance_status = (dr_datarow["insurance_status"].ToString()),
                            insurance_details = (dr_datarow["insurance_details"].ToString()),
                        });
                    }
                    values.mstequipmentholding_list = getmstequipmentholding_list;
                }
                dt_datatable.Dispose();

                msSQL = " select contact2livestock_gid,contact_gid,livestock_gid,livestock_name,count,Breed, " +
                   " insurance_status,insurance_details from ocs_trn_tcadcontact2livestock where " +
                   " contact_gid='" + values.contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstlivestockholding_list = new List<mstlivestockholding_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstlivestockholding_list.Add(new mstlivestockholding_list
                        {
                            contact2livestock_gid = (dr_datarow["contact2livestock_gid"].ToString()),
                            contact_gid = (dr_datarow["contact_gid"].ToString()),
                            livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                            livestock_name = (dr_datarow["livestock_name"].ToString()),
                            count = (dr_datarow["count"].ToString()),
                            Breed = (dr_datarow["Breed"].ToString()),
                            insurance_status = (dr_datarow["insurance_status"].ToString()),
                            insurance_details = (dr_datarow["insurance_details"].ToString()),
                        });
                    }
                    values.mstlivestockholding_list = getmstlivestockholding_list;
                }
                dt_datatable.Dispose();

                msSQL = " SELECT panabsencereason" +
                        " from ocs_trn_tcadcontact2panabsencereason where contact_gid='" + contact_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactpanabsencereasons_list = new List<contactpanabsencereasons_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    values.contactpanabsencereasons_list = dt_datatable.AsEnumerable().Select(row =>
                      new contactpanabsencereasons_list
                      {
                          panabsencereason = row["panabsencereason"].ToString(),
                      }
                    ).ToList();
                }
                dt_datatable.Dispose();

                msSQL = " select contact2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country," +
                   " postal_code, landmark, city from ocs_trn_tcadcontact2address where contact_gid='" + contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactaddress_list = new List<contactaddress_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcontactaddress_list.Add(new contactaddress_list
                        {
                            contact2address_gid = (dr_datarow["contact2address_gid"].ToString()),
                            addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                            primary_status = (dr_datarow["primary_status"].ToString()),
                            addressline1 = (dr_datarow["addressline1"].ToString()),
                            addressline2 = (dr_datarow["addressline2"].ToString()),
                            taluka = (dr_datarow["taluka"].ToString()),
                            district = (dr_datarow["district"].ToString()),
                            state = (dr_datarow["state"].ToString()),
                            country = (dr_datarow["country"].ToString()),
                            postal_code = (dr_datarow["postal_code"].ToString()),
                            landmark = (dr_datarow["landmark"].ToString()),
                            city = (dr_datarow["city"].ToString()),
                        });
                    }
                    values.contactaddress_list = getcontactaddress_list;
                }
                dt_datatable.Dispose();


                msSQL = "select mobile_no from ocs_trn_tcadcontact2mobileno where contact_gid='" + contact_gid + "' and primary_status = 'Yes'";
                values.primaryindividual_mobileno = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select email_address from ocs_trn_tcadcontact2email where contact_gid='" + contact_gid + "' and primary_status = 'Yes'";
                values.primaryindividual_email = objdbconn.GetExecuteScalar(msSQL);

                msSQL = "select email_address,contact2email_gid,primary_status from ocs_trn_tcadcontact2email where " +
                         " contact_gid='" + contact_gid + "' and primary_status = 'No'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactemail_list = new List<contactemail_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcontactemail_list.Add(new contactemail_list
                        {
                            contact2email_gid = (dr_datarow["contact2email_gid"].ToString()),
                            email_address = (dr_datarow["email_address"].ToString()),
                            primary_status = (dr_datarow["primary_status"].ToString()),
                        });
                    }
                }
                values.contactemail_list = getcontactemail_list;
                dt_datatable.Dispose();

                msSQL = "select mobile_no,contact2mobileno_gid,primary_status,whatsapp_no from ocs_trn_tcadcontact2mobileno where " +
                        " contact_gid='" + contact_gid + "' and primary_status = 'No'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactmobileno_list = new List<contactmobileno_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcontactmobileno_list.Add(new contactmobileno_list
                        {
                            contact2mobileno_gid = (dr_datarow["contact2mobileno_gid"].ToString()),
                            mobile_no = (dr_datarow["mobile_no"].ToString()),
                            primary_status = (dr_datarow["primary_status"].ToString()),
                            whatsapp_no = (dr_datarow["whatsapp_no"].ToString()),
                        });
                    }
                }
                values.contactmobileno_list = getcontactmobileno_list;
                dt_datatable.Dispose();

                msSQL = "select contact2idproof_gid,idproof_name,idproof_no,document_name, document_path from ocs_trn_tcadcontact2idproof where " +
                        " contact_gid='" + contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcontactidproof_list = new List<contactidproof_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getcontactidproof_list.Add(new contactidproof_list
                        {
                            contact2idproof_gid = (dr_datarow["contact2idproof_gid"].ToString()),
                            idproof_name = (dr_datarow["idproof_name"].ToString()),
                            idproof_no = (dr_datarow["idproof_no"].ToString()),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                        });

                        values.contactidproof_list = getcontactidproof_list;
                    }
                    dt_datatable.Dispose();
                }

                msSQL = " select document_title,document_name,document_path,migration_flag from ocs_trn_tcadcontact2document " +
                                " where contact_gid='" + contact_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getdocumentdtlList = new List<uploadindividualdoc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getdocumentdtlList.Add(new uploadindividualdoc_list
                        {
                            migration_flag = dt["migration_flag"].ToString(),
                            document_title = dt["document_title"].ToString(),
                            document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                            document_name = dt["document_name"].ToString(),
                        });
                        values.uploadindividualdoc_list = getdocumentdtlList;
                    }
                }
                dt_datatable.Dispose();

                msSQL = "select cicdocument_name,cicdocument_path from ocs_trn_tcadindividual2cicdocumentupload" +
                        " where contact_gid='" + values.contact_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.indcicdocument_name = objODBCDatareader["cicdocument_name"].ToString();
                    values.indcicinddocument_path = objcmnstorage.EncryptData((objODBCDatareader["cicdocument_path"].ToString()));
                }

                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }

        }

        public void DaGetCadContactBureauList(string contact_gid, MdlContactBureau values)
        {
            msSQL = " select contact2bureau_gid,bureauname_name,bureau_score, " +
                    " date_format(bureauscore_date, '%d-%m-%Y') as bureauscore_date from ocs_trn_tcadcontact2bureau where " +
                    " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcontactbureau_list = new List<contactbureau_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getcontactbureau_list.Add(new contactbureau_list
                    {
                        contact2bureau_gid = (dr_datarow["contact2bureau_gid"].ToString()),
                        bureauname_name = (dr_datarow["bureauname_name"].ToString()),
                        bureau_score = (dr_datarow["bureau_score"].ToString()),
                        bureauscore_date = (dr_datarow["bureauscore_date"].ToString()),
                    });
                }
            }
            values.contactbureau_list = getcontactbureau_list;
            dt_datatable.Dispose();
        }

        public void DaGetCadCICIndividualDtl(string contact2bureau_gid, MdlCICIndividual values)
        {
            try
            {
                msSQL = " select contact2bureau_gid, bureauname_gid,bureauname_name, bureau_score, date_format(bureauscore_date,'%d-%m-%Y') as bureauscore_date," +
                    " observations, bureau_response" +
                    " from ocs_trn_tcadcontact2bureau where contact2bureau_gid='" + contact2bureau_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.bureauname_gid = objODBCDatareader["bureauname_gid"].ToString();
                    values.bureauname_name = objODBCDatareader["bureauname_name"].ToString();
                    values.bureau_score = objODBCDatareader["bureau_score"].ToString();
                    values.observations = objODBCDatareader["observations"].ToString();
                    values.bureau_response = objODBCDatareader["bureau_response"].ToString();
                    values.bureauscore_date = objODBCDatareader["bureauscore_date"].ToString();
                    values.contact2bureau_gid = objODBCDatareader["contact2bureau_gid"].ToString();
                }
                values.status = true;
                values.message = "success";
                objODBCDatareader.Close();

            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadCICUploadIndividualDocList(string contact2bureau_gid, string employee_gid, MdlCICIndividual values)
        {
            msSQL = " select individual2cicdocumentupload_gid,contact2bureau_gid,cicdocument_name, " +
                    " cicdocument_path,document_content,migration_flag from ocs_trn_tcadindividual2cicdocumentupload " +
                    " where contact2bureau_gid='" + contact2bureau_gid + "' or contact2bureau_gid='" + employee_gid + "' ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<cicuploaddoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new cicuploaddoc_list
                    {
                        document_name = dt["cicdocument_name"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["cicdocument_path"].ToString())),
                        contact2bureau_gid = dt["contact2bureau_gid"].ToString(),
                        tmpcicdocument_gid = dt["individual2cicdocumentupload_gid"].ToString(),
                        document_content = dt["document_content"].ToString(),
                        migration_flag = dt["migration_flag"].ToString(),
                    });
                    values.cicuploaddoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadGroupView(string group_gid, MdlMstGroup values)
        {
            try
            {
                msSQL = " select group_name,date_of_formation,group_type,groupmember_count,groupurn_status,group_urn,group_status" +
                        " from ocs_trn_tcadgroup where group_gid='" + group_gid + "'";

                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.group_name = objODBCDatareader["group_name"].ToString();
                    if (objODBCDatareader["date_of_formation"].ToString() != "")
                        values.date_of_formation = Convert.ToDateTime(objODBCDatareader["date_of_formation"]).ToString("dd-MM-yyyy");
                    values.group_type = objODBCDatareader["group_type"].ToString();
                    values.groupmember_count = objODBCDatareader["groupmember_count"].ToString();
                    values.groupurn_status = objODBCDatareader["groupurn_status"].ToString();
                    values.group_urn = objODBCDatareader["group_urn"].ToString();
                    values.group_status = objODBCDatareader["group_status"].ToString();
                }


                objODBCDatareader.Close();
                values.status = true;
                values.message = "success";
            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetCadGroupAddressList(string group_gid, MdlMstAddressDetails values)
        {
            msSQL = "  select group2address_gid,addresstype_name,primary_status, addressline1, addressline2, taluka, district, state, country, latitude, longitude, landmark," +
                    " postal_code from ocs_trn_tcadgroup2address where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstaddress_list = new List<mstaddress_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstaddress_list.Add(new mstaddress_list
                    {
                        group2address_gid = (dr_datarow["group2address_gid"].ToString()),
                        address_type = (dr_datarow["addresstype_name"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        addressline1 = (dr_datarow["addressline1"].ToString()),
                        addressline2 = (dr_datarow["addressline2"].ToString()),
                        taluka = (dr_datarow["taluka"].ToString()),
                        district = (dr_datarow["district"].ToString()),
                        state = (dr_datarow["state"].ToString()),
                        country = (dr_datarow["country"].ToString()),
                        latitude = (dr_datarow["latitude"].ToString()),
                        longitude = (dr_datarow["longitude"].ToString()),
                        postal_code = (dr_datarow["postal_code"].ToString()),
                        landmark = (dr_datarow["landmark"].ToString())
                    });
                }
                values.mstaddress_list = getmstaddress_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadGroupBankList(string group_gid, MdlMstBankDetails values)
        {
            msSQL = "  select group2bank_gid,ifsc_code,bank_accountno, accountholder_name, bank_name, bank_branch" +
                    " from ocs_trn_tcadgroup2bank where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstbank_list = new List<mstbank_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstbank_list.Add(new mstbank_list
                    {
                        group2bank_gid = (dr_datarow["group2bank_gid"].ToString()),
                        ifsc_code = (dr_datarow["ifsc_code"].ToString()),
                        bank_accountno = (dr_datarow["bank_accountno"].ToString()),
                        accountholder_name = (dr_datarow["accountholder_name"].ToString()),
                        bank_name = (dr_datarow["bank_name"].ToString()),
                        bank_branch = (dr_datarow["bank_branch"].ToString())
                    });
                }
                values.mstbank_list = getmstbank_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadGroupDocumentList(string group_gid, MdlGroupDocument values)
        {
            msSQL = " select group2document_gid,document_name,document_title,document_path from ocs_trn_tcadgroup2document " +
                    " where group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<groupdocument_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new groupdocument_list
                    {
                        document_name = dt["document_name"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        group2document_gid = dt["group2document_gid"].ToString(),
                    });
                    values.groupdocument_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetCadVisitReportDtls(string visitreport_gid, MdlMstVisitPersonView values)
        {
            try
            {
                msSQL = " select date_format(a.applicationvisit_date,'%d-%m-%Y') as applicationvisit_date,a.visitreport_id, a.clientkmp_activities, a.promoter_background, " +
                        " a.overall_observations, a.inspectingofficial_recommenation, a.trading_relationship, summary, GROUP_CONCAT(distinct(b.inspectingofficials_name) SEPARATOR ', ') as inspectingofficials_name, " +
                        " GROUP_CONCAT(distinct(c.visitdone_name) SEPARATOR ', ') as visitdone_name " +
                        " from ocs_mst_tapplicationvisitreport a " +
                        " left join ocs_mst_tapplicationvisit2inspectingofficial b on a.applicationvisit_gid = b.applicationvisit_gid" +
                        " left join ocs_mst_tapplicationvisit2visitdone c on c.applicationvisit_gid = a.applicationvisit_gid " +
                        " where a.applicationvisit_gid='" + visitreport_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.applicationvisit_date = objODBCDatareader["applicationvisit_date"].ToString();
                    values.visitreport_id = objODBCDatareader["visitreport_id"].ToString();
                    values.inspectingofficials_name = objODBCDatareader["inspectingofficials_name"].ToString();
                    values.visitdone_name = objODBCDatareader["visitdone_name"].ToString();
                    values.clientkmp_activities = objODBCDatareader["clientkmp_activities"].ToString();
                    values.promoter_background = objODBCDatareader["promoter_background"].ToString();
                    values.overall_observations = objODBCDatareader["overall_observations"].ToString();
                    values.inspectingofficial_recommenation = objODBCDatareader["inspectingofficial_recommenation"].ToString();
                    values.trading_relationship = objODBCDatareader["trading_relationship"].ToString();
                    values.summary = objODBCDatareader["summary"].ToString();



                }
                objODBCDatareader.Close();



                msSQL = "select applicationvisit2person_gid,clientrepresentative_name,clientrepresentative_designationname,personal_mail,office_mail from ocs_mst_tapplicationvisit2person where " +
                        " applicationvisit_gid='" + visitreport_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstVisitpersondtl_list = new List<mstVisitpersondtl_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstVisitpersondtl_list.Add(new mstVisitpersondtl_list
                        {
                            applicationvisit2person_gid = (dr_datarow["applicationvisit2person_gid"].ToString()),
                            clientrepresentative_name = (dr_datarow["clientrepresentative_name"].ToString()),
                            clientrepresentative_designationname = (dr_datarow["clientrepresentative_designationname"].ToString()),
                            clientrepresentative_personalmail = (dr_datarow["personal_mail"].ToString()),
                            clientrepresentative_officemail = (dr_datarow["office_mail"].ToString())
                        });
                    }
                    values.mstVisitpersondtl_list = getmstVisitpersondtl_list;
                }
                dt_datatable.Dispose();




                msSQL = "select applicationvisit2address_gid,addresstype_gid,addresstype_name,primary_status,address_line1,address_line2,landmark,postal_code,city,taluk,district,state_gid,state_name,country from ocs_mst_tapplicationvisit2address where " +
                        " applicationvisit_gid='" + visitreport_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstVisitpersonaddress_list = new List<mstVisitpersonaddress_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstVisitpersonaddress_list.Add(new mstVisitpersonaddress_list
                        {
                            applicationvisit2address_gid = (dr_datarow["applicationvisit2address_gid"].ToString()),
                            addresstype_gid = (dr_datarow["addresstype_gid"].ToString()),
                            addresstype_name = (dr_datarow["addresstype_name"].ToString()),
                            primary_status = (dr_datarow["primary_status"].ToString()),
                            address_line1 = (dr_datarow["address_line1"].ToString()),
                            address_line2 = (dr_datarow["address_line2"].ToString()),
                            landmark = (dr_datarow["landmark"].ToString()),
                            postal_code = (dr_datarow["postal_code"].ToString()),
                            city = (dr_datarow["city"].ToString()),
                            taluk = (dr_datarow["taluk"].ToString()),
                            district = (dr_datarow["district"].ToString()),
                            state_name = (dr_datarow["state_name"].ToString()),
                            country = (dr_datarow["country"].ToString()),
                        });
                    }
                    values.mstVisitpersonaddress_list = getmstVisitpersonaddress_list;
                }
                dt_datatable.Dispose();




                msSQL = "select applicationvisit2document_gid,document_name,document_path,file_name, date_format(created_date,'%d-%m-%Y') as created_date from ocs_trn_tcadapplicationvisit2document where " +
                        " applicationvisit_gid='" + visitreport_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getUploadDocumentList = new List<UploadDocumentList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getUploadDocumentList.Add(new UploadDocumentList
                        {
                            applicationvisit2document_gid = (dr_datarow["applicationvisit2document_gid"].ToString()),
                            document_name = (dr_datarow["document_name"].ToString()),
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            filename = (dr_datarow["file_name"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString())
                        });
                    }
                    values.UploadDocumentList = getUploadDocumentList;
                }
                dt_datatable.Dispose();




                msSQL = "select applicationvisit2photo_gid,visitphoto_name,visitphoto_path,file_name,date_format(created_date,'%d-%m-%Y') as created_date from ocs_trn_tcadapplicationvisit2photo where " +
                        " applicationvisit_gid='" + visitreport_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getUploadphotoList = new List<UploadphotoList>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getUploadphotoList.Add(new UploadphotoList
                        {
                            applicationvisit2photo_gid = (dr_datarow["applicationvisit2photo_gid"].ToString()),
                            photo_name = (dr_datarow["visitphoto_name"].ToString()),
                            document_path = objcmnstorage.EncryptData((dr_datarow["visitphoto_path"].ToString())),
                            filename = (dr_datarow["file_name"].ToString()),
                            created_date = (dr_datarow["created_date"].ToString())
                        });
                    }
                    values.UploadphotoList = getUploadphotoList;
                }
                dt_datatable.Dispose();



            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }
        }

        public void DaGetCadVisitContactList(string employee_gid, string applicationvisit2person_gid, mstVisitpersondtl_list values)
        {
            msSQL = " select applicationvisitperson2contact_gid,mobile_no,primary_status,whatsapp_mobileno from ocs_trn_tcadapplicationvisitperson2contactno where " +
                    " applicationvisit2person_gid='" + applicationvisit2person_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstVisitpersoncontact_list = new List<mstVisitpersoncontact_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstVisitpersoncontact_list.Add(new mstVisitpersoncontact_list
                    {
                        applicationvisitperson2contact_gid = (dr_datarow["applicationvisitperson2contact_gid"].ToString()),
                        mobile_no = (dr_datarow["mobile_no"].ToString()),
                        primary_status = (dr_datarow["primary_status"].ToString()),
                        whatsapp_mobileno = (dr_datarow["whatsapp_mobileno"].ToString())
                    });
                }
                values.mstVisitpersoncontact_list = getmstVisitpersoncontact_list;
            }
            dt_datatable.Dispose();
            values.status = true;
        }
        public void DaGetCadGradingView(string application2gradingtool_gid, MdlMstGradeToolView values)
        {
            try
            {
                msSQL = " select fpo_acscore, numnerofaactive_fig, existinglending_directandindirect, nonnegotiableconditions_met, " +
                         " outstandingportfolio_directandindirect, institution_directandindrectborrowing, totaldisbursements_otherlenders, " +
                         " par90_managedbyonlyinstitution_direct,recommendation, majorcrops, alternativeincomesource, " +
                         " objevtiveoffpo, recommendation2, overallfporating, overallfpograde, date_format(dateofsurvey, '%d-%m-%Y') as dateofsurvey, " +
                         " b.numberofstates, b.numberofdistricts, b.numberofbranches, b.numberofmembers, b.numberof_activemembers," +
                         " b.numberofgroups, b.zonaloffices, b.regionaloffices, b.branches, b.adminstaff, b.fieldstaff, b.fieldstaff_ratio " +
                         " from ocs_trn_tcadapplication2gradingtool a" +
                         " left join ocs_trn_tcadapplication2geographic b on a.application2gradingtool_gid = b.application2gradingtool_gid" +
                         " where a.application2gradingtool_gid='" + application2gradingtool_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.fpo_acscore = objODBCDatareader["fpo_acscore"].ToString();
                    values.numnerofaactive_fig = objODBCDatareader["numnerofaactive_fig"].ToString();
                    values.existinglending_directandindirect = objODBCDatareader["existinglending_directandindirect"].ToString();
                    values.outstandingportfolio_directandindirect = objODBCDatareader["outstandingportfolio_directandindirect"].ToString();
                    values.nonnegotiableconditions_met = objODBCDatareader["nonnegotiableconditions_met"].ToString();
                    values.institution_directandindrectborrowing = objODBCDatareader["institution_directandindrectborrowing"].ToString();
                    values.totaldisbursements_otherlenders = objODBCDatareader["totaldisbursements_otherlenders"].ToString();
                    values.par90_managedbyonlyinstitution_direct = objODBCDatareader["par90_managedbyonlyinstitution_direct"].ToString();
                    values.fpo_recommendation = objODBCDatareader["recommendation"].ToString();
                    values.majorcrops = objODBCDatareader["majorcrops"].ToString();
                    values.alternativeincomesource = objODBCDatareader["alternativeincomesource"].ToString();
                    values.objevtiveoffpo = objODBCDatareader["objevtiveoffpo"].ToString();
                    values.recommendation = objODBCDatareader["recommendation2"].ToString();
                    values.overallfporating = objODBCDatareader["overallfporating"].ToString();
                    values.recommendation = objODBCDatareader["recommendation"].ToString();
                    values.numberofstates = objODBCDatareader["numberofstates"].ToString();
                    values.numberofdistricts = objODBCDatareader["numberofdistricts"].ToString();
                    values.numberofbranches = objODBCDatareader["numberofbranches"].ToString();
                    values.numberofmembers = objODBCDatareader["numberofmembers"].ToString();
                    values.numberof_activemembers = objODBCDatareader["numberof_activemembers"].ToString();
                    values.numberofgroups = objODBCDatareader["numberofgroups"].ToString();
                    values.zonaloffices = objODBCDatareader["zonaloffices"].ToString();
                    values.regionaloffices = objODBCDatareader["regionaloffices"].ToString();
                    values.branches = objODBCDatareader["branches"].ToString();
                    values.adminstaff = objODBCDatareader["adminstaff"].ToString();
                    values.fieldstaff = objODBCDatareader["fieldstaff"].ToString();
                    values.fieldstaff_ratio = objODBCDatareader["fieldstaff_ratio"].ToString();
                    values.dateofsurvey = objODBCDatareader["dateofsurvey"].ToString();
                    values.overallfpograde = objODBCDatareader["overallfpograde"].ToString();

                }
                objODBCDatareader.Close();


                msSQL = "select application2gradingassesment_gid,application2gradingtool_gid,maximumscored,actualscored," +
                        " assessmentcriteria_in,assessmentcriteria_ingrade,shareholdermale_in,shareholderfemale_in,bodmale_in,bodfemale_in, " +
                        " (select group_concat(distinct assessmentcriteria_name) as assessmentcriteria_name  from ocs_mst_tassessmentcriteria2dropdown d " +
                        " where d.application2gradingassesment_gid = a.application2gradingassesment_gid ) as assessmentcriteria_name " +
                        " from ocs_trn_tcadapplication2gradingassessmentcriteria a  " +
                        " where application2gradingtool_gid ='" + application2gradingtool_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getmstgradingassesment_list = new List<mstassessment_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getmstgradingassesment_list.Add(new mstassessment_list
                        {
                            assessmentcriteria = (dr_datarow["assessmentcriteria_name"].ToString()),
                            maximumscored = (dr_datarow["maximumscored"].ToString()),
                            actualscored = (dr_datarow["actualscored"].ToString()),
                            assessmentcriteria_in = (dr_datarow["assessmentcriteria_in"].ToString()),
                            assessmentcriteria_ingrade = (dr_datarow["assessmentcriteria_ingrade"].ToString()),
                            shareholdermale_in = (dr_datarow["shareholdermale_in"].ToString()),
                            shareholderfemale_in = (dr_datarow["shareholderfemale_in"].ToString()),
                            bodmale_in = (dr_datarow["bodmale_in"].ToString()),
                            bodfemale_in = (dr_datarow["bodfemale_in"].ToString()),
                        });
                    }
                    values.mstassessment_list = getmstgradingassesment_list;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetAppProductList(string application_gid, string employee_gid, MdlMstProductDetailList values)
        {
            msSQL = " select application2product_gid,product_gid,product_name,variety_gid,variety_name,sector_name,category_name," +
                    " botanical_name,alternative_name from ocs_trn_tcadapplication2product where application_gid='" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstproduct_list = new List<mstproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstproduct_list.Add(new mstproduct_list
                    {
                        application2product_gid = (dr_datarow["application2product_gid"].ToString()),
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        product_name = (dr_datarow["product_name"].ToString()),
                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                        variety_name = (dr_datarow["variety_name"].ToString()),
                        sector_name = (dr_datarow["sector_name"].ToString()),
                        category_name = (dr_datarow["category_name"].ToString()),
                        botanical_name = (dr_datarow["botanical_name"].ToString()),
                        alternative_name = (dr_datarow["alternative_name"].ToString())
                    });
                }
                values.mstproduct_list = getmstproduct_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostProductDetailAdd(string employee_gid, MdlMstProductDetailAdd values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2P");
            msSQL = " insert into ocs_trn_tcadapplication2product (" +
                    " application2product_gid," +
                    " application2loan_gid," +
                    " application_gid," +
                    " product_gid," +
                    " product_name," +
                    " variety_gid," +
                    " variety_name," +
                    " sector_name," +
                    " category_name," +
                    " botanical_name," +
                    " alternative_name," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "null," +
                    "'" + employee_gid + "'," +
                    "'" + values.product_gid + "'," +
                    "'" + values.product_name + "'," +
                    "'" + values.variety_gid + "'," +
                    "'" + values.variety_name + "'," +
                    "'" + values.sector_name + "'," +
                    "'" + values.category_name + "'," +
                    "'" + values.botanical_name + "'," +
                    "'" + values.alternative_name + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Product Details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        public void DaGetAppProductTempList(string application_gid, string employee_gid, MdlMstProductDetailList values)
        {
            msSQL = " select application2product_gid,product_gid,product_name,variety_gid,variety_name,sector_name,category_name," +
                    " botanical_name,alternative_name from ocs_trn_tcadapplication2product " +
                    " where application_gid = '" + employee_gid + "' or application_gid = '" + application_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstproduct_list = new List<mstproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstproduct_list.Add(new mstproduct_list
                    {
                        application2product_gid = (dr_datarow["application2product_gid"].ToString()),
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        product_name = (dr_datarow["product_name"].ToString()),
                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                        variety_name = (dr_datarow["variety_name"].ToString()),
                        sector_name = (dr_datarow["sector_name"].ToString()),
                        category_name = (dr_datarow["category_name"].ToString()),
                        botanical_name = (dr_datarow["botanical_name"].ToString()),
                        alternative_name = (dr_datarow["alternative_name"].ToString())
                    });
                }
                values.mstproduct_list = getmstproduct_list;
            }
            dt_datatable.Dispose();
        }

        public void DaDeleteAppProductDtl(string application2product_gid, MdlMstProductDetailAdd values)
        {
            msSQL = "delete from ocs_trn_tcadapplication2product where application2product_gid='" + application2product_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Product Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // Institution Equipment Holding
        public bool DaPostInstitutionEquipmentHolding(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "select institution2equipment_gid from ocs_trn_tcadinstitution2equipment where equipment_gid='" + values.equipment_gid + "' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Equipment Name Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.availablerenthire == null || values.availablerenthire == "")
            {
                lsavailablerenthire = "";
            }
            else
            {
                lsavailablerenthire = values.availablerenthire.Replace("'", "");
            }
            if (values.quantity == null || values.quantity == "")
            {
                lsquantity = "";
            }
            else
            {
                lsquantity = values.quantity.Replace("'", "");
            }
            if (values.description == null || values.description == "")
            {
                lsdescription = "";
            }
            else
            {
                lsdescription = values.description.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("I2EH");
            msSQL = " insert into ocs_trn_tcadinstitution2equipment(" +
                    " institution2equipment_gid," +
                    " institution_gid," +
                    " equipment_gid," +
                    " equipment_name," +
                    " availablerenthire," +
                    " quantity," +
                    " description," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.equipment_gid + "'," +
                    "'" + values.equipment_name + "'," +
                    "'" + lsavailablerenthire + "'," +
                    "'" + lsquantity + "'," +
                    "'" + lsdescription + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Equipment Holdings Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Institution Equipment Holding
        public void DaGetInstitutionEquipmentHoldingList(string employee_gid, string institution_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select institution2equipment_gid,institution_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadinstitution2equipment where " +
                    " institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        institution2equipment_gid = (dr_datarow["institution2equipment_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Institution Equipment Holding
        public void DaDeleteInstitutionEquipmentHolding(string institution2equipment_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2equipment where institution2equipment_gid='" + institution2equipment_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Equipment Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Institution Equipment Holding
        public void DaGetEquipmentHoldingView(string institution2equipment_gid, MdlMstEquipmentHolding values)
        {
            try
            {
                msSQL = " select  institution2equipment_gid,institution_gid,equipment_gid,equipment_name,availablerenthire," +
                        " quantity,description,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadinstitution2equipment a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where institution2equipment_gid = '" + institution2equipment_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.institution2equipment_gid = objODBCDatareader["institution2equipment_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.equipment_gid = objODBCDatareader["equipment_gid"].ToString();
                    values.equipment_name = objODBCDatareader["equipment_name"].ToString();
                    values.availablerenthire = objODBCDatareader["availablerenthire"].ToString();
                    values.quantity = objODBCDatareader["quantity"].ToString();
                    values.description = objODBCDatareader["description"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }
        // Add Institution Livestock Holding
        public bool DaPostInstitutionLivestock(string employee_gid, MdlMstLivestock values)
        {
            msSQL = "select institution2livestock_gid from ocs_trn_tcadinstitution2livestock where livestock_gid='" + values.livestock_gid + "' and (institution_gid='" + employee_gid + "' or institution_gid='" + values.institution_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Livestock Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.count == null || values.count == "")
            {
                lscount = "";
            }
            else
            {
                lscount = values.count.Replace("'", "");
            }
            if (values.Breed == null || values.Breed == "")
            {
                lsBreed = "";
            }
            else
            {
                lsBreed = values.Breed.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("I2LH");
            msSQL = " insert into ocs_trn_tcadinstitution2livestock(" +
                    " institution2livestock_gid," +
                    " institution_gid," +
                    " livestock_gid," +
                    " livestock_name," +
                    " count," +
                    " Breed," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.livestock_gid + "'," +
                    "'" + values.livestock_name + "'," +
                    "'" + lscount + "'," +
                    "'" + lsBreed.Replace("'", "") + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Livestock Holding Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Institution Livestock Holding
        public void DaGetInstitutionLivestockList(string employee_gid, string institution_gid, MdlMstLivestock values)
        {
            msSQL = " select institution2livestock_gid,institution_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadinstitution2livestock where " +
                    " institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        institution2livestock_gid = (dr_datarow["institution2livestock_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }


        // Delete Institution Livestock Holding
        public void DaDeleteInstitutionLivestock(string institution2livestock_gid, MdlMstLivestock values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2livestock where institution2livestock_gid='" + institution2livestock_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Livestock Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Institution Livestock Holding
        public void DaGetLivestockHoldingView(string institution2livestock_gid, MdlMstLivestock values)
        {
            try
            {
                msSQL = " select institution2livestock_gid,institution_gid,livestock_gid,livestock_name,count," +
                        " Breed,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadinstitution2livestock a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where institution2livestock_gid = '" + institution2livestock_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.institution2livestock_gid = objODBCDatareader["institution2livestock_gid"].ToString();
                    values.institution_gid = objODBCDatareader["institution_gid"].ToString();
                    values.livestock_gid = objODBCDatareader["livestock_gid"].ToString();
                    values.livestock_name = objODBCDatareader["livestock_name"].ToString();
                    values.count = objODBCDatareader["count"].ToString();
                    values.Breed = objODBCDatareader["Breed"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        //  GST Head Office Confirmation
        public void DaUpdateGSTHeadOffice(string employee_gid, MdlGSTHeadOffice values)
        {
            msSQL = " update ocs_trn_tcadinstitution2branch set headoffice_status = 'Yes' " +
                    " where institution2branch_gid = '" + values.institution2branch_gid + "' " +
                    " and (institution_gid = '" + employee_gid + "' or institution_gid = '" + values.institution_gid + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msSQL = " update ocs_trn_tcadinstitution2branch set headoffice_status='No' " +
                        " where institution2branch_gid<>'" + values.institution2branch_gid + "' " +
                        " and (institution_gid = '" + employee_gid + "' or institution_gid = '" + values.institution_gid + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                values.status = true;
                values.message = "Head Office Confirmed Successfully";
            }
            else
            {
                values.status = false;
                values.message = "Error Occured";
            }

        }

        // Get Institution Equipment Holding
        public void DaGetEditInstitutionEquipmentHoldingList(string employee_gid, string institution_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select institution2equipment_gid,institution_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadinstitution2equipment where " +
                    " institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        institution2equipment_gid = (dr_datarow["institution2equipment_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }


        // Get Edit Institution Livestock Holding
        public void DaGetEditInstitutionLivestockList(string employee_gid, string institution_gid, MdlMstLivestock values)
        {
            msSQL = " select institution2livestock_gid,institution_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadinstitution2livestock where " +
                    " institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        institution2livestock_gid = (dr_datarow["institution2livestock_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // Add Contact Livestock Holding
        public bool DaPostContactLivestock(string employee_gid, MdlMstLivestock values)
        {
            msSQL = "select contact2livestock_gid from ocs_trn_tcadcontact2livestock where livestock_gid='" + values.livestock_gid + "' and (contact_gid='" + employee_gid + "' or contact_gid='" + values.contact_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Livestock Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.count == null || values.count == "")
            {
                lscount = "";
            }
            else
            {
                lscount = values.count.Replace("'", "");
            }
            if (values.Breed == null || values.Breed == "")
            {
                lsBreed = "";
            }
            else
            {
                lsBreed = values.Breed.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("C2LH");
            msSQL = " insert into ocs_trn_tcadcontact2livestock(" +
                    " contact2livestock_gid," +
                    " contact_gid," +
                    " livestock_gid," +
                    " livestock_name," +
                    " count," +
                    " Breed," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.livestock_gid + "'," +
                    "'" + values.livestock_name + "'," +
                    "'" + lscount + "'," +
                    "'" + lsBreed.Replace("'", "") + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Livestock Holding Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Contact Livestock Holding
        public void DaGetContactLivestockList(string employee_gid, MdlMstLivestock values)
        {
            msSQL = " select contact2livestock_gid,contact_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadcontact2livestock where " +
                    " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        contact2livestock_gid = (dr_datarow["contact2livestock_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Contact Livestock Holding
        public void DaDeleteContactLivestock(string contact2livestock_gid, MdlMstLivestock values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2livestock where contact2livestock_gid='" + contact2livestock_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Livestock Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Contact Livestock Holding
        public void DaGetContactLivestockHoldingView(string contact2livestock_gid, MdlMstLivestock values)
        {
            try
            {
                msSQL = " select  contact2livestock_gid,contact_gid,livestock_gid,livestock_name,count," +
                        " Breed,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadcontact2livestock a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where contact2livestock_gid = '" + contact2livestock_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.contact2livestock_gid = objODBCDatareader["contact2livestock_gid"].ToString();
                    values.contact_gid = objODBCDatareader["contact_gid"].ToString();
                    values.livestock_gid = objODBCDatareader["livestock_gid"].ToString();
                    values.livestock_name = objODBCDatareader["livestock_name"].ToString();
                    values.count = objODBCDatareader["count"].ToString();
                    values.Breed = objODBCDatareader["Breed"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        // Contact Equipment Holding
        public bool DaPostContactEquipmentHolding(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "select contact2equipment_gid from ocs_trn_tcadcontact2equipment where equipment_gid='" + values.equipment_gid + "' and (contact_gid='" + employee_gid + "' or contact_gid='" + values.contact_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Equipment Name Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.availablerenthire == null || values.availablerenthire == "")
            {
                lsavailablerenthire = "";
            }
            else
            {
                lsavailablerenthire = values.availablerenthire.Replace("'", "");
            }
            if (values.quantity == null || values.quantity == "")
            {
                lsquantity = "";
            }
            else
            {
                lsquantity = values.quantity.Replace("'", "");
            }
            if (values.description == null || values.description == "")
            {
                lsdescription = "";
            }
            else
            {
                lsdescription = values.description.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("C2EH");
            msSQL = " insert into ocs_trn_tcadcontact2equipment(" +
                    " contact2equipment_gid," +
                    " contact_gid," +
                    " equipment_gid," +
                    " equipment_name," +
                    " availablerenthire," +
                    " quantity," +
                    " description," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.equipment_gid + "'," +
                    "'" + values.equipment_name + "'," +
                    "'" + lsavailablerenthire + "'," +
                    "'" + lsquantity + "'," +
                    "'" + lsdescription + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Equipment Holdings Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Contact Equipment Holding
        public void DaGetContactEquipmentHoldingList(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select contact2equipment_gid,contact_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadcontact2equipment where " +
                    " contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        contact2equipment_gid = (dr_datarow["contact2equipment_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Contact Equipment Holding
        public void DaDeleteContactEquipmentHolding(string contact2equipment_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "delete from ocs_trn_tcadcontact2equipment where contact2equipment_gid='" + contact2equipment_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Equipment Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Contact Equipment Holding
        public void DaGetContactEquipmentHoldingView(string contact2equipment_gid, MdlMstEquipmentHolding values)
        {
            try
            {
                msSQL = " select contact2equipment_gid,contact_gid,equipment_gid,equipment_name,availablerenthire," +
                        " quantity,description,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadcontact2equipment a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where contact2equipment_gid = '" + contact2equipment_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.contact2equipment_gid = objODBCDatareader["contact2equipment_gid"].ToString();
                    values.contact_gid = objODBCDatareader["contact_gid"].ToString();
                    values.equipment_gid = objODBCDatareader["equipment_gid"].ToString();
                    values.equipment_name = objODBCDatareader["equipment_name"].ToString();
                    values.availablerenthire = objODBCDatareader["availablerenthire"].ToString();
                    values.quantity = objODBCDatareader["quantity"].ToString();
                    values.description = objODBCDatareader["description"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        // Get Contact Equipment Holding
        public void DaGetEditContactEquipmentHoldingList(string employee_gid, string contact_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select contact2equipment_gid,contact_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadcontact2equipment where " +
                    " contact_gid='" + contact_gid + "' or contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        contact2equipment_gid = (dr_datarow["contact2equipment_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Edit Contact Livestock Holding
        public void DaGetEditContactLivestockList(string employee_gid, string contact_gid, MdlMstLivestock values)
        {
            msSQL = " select contact2livestock_gid,contact_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadcontact2livestock where " +
                    " contact_gid='" + contact_gid + "' or contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        contact2livestock_gid = (dr_datarow["contact2livestock_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Institution Equipment Holding
        public void DaGetAddInstitutionEquipmentHoldingList(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select institution2equipment_gid,institution_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadinstitution2equipment where " +
                    " institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        institution2equipment_gid = (dr_datarow["institution2equipment_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Institution Livestock Holding
        public void DaGetAddInstitutionLivestockList(string employee_gid, MdlMstLivestock values)
        {
            msSQL = " select institution2livestock_gid,institution_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadinstitution2livestock where " +
                    " institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        institution2livestock_gid = (dr_datarow["institution2livestock_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get CAD Edit Add Contact Equipment Holding
        public void DaGetEditAddContactEquipmentHoldingList(string employee_gid, string contact_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select contact2equipment_gid,contact_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadcontact2equipment where " +
                    " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        contact2equipment_gid = (dr_datarow["contact2equipment_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Contact Edit Add Livestock Holding
        public void DaGetEditAddContactLivestockList(string employee_gid, string contact_gid, MdlMstLivestock values)
        {
            msSQL = " select contact2livestock_gid,contact_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadcontact2livestock where " +
                    " contact_gid='" + contact_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        contact2livestock_gid = (dr_datarow["contact2livestock_gid"].ToString()),
                        contact_gid = (dr_datarow["contact_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostGroupEquipmentHolding(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "select group2equipment_gid from ocs_trn_tcadgroup2equipment where equipment_gid='" + values.equipment_gid + "' and (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Equipment Name Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.availablerenthire == null || values.availablerenthire == "")
            {
                lsavailablerenthire = "";
            }
            else
            {
                lsavailablerenthire = values.availablerenthire.Replace("'", "");
            }
            if (values.quantity == null || values.quantity == "")
            {
                lsquantity = "";
            }
            else
            {
                lsquantity = values.quantity.Replace("'", "");
            }
            if (values.description == null || values.description == "")
            {
                lsdescription = "";
            }
            else
            {
                lsdescription = values.description.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("G2EH");
            msSQL = " insert into ocs_trn_tcadgroup2equipment(" +
                    " group2equipment_gid," +
                    " group_gid," +
                    " equipment_gid," +
                    " equipment_name," +
                    " availablerenthire," +
                    " quantity," +
                    " description," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.equipment_gid + "'," +
                    "'" + values.equipment_name + "'," +
                    "'" + lsavailablerenthire + "'," +
                    "'" + lsquantity + "'," +
                    "'" + lsdescription + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Equipment Holdings Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Group Equipment Holding List
        public void DaGetGroupEquipmentHoldingList(string employee_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select group2equipment_gid,group_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadgroup2equipment where " +
                    " group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        group2equipment_gid = (dr_datarow["group2equipment_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Group Equipment Holding
        public void DaDeleteGroupEquipmentHolding(string group2equipment_gid, MdlMstEquipmentHolding values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2equipment where group2equipment_gid='" + group2equipment_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.message = "Equipment Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Group Equipment Holding
        public void DaGetGroupEquipmentHoldingView(string group2equipment_gid, MdlMstEquipmentHolding values)
        {
            try
            {
                msSQL = " select group2equipment_gid,group_gid,equipment_gid,equipment_name,availablerenthire," +
                        " quantity,description,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadgroup2equipment a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where group2equipment_gid = '" + group2equipment_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.group2equipment_gid = objODBCDatareader["group2equipment_gid"].ToString();
                    values.group_gid = objODBCDatareader["group_gid"].ToString();
                    values.equipment_gid = objODBCDatareader["equipment_gid"].ToString();
                    values.equipment_name = objODBCDatareader["equipment_name"].ToString();
                    values.availablerenthire = objODBCDatareader["availablerenthire"].ToString();
                    values.quantity = objODBCDatareader["quantity"].ToString();
                    values.description = objODBCDatareader["description"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        // Add Group Livestock Holding
        public bool DaPostGroupLivestock(string employee_gid, MdlMstLivestock values)
        {
            msSQL = "select group2livestock_gid from ocs_trn_tcadgroup2livestock where livestock_gid='" + values.livestock_gid + "' and (group_gid='" + employee_gid + "' or group_gid='" + values.group_gid + "')";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows)
            {
                objODBCDatareader.Close();
                values.status = false;
                values.message = "Already This Livestock Added";
                return false;
            }
            objODBCDatareader.Close();
            if (values.count == null || values.count == "")
            {
                lscount = "";
            }
            else
            {
                lscount = values.count.Replace("'", "");
            }
            if (values.Breed == null || values.Breed == "")
            {
                lsBreed = "";
            }
            else
            {
                lsBreed = values.Breed.Replace("'", "");
            }
            if (values.insurance_status == null || values.insurance_status == "")
            {
                lsinsurance_status = "";
            }
            else
            {
                lsinsurance_status = values.insurance_status.Replace("'", "");
            }
            if (values.insurance_details == null || values.insurance_details == "")
            {
                lsinsurance_details = "";
            }
            else
            {
                lsinsurance_details = values.insurance_details.Replace("'", "");
            }
            msGetGid = objcmnfunctions.GetMasterGID("G2LH");
            msSQL = " insert into ocs_trn_tcadgroup2livestock(" +
                    " group2livestock_gid," +
                    " group_gid," +
                    " livestock_gid," +
                    " livestock_name," +
                    " count," +
                    " Breed," +
                    " insurance_status," +
                    " insurance_details," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + values.livestock_gid + "'," +
                    "'" + values.livestock_name + "'," +
                    "'" + lscount + "'," +
                    "'" + lsBreed.Replace("'", "") + "'," +
                    "'" + lsinsurance_status + "'," +
                    "'" + lsinsurance_details + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Livestock Holding Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        // Get Group Livestock Holding
        public void DaGetGroupLivestockList(string employee_gid, MdlMstLivestock values)
        {
            msSQL = " select group2livestock_gid,group_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadgroup2livestock where " +
                    " group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        group2livestock_gid = (dr_datarow["group2livestock_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Group Livestock Holding
        public void DaDeleteGroupLivestock(string group2livestock_gid, MdlMstLivestock values)
        {
            msSQL = "delete from ocs_trn_tcadgroup2livestock where group2livestock_gid='" + group2livestock_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Livestock Holding Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // View Group Livestock Holding
        public void DaGetGroupLivestockHoldingView(string group2livestock_gid, MdlMstLivestock values)
        {
            try
            {
                msSQL = " select group2livestock_gid,group_gid,livestock_gid,livestock_name,count," +
                        " Breed,insurance_status,insurance_details, " +
                        " concat(c.user_firstname, ' ', c.user_lastname, ' / ', c.user_code) as created_by, " +
                        " date_format(a.created_date, '%d-%m-%Y %h:%i %p') as created_date" +
                        " from ocs_trn_tcadgroup2livestock a " +
                        " left join hrm_mst_temployee b on b.employee_gid = a.created_by " +
                        " left join adm_mst_tuser c on c.user_gid = b.user_gid " +
                        " where group2livestock_gid = '" + group2livestock_gid + "'";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.group2livestock_gid = objODBCDatareader["group2livestock_gid"].ToString();
                    values.group_gid = objODBCDatareader["group_gid"].ToString();
                    values.livestock_gid = objODBCDatareader["livestock_gid"].ToString();
                    values.livestock_name = objODBCDatareader["livestock_name"].ToString();
                    values.count = objODBCDatareader["count"].ToString();
                    values.Breed = objODBCDatareader["Breed"].ToString();
                    values.insurance_status = objODBCDatareader["insurance_status"].ToString();
                    values.insurance_details = objODBCDatareader["insurance_details"].ToString();
                    values.created_by = objODBCDatareader["created_by"].ToString();
                    values.created_date = objODBCDatareader["created_date"].ToString();
                }
                objODBCDatareader.Close();
            }
            catch
            {
                values.status = false;
            }
        }

        //Get Group Edit Add Equipment Holding
        public void DaGetEditAddGroupEquipmentHoldingList(string employee_gid, string group_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select group2equipment_gid,group_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadgroup2equipment where " +
                    " group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        group2equipment_gid = (dr_datarow["group2equipment_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Group Livestock Holding
        public void DaGetEditAddGroupLivestockList(string employee_gid, string group_gid, MdlMstLivestock values)
        {
            msSQL = " select group2livestock_gid,group_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadgroup2livestock where " +
                    " group_gid='" + group_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        group2livestock_gid = (dr_datarow["group2livestock_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        // GetEdit Group Equipment Holding
        public void DaGetEditGroupEquipmentHoldingList(string employee_gid, string group_gid, MdlMstEquipmentHolding values)
        {
            msSQL = " select group2equipment_gid,group_gid,equipment_gid,equipment_name,availablerenthire, " +
                    " quantity,description,insurance_status,insurance_details from ocs_trn_tcadgroup2equipment where " +
                    " group_gid='" + group_gid + "' or group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstequipmentholding_list = new List<mstequipmentholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstequipmentholding_list.Add(new mstequipmentholding_list
                    {
                        group2equipment_gid = (dr_datarow["group2equipment_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        equipment_gid = (dr_datarow["equipment_gid"].ToString()),
                        equipment_name = (dr_datarow["equipment_name"].ToString()),
                        availablerenthire = (dr_datarow["availablerenthire"].ToString()),
                        quantity = (dr_datarow["quantity"].ToString()),
                        description = (dr_datarow["description"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstequipmentholding_list = getmstequipmentholding_list;
            }
            dt_datatable.Dispose();
        }

        // Get Edit Group Livestock Holding
        public void DaGetEditGroupLivestockList(string employee_gid, string group_gid, MdlMstLivestock values)
        {
            msSQL = " select group2livestock_gid,group_gid,livestock_gid,livestock_name,count,Breed, " +
                    " insurance_status,insurance_details from ocs_trn_tcadgroup2livestock where " +
                    " group_gid='" + group_gid + "' or group_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstlivestockholding_list = new List<mstlivestockholding_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstlivestockholding_list.Add(new mstlivestockholding_list
                    {
                        group2livestock_gid = (dr_datarow["group2livestock_gid"].ToString()),
                        group_gid = (dr_datarow["group_gid"].ToString()),
                        livestock_gid = (dr_datarow["livestock_gid"].ToString()),
                        livestock_name = (dr_datarow["livestock_name"].ToString()),
                        count = (dr_datarow["count"].ToString()),
                        Breed = (dr_datarow["Breed"].ToString()),
                        insurance_status = (dr_datarow["insurance_status"].ToString()),
                        insurance_details = (dr_datarow["insurance_details"].ToString()),
                    });
                }
                values.mstlivestockholding_list = getmstlivestockholding_list;
            }
            dt_datatable.Dispose();
        }

        public void DaGetAppLoanProductList(string application2loan_gid, string employee_gid, MdlMstProductDetailList values)
        {
            msSQL = " select application2product_gid,product_gid,product_name,variety_gid,variety_name,sector_name,category_name," +
                    " botanical_name,alternative_name,csacommodity_average,csapercentageoftotal_limit from ocs_trn_tcadapplication2product where application2loan_gid='" + application2loan_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstproduct_list = new List<mstproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstproduct_list.Add(new mstproduct_list
                    {
                        application2product_gid = (dr_datarow["application2product_gid"].ToString()),
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        product_name = (dr_datarow["product_name"].ToString()),
                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                        variety_name = (dr_datarow["variety_name"].ToString()),
                        sector_name = (dr_datarow["sector_name"].ToString()),
                        category_name = (dr_datarow["category_name"].ToString()),
                        botanical_name = (dr_datarow["botanical_name"].ToString()),
                        alternative_name = (dr_datarow["alternative_name"].ToString()),
                        csacommodity_average = (dr_datarow["csacommodity_average"].ToString()),
                        csapercentageoftotal_limit = (dr_datarow["csapercentageoftotal_limit"].ToString())
                    });
                }
                values.mstproduct_list = getmstproduct_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostProductDtlAdd(string employee_gid, MdlMstProductDetailAdd values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("AP2P");
            msSQL = " insert into ocs_trn_tcadapplication2product (" +
                    " application2product_gid," +
                    " application2loan_gid," +
                    " application_gid," +
                    " product_gid," +
                    " product_name," +
                    " variety_gid," +
                    " variety_name," +
                    " sector_name," +
                    " category_name," +
                    " botanical_name," +
                    " alternative_name," +
                    " csacommodity_average," +
                    " csapercentageoftotal_limit," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "null," +
                    "'" + values.product_gid + "'," +
                    "'" + values.product_name + "'," +
                    "'" + values.variety_gid + "'," +
                    "'" + values.variety_name + "'," +
                    "'" + values.sector_name + "'," +
                    "'" + values.category_name + "'," +
                    "'" + values.botanical_name + "'," +
                    "'" + values.alternative_name + "'," +
                    "'" + values.csacommodity_average + "'," +
                    "'" + values.csapercentageoftotal_limit + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {

                values.status = true;
                values.message = "Product Details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }
        public void DaGetProductDtlList(string application2loan_gid, string employee_gid, MdlMstProductDetailList values)
        {
            msSQL = " select application2product_gid,product_gid,product_name,variety_gid,variety_name,sector_name,category_name," +
                    " botanical_name,alternative_name,csacommodity_average,csapercentageoftotal_limit from ocs_trn_tcadapplication2product " +
                    " where application2loan_gid='" + employee_gid + "' or application2loan_gid='" + application2loan_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstproduct_list = new List<mstproduct_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstproduct_list.Add(new mstproduct_list
                    {
                        application2product_gid = (dr_datarow["application2product_gid"].ToString()),
                        product_gid = (dr_datarow["product_gid"].ToString()),
                        product_name = (dr_datarow["product_name"].ToString()),
                        variety_gid = (dr_datarow["variety_gid"].ToString()),
                        variety_name = (dr_datarow["variety_name"].ToString()),
                        sector_name = (dr_datarow["sector_name"].ToString()),
                        category_name = (dr_datarow["category_name"].ToString()),
                        botanical_name = (dr_datarow["botanical_name"].ToString()),
                        alternative_name = (dr_datarow["alternative_name"].ToString()),
                        csacommodity_average = (dr_datarow["csacommodity_average"].ToString()),
                        csapercentageoftotal_limit = (dr_datarow["csapercentageoftotal_limit"].ToString())
                    });
                }
                values.mstproduct_list = getmstproduct_list;
            }
            dt_datatable.Dispose();
        }

        // Add Institution Receivable
        public bool DaPostInstitutionReceivable(string employee_gid, MdlMstReceivable values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("I2RE");
            msSQL = " insert into ocs_trn_tcadinstitution2receivable(" +
                    " institution2receivable_gid," +
                    " institution_gid," +
                    " receivable_date," +
                    " onetothirty_days," +
                    " thirtyonetosixty_days," +
                    " sixtyonetoninety_days," +
                    " ninety_days," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + employee_gid + "'," +
                    "'" + Convert.ToDateTime(values.receivable_date).ToString("yyyy-MM-dd HH:mm:ss") + "'," +
                    "'" + values.onetothirty_days + "'," +
                    "'" + values.thirtyonetosixty_days + "'," +
                    "'" + values.sixtyonetoninety_days + "'," +
                    "'" + values.ninety_days + "'," +
                    "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Receivable Details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured";
                return false;
            }
        }

        //Get Institution Receivable List
        public void DaGetInstitutionReceivableList(string employee_gid, MdlMstReceivable values)
        {
            msSQL = " select institution2receivable_gid,institution_gid,date_format(receivable_date, '%d-%m-%Y') as receivable_date, " +
                    " onetothirty_days,thirtyonetosixty_days,sixtyonetoninety_days,ninety_days from ocs_trn_tcadinstitution2receivable " +
                    " where institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstreceivable_list = new List<mstreceivable_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstreceivable_list.Add(new mstreceivable_list
                    {
                        institution2receivable_gid = (dr_datarow["institution2receivable_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        receivable_date = (dr_datarow["receivable_date"].ToString()),
                        onetothirty_days = (dr_datarow["onetothirty_days"].ToString()),
                        thirtyonetosixty_days = (dr_datarow["thirtyonetosixty_days"].ToString()),
                        sixtyonetoninety_days = (dr_datarow["sixtyonetoninety_days"].ToString()),
                        ninety_days = (dr_datarow["ninety_days"].ToString())
                    });
                }
                values.mstreceivable_list = getmstreceivable_list;
            }
            dt_datatable.Dispose();
        }

        // Delete Institution Receivable
        public void DaDeleteInstitutionReceivable(string institution2receivable_gid, MdlMstReceivable values)
        {
            msSQL = "delete from ocs_trn_tcadinstitution2receivable where institution2receivable_gid='" + institution2receivable_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {

                values.message = "Receivable Details Deleted Successfully";
                values.status = true;
            }
            else
            {
                values.message = "Error Occured";
                values.status = false;

            }
        }

        // Get Institution Receivable List
        public void DaGetInstitutionReceivableList(string employee_gid, string institution_gid, MdlMstReceivable values)
        {
            msSQL = " select institution2receivable_gid,institution_gid,date_format(receivable_date, '%d-%m-%Y') as receivable_date, " +
                    " onetothirty_days,thirtyonetosixty_days,sixtyonetoninety_days,ninety_days from ocs_trn_tcadinstitution2receivable " +
                    " where institution_gid='" + institution_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstreceivable_list = new List<mstreceivable_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstreceivable_list.Add(new mstreceivable_list
                    {
                        institution2receivable_gid = (dr_datarow["institution2receivable_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        receivable_date = (dr_datarow["receivable_date"].ToString()),
                        onetothirty_days = (dr_datarow["onetothirty_days"].ToString()),
                        thirtyonetosixty_days = (dr_datarow["thirtyonetosixty_days"].ToString()),
                        sixtyonetoninety_days = (dr_datarow["sixtyonetoninety_days"].ToString()),
                        ninety_days = (dr_datarow["ninety_days"].ToString())
                    });
                }
                values.mstreceivable_list = getmstreceivable_list;
            }
            dt_datatable.Dispose();
        }

        // Get Edit Institution Receivable List
        public void DaGetEditInstitutionReceivableList(string employee_gid, string institution_gid, MdlMstReceivable values)
        {
            msSQL = " select institution2receivable_gid,institution_gid,date_format(receivable_date, '%d-%m-%Y') as receivable_date," +
                    " onetothirty_days,thirtyonetosixty_days,sixtyonetoninety_days,ninety_days from ocs_trn_tcadinstitution2receivable " +
                    " where institution_gid='" + institution_gid + "' or institution_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getmstreceivable_list = new List<mstreceivable_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    getmstreceivable_list.Add(new mstreceivable_list
                    {
                        institution2receivable_gid = (dr_datarow["institution2receivable_gid"].ToString()),
                        institution_gid = (dr_datarow["institution_gid"].ToString()),
                        receivable_date = (dr_datarow["receivable_date"].ToString()),
                        onetothirty_days = (dr_datarow["onetothirty_days"].ToString()),
                        thirtyonetosixty_days = (dr_datarow["thirtyonetosixty_days"].ToString()),
                        sixtyonetoninety_days = (dr_datarow["sixtyonetoninety_days"].ToString()),
                        ninety_days = (dr_datarow["ninety_days"].ToString())
                    });
                }
                values.mstreceivable_list = getmstreceivable_list;
            }
            dt_datatable.Dispose();
        }
        public void DaGetGuaranteeProgramType(MdlGuaranteeProgramType values)
        {
            msSQL = " select guarantee_gid,guarantee_name from ocs_mst_tguaranteeprograms where status = 'Y' order by created_date desc ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var guaranteedtltype_list = new List<guaranteedtltype_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dr_datarow in dt_datatable.Rows)
                {
                    guaranteedtltype_list.Add(new guaranteedtltype_list
                    {
                        guarantee_gid = (dr_datarow["guarantee_gid"].ToString()),
                        guarantee_name = (dr_datarow["guarantee_name"].ToString()),
                    });
                }
                values.guaranteedtltype_list = guaranteedtltype_list;
            }
            dt_datatable.Dispose();
        }

        public bool DaPostGuaranteeDtlAdd(string employee_gid, MdlGuaranteeDtl values)
        {
            msGetGid = objcmnfunctions.GetMasterGID("CCGD");
            msSQL = " insert into ocs_trn_tcadcreditguaranteedtl(" +
                    " cadcreditguaranteedtl_gid," +
                    " credit_gid," +
                    " application_gid," +
                    " guarantee_applicability," +
                    " guaranteeprogram_gid," +
                    " guarantee_program," +
                    " remarks," +
                    " created_by," +
                    " created_date)" +
                    " values(" +
                    "'" + msGetGid + "'," +
                    "'" + values.credit_gid + "'," +
                    "'" + values.application_gid + "'," +
                    "'" + values.guarantee_applicability + "'," +
                    "'" + values.guaranteprogram_gid + "'," +
                    "'" + values.guaranteeprogram_name + "',";
            if (values.remarks == null || values.remarks == "")
            {
                msSQL += "'',";
            }
            else
            {
                msSQL += "'" + values.remarks.Replace("'", "") + "',";

            }
            msSQL += "'" + employee_gid + "'," +
                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msSQL = "update ocs_trn_tcadcreditguaranteedtldocument set cadcreditguaranteedtl_gid='" + msGetGid + "' where cadcreditguaranteedtl_gid='" + employee_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                msSQL = " select cadcreditguaranteedtl_gid,guarantee_applicability,guarantee_program,remarks " +
                        " from ocs_trn_tcadcreditguaranteedtl where credit_gid='" + values.credit_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditguaranteedtl_list = new List<creditguaranteedtl_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditguaranteedtl_list.Add(new creditguaranteedtl_list
                        {
                            cadcreditguaranteedtl_gid = dt["cadcreditguaranteedtl_gid"].ToString(),
                            guarantee_applicability = dt["guarantee_applicability"].ToString(),
                            guarantee_program = dt["guarantee_program"].ToString(),
                            remarks = dt["remarks"].ToString(),

                        });
                        values.creditguaranteedtl_list = getcreditguaranteedtl_list;
                    }
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "Guarantee Details Added Successfully";
                return true;
            }
            else
            {
                values.status = true;
                values.message = "Error Occured While Adding Guarantee Details";
                return false;
            }

        }

        public bool DaGuaranteeDocumentUpload(HttpRequest httpRequest, GuaranteeDocumentUpload objfilename, string employee_gid)
        {

            upload_list objdocumentmodel = new upload_list();
            HttpFileCollection httpFileCollection;
            string lsfilepath = string.Empty;
            string lsdocument_gid = string.Empty;
            MemoryStream ms_stream = new MemoryStream();
            string document_gid = string.Empty;
            string lscompany_code = string.Empty;
            string lsdocument_title = httpRequest.Form["document_title"].ToString();
            string lscadcreditguaranteedtl_gid = httpRequest.Form["cadcreditguaranteedtl_gid"].ToString();
            // string lsdocument_id = httpRequest.Form["document_id"].ToString();
            String path = lspath;
            string project_flag = httpRequest.Form["project_flag"].ToString();

            msSQL = " SELECT a.company_code FROM adm_mst_tcompany a ";
            lscompany_code = objdbconn.GetExecuteScalar(msSQL);
            path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CadGuarantee/" + DateTime.Now.Year + "/" + DateTime.Now.Month;
            {
                if ((!System.IO.Directory.Exists(path)))
                    System.IO.Directory.CreateDirectory(path);
            }
            try
            {
                if (httpRequest.Files.Count > 0)
                {
                    string lsfirstdocument_filepath = string.Empty;
                    httpFileCollection = httpRequest.Files;
                    for (int i = 0; i < httpFileCollection.Count; i++)
                    {
                        string msdocument_gid = objcmnfunctions.GetMasterGID("UPLF");
                        httpPostedFile = httpFileCollection[i];
                        string FileExtension = httpPostedFile.FileName;
                        string lsfile_gid = msdocument_gid;
                        FileExtension = Path.GetExtension(FileExtension).ToLower();
                        lsfile_gid = lsfile_gid + FileExtension;
                        Stream ls_readStream;
                        ls_readStream = httpPostedFile.InputStream;
                        MemoryStream ms = new MemoryStream();
                        ls_readStream.CopyTo(ms);

                        // Check Document validation;

                        byte[] bytes = ms.ToArray();
                        if ((objcmnstorage.CheckIsValidfilename(FileExtension, project_flag) == false) || (objcmnstorage.CheckIsExecutable(bytes) == true))
                        {
                            objfilename.message = "File format is not supported";
                            return false;
                        }

                        bool status;
                        status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CadGuarantee/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + msdocument_gid + FileExtension, ms);
                        ms.Close();
                        lspath = "erpdocument" + "/" + lscompany_code + "/" + "Master/CadGuarantee/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";

                        msGetGid = objcmnfunctions.GetMasterGID("GDOC");
                        msSQL = " insert into ocs_trn_tcadcreditguaranteedtldocument( " +
                                    " cadcreditguaranteedtldocument_gid," +
                                    " cadcreditguaranteedtl_gid," +
                                    " document_title," +
                                    " document_name," +
                                    " document_path," +
                                    " created_by," +
                                    " created_date" +
                                    " )values(" +
                                    "'" + msGetGid + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + lsdocument_title.Replace("'", " ") + "'," +
                                    "'" + httpPostedFile.FileName.Replace("'", " ") + "'," +
                                    "'" + lspath + msdocument_gid + FileExtension + "'," +
                                    "'" + employee_gid + "'," +
                                    "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        if (mnResult == 1)
                        {
                            objfilename.status = true;
                            objfilename.message = "Document Uploaded Successfully..!";
                        }
                        else
                        {
                            objfilename.status = false;
                            objfilename.message = "Error Occured..!";
                        }

                        msSQL = " select cadcreditguaranteedtldocument_gid,cadcreditguaranteedtl_gid,document_title,document_name,document_path " +
                                " from ocs_trn_tcadcreditguaranteedtldocument where cadcreditguaranteedtl_gid='" + employee_gid + "' or  cadcreditguaranteedtl_gid='" + lscadcreditguaranteedtl_gid + "'";
                        dt_datatable = objdbconn.GetDataTable(msSQL);
                        var getcreditguaranteedocument_list = new List<creditguaranteedocument_list>();
                        if (dt_datatable.Rows.Count != 0)
                        {
                            foreach (DataRow dt in dt_datatable.Rows)
                            {
                                getcreditguaranteedocument_list.Add(new creditguaranteedocument_list
                                {
                                    cadcreditguaranteedtldocument_gid = dt["cadcreditguaranteedtldocument_gid"].ToString(),
                                    cadcreditguaranteedtl_gid = dt["cadcreditguaranteedtl_gid"].ToString(),
                                    document_title = dt["document_title"].ToString(),
                                    document_name = dt["document_name"].ToString(),
                                    document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                                });
                                objfilename.creditguaranteedocument_list = getcreditguaranteedocument_list;
                            }
                        }
                        dt_datatable.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                objfilename.message = ex.ToString();
            }
            return true;
        }

        public void DaGuaranteeDocTmpClear(string employee_gid, MdlGuaranteeDtl values)
        {
            msSQL = "delete from ocs_trn_tcadcreditguaranteedtldocument where cadcreditguaranteedtl_gid='" + employee_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            values.status = true;
        }

        public void DaGetInstitutionGuaranteeDtl(string credit_gid, string employee_gid, MdlGuaranteeDtl values)
        {
            msSQL = " select cadcreditguaranteedtl_gid,guarantee_applicability,guarantee_program,remarks " +
                    " from ocs_trn_tcadcreditguaranteedtl where credit_gid='" + credit_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getcreditguaranteedtl_list = new List<creditguaranteedtl_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getcreditguaranteedtl_list.Add(new creditguaranteedtl_list
                    {
                        cadcreditguaranteedtl_gid = dt["cadcreditguaranteedtl_gid"].ToString(),
                        guarantee_applicability = dt["guarantee_applicability"].ToString(),
                        guarantee_program = dt["guarantee_program"].ToString(),
                        remarks = dt["remarks"].ToString(),

                    });
                    values.creditguaranteedtl_list = getcreditguaranteedtl_list;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaDeleteGuaranteeDtl(string cadcreditguaranteedtl_gid, string credit_gid, MdlGuaranteeDtl values, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadcreditguaranteedtl where cadcreditguaranteedtl_gid='" + cadcreditguaranteedtl_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            msSQL = "delete from ocs_trn_tcadcreditguaranteedtldocument where cadcreditguaranteedtl_gid='" + cadcreditguaranteedtl_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Guarantee Details Deleted successfully";
                msSQL = " select cadcreditguaranteedtl_gid,guarantee_applicability,guarantee_program,remarks " +
                        " from ocs_trn_tcadcreditguaranteedtl where credit_gid='" + values.credit_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditguaranteedtl_list = new List<creditguaranteedtl_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditguaranteedtl_list.Add(new creditguaranteedtl_list
                        {
                            cadcreditguaranteedtl_gid = dt["cadcreditguaranteedtl_gid"].ToString(),
                            guarantee_applicability = dt["guarantee_applicability"].ToString(),
                            guarantee_program = dt["guarantee_program"].ToString(),
                            remarks = dt["remarks"].ToString(),

                        });
                        values.creditguaranteedtl_list = getcreditguaranteedtl_list;
                    }
                }
                dt_datatable.Dispose();
            }
            else
            {
                values.status = false;
                values.message = "Error Occurred while deleting";
            }
        }

        public void DaDeleteGuaranteeDtlDocument(string cadcreditguaranteedtldocument_gid, string credit_gid, GuaranteeDocumentUpload values, string employee_gid)
        {
            msSQL = "delete from ocs_trn_tcadcreditguaranteedtldocument where cadcreditguaranteedtldocument_gid='" + cadcreditguaranteedtldocument_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Document Deleted successfully";

                msSQL = " select cadcreditguaranteedtldocument_gid,cadcreditguaranteedtl_gid,document_title,document_name,document_path " +
                        " from ocs_trn_tcadcreditguaranteedtldocument where cadcreditguaranteedtl_gid='" + employee_gid + "' or cadcreditguaranteedtl_gid='" + credit_gid + "'";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getcreditguaranteedocument_list = new List<creditguaranteedocument_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {
                        getcreditguaranteedocument_list.Add(new creditguaranteedocument_list
                        {
                            cadcreditguaranteedtldocument_gid = dt["cadcreditguaranteedtldocument_gid"].ToString(),
                            cadcreditguaranteedtl_gid = dt["cadcreditguaranteedtl_gid"].ToString(),
                            document_title = dt["document_title"].ToString(),
                            document_name = dt["document_name"].ToString(),
                            document_path = objcmnstorage.EncryptData((dt["document_path"].ToString())),
                        });
                        values.creditguaranteedocument_list = getcreditguaranteedocument_list;
                    }
                }
                dt_datatable.Dispose();

            }
            else
            {
                values.status = false;
                values.message = "Error Occurred while deleting Document";
            }
        }

        public void DaGetGuaranteeRemarksView(string cadcreditguaranteedtl_gid, MdlGuaranteeDtl values)
        {
            try
            {
                msSQL = " select remarks from ocs_trn_tcadcreditguaranteedtl where cadcreditguaranteedtl_gid='" + cadcreditguaranteedtl_gid + "'";
                values.remarks = objdbconn.GetExecuteScalar(msSQL);
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        public void DaGetGuaranteeDocDtl(string cadcreditguaranteedtl_gid, GuaranteeDocumentUpload values)
        {
            try
            {
                msSQL = " select cadcreditguaranteedtldocument_gid,document_name,concat(date_format(a.created_date,'%d-%m-%Y %H:%i %p')) as uploaded_date,document_path, " +
                        " concat(c.user_firstname,' ',c.user_lastname,' / ',c.user_code) as uploaded_by,a.document_title " +
                        " from ocs_trn_tcadcreditguaranteedtldocument a,hrm_mst_temployee b, adm_mst_tuser c where a.created_by=b.employee_gid" +
                        " and b.user_gid = c.user_gid and cadcreditguaranteedtl_gid='" + cadcreditguaranteedtl_gid + "'";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var get_filename = new List<GuaranteeDocumentView_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        get_filename.Add(new GuaranteeDocumentView_List
                        {
                            document_path = objcmnstorage.EncryptData((dr_datarow["document_path"].ToString())),
                            document_name = (dr_datarow["document_name"].ToString()),
                            cadcreditguaranteedtldocument_gid = (dr_datarow["cadcreditguaranteedtldocument_gid"].ToString()),
                            uploaded_by = dr_datarow["uploaded_by"].ToString(),
                            updated_date = dr_datarow["uploaded_date"].ToString(),
                            document_title = dr_datarow["document_title"].ToString()
                        });
                    }
                    values.GuaranteeDocumentView_List = get_filename;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";

            }
            catch
            {
                values.status = false;
                values.message = "failure";
            }

        }

        //cad 
        public void DaGetOnboardAppValidatePANAadhar(MdlonboardValidatedtl values)
        {
            //msSQL = "select companypan_no, count(companypan_no) from ocs_mst_tinstitution GROUP BY companypan_no HAVING COUNT(companypan_no) > 1";

            msSQL = "select count(companypan_no) from ocs_trn_tcadinstitution   where companypan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
            string lsinstitutionapplication_gid = objdbconn.GetExecuteScalar(msSQL);
            int institutioncount = Convert.ToInt16(lsinstitutionapplication_gid);
            msSQL = "select count(pan_no) from ocs_trn_tcadcontact  where pan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
            string lscontactpplication_gid = objdbconn.GetExecuteScalar(msSQL);
            int contactcount = Convert.ToInt16(lscontactpplication_gid);

            int totalcount = institutioncount + contactcount;
            values.lstotalcount = Convert.ToInt16(totalcount);

            msSQL = " select companypan_no from ocs_trn_tcadinstitution   " +
                    " where  institution_gid ='" + values.institution_gid + "'; ";
            institution_panstatus = objdbconn.GetExecuteScalar(msSQL);
            msSQL = " select pan_no from ocs_trn_tcadcontact  " +
                    " where contact_gid ='" + values.contact_gid + "'; ";
            contact_panstatus = objdbconn.GetExecuteScalar(msSQL);
            if ((values.pan_no != institution_panstatus) && (String.IsNullOrEmpty(contact_panstatus)))
            {
                if ((values.lstotalcount == 0 || values.lstotalcount == 1))
                {
                    msSQL = "select count(companypan_no) from ocs_trn_tcadinstitution  where  stakeholder_type='Applicant' and companypan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
                    string lsinstitutionapplicant_status = objdbconn.GetExecuteScalar(msSQL);
                    applicant_status = Convert.ToInt16(lsinstitutionapplicant_status);
                    // values.applicant_panstatus = Convert.ToInt16(applicant_status);
                    if ((applicant_status == 0))
                    {
                        msSQL = "select count(pan_no) from ocs_trn_tcadcontact  where  stakeholder_type='Applicant' and  pan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
                        string lscontactapplicant_status = objdbconn.GetExecuteScalar(msSQL);
                        applicant_status = Convert.ToInt16(lscontactapplicant_status);
                        //values.applicant_panstatus = Convert.ToInt16(applicant_status);
                    }

                    if ((applicant_status == 0))
                    {
                        //string lsrejectapplication_gid = "";
                        //msSQL = " select b.approval_status from ocs_mst_tapplication b " +
                        //        " where b.created_date = (select max(b.created_date) from ocs_mst_tapplication b " +
                        //        " left join ocs_mst_tinstitution a on b.application_gid = a.application_gid " +
                        //        " where companypan_no = '" + values.pan_no + "')";
                        if (values.credit_name == "Institution")
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                             " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                             " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                             " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                            if (rejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                                      " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                      " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                                                      "and approval_status in('Rejected by Credit Manager', " +
                                                      " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                                lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                rejectcount = Convert.ToInt16(lsrejectedpan);
                            }


                            values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                                    " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                                    " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            if (notrejectcount == 0)
                            {

                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                                           " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                            //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                                            " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                                           " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                                lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            }
                            values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            int totalpancount = rejectcount + notrejectcount;
                            values.lstotalpancount = Convert.ToInt16(totalpancount);

                            //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                            //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                            //if (((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && values.stakeholder_type == "Applicant") || ((values.lsrejectcount == 1) && values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                            {

                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";

                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }


                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                        }
                        else
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                             " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                             " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant'" +
                             "and approval_status in('Rejected by Credit Manager', " +
                             " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                            if (rejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                                        " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                                        " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                                        " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                                lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                rejectcount = Convert.ToInt16(lsrejectedpan);
                            }
                            //rejectcount,lsnotrejectedpan

                            values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                    " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                     //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                     " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            if (notrejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                                   " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                                   " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                   " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                                lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            }
                            values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            int totalpancount = rejectcount + notrejectcount;
                            values.lstotalpancount = Convert.ToInt16(totalpancount);

                            //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                            //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                            if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {

                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";

                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }


                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                        }

                    }
                }
                else if (values.lstotalcount >= 2)
                {
                    if (values.credit_name == "Institution")
                    {
                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                           " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                           " where companypan_no ='" + values.pan_no + "'  and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                           " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                        lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        rejectcount = Convert.ToInt16(lsrejectedpan);
                        if (rejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                                  " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                  " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                                                  "and approval_status in('Rejected by Credit Manager', " +
                                                  " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                        }


                        values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                                " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                                " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                        lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        if (notrejectcount == 0)
                        {

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                                       " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                        //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                                        " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                                       " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        }
                        values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        int totalpancount = rejectcount + notrejectcount;
                        values.lstotalpancount = Convert.ToInt16(totalpancount);

                        //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                        //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                        if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                    }
                    else
                    {
                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                          " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                          " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                          "and approval_status in('Rejected by Credit Manager', " +
                          " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                        lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        rejectcount = Convert.ToInt16(lsrejectedpan);
                        if (rejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                                    " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                                    " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                        }
                        //rejectcount,lsnotrejectedpan

                        values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  a " +
                                " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                 //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                 " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                        lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        if (notrejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication  b " +
                               " left join ocs_trn_tcadinstitution  a on b.application_gid = a.application_gid " +
                               " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                               " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        }

                        values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        int totalpancount = rejectcount + notrejectcount;
                        values.lstotalpancount = Convert.ToInt16(totalpancount);

                        //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                        //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                        if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount == 0 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication  " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution  where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution  where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                    }


                }
            }
            else if ((String.IsNullOrEmpty(institution_panstatus) && (values.pan_no != contact_panstatus)))
            {
                if ((values.lstotalcount == 0 || values.lstotalcount == 1))
                {
                    msSQL = "select count(companypan_no) from ocs_trn_tcadinstitution  where  stakeholder_type='Applicant' and companypan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
                    string lsinstitutionapplicant_status = objdbconn.GetExecuteScalar(msSQL);
                    applicant_status = Convert.ToInt16(lsinstitutionapplicant_status);
                    // values.applicant_panstatus = Convert.ToInt16(applicant_status);
                    if ((applicant_status == 0))
                    {
                        msSQL = "select count(pan_no) from ocs_trn_tcadcontact  where  stakeholder_type='Applicant' and  pan_no ='" + values.pan_no + "' and application_gid = '" + values.application_gid + "'";
                        string lscontactapplicant_status = objdbconn.GetExecuteScalar(msSQL);
                        applicant_status = Convert.ToInt16(lscontactapplicant_status);
                        //values.applicant_panstatus = Convert.ToInt16(applicant_status);
                    }

                    if ((applicant_status == 0))
                    {
                        //string lsrejectapplication_gid = "";
                        //msSQL = " select b.approval_status from ocs_mst_tapplication b " +
                        //        " where b.created_date = (select max(b.created_date) from ocs_mst_tapplication b " +
                        //        " left join ocs_mst_tinstitution a on b.application_gid = a.application_gid " +
                        //        " where companypan_no = '" + values.pan_no + "')";
                        if (values.credit_name == "Institution")
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                             " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                             " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                             " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                            if (rejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                                      " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                      " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                                                      "and approval_status in('Rejected by Credit Manager', " +
                                                      " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                                lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                rejectcount = Convert.ToInt16(lsrejectedpan);
                            }


                            values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                                    " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                                    " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            if (notrejectcount == 0)
                            {

                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                                           " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                            //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                                            " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                                           " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                                lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            }
                            values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            int totalpancount = rejectcount + notrejectcount;
                            values.lstotalpancount = Convert.ToInt16(totalpancount);

                            //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                            //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                            //if (((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && values.stakeholder_type == "Applicant") || ((values.lsrejectcount == 1) && values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                            {

                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";

                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }


                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }

                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }

                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }


                        }
                        else
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                             " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                             " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant'" +
                             "and approval_status in('Rejected by Credit Manager', " +
                             " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                            if (rejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                                        " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                                        " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                                        " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                                lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                rejectcount = Convert.ToInt16(lsrejectedpan);
                            }
                            //rejectcount,lsnotrejectedpan

                            values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                    " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                     //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                     " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            if (notrejectcount == 0)
                            {
                                msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                                   " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                                   " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                   " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                                lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                                notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            }
                            values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                            int totalpancount = rejectcount + notrejectcount;
                            values.lstotalpancount = Convert.ToInt16(totalpancount);

                            //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                            //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                            if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {

                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";

                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";


                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }


                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                            //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                            if (values.lstotalcount >= 2)
                                            {
                                                if (lspan == "")
                                                {

                                                    msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                         " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                     " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    if (lspan == "")
                                                    {
                                                        msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                        " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                        " and application_gid ='" + values.application_gid + "'";
                                                        if (values.institution_gid != null)
                                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                        lspan = objdbconn.GetExecuteScalar(msSQL);
                                                    }


                                                }
                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;
                            }
                            else if ((values.lsnotrejectcount == 0 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                            else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                            {
                                string lsapplication_gid = "", lspan = "", lsaadhar = "";
                                msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                        " where application_gid = '" + values.application_gid + "'";
                                lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                                if (values.application_gid != null)
                                {

                                    if (values.panrenewal_flage != 'Y')
                                    {
                                        msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                     " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.institution_gid != null)
                                                msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                        }
                                        lspan = objdbconn.GetExecuteScalar(msSQL);


                                        if (lspan != "")
                                            values.panoraadhar = "PAN";
                                        if (lsapplication_gid != "")
                                        {
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadcontact where";
                                                if (values.stakeholder_type == "Applicant")
                                                {
                                                    msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                             " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                                }
                                                else
                                                {
                                                    msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                             " and application_gid ='" + values.application_gid + "'";
                                                    if (values.contact_gid != null)
                                                        msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                }
                                                lspan = objdbconn.GetExecuteScalar(msSQL);


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }

                                            if (lspan == "")
                                            {

                                                msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                     " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                 " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                                if (lspan == "")
                                                {
                                                    msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                    " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                    " and application_gid ='" + values.application_gid + "'";
                                                    if (values.institution_gid != null)
                                                        msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                    lspan = objdbconn.GetExecuteScalar(msSQL);
                                                }


                                            }
                                        }
                                    }
                                    if (values.aadhar_no != "" && values.aadhar_no != null)
                                    {
                                        msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                        if (values.stakeholder_type == "Applicant")
                                        {
                                            msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                                " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                        }
                                        else
                                        {
                                            msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                     " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                        }
                                        lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                    }
                                    msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                              " from hrm_mst_temployee a" +
                              " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                              " where a.employee_gid='" + lspan + "'";
                                    values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                    if (lspan != "" && lsaadhar == "")
                                        values.panoraadhar = "PAN";
                                    else if (lsaadhar != "" && lspan == "")
                                        values.panoraadhar = "Aadhar";
                                    else if (lspan != "" && lsaadhar != "")
                                        values.panoraadhar = "Both";

                                }
                                values.status = true;

                            }
                        }

                    }
                }
                else if (values.lstotalcount >= 2)
                {
                    if (values.credit_name == "Institution")
                    {
                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                           " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                           " where companypan_no ='" + values.pan_no + "'  and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                           " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                        lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        rejectcount = Convert.ToInt16(lsrejectedpan);
                        if (rejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                                  " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                  " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                                                  "and approval_status in('Rejected by Credit Manager', " +
                                                  " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                        }


                        values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                                " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                                " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                        lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        if (notrejectcount == 0)
                        {

                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                                       " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                                        //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                                        " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                                       " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        }
                        values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        int totalpancount = rejectcount + notrejectcount;
                        values.lstotalpancount = Convert.ToInt16(totalpancount);

                        //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                        //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                        if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                    }
                    else
                    {
                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                          " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                          " where (pan_no ='" + values.pan_no + "' ) and stakeholder_type='Applicant' " +
                          "and approval_status in('Rejected by Credit Manager', " +
                          " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                        lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        rejectcount = Convert.ToInt16(lsrejectedpan);
                        if (rejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                                    " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                                    " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status in('Rejected by Credit Manager', " +
                                    " 'Rejected By Credit','Rejected By Business','CC Rejected') ";
                            lsrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            rejectcount = Convert.ToInt16(lsrejectedpan);
                        }
                        //rejectcount,lsnotrejectedpan

                        values.lsrejectcount = Convert.ToInt16(lsrejectedpan);

                        msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication a " +
                                " left join ocs_trn_tcadcontact b on b.application_gid = a.application_gid " +
                                 //" left join ocs_mst_tinstitution c on c.application_gid = a.application_gid " +
                                 " where (pan_no ='" + values.pan_no + "') and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                                " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                        lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                        notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        if (notrejectcount == 0)
                        {
                            msSQL = " select count(b.application_gid) from ocs_trn_tcadapplication b " +
                               " left join ocs_trn_tcadinstitution a on b.application_gid = a.application_gid " +
                               " where companypan_no ='" + values.pan_no + "' and stakeholder_type='Applicant' and approval_status not  in('Rejected by Credit Manager', " +
                               " 'Rejected By Credit', 'Rejected By Business', 'CC Rejected'); ";
                            lsnotrejectedpan = objdbconn.GetExecuteScalar(msSQL);
                            notrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        }

                        values.lsnotrejectcount = Convert.ToInt16(lsnotrejectedpan);
                        int totalpancount = rejectcount + notrejectcount;
                        values.lstotalpancount = Convert.ToInt16(totalpancount);

                        //lscompanypan_no = objdbconn.GetExecuteScalar(msSQL);

                        //if ((values.lstotalpancount >= 2) && values.stakeholder_type == "Applicant")
                        if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && values.stakeholder_type == "Applicant")
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount != 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Applicant"))
                        //if (lscompanypan_no != "Rejected by Credit Manager" && lscompanypan_no != "Rejected By Credit" && lscompanypan_no != "Rejected By Business" && lscompanypan_no != "CC Rejected")
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;
                        }
                        else if ((values.lsnotrejectcount >= 1 && values.lsrejectcount == 0) && (values.stakeholder_type == "Member" || values.stakeholder_type == "Guarantor"))
                        {
                            string lsapplication_gid = "", lspan = "", lsaadhar = "";
                            msSQL = " select  GROUP_CONCAT('\\\'', application_gid, '\\\'') as applicationgid  from ocs_trn_tcadapplication " +
                                    " where application_gid = '" + values.application_gid + "'";
                            lsapplication_gid = objdbconn.GetExecuteScalar(msSQL);

                            if (values.application_gid != null)
                            {

                                if (values.panrenewal_flage != 'Y')
                                {
                                    msSQL = " select created_by from ocs_trn_tcadinstitution where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and companypan_no='" + values.pan_no + "'" +
                                                 " and institution_gid !='" + values.institution_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.institution_gid != null)
                                            msSQL += " and institution_gid !='" + values.institution_gid + "'";

                                    }
                                    lspan = objdbconn.GetExecuteScalar(msSQL);


                                    if (lspan != "")
                                        values.panoraadhar = "PAN";
                                    if (lsapplication_gid != "")
                                    {
                                        if (lspan == "")
                                        {
                                            msSQL = " select created_by from ocs_trn_tcadcontact where";
                                            if (values.stakeholder_type == "Applicant")
                                            {
                                                msSQL += " stakeholder_type='Applicant' and pan_no ='" + values.pan_no + "' " +
                                                         " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                            }
                                            else
                                            {
                                                msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                                         " and application_gid ='" + values.application_gid + "'";
                                                if (values.contact_gid != null)
                                                    msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            }
                                            lspan = objdbconn.GetExecuteScalar(msSQL);


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }

                                        if (lspan == "")
                                        {

                                            msSQL = " select created_by from ocs_trn_tcadcontact where" +
                                                 " stakeholder_type in ('Guarantor','Member','Applicant') and pan_no ='" + values.pan_no + "' " +
                                             " and application_gid ='" + values.application_gid + "'";
                                            if (values.contact_gid != null)
                                                msSQL += " and contact_gid != '" + values.contact_gid + "'";
                                            lspan = objdbconn.GetExecuteScalar(msSQL);
                                            if (lspan == "")
                                            {
                                                msSQL = " select created_by from ocs_trn_tcadinstitution where " +
                                                " stakeholder_type in ('Guarantor','Member','Applicant') and companypan_no='" + values.pan_no + "'" +
                                                " and application_gid ='" + values.application_gid + "'";
                                                if (values.institution_gid != null)
                                                    msSQL += " and institution_gid !='" + values.institution_gid + "'";
                                                lspan = objdbconn.GetExecuteScalar(msSQL);
                                            }


                                        }
                                    }
                                }
                                if (values.aadhar_no != "" && values.aadhar_no != null)
                                {
                                    msSQL = " select application_gid from ocs_trn_tcadcontact where ";
                                    if (values.stakeholder_type == "Applicant")
                                    {
                                        msSQL += " stakeholder_type='Applicant' and aadhar_no ='" + values.aadhar_no + "'" +
                                            " and contact_gid !='" + values.contact_gid + "' and application_gid not in (" + lsapplication_gid + ") ";
                                    }
                                    else
                                    {
                                        msSQL += " stakeholder_type in ('Guarantor','Member','Applicant') and aadhar_no ='" + values.aadhar_no + "'" +
                                                 " and application_gid ='" + values.application_gid + "'";
                                        if (values.contact_gid != null)
                                            msSQL += " and contact_gid !='" + values.contact_gid + "'";
                                    }
                                    lsaadhar = objdbconn.GetExecuteScalar(msSQL);
                                }
                                msSQL = " select concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as employee_name " +
                          " from hrm_mst_temployee a" +
                          " left join adm_mst_tuser b on a.user_gid=b.user_gid" +
                          " where a.employee_gid='" + lspan + "'";
                                values.lscreatedby_name = objdbconn.GetExecuteScalar(msSQL);
                                if (lspan != "" && lsaadhar == "")
                                    values.panoraadhar = "PAN";
                                else if (lsaadhar != "" && lspan == "")
                                    values.panoraadhar = "Aadhar";
                                else if (lspan != "" && lsaadhar != "")
                                    values.panoraadhar = "Both";

                            }
                            values.status = true;

                        }
                    }


                }
            }

        }

        //CAD PAN Renewal
        public void DaGetRenewalAppValidatePANAadhar(MdlonboardValidatedtl values)
        {
            if (values.Type == "Institution")
            {
                msSQL = " select institution_gid from ocs_trn_tcadinstitution a" +
                    " left join ocs_trn_tcadapplication b on b.application_gid = a.application_gid " +
                    " where institution_gid = '" + values.institution_gid + "' and a.stakeholder_type = 'Applicant' and(b.renewal_flag = 'Y' or b.enhancement_flag = 'Y')  ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);

            }
            else
            {
                msSQL = " select contact_gid from ocs_trn_tcadcontact a" +
                  " left join ocs_trn_tcadapplication b on b.application_gid = a.application_gid " +
                  " where contact_gid = '" + values.contact_gid + "' and a.stakeholder_type = 'Applicant' and(b.renewal_flag = 'Y' or b.enhancement_flag = 'Y') ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
            }


            if (objODBCDatareader.HasRows == true)
            {
                values.panrenewal_flag = "Y";
            }
            else
            {
                values.panrenewal_flag = "N";
            }
            objODBCDatareader.Close();

        }
        public void DaGetCustomerCreateLMSView(string application_gid, MdlcustomercreationLMS values)
        {
            msSQL = " select stakeholder_type,application_gid from ocs_trn_tcadinstitution where  application_gid='" + application_gid + "'" +
                " and stakeholder_type= 'Applicant' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                msSQL = " select  a.application_gid,a.application_no,a.customer_name as 'customername',b.postal_code as 'pincode', " +
                    " b.addressline1 as 'address1',b.addressline2 as 'address2',b.state as 'state' ,b.city as 'city' ," +
                    " concat(y.user_firstname, ' ', y.user_lastname, ' / ', y.user_code) as relationshipmanager_gid , " +
                    " b.country as 'country',a.vertical_name as 'sector',b.institution_gid,a.relationshipmanager_name as 'RMName' ,e.user_code as 'UserID',d.employee_emailid as 'RMmailID'," +
                    " f.mobile_no as 'mobilenumber',c.email_address as 'emailaddress'from ocs_trn_tcadapplication a left join ocs_trn_tcadinstitution c on c.application_gid=a.application_gid " +
                    " left join hrm_mst_temployee d on d.employee_gid=a.relationshipmanager_gid left join adm_mst_tuser e on e.user_gid=d.user_gid left join ocs_trn_tcadinstitution2mobileno f on f.institution_gid=c.institution_gid " +
                    " left join ocs_trn_tcadinstitution2email g on g.institution_gid=c.institution_gid left join ocs_trn_tcadinstitution2address b on b.institution_gid=c.institution_gid " +
                    " left join hrm_mst_temployee x on x.employee_gid=a.relationshipmanager_gid " +
                    " left join adm_mst_tuser y on y.user_gid=x.user_gid " +
                    " where f.primary_status='Yes' and a.application_gid='" + application_gid + "'" +
                   " group by b.institution_gid ,f.institution_gid,g.institution_gid ";
                objODBCDataReader = objdbconn.GetDataReader(msSQL);
                if (objODBCDataReader.HasRows == true)
                {
                    values.application_gid = objODBCDataReader["application_gid"].ToString();
                    values.customername = objODBCDataReader["customername"].ToString();
                    values.address1 = objODBCDataReader["address1"].ToString();
                    values.address2 = objODBCDataReader["address2"].ToString();
                    values.state = objODBCDataReader["state"].ToString();
                    values.city = objODBCDataReader["city"].ToString();
                    values.country = objODBCDataReader["country"].ToString();
                    values.sector = objODBCDataReader["sector"].ToString();
                    values.institution_gid = objODBCDataReader["institution_gid"].ToString();
                    values.RMName = objODBCDataReader["RMName"].ToString();
                    values.RMmailID = objODBCDataReader["RMmailID"].ToString();
                    values.userid = objODBCDataReader["UserID"].ToString();
                    values.mobilenumber = objODBCDataReader["mobilenumber"].ToString();
                    values.emailaddress = objODBCDataReader["emailaddress"].ToString();
                    values.pincode = objODBCDataReader["pincode"].ToString();
                    values.application_no = objODBCDataReader["application_no"].ToString();
                    values.rm_name = objODBCDataReader["relationshipmanager_gid"].ToString();
                }

                values.status = true;
                values.message = "success";
                objODBCDataReader.Close();
            }

            msSQL = " select stakeholder_type,application_gid from ocs_trn_tcadcontact where  application_gid='" + application_gid + "'" +
           " and stakeholder_type= 'Applicant' ";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);

            if (objODBCDatareader.HasRows == true)
            {
                msSQL = " select  a.application_gid,a.application_no,c.first_name as 'Firstname',c.middle_name as'middlename', c.last_name as 'lastname'," +
               " b.addressline1 as 'address1',b.addressline2 as 'address2',b.state as 'state' ,b.city as 'city' ,b.postal_code as 'pincode', " +
               " b.country as 'country',a.vertical_name as 'sector',b.contact_gid,a.relationshipmanager_name as 'RMName' ,e.user_code as 'UserID',d.employee_emailid as 'RMmailID',h.idproof_no,h.idproof_name, " +
               " concat(y.user_firstname, ' ', y.user_lastname, ' / ', y.user_code) as relationshipmanager_gid, " +
               "  concat(c.first_name, ' ',c.middle_name,' ',c.last_name) as customername, " +
               " f.mobile_no as 'mobilenumber',c.email_address as 'emailaddress'from ocs_trn_tcadapplication a left join ocs_trn_tcadcontact c on c.application_gid=a.application_gid " +
               " left join hrm_mst_temployee d on d.employee_gid=a.relationshipmanager_gid left join adm_mst_tuser e on e.user_gid=d.user_gid" +
               " left join ocs_trn_tcadcontact2mobileno f on f.contact_gid=c.contact_gid " +
               "left join ocs_trn_tcadcontact2idproof h on h.contact_gid=c.contact_gid" +
               " left join ocs_trn_tcadcontact2email g on g.contact_gid=c.contact_gid left join ocs_trn_tcadcontact2address b on b.contact_gid=c.contact_gid " +
               " left join hrm_mst_temployee x on x.employee_gid=a.relationshipmanager_gid " +
               " left join adm_mst_tuser y on y.user_gid=x.user_gid " +
               " where f.primary_status='Yes' and a.application_gid='" + application_gid + "'" +
              " group by b.contact_gid ,f.contact_gid,g.contact_gid ";
                objODBCDatareader = objdbconn.GetDataReader(msSQL);
                if (objODBCDatareader.HasRows == true)
                {
                    values.application_gid = objODBCDatareader["application_gid"].ToString();
                    values.Firstname = objODBCDatareader["Firstname"].ToString();
                    values.middlename = objODBCDatareader["middlename"].ToString();
                    values.lastname = objODBCDatareader["lastname"].ToString();
                    values.address1 = objODBCDatareader["address1"].ToString();
                    values.address2 = objODBCDatareader["address2"].ToString();
                    values.state = objODBCDatareader["state"].ToString();
                    values.city = objODBCDatareader["city"].ToString();
                    values.country = objODBCDatareader["country"].ToString();
                    values.sector = objODBCDatareader["sector"].ToString();
                    values.institution_gid = objODBCDatareader["contact_gid"].ToString();
                    values.RMName = objODBCDatareader["RMName"].ToString();
                    values.RMmailID = objODBCDatareader["RMmailID"].ToString();
                    values.userid = objODBCDatareader["UserID"].ToString();
                    values.mobilenumber = objODBCDatareader["mobilenumber"].ToString();
                    values.emailaddress = objODBCDatareader["emailaddress"].ToString();
                    values.idproof_no = objODBCDatareader["idproof_no"].ToString();
                    values.idproof_name = objODBCDatareader["idproof_name"].ToString();
                    values.pincode = objODBCDatareader["pincode"].ToString();
                    values.application_no = objODBCDatareader["application_no"].ToString();
                    values.rm_name = objODBCDatareader["relationshipmanager_gid"].ToString();
                    values.customername = objODBCDatareader["customername"].ToString();
                }

                values.status = true;
                values.message = "success";

            }
            objODBCDatareader.Close();
        }
        public void DaGetgstno(MdlcustomercreationLMS values, string application_gid)
        {
            try
            {

                msSQL = " select b.gst_no,a.institution_gid from ocs_trn_tcadinstitution  a " +
           " left join  ocs_trn_tcadinstitution2branch b on b.institution_gid = a.institution_gid " +
           " where a.application_gid='" + application_gid + "'" +
           " and a.stakeholder_type = 'Applicant' ";

                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getgst_list = new List<gstcuc_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getgst_list.Add(new gstcuc_list
                        {
                            Gst = (dr_datarow["gst_no"].ToString()),
                            institution_gid = (dr_datarow["institution_gid"].ToString()),
                        });
                    }
                    values.gst_list = getgst_list;
                }
                dt_datatable.Dispose();

                values.status = true;
            }
            catch
            {
                values.status = false;
            }

        }
        public void DaGetbankaccno(MdlcustomercreationLMS values, string application_gid)
        {
            try
            {

                msSQL = " select b.bankaccount_number,a.application_gid from ocs_trn_tcadinstitution a " +
           "  left join ocs_trn_tcadcreditbankdtl b on b.credit_gid = a.institution_gid " +
           " where (a.application_gid='" + application_gid + "'and a.stakeholder_type = 'Applicant')";


                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getbankaccnoins_list = new List<bankaccnoinstitution_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        getbankaccnoins_list.Add(new bankaccnoinstitution_list
                        {
                            bankaccount_number = (dr_datarow["bankaccount_number"].ToString()),
                            application_gid = (dr_datarow["application_gid"].ToString()),
                        });
                    }
                    values.bankaccnoinstitution_list = getbankaccnoins_list;
                }
                else
                {
                    msSQL = " select b.bankaccount_number,a.application_gid from ocs_trn_tcadcontact a " +
              "  left join ocs_trn_tcadcreditbankdtl b on b.credit_gid = a.contact_gid " +
              " where (a.application_gid='" + application_gid + "'and a.stakeholder_type = 'Applicant')";
             
                    dt_datatable = objdbconn.GetDataTable(msSQL);

                    var getbankaccnocont_list = new List<bankaccnocontact_list>();

                    if (dt_datatable.Rows.Count != 0)
                    {
                        foreach (DataRow dr_datarow in dt_datatable.Rows)
                        {
                            getbankaccnocont_list.Add(new bankaccnocontact_list
                            {
                                bankaccount_number = (dr_datarow["bankaccount_number"].ToString()),
                                application_gid = (dr_datarow["application_gid"].ToString()),
                            });
                        }
                        values.bankaccnocontact_list = getbankaccnocont_list;
                    }
                }


                dt_datatable.Dispose();

                values.status = true;
            }
            catch
            {
                values.status = false;
            }
            dt_datatable.Dispose();
        }
        public void DaGetCustomerCreatebankdetails(string bankaccount_number, MdlcustomercreationLMS values)
        {

            msSQL = " select bankaccount_number,ifsc_code,bank_name,branch_name,bankaccount_name from ocs_trn_tcadcreditbankdtl where bankaccount_number='" + bankaccount_number + "'";
            objODBCDataReader = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader.HasRows == true)
            {
                values.ifsc_code = objODBCDataReader["ifsc_code"].ToString();
                values.bank_name = objODBCDataReader["bank_name"].ToString();
                values.branch_name = objODBCDataReader["branch_name"].ToString();
                values.accountholder_name = objODBCDataReader["bankaccount_name"].ToString();
                values.bankaccount_number = objODBCDataReader["bankaccount_number"].ToString();

            }

            values.status = true;
            values.message = "success";
            objODBCDataReader.Close();



        }
        public bool DaPostCustomerCreationLMS(string user_gid, MdlcustomercreationLMS values)
        {


            msGetGid = objcmnfunctions.GetMasterGID("CUCI");
            msSQL = " select reject_flag from ocs_trn_tcustomercreationlms where application_gid='" + values.application_gid + "' and reject_flag='Y' ";
            objODBCDataReader = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader.HasRows == true)
            {
                msSQL = "update ocs_trn_tcustomercreationlms set lms_status='Reinitiated',reject_flag='N' where application_gid='" + values.application_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Request Reinitiated successfully";
                    objODBCDataReader.Close();
                    return true;

                }
                else
                {
                    values.status = false;
                    values.message = "Error occured while initiating request";
                    objODBCDataReader.Close();
                    return false;

                }




            }

            else {

                msSQL = " insert into ocs_trn_tcustomercreationlms(" +
                            " cuclms_gid," +
                            " application_gid," +
                            " bankaccount_number, " +
                            " gst_no," +
                            " lms_status," +
                            " initiated_by," +
                            " initiated_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                             "'" + values.application_gid + "'," +
                            "'" + values.bankaccount_number + "', " +
                            "'" + values.Gst + "'," +
                             "'Initiated'," +
                            "'" + user_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                if (mnResult != 0)
                {
                    values.status = true;
                    values.message = "Request initiated successfully";
                    return true;
                }
                else
                {
                    values.status = false;
                    values.message = "Error occured while initiating request";
                    return false;
                }
            }



        }
        public void DaGetCustomerInitiatedSummary(MdlcustomercreationLMS values, string user_gid)
        {
            msSQL = " select a.cuclms_gid,c.application_no,a.bankaccount_number,gst_no,a.application_gid,concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code)  as initiated_by,c.customer_name," +
                "date_format(a.initiated_date,'%d-%m-%Y %h:%i %p') as initiated_date,lms_status from ocs_trn_tcustomercreationlms a " +
        " left join adm_mst_tuser b on a.initiated_by = b.user_gid " +
        " left join ocs_trn_tcadapplication c on c.application_gid = a.application_gid " +
        " where lms_status = 'Initiated' or lms_status ='Reinitiated' group by a.application_gid  order by a.application_gid ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getinitiatedlist = new List<appinitiatedlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getinitiatedlist.Add(new appinitiatedlist
                    {
                        cuclms_gid = dt["cuclms_gid"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        initiated_by = dt["initiated_by"].ToString(),
                        initiated_date = dt["initiated_date"].ToString(),
                        Gst = dt["gst_no"].ToString(),
                        lms_status = dt["lms_status"].ToString(),
                        application_no = dt["application_no"].ToString(),
                        customer_name = dt["customer_name"].ToString(),
                        application_gid = dt["application_gid"].ToString(),
                    });
                    values.initiated_list = getinitiatedlist;
                }
            }
            dt_datatable.Dispose();


        }
        public void DaPostCustomerURN(string user_gid, MdlcustomercreationLMS values)
        {



            msSQL = "update ocs_trn_tcustomercreationlms set customer_urn='" + values.customer_urn + "',lms_status='Businessops',update_flag='Y' where application_gid='" + values.application_gid + "'";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

            if (mnResult != 0)
            {
                msSQL = "select count(institution_gid) from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type='Applicant'";
                lsinsti_idcount = Convert.ToInt32(objdbconn.GetExecuteScalar(msSQL));
                if (lsinsti_idcount != 0) {
                    msSQL = "select institution_gid from ocs_trn_tcadinstitution where application_gid='" + values.application_gid + "' and stakeholder_type='Applicant'";
                    lsinsti_id = objdbconn.GetExecuteScalar(msSQL);
                    if (lsinsti_id != "" || lsinsti_id != null)
                    {
                        msSQL = "update ocs_trn_tcadinstitution set urn='" + values.customer_urn + "',urn_status ='Yes' where institution_gid='" + lsinsti_id + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        msSQL = "update ocs_trn_tcadapplication set customer_urn='" + values.customer_urn + "' where application_gid='" + values.application_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                }
                msSQL = "select count(contact_gid) from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "'and stakeholder_type='Applicant'";
                lscont_idcount = Convert.ToInt32(objdbconn.GetExecuteScalar(msSQL));
                if (lscont_idcount != 0)
                {
                    msSQL = "select contact_gid from ocs_trn_tcadcontact where application_gid='" + values.application_gid + "'and stakeholder_type='Applicant'";
                    lscont_id = objdbconn.GetExecuteScalar(msSQL);
                    if (lscont_id != "" || lscont_id != null)
                    {
                        msSQL = "update ocs_trn_tcadcontact set urn='" + values.customer_urn + "',urn_status ='Yes' where contact_gid='" + lscont_id + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        msSQL = "update ocs_trn_tcadapplication set customer_urn='" + values.customer_urn + "' where application_gid='" + values.application_gid + "'";
                        mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    }
                }
                values.status = true;
                values.message = "URN generated successfully";
                return;
            }
            else
            {
                values.status = false;
                values.message = "Error occured while generating URN";
                return;
            }

        }
        public void DaGetgstbankaccnodetails(string application_gid, MdlcustomercreationLMS values)
        {

            msSQL = " select bankaccount_number,gst_no,reject_flag,update_flag,lms_status,encorefindcust_status from ocs_trn_tcustomercreationlms where application_gid='" + application_gid + "'";
            objODBCDataReader = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader.HasRows == true)
            {
                values.Gst = objODBCDataReader["gst_no"].ToString();
                values.bankaccount_number = objODBCDataReader["bankaccount_number"].ToString();
                values.reject_flag = objODBCDataReader["reject_flag"].ToString();
                values.update_flag = objODBCDataReader["update_flag"].ToString();
                values.lms_status = objODBCDataReader["lms_status"].ToString();
                values.encorefindcust_status = objODBCDataReader["encorefindcust_status"].ToString();


            }

            values.status = true;
            values.message = "success";
            objODBCDataReader.Close();


        }
        public void DaGetlogstatusdetails(string application_gid, MdlcustomercreationLMS values)
        {

            msSQL = " select lms_statuslog from ocs_trn_tcustomercreationlmslog where application_gid='" + application_gid + "'";
            objODBCDataReader = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader.HasRows == true)
            {
                values.lms_statuslog = objODBCDataReader["lms_statuslog"].ToString();


            }

            values.status = true;
            values.message = "success";
            objODBCDataReader.Close();


        }
        public void DaPostCustomerlmsreject(string user_gid, MdlcustomercreationLMS values)
        {



            msSQL = "select cuclms_gid, application_gid, bankaccount_number, gst_no from ocs_trn_tcustomercreationlms " +
                    " where application_gid ='" + values.application_gid + "'";
            objODBCDataReader = objdbconn.GetDataReader(msSQL);
            if (objODBCDataReader.HasRows == true)
            {
                values.Gst = objODBCDataReader["gst_no"].ToString();
                values.bankaccount_number = objODBCDataReader["bankaccount_number"].ToString();
                values.cuclms_gid = objODBCDataReader["cuclms_gid"].ToString();
                values.application_gid = objODBCDataReader["application_gid"].ToString();
                objODBCDataReader.Close();
                msSQL = "update ocs_trn_tcustomercreationlms set lms_status='Rejected',reject_flag='Y' where cuclms_gid='" + values.cuclms_gid + "'";
                mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                if (mnResult != 0)
                {
                    msGetGid = objcmnfunctions.GetMasterGID("CURL");
                    msSQL = " insert into ocs_trn_tcustomercreationlmslog(" +
                            " cuclmslog_gid," +
                            " cuclms_gid," +
                            " application_gid," +
                            " bankaccount_number, " +
                            " gst_no," +
                            " rejected_remarks," +
                            " lms_statuslog," +
                            " rejected_by," +
                            " rejected_date)" +
                            " values(" +
                            "'" + msGetGid + "'," +
                            "'" + values.cuclms_gid + "'," +
                             "'" + values.application_gid + "'," +
                            "'" + values.bankaccount_number + "', " +
                            "'" + values.Gst + "'," +
                             "'" + values.rejected_remarks.Replace("'", "") + "'," +
                              "'Rejected'," +
                            "'" + user_gid + "'," +
                            "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                    if (mnResult != 0)
                    {
                        values.status = true;
                        values.message = "Request rejected successfully";
                        return;
                    }
                    else
                    {
                        values.status = false;
                        values.message = "Error occured while rejecting request";
                        return;
                    }
                }
            }



        }
        public void DaGetCustomerUpdatedSummary(MdlcustomercreationLMS values, string user_gid)
        {
            msSQL = " select a.cuclms_gid,c.application_no,a.bankaccount_number,gst_no,a.application_gid, concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code)  as initiated_by,c.customer_name," +
                "date_format(a.initiated_date,'%d-%m-%Y %h:%i %p') as initiated_date,lms_status,a.customer_urn from ocs_trn_tcustomercreationlms a " +
        " left join adm_mst_tuser b on a.initiated_by = b.user_gid " +
        " left join ocs_trn_tcadapplication c on c.application_gid = a.application_gid " +
        " where lms_status = 'Businessops' group by a.application_gid  order by a.application_gid ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getupdatedlist = new List<appupdatedlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getupdatedlist.Add(new appupdatedlist
                    {
                        cuclms_gid = dt["cuclms_gid"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        initiated_by = dt["initiated_by"].ToString(),
                        initiated_date = dt["initiated_date"].ToString(),
                        Gst = dt["gst_no"].ToString(),
                        lms_status = dt["lms_status"].ToString(),
                        customer_name = dt["customer_name"].ToString(),
                        application_gid = dt["application_gid"].ToString(),
                        customer_urn = dt["customer_urn"].ToString(),
                        application_no = dt["application_no"].ToString()
                    });
                    values.updated_list = getupdatedlist;
                }
            }
            dt_datatable.Dispose();


        }
        public void DaGetCustomerUpdatingSummary(MdlcustomercreationLMS values, string application_gid)
        {
            msSQL = " select a.cuclms_gid,a.bankaccount_number,gst_no,a.application_gid, concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code)  as initiated_by,c.customer_name," +
                "date_format(a.initiated_date,'%d-%m-%Y %h:%i %p') as initiated_date,lms_status,a.customer_urn from ocs_trn_tcustomercreationlms a " +
        " left join adm_mst_tuser b on a.initiated_by = b.user_gid " +
        " left join ocs_trn_tcadapplication c on c.application_gid = a.application_gid " +
        " where lms_status = 'Businessops' and a.application_gid ='" + application_gid + "' order by a.application_gid ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getupdatedlist = new List<appupdatedlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getupdatedlist.Add(new appupdatedlist
                    {
                        cuclms_gid = dt["cuclms_gid"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        initiated_by = dt["initiated_by"].ToString(),
                        initiated_date = dt["initiated_date"].ToString(),
                        Gst = dt["gst_no"].ToString(),
                        lms_status = dt["lms_status"].ToString(),
                        customer_name = dt["customer_name"].ToString(),
                        application_gid = dt["application_gid"].ToString(),
                        customer_urn = dt["customer_urn"].ToString(),
                    });
                    values.updated_list = getupdatedlist;
                }
            }
            dt_datatable.Dispose();


        }

        public void DaGetCustomerRejectedSummary(MdlcustomercreationLMS values, string user_gid)
        {
            msSQL = "  select a.cuclms_gid,c.application_no,a.bankaccount_number,a.gst_no,a.application_gid, concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code)  as rejected_by, " +
   " c.customer_name,date_format(a.rejected_date, '%d-%m-%Y %h:%i %p') as rejected_date,a.lms_statuslog,a.rejected_remarks from ocs_trn_tcustomercreationlmslog a " +
   " left join ocs_trn_tcadapplication c on c.application_gid = a.application_gid " +
     " left join adm_mst_tuser b on b.user_gid = a.rejected_by " +
        " where a.lms_statuslog = 'Rejected' and a.rejected_date = (select max(rejected_date) from ocs_trn_tcustomercreationlmslog f where f.application_gid = a.application_gid) group by a.application_gid  order by a.application_gid ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrejectedlist = new List<apprejectedlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getrejectedlist.Add(new apprejectedlist
                    {
                        cuclms_gid = dt["cuclms_gid"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        initiated_by = dt["rejected_by"].ToString(),
                        initiated_date = dt["rejected_date"].ToString(),
                        Gst = dt["gst_no"].ToString(),
                        lms_status = dt["lms_statuslog"].ToString(),
                        customer_name = dt["customer_name"].ToString(),
                        application_gid = dt["application_gid"].ToString(),
                        rejected_remarks = dt["rejected_remarks"].ToString(),
                        application_no = dt["application_no"].ToString(),
                    });
                    values.rejected_list = getrejectedlist;
                }
            }
            dt_datatable.Dispose();


        }

        public void DaGetCustomerRejectingSummary(MdlcustomercreationLMS values, string application_gid)
        {
            msSQL = "   select a.cuclms_gid,a.bankaccount_number,a.gst_no,a.application_gid, concat(b.user_firstname,' ',b.user_lastname,' / ',b.user_code) as rejected_by, " +
   " c.customer_name,date_format(a.rejected_date, '%d-%m-%Y %h:%i %p') as rejected_date,a.lms_statuslog,a.rejected_remarks from ocs_trn_tcustomercreationlmslog a " +
   " left join ocs_trn_tcadapplication c on c.application_gid = a.application_gid " +
     " left join adm_mst_tuser b on b.user_gid = a.rejected_by " +
        " where lms_statuslog = 'Rejected' and a.application_gid ='" + application_gid + "' order by a.application_gid ";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getrejectedlist = new List<apprejectedlist>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getrejectedlist.Add(new apprejectedlist
                    {
                        cuclms_gid = dt["cuclms_gid"].ToString(),
                        bankaccount_number = dt["bankaccount_number"].ToString(),
                        initiated_by = dt["rejected_by"].ToString(),
                        initiated_date = dt["rejected_date"].ToString(),
                        Gst = dt["gst_no"].ToString(),
                        lms_status = dt["lms_statuslog"].ToString(),
                        customer_name = dt["customer_name"].ToString(),
                        application_gid = dt["application_gid"].ToString(),
                        rejected_remarks = dt["rejected_remarks"].ToString(),
                    });
                    values.rejected_list = getrejectedlist;
                }
            }
            dt_datatable.Dispose();


        }
        public void DaGetExportLmsReport1(MdlcustomercreationLMS values, string application_gid)
        {
            msSQL = "call ocs_trn_tcustomertolmsreport1('" + application_gid + "')";

            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);

            var workSheet = excel.Workbook.Worksheets.Add("LMS_Report");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "LoanOdAccountOpeningReport1.xlsx";
                //var path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Osd/BankAlertReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                //objExportBankReport.lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Osd/BankAlertReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + objExportBankReport.lsname;
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                if (!exists)
                {
                    System.IO.Directory.CreateDirectory(path);
                }
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 160])  //Address "A1:A19"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);

                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                values.lspath = objcmnstorage.EncryptData(ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname);
                values.lscloudpath = objcmnstorage.EncryptData(lscompany_code + "/" + "Master/CustomerCreationLMSreport1/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname);

                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.status = true;
            values.message = "Success";
        }
        public void DaGetExportLmsReport2(MdlcustomercreationLMS values, string application_gid)
        {
            msSQL = "call ocs_trn_spcustomertolmsreport2('" + application_gid + "')";
            dt_datatable = objdbconn.GetDataTable(msSQL);

            string lscompany_code = string.Empty;
            MemoryStream ms = new MemoryStream();
            ExcelPackage excel = new ExcelPackage(ms);

            var workSheet = excel.Workbook.Worksheets.Add("Loan_Report");
            try
            {
                msSQL = " select company_code from adm_mst_tcompany";

                lscompany_code = objdbconn.GetExecuteScalar(msSQL);
                values.lsname = "LoanOdAccountOpeningReport2.xlsx";
                //var path = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Osd/BankAlertReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                //objExportBankReport.lspath = ConfigurationManager.AppSettings["file_path"] + "/erp_documents" + "/" + lscompany_code + "/" + "Osd/BankAlertReport/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + objExportBankReport.lsname;
                var path = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/";
                values.lspath = ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                values.lscloudpath = lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname;
                bool exists = System.IO.Directory.Exists(path);
                if (!exists)
                {
                    System.IO.Directory.CreateDirectory(path);
                }
                workSheet.Cells[1, 1].LoadFromDataTable(dt_datatable, true);
                FileInfo file = new FileInfo(values.lspath);
                using (var range = workSheet.Cells[1, 1, 1, 196])  //Address "A1:A19"

                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                    range.Style.Font.Color.SetColor(Color.White);

                }
                excel.SaveAs(ms);
                bool status;
                status = objcmnstorage.UploadStream("erpdocument", lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname, ms);
                values.lspath = objcmnstorage.EncryptData(ConfigurationManager.AppSettings["file_path"] + "/erpdocument" + "/" + lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname);
                values.lscloudpath = objcmnstorage.EncryptData(lscompany_code + "/" + "Master/CustomerCreationLMSreport2/" + DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + values.lsname);

                ms.Close();
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "Failure";
            }
            values.status = true;
            values.message = "Success";
        }
        public void DaGetcount(MdlcustomercreationLMS values)
        {

            msSQL = " select count(distinct(application_gid)) as 'totalcount' from ocs_trn_tcustomercreationlms";
            values.total_count = objdbconn.GetExecuteScalar(msSQL);

        }

        public void DaGetLoanDetailsView(string application_gid, MdlMstApplicationView values)
        {
            msSQL = " select group_concat(ifnull(c.urn,''))   from ocs_trn_tcadapplication a " +
                    " left join ocs_trn_tcadinstitution c on c.application_gid = a.application_gid " +
                    " where a.application_gid = '" + application_gid + "'";
            institution_urn = objdbconn.GetExecuteScalar(msSQL);
            institution_urn = institution_urn.Replace(",,", ",");
            institution_urn = institution_urn.Replace(",,,", ",");
            institution_urn = institution_urn.TrimEnd(',');

            msSQL = " select group_concat(ifnull(c.urn,''))   from ocs_trn_tcadapplication a " +
                    " left join ocs_trn_tcadcontact c on c.application_gid = a.application_gid " +
                    " where a.application_gid = '" + application_gid + "'";
            individual_urn = objdbconn.GetExecuteScalar(msSQL);
            individual_urn = individual_urn.Replace(",,", ",");
            individual_urn = individual_urn.Replace(",,,", ",");
            individual_urn = individual_urn.TrimEnd(',');

            msSQL = " select group_concat(ifnull(c.group_urn,''))   from ocs_trn_tcadapplication a " +
                    " left join ocs_trn_tcadgroup c on c.application_gid = a.application_gid " +
                    " where a.application_gid = '" + application_gid + "'";
            group_urn = objdbconn.GetExecuteScalar(msSQL);
            group_urn = group_urn.Replace(",,", ",");
            group_urn = group_urn.Replace(",,,", ",");
            group_urn = group_urn.TrimEnd(',');

            try
            {
                msSQL = " select a.customer_name, b.stakeholder_type, 'Institution' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        " WHEN a.ac_status = '3' THEN ' Frozen' " +
                        "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays,a.late_charge,a.rpa,  " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadinstitution b on a.urn = b.urn " +
                        " where a.urn in ('" + institution_urn.Replace(",", "','") + "') and a.urn != ''" +
                        " union " +
                        " select a.customer_name, b.stakeholder_type, 'Individual' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        "  WHEN a.ac_status = '3' THEN ' Frozen' " +
                         "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays, a.late_charge,a.rpa, " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadcontact b on a.urn = b.urn " +
                        " where a.urn in ('" + individual_urn.Replace(",", "','") + "') and a.urn != ''" +
                        " union " +
                        " select a.customer_name, '-' as stakeholder_type, 'Group' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        "  WHEN a.ac_status = '3' THEN ' Frozen' " +
                         "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays,a.late_charge,a.rpa,  " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadgroup b on a.urn = b.group_urn " +
                        " where a.urn in ('" + group_urn.Replace(",", "','") + "') and a.urn != ''";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var loandetails_List = new List<alldatamodified_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        if (!String.IsNullOrEmpty(dr_datarow["lastdemandrundate"].ToString()))
                        {
                            loandetails_List.Add(new alldatamodified_List
                            {
                                urn = (dr_datarow["urn"].ToString()),
                                lan = (dr_datarow["account_no"].ToString()),
                                account_status = (dr_datarow["ac_status"].ToString()),
                                ledger_balance = (dr_datarow["ledger"].ToString().Replace("-0.00", "0")),
                                maximum_od_day = (dr_datarow["max_dpd"].ToString()),
                                rbi_od_days = (dr_datarow["rbiold_oddays"].ToString()),
                                vertical = (dr_datarow["Vertical"].ToString()),
                                next_due_date = Convert.ToDateTime(dr_datarow["lastdemandrundate"].ToString()).ToString("dd/MM/yyyy"),
                                customer_name = (dr_datarow["customer_name"].ToString()),
                                stackholder_type = (dr_datarow["stakeholder_type"].ToString()),
                                company_type = (dr_datarow["applicant_type"].ToString()),
                                Net_Payoff_Amt = (dr_datarow["Net_Payoff_Amt"].ToString().Replace("0.00", "0")),
                                late_charge = (dr_datarow["late_charge"].ToString()),
                                rpa = (dr_datarow["rpa"].ToString())
                            });
                        }
                        else
                        {
                            loandetails_List.Add(new alldatamodified_List
                            {
                                urn = (dr_datarow["urn"].ToString()),
                                lan = (dr_datarow["account_no"].ToString()),
                                account_status = (dr_datarow["ac_status"].ToString()),
                                ledger_balance = (dr_datarow["ledger"].ToString().Replace("-0.00", "0")),
                                maximum_od_day = (dr_datarow["max_dpd"].ToString()),
                                rbi_od_days = (dr_datarow["rbiold_oddays"].ToString()),
                                vertical = (dr_datarow["Vertical"].ToString()),
                                next_due_date = (dr_datarow["lastdemandrundate"].ToString()),
                                customer_name = (dr_datarow["customer_name"].ToString()),
                                stackholder_type = (dr_datarow["stakeholder_type"].ToString()),
                                company_type = (dr_datarow["applicant_type"].ToString()),
                                Net_Payoff_Amt = (dr_datarow["Net_Payoff_Amt"].ToString().Replace("0.00", "0"))
                            });
                        }
                    }
                    values.alldatamodified_List = loandetails_List;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }


        public void DaGetLoanDetailsUrnView(string customer_urn, MdlMstApplicationView values)
        {
            msSQL = " select group_concat(ifnull(c.urn,''))   from ocs_trn_tcadapplication a " +
                    " left join ocs_trn_tcadinstitution c on c.application_gid = a.application_gid " +
                    " where a.customer_urn = '" + customer_urn + "' and c.stakeholder_type ='Applicant' ";
            institution_urn = objdbconn.GetExecuteScalar(msSQL);
            institution_urn = institution_urn.Replace(",,", ",");
            institution_urn = institution_urn.Replace(",,,", ",");
            institution_urn = institution_urn.TrimEnd(',');
            if (String.IsNullOrEmpty(institution_urn))
            {
                msSQL = " select group_concat(ifnull(c.urn,''))   from ocs_trn_tcadapplication a " +
                        " left join ocs_trn_tcadcontact c on c.application_gid = a.application_gid " +
                        " where a.customer_urn = '" + customer_urn + "' and c.stakeholder_type ='Applicant'";
                individual_urn = objdbconn.GetExecuteScalar(msSQL);
                individual_urn = individual_urn.Replace(",,", ",");
                individual_urn = individual_urn.Replace(",,,", ",");
                individual_urn = individual_urn.TrimEnd(',');
            } 
            else if ((String.IsNullOrEmpty(institution_urn)) && (String.IsNullOrEmpty(individual_urn)))
            {


                msSQL = " select group_concat(ifnull(c.group_urn,''))   from ocs_trn_tcadapplication a " +
                        " left join ocs_trn_tcadgroup c on c.application_gid = a.application_gid " +
                        " where a.customer_urn = '" + customer_urn + "'";
                group_urn = objdbconn.GetExecuteScalar(msSQL);
                group_urn = group_urn.Replace(",,", ",");
                group_urn = group_urn.Replace(",,,", ",");
                group_urn = group_urn.TrimEnd(',');
            } 


            try
            {
                msSQL = " select a.customer_name, b.stakeholder_type, 'Institution' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        " WHEN a.ac_status = '3' THEN ' Frozen' " +
                        "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays,a.late_charge,  " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadinstitution b on a.urn = b.urn " +
                        " where a.urn in ('" + institution_urn.Replace(",", "','") + "') and a.urn != ''" +
                        " union " +
                        " select a.customer_name, b.stakeholder_type, 'Individual' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        "  WHEN a.ac_status = '3' THEN ' Frozen' " +
                         "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays, a.late_charge, " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadcontact b on a.urn = b.urn " +
                        " where a.urn in ('" + individual_urn.Replace(",", "','") + "') and a.urn != ''" +
                        " union " +
                        " select a.customer_name, '-' as stakeholder_type, 'Group' as applicant_type, a.urn,a.account_no,(format((a.Net_Payoff_Amt ),2,'en_IN')) as Net_Payoff_Amt, " +
                        " CASE " +
                        " WHEN a.ac_status = '0' THEN ' Active' " +
                        " WHEN a.ac_status = '2' THEN ' Closed' " +
                        "  WHEN a.ac_status = '3' THEN ' Frozen' " +
                         "END as ac_status,(format((a.ledger * -1),2,'en_IN')) as ledger,a.rbiold_oddays,a.late_charge,  " +
                        " a.max_dpd,a.Vertical,a.lastdemandrundate from lgl_tmp_tmisdata a " +
                        " left join ocs_trn_tcadgroup b on a.urn = b.group_urn " +
                        " where a.urn in ('" + group_urn.Replace(",", "','") + "') and a.urn != ''";
                dt_datatable = objdbconn.GetDataTable(msSQL);
                var loandetails_List = new List<alldatamodified_List>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dr_datarow in dt_datatable.Rows)
                    {
                        if (!String.IsNullOrEmpty(dr_datarow["lastdemandrundate"].ToString()))
                        {
                            loandetails_List.Add(new alldatamodified_List
                            {
                                urn = (dr_datarow["urn"].ToString()),
                                lan = (dr_datarow["account_no"].ToString()),
                                account_status = (dr_datarow["ac_status"].ToString()),
                                ledger_balance = (dr_datarow["ledger"].ToString().Replace("-0.00", "0")),
                                maximum_od_day = (dr_datarow["max_dpd"].ToString()),
                                rbi_od_days = (dr_datarow["rbiold_oddays"].ToString()),
                                vertical = (dr_datarow["Vertical"].ToString()),
                                next_due_date = Convert.ToDateTime(dr_datarow["lastdemandrundate"].ToString()).ToString("dd/MM/yyyy"),
                                customer_name = (dr_datarow["customer_name"].ToString()),
                                stackholder_type = (dr_datarow["stakeholder_type"].ToString()),
                                company_type = (dr_datarow["applicant_type"].ToString()),
                                Net_Payoff_Amt = (dr_datarow["Net_Payoff_Amt"].ToString().Replace("0.00", "0")),
                                late_charge = (dr_datarow["late_charge"].ToString())
                            });
                        }
                        else
                        {
                            loandetails_List.Add(new alldatamodified_List
                            {
                                urn = (dr_datarow["urn"].ToString()),
                                lan = (dr_datarow["account_no"].ToString()),
                                account_status = (dr_datarow["ac_status"].ToString()),
                                ledger_balance = (dr_datarow["ledger"].ToString().Replace("-0.00", "0")),
                                maximum_od_day = (dr_datarow["max_dpd"].ToString()),
                                rbi_od_days = (dr_datarow["rbiold_oddays"].ToString()),
                                vertical = (dr_datarow["Vertical"].ToString()),
                                next_due_date = (dr_datarow["lastdemandrundate"].ToString()),
                                customer_name = (dr_datarow["customer_name"].ToString()),
                                stackholder_type = (dr_datarow["stakeholder_type"].ToString()),
                                company_type = (dr_datarow["applicant_type"].ToString()),
                                Net_Payoff_Amt = (dr_datarow["Net_Payoff_Amt"].ToString().Replace("0.00", "0"))
                            });
                        }
                    }
                    values.alldatamodified_List = loandetails_List;
                }
                dt_datatable.Dispose();
                values.status = true;
                values.message = "success";
            }
            catch (Exception ex)
            {
                values.status = false;
                values.message = "failure";
            }
        }


        public void FnProgramBasedDcoument4Cadflow(string application_gid, string employee_gid, string user_gid)
        {

            string taggedby = "CAD";

            msSQL = "select concat(user_firstname,' ', user_lastname, ' / ', user_code) as username from adm_mst_tuser where user_gid='" + user_gid + "'";
            string tagged_name = objdbconn.GetExecuteScalar(msSQL);

            msSQL = " select institution_gid from ocs_trn_tcadinstitution where application_gid = '" + application_gid + "' ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            if (dt_datatable.Rows.Count != 0)
            {

                foreach (DataRow dt in dt_datatable.Rows)
                {

                    string program_gid = ""; string lscompanydocument_gid = "";

                    msSQL = " select program_gid from ocs_trn_tcadapplication where application_gid = '" + application_gid + "' ";

                    program_gid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = " select GROUP_CONCAT('\\\'',companydocument_gid,'\\\'')  from ocs_trn_tcaddocumentchecktls where  credit_gid = '" + dt["institution_gid"] + "' and application_gid = '" + application_gid + "' ";
                    lscompanydocument_gid = objdbconn.GetExecuteScalar(msSQL);

                    if (!string.IsNullOrEmpty(lscompanydocument_gid))
                    {

                        msSQL = " select a.companydocument_gid,a.documenttypes_gid,a.documenttype_name,a.companydocument_name,a.covenant_type " +
                     " from ocs_mst_tcompanydocument a " +
                     " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                     " where a.status='Y' and b.program_gid = '" + program_gid + "' and a.companydocument_gid not in (" + lscompanydocument_gid + ") ";

                    }

                    else
                    {
                        msSQL = " select a.companydocument_gid,a.documenttypes_gid,a.documenttype_name,a.companydocument_name,a.covenant_type " +
                     " from ocs_mst_tcompanydocument a " +
                     " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                     " where a.status='Y' and b.program_gid = '" + program_gid + "'  ";
                    }

                    dt_datatable1 = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable1.Rows.Count != 0)
                    {
                        foreach (DataRow dt1 in dt_datatable1.Rows)
                        {
                            msGetGid = objcmnfunctions.GetMasterGID("DOCG");
                            msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                  " documentcheckdtl_gid," +
                  " application_gid," +
                  " credit_gid, " +
                    " companydocument_gid, " +
                            " documenttype_gid," +
                                " documenttype_code," +
                                " documenttype_name," +
                                " covenant_type, " +
                                " tagged_by, " +
                                " tagged_name, " +
                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetGid + "'," +
                                "'" + application_gid + "'," +
                                "'" + dt["institution_gid"] + "'," +
                                "'" + dt1["companydocument_gid"] + "'," +
                             "'" + dt1["documenttypes_gid"] + "'," +
                                "'" + dt1["documenttype_name"] + "'," +
                                "'" + dt1["companydocument_name"] + "'," +
                                "'" + dt1["covenant_type"] + "'," +
                                "'" + taggedby + "'," +
                                "'" + tagged_name + "'," +
                                "current_timestamp," +
                                "'" + user_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                            string msGetgroupDocGID = objcmnfunctions.GetMasterGID("GDCG");
                            msSQL = " insert into ocs_trn_tcadgroupdocumentchecklist(" +
                                      " groupdocumentchecklist_gid," +
                                      " application_gid," +
                                      " credit_gid, " +
                                      " mstdocument_gid, " +
                                      " mstdocument_name, " +
                                      " mstcovenant_type," +
                                  " mstdocumenttype_gid," +
                                  " mstdocumenttype_name," +
                                  " tagged_by, " +
                                  " created_date," +
                                  " created_by)" +
                                  " VALUES(" +
                                  "'" + msGetgroupDocGID + "'," +
                                  "'" + application_gid + "'," +
                                  "'" + dt["institution_gid"] + "'," +
                                  "'" + dt1["companydocument_gid"] + "'," +
                                  "'" + dt1["companydocument_name"].ToString() + "'," +
                                  "'" + dt1["covenant_type"].ToString() + "'," +
                                  "'" + dt1["documenttypes_gid"].ToString() + "'," +
                                  "'" + dt1["documenttype_name"].ToString() + "'," +
                                  "'" + taggedby + "'," +
                                  "current_timestamp," +
                                  "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                            msSQL = " update ocs_trn_tcaddocumentchecktls set groupdocumentchecklist_gid ='" + msGetgroupDocGID + "'" +
                                   " where documentcheckdtl_gid ='" + msGetGid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        }



                    }

                    string lscovenantcompanydocument_gid = "";

                    msSQL = " select GROUP_CONCAT('\\\'',companydocument_gid,'\\\'')  from ocs_trn_tcadcovanantdocumentcheckdtls where  covenant_type = 'Y' and credit_gid = '" + dt["institution_gid"] + "' and application_gid = '" + application_gid + "' ";
                    lscovenantcompanydocument_gid = objdbconn.GetExecuteScalar(msSQL);

                    if (!string.IsNullOrEmpty(lscovenantcompanydocument_gid))
                    {

                        msSQL = " select a.companydocument_gid,a.documenttypes_gid,a.documenttype_name,a.companydocument_name,a.covenant_type " +
                     " from ocs_mst_tcompanydocument a " +
                     " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                     " where a.status='Y' and b.program_gid = '" + program_gid + "' and a.covenant_type = 'Y' and a.companydocument_gid not in (" + lscovenantcompanydocument_gid + ") ";

                    }

                    else
                    {

                        msSQL = " select a.companydocument_gid,a.documenttypes_gid,a.documenttype_name,a.companydocument_name,a.covenant_type " +
                    " from ocs_mst_tcompanydocument a " +
                    " left join ocs_mst_tcompanydocumentprogram b on a.companydocument_gid = b.companydocument_gid " +
                    " where a.status='Y' and b.program_gid = '" + program_gid + "' and a.covenant_type = 'Y'  ";


                    }

                    dt_datatable2 = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable2.Rows.Count != 0)
                    {

                        foreach (DataRow dt2 in dt_datatable2.Rows)
                        {

                            msGetGID = objcmnfunctions.GetMasterGID("CDCL");
                            msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                            " covenantdocumentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                           " companydocument_gid, " +
                            " documenttype_gid," +
                                " documenttype_code," +
                                " documenttype_name," +
                                " covenant_type, " +
                                " tagged_by, " +
                                " tagged_name, " +

                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetGID + "'," +
                                "'" + application_gid + "'," +
                                 "'" + dt["institution_gid"] + "'," +
                                "'" + dt2["companydocument_gid"] + "'," +
                             "'" + dt2["documenttypes_gid"] + "'," +
                                "'" + dt2["documenttype_name"] + "'," +
                                "'" + dt2["companydocument_name"] + "'," +
                                "'" + dt2["covenant_type"] + "'," +
                                "'" + taggedby + "'," +
                                "'" + tagged_name + "'," +
                                "current_timestamp," +
                                "'" + user_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                            string msGetgroupCovDocGID = objcmnfunctions.GetMasterGID("GCDG");
                            msSQL = " insert into ocs_trn_tcadgroupcovenantdocumentchecklist(" +
                                      " groupcovdocumentchecklist_gid," +
                                      " application_gid," +
                                      " credit_gid, " +
                                      " mstdocument_gid, " +
                                      " mstdocument_name, " +
                                      " mstcovenant_type," +
                                  " mstdocumenttype_gid," +
                                  " mstdocumenttype_name," +
                                  " tagged_by, " +
                                  " created_date," +
                                  " created_by)" +
                                  " VALUES(" +
                                  "'" + msGetgroupCovDocGID + "'," +
                                  "'" + application_gid + "'," +
                                  "'" + dt["institution_gid"] + "'," +
                                  "'" + dt2["companydocument_gid"] + "'," +
                                  "'" + dt2["companydocument_name"].ToString() + "'," +
                                  "'" + dt2["covenant_type"].ToString() + "'," +
                                  "'" + dt2["documenttypes_gid"].ToString() + "'," +
                                  "'" + dt2["documenttype_name"].ToString() + "'," +
                                   "'" + taggedby + "'," +
                                  "current_timestamp," +
                                  "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            msSQL = " update ocs_trn_tcadcovanantdocumentcheckdtls set groupcovdocumentchecklist_gid ='" + msGetgroupCovDocGID + "'" +
                                   " where covenantdocumentcheckdtl_gid ='" + msGetGID + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                }


            }


            msSQL = " select contact_gid from ocs_trn_tcadcontact where application_gid = '" + application_gid + "' ";

            dt_datatable3 = objdbconn.GetDataTable(msSQL);

            if (dt_datatable3.Rows.Count != 0)
            {

                foreach (DataRow dt3 in dt_datatable3.Rows)
                {

                    string program_gid = ""; string lsindividualdocument_gid = "";

                    msSQL = " select program_gid from ocs_trn_tcadapplication where application_gid = '" + application_gid + "' ";

                    program_gid = objdbconn.GetExecuteScalar(msSQL);

                    msSQL = " select GROUP_CONCAT('\\\'',individualdocument_gid,'\\\'')  from ocs_trn_tcaddocumentchecktls where  credit_gid = '" + dt3["contact_gid"] + "' and  application_gid = '" + application_gid + "'";
                    lsindividualdocument_gid = objdbconn.GetExecuteScalar(msSQL);

                    if (!string.IsNullOrEmpty(lsindividualdocument_gid))
                    {

                        msSQL = " select a.individualdocument_gid, a.documenttypes_gid, a.documenttype_name, a.individualdocument_name, a.covenant_type " +
                     " from ocs_mst_tindividualdocument a " +
                     " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                     " where  a.status='Y' and b.program_gid = '" + program_gid + "' and a.individualdocument_gid not in (" + lsindividualdocument_gid + ") ";

                    }

                    else
                    {
                        msSQL = " select a.individualdocument_gid, a.documenttypes_gid, a.documenttype_name, a.individualdocument_name, a.covenant_type " +
                     " from ocs_mst_tindividualdocument a " +
                     " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                     " where  a.status='Y' and b.program_gid = '" + program_gid + "'  ";
                    }

                    dt_datatable4 = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable4.Rows.Count != 0)
                    {
                        foreach (DataRow dt4 in dt_datatable4.Rows)
                        {
                            msGetGid = objcmnfunctions.GetMasterGID("DOCG");
                            msSQL = " insert into ocs_trn_tcaddocumentchecktls(" +
                  " documentcheckdtl_gid," +
                  " application_gid," +
                  " credit_gid, " +
                    " individualdocument_gid, " +
                            " documenttype_gid," +
                                " documenttype_code," +
                                " documenttype_name," +
                                " covenant_type, " +
                                " tagged_by, " +
                                " tagged_name, " +
                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetGid + "'," +
                                "'" + application_gid + "'," +
                                "'" + dt3["contact_gid"] + "'," +
                                "'" + dt4["individualdocument_gid"] + "'," +
                             "'" + dt4["documenttypes_gid"] + "'," +
                                "'" + dt4["documenttype_name"] + "'," +
                                "'" + dt4["individualdocument_name"] + "'," +
                                "'" + dt4["covenant_type"] + "'," +
                                "'" + taggedby + "'," +
                                "'" + tagged_name + "'," +
                                "current_timestamp," +
                                "'" + user_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                            string msGetgroupDocGID = objcmnfunctions.GetMasterGID("GDCG");
                            msSQL = " insert into ocs_trn_tcadgroupdocumentchecklist(" +
                                      " groupdocumentchecklist_gid," +
                                      " application_gid," +
                                      " credit_gid, " +
                                      " mstdocument_gid, " +
                                      " mstdocument_name, " +
                                      " mstcovenant_type," +
                                  " mstdocumenttype_gid," +
                                  " mstdocumenttype_name," +
                                  " tagged_by, " +
                                  " created_date," +
                                  " created_by)" +
                                  " VALUES(" +
                                  "'" + msGetgroupDocGID + "'," +
                                  "'" + application_gid + "'," +
                                  "'" + dt3["contact_gid"] + "'," +
                                  "'" + dt4["individualdocument_gid"] + "'," +
                                  "'" + dt4["individualdocument_name"].ToString() + "'," +
                                  "'" + dt4["covenant_type"].ToString() + "'," +
                                  "'" + dt4["documenttypes_gid"].ToString() + "'," +
                                  "'" + dt4["documenttype_name"].ToString() + "'," +
                                  "'" + taggedby + "'," +
                                  "current_timestamp," +
                                  "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);


                            msSQL = " update ocs_trn_tcaddocumentchecktls set groupdocumentchecklist_gid ='" + msGetgroupDocGID + "'" +
                                   " where documentcheckdtl_gid ='" + msGetGid + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                        }



                    }

                    string lscovenantindividualdocument_gid = "";

                    msSQL = " select GROUP_CONCAT('\\\'',individualdocument_gid,'\\\'')  from ocs_trn_tcadcovanantdocumentcheckdtls where  covenant_type = 'Y' and credit_gid = '" + dt3["contact_gid"] + "' and  application_gid = '" + application_gid + "' ";
                    lscovenantindividualdocument_gid = objdbconn.GetExecuteScalar(msSQL);

                    if (!string.IsNullOrEmpty(lscovenantindividualdocument_gid))
                    {

                        msSQL = " select a.individualdocument_gid, a.documenttypes_gid, a.documenttype_name, a.individualdocument_name, a.covenant_type " +
                   " from ocs_mst_tindividualdocument a " +
                   " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                   " where a.status='Y' and b.program_gid = '" + program_gid + "'  and a.covenant_type = 'Y' and a.individualdocument_gid not in (" + lsindividualdocument_gid + ") ";

                    }

                    else
                    {

                        msSQL = " select a.individualdocument_gid, a.documenttypes_gid, a.documenttype_name, a.individualdocument_name, a.covenant_type " +
                   " from ocs_mst_tindividualdocument a " +
                   " left join ocs_mst_tindividualdocumentprogram b on a.individualdocument_gid = b.individualdocument_gid " +
                   " where a.status='Y' and b.program_gid = '" + program_gid + "'  and a.covenant_type = 'Y'  ";

                    }


                    dt_datatable5 = objdbconn.GetDataTable(msSQL);
                    if (dt_datatable5.Rows.Count != 0)
                    {

                        foreach (DataRow dt5 in dt_datatable5.Rows)
                        {

                            msGetGID = objcmnfunctions.GetMasterGID("CDCL");
                            msSQL = " insert into ocs_trn_tcadcovanantdocumentcheckdtls(" +
                            " covenantdocumentcheckdtl_gid," +
                            " application_gid," +
                            " credit_gid, " +
                           " individualdocument_gid, " +
                            " documenttype_gid," +
                                " documenttype_code," +
                                " documenttype_name," +
                                " covenant_type, " +
                                " tagged_by, " +
                                " tagged_name, " +

                                " created_date," +
                                " created_by)" +
                                " VALUES(" +
                                "'" + msGetGID + "'," +
                                "'" + application_gid + "'," +
                                 "'" + dt3["contact_gid"] + "'," +
                                "'" + dt5["individualdocument_gid"] + "'," +
                             "'" + dt5["documenttypes_gid"] + "'," +
                                "'" + dt5["documenttype_name"] + "'," +
                                "'" + dt5["individualdocument_name"] + "'," +
                                "'" + dt5["covenant_type"] + "'," +
                                "'" + taggedby + "'," +
                                "'" + tagged_name + "'," +
                                "current_timestamp," +
                                "'" + user_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);



                            string msGetgroupCovDocGID = objcmnfunctions.GetMasterGID("GCDG");
                            msSQL = " insert into ocs_trn_tcadgroupcovenantdocumentchecklist(" +
                                      " groupcovdocumentchecklist_gid," +
                                      " application_gid," +
                                      " credit_gid, " +
                                      " mstdocument_gid, " +
                                      " mstdocument_name, " +
                                      " mstcovenant_type," +
                                  " mstdocumenttype_gid," +
                                  " mstdocumenttype_name," +
                                  " tagged_by, " +
                                  " created_date," +
                                  " created_by)" +
                                  " VALUES(" +
                                  "'" + msGetgroupCovDocGID + "'," +
                                  "'" + application_gid + "'," +
                                  "'" + dt3["contact_gid"] + "'," +
                                  "'" + dt5["individualdocument_gid"] + "'," +
                                  "'" + dt5["individualdocument_name"].ToString() + "'," +
                                  "'" + dt5["covenant_type"].ToString() + "'," +
                                  "'" + dt5["documenttypes_gid"].ToString() + "'," +
                                  "'" + dt5["documenttype_name"].ToString() + "'," +
                                   "'" + taggedby + "'," +
                                  "current_timestamp," +
                                  "'" + employee_gid + "')";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);

                            msSQL = " update ocs_trn_tcadcovanantdocumentcheckdtls set groupcovdocumentchecklist_gid ='" + msGetgroupCovDocGID + "'" +
                                   " where covenantdocumentcheckdtl_gid ='" + msGetGID + "'";
                            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
                        }

                    }
                }


            }

        }


        public void DaGetIndividualDocListAdd(string employee_gid, MdlContactDocument values)
        {
            msSQL = " select contact2document_gid,document_name,document_path,document_title,migration_flag, " +
                    " documenttype_name from ocs_trn_tcadcontact2document " +
                    " where contact_gid='" + employee_gid + "'";
            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getdocumentdtlList = new List<uploadindividualdoc_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                // Create list
                var file_name = new List<string>();
                var file_path = string.Empty;

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    file_name.Add(dt["document_name"].ToString());
                    file_path = objcmnstorage.EncryptData(dt["document_path"].ToString());
                }
                values.filename = file_name.ToArray();
                values.filepath = file_path.ToString();

                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getdocumentdtlList.Add(new uploadindividualdoc_list
                    {
                        migration_flag = dt["migration_flag"].ToString(),
                        document_name = dt["document_name"].ToString(),
                        document_path = objcmnstorage.EncryptData(dt["document_path"].ToString()),
                        contact2document_gid = dt["contact2document_gid"].ToString(),
                        document_title = dt["document_title"].ToString(),
                        documenttype_name = dt["documenttype_name"].ToString()
                    });
                    values.uploadindividualdoc_list = getdocumentdtlList;
                }
            }
            dt_datatable.Dispose();
        }



    }



}